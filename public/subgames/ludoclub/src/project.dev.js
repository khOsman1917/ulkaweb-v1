require = function() {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }
        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function(r) {
          var n = e[i][1][r];
          return o(n || r);
        }, p, p.exports, r, e, n, t);
      }
      return n[i].exports;
    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
    return o;
  }
  return r;
}()({
  AbstractAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03deaZ34vRFGabIqaqy31EZ", "AbstractAction");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var AbstractAction = function() {
      function AbstractAction() {
        this.mViewComponent = null;
        this.mPromise = null;
        this.mPromiseResolver = null;
        this.mPromiseRejecter = null;
        this.mActionId = "";
        this.mGameController = null;
        this.mActionController = null;
        this.mPlayerController = null;
        this.mSoundController = null;
        this.mPresistantNodeComponent = null;
        this.mStartTime = 0;
        this.onCompleteCall = null;
        var self = this;
        this.mActionId = Helper_1.Helper.getUniqueId();
        this.mPromise = new Promise(function(resolve, reject) {
          self.mPromiseResolver = resolve;
          self.mPromiseRejecter = reject;
        });
      }
      AbstractAction.prototype.onSuccess = function() {
        this.mPromiseResolver();
        this.onComplete();
      };
      AbstractAction.prototype.onFail = function() {
        this.mPromiseRejecter();
        this.onComplete();
      };
      AbstractAction.prototype.onComplete = function() {
        this.onCompleteCall(this);
      };
      AbstractAction.prototype.getPromise = function() {
        return this.mPromise;
      };
      AbstractAction.prototype.initialize = function(component, onComplete, persistantNodeComponent) {
        this.mViewComponent = component;
        this.onCompleteCall = onComplete;
        this.mPresistantNodeComponent = persistantNodeComponent;
        this.mGameController = persistantNodeComponent.GetGameController();
        this.mActionController = persistantNodeComponent.GetActionController();
        this.mPlayerController = persistantNodeComponent.GetPlayerController();
        this.mSoundController = persistantNodeComponent.GetSoundController();
      };
      AbstractAction.prototype.ID = function() {
        return this.mActionId;
      };
      AbstractAction.prototype.forceStop = function() {
        this.onSuccess();
      };
      AbstractAction.prototype.isChatAction = function() {
        return false;
      };
      AbstractAction.prototype.setStartTime = function() {
        this.mStartTime = Date.now();
      };
      AbstractAction.prototype.getActionTime = function() {
        return Date.now() - this.mStartTime;
      };
      return AbstractAction;
    }();
    exports.AbstractAction = AbstractAction;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper"
  } ],
  ActionAddSafeLocations: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3bb2czgseFAxqlW6v4iywd0", "ActionAddSafeLocations");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var SafeCellComponent_1 = require("../Components/SafeCellComponent");
    var ActionAddSafeLocations = function(_super) {
      __extends(ActionAddSafeLocations, _super);
      function ActionAddSafeLocations(safeLocations) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionAddSafeLocations", true);
        _this.mSafeLocations = safeLocations;
        return _this;
      }
      ActionAddSafeLocations.Create = function(safeLocations) {
        return new ActionAddSafeLocations(safeLocations);
      };
      ActionAddSafeLocations.prototype.queueable = function() {
        return true;
      };
      ActionAddSafeLocations.prototype.getName = function() {
        return "ActionAddSafeLocations";
      };
      ActionAddSafeLocations.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        var board = gameComponent.getBoardComponent();
        for (var i in this.mSafeLocations) {
          var cell = this.mSafeLocations[i];
          if (cell > -1) {
            var position = board.getWorldPositionCell(cell, null, null);
            position = gameComponent.safeLocationsLayer.convertToNodeSpaceAR(position);
            var safeCell = cc.instantiate(board.safeCellPrefab);
            var safeCellComponent = safeCell.getComponent(SafeCellComponent_1.default);
            if (safeCellComponent) {
              var isColoured = board.isCellColoured(cell);
              safeCellComponent.intialize(isColoured);
            }
            safeCell.setPosition(position);
            gameComponent.safeLocationsLayer.addChild(safeCell);
          }
        }
        this.onSuccess();
      };
      return ActionAddSafeLocations;
    }(AbstractAction_1.AbstractAction);
    exports.ActionAddSafeLocations = ActionAddSafeLocations;
    cc._RF.pop();
  }, {
    "../Components/SafeCellComponent": "SafeCellComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f2efJOjENC3ahH4cbUXnJ/", "ActionController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Queue_1 = require("../Generic/Queue");
    var Logger_1 = require("../Generic/Logger");
    var HashMap_1 = require("../Generic/HashMap");
    var ActionHideChatForIndex_1 = require("../Actions/ActionHideChatForIndex");
    var Helper_1 = require("../Generic/Helper");
    var ActionController = function() {
      function ActionController() {
        this.mGameController = null;
        this.mPlayerController = null;
        this.mPersistantNodeComp = null;
        this.mMaxTimeForAction = 2e3;
        this.mViewComponent = null;
        this.mActionQueue = new Queue_1.Queue();
        this.mActionChatQueue = {};
        this.mActiveNonQueuedActions = new HashMap_1.HashMap();
        this.mActiveQueuedAction = null;
        this.mActiveQueuedChatAction = {};
        this.mLogger = new Logger_1.Logger("ActionController", true);
      }
      ActionController.prototype.SetViewComponent = function(component) {
        this.mViewComponent = component;
      };
      ActionController.prototype.initialize = function(persistNodeComponent) {
        this.mPersistantNodeComp = persistNodeComponent;
        this.mPlayerController = persistNodeComponent.GetPlayerController();
        this.mGameController = persistNodeComponent.GetGameController();
      };
      ActionController.prototype.runAction = function(action) {
        this.initializeAction(action);
        if (action.isChatAction()) {
          var chatAction = action;
          var index = chatAction.getIndex();
          this.mGameController.validateIndex(index) && this.enqueueChatAction(action, index);
          this.processChatQueue(index);
        } else if (action.queueable()) {
          this.mLogger.Log("Queuing " + action.getName());
          this.enqueue(action);
          this.processQueue();
        } else {
          this.mActiveNonQueuedActions.put(action.ID(), action);
          Helper_1.Helper.sendSentryLog("ActionController NonQueued Action start, Action name - " + action.getName());
          action.start();
        }
      };
      ActionController.prototype.enqueue = function(action) {
        this.mActionQueue.push(action);
      };
      ActionController.prototype.dequeue = function() {
        return this.mActionQueue.pop();
      };
      ActionController.prototype.enqueueChatAction = function(action, index) {
        this.mActionChatQueue[index] || (this.mActionChatQueue[index] = new Queue_1.Queue());
        this.mActionChatQueue[index].push(action);
      };
      ActionController.prototype.dequeueChatAction = function(index) {
        if (this.mActionChatQueue[index]) return this.mActionChatQueue[index].pop();
        return null;
      };
      ActionController.prototype.clearQueue = function() {
        this.mActionQueue.clear();
        for (var chatKey in this.mActionChatQueue) this.mActionChatQueue[chatKey].clear();
        if (null != this.mActiveQueuedAction) {
          this.initializeAction(this.mActiveQueuedAction);
          this.mActiveQueuedAction.forceStop();
        }
        this.mActiveQueuedAction = null;
        var nonQueuedKeys = this.mActiveNonQueuedActions.keys();
        for (var i = 0; i < nonQueuedKeys.length; i++) {
          var nonQueuedAction = this.mActiveNonQueuedActions.get(nonQueuedKeys[i]);
          if (nonQueuedAction) {
            this.initializeAction(nonQueuedAction);
            nonQueuedAction.forceStop();
          }
          this.mActiveNonQueuedActions.remove(nonQueuedKeys[i]);
        }
        for (var j in this.mActiveQueuedChatAction) if (null != this.mActiveQueuedChatAction[j]) {
          this.initializeAction(this.mActiveQueuedChatAction[j]);
          this.mActiveQueuedChatAction[j].forceStop();
        }
        this.mActionChatQueue = {};
      };
      ActionController.prototype.processQueue = function() {
        this.mLogger.Log("Number of items in queue " + this.mActionQueue.length());
        if (this.mActiveQueuedAction) {
          this.mLogger.Log("Item is " + this.mActiveQueuedAction.getName());
          var timeTakenByAction = this.mActiveQueuedAction.getActionTime();
          timeTakenByAction > this.mMaxTimeForAction && !document.hidden && this.mPersistantNodeComp.GetStatsController().count("debug", 1, "action_queue_stuck", this.mActiveQueuedAction.getName(), timeTakenByAction + "");
        }
        if (null == this.mActiveQueuedAction) {
          var action = this.dequeue();
          if (null != action) {
            this.initializeAction(action);
            this.mActiveQueuedAction = action;
            action.setStartTime();
            Helper_1.Helper.sendSentryLog("ActionController queued Action start, Action name - " + action.getName());
            action.start();
          }
        }
      };
      ActionController.prototype.processChatQueue = function(index) {
        this.mLogger.Log("Number of items in ChatQueue of index: " + index + " : " + (this.mActionChatQueue[index] ? this.mActionChatQueue[index].length() : 0));
        if (this.mActiveQueuedChatAction[index]) {
          this.mLogger.Log("Item is " + this.mActiveQueuedChatAction[index].getName());
          var timeTakenByAction = this.mActiveQueuedChatAction[index].getActionTime();
          timeTakenByAction > this.mMaxTimeForAction && !document.hidden && this.mPersistantNodeComp.GetStatsController().count("debug", 1, "action_queue_stuck", this.mActiveQueuedChatAction[index].getName(), timeTakenByAction + "", index + "");
        }
        if (null == this.mActiveQueuedChatAction[index]) {
          var action = this.dequeueChatAction(index);
          if (null != action) {
            this.initializeAction(action);
            this.mActiveQueuedChatAction[index] = action;
            action.setStartTime();
            Helper_1.Helper.sendSentryLog("ActionController queued chatAction start, Action name - " + action.getName() + " index: " + index);
            action.start();
          } else this.runAction(ActionHideChatForIndex_1.ActionHideChatForIndex.Create(index));
        }
      };
      ActionController.prototype.onCompleteAction = function(action) {
        if (action.isChatAction()) {
          var chatAction = action;
          var index = chatAction.getIndex();
          if (this.mActiveQueuedChatAction[index] && this.mActiveQueuedChatAction[index].ID() == action.ID()) {
            delete this.mActiveQueuedChatAction[index];
            null == this.mActiveQueuedChatAction[index];
          }
          this.processChatQueue(index);
        } else if (action.queueable()) {
          if (this.mActiveQueuedAction && this.mActiveQueuedAction.ID() == action.ID()) {
            delete this.mActiveQueuedAction;
            null == this.mActiveQueuedAction;
          }
          this.processQueue();
        } else action.queueable() || null == this.mActiveNonQueuedActions.get(action.ID()) ? this.mLogger.Log("Something wrong with action " + action.getName() + " id " + action.ID()) : this.mActiveNonQueuedActions.remove(action.ID());
      };
      ActionController.prototype.initializeAction = function(action) {
        action && action.initialize(this.mViewComponent, this.onCompleteAction.bind(this), this.mPersistantNodeComp);
      };
      return ActionController;
    }();
    exports.ActionController = ActionController;
    cc._RF.pop();
  }, {
    "../Actions/ActionHideChatForIndex": "ActionHideChatForIndex",
    "../Generic/HashMap": "HashMap",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../Generic/Queue": "Queue"
  } ],
  ActionDiceRoll: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fb77rN4xFAD7ywcbMs0HOI", "ActionDiceRoll");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var ActionFtueRollNonSix_1 = require("../Actions/ActionFtueRollNonSix");
    var ActionFtueChoosePawnToMove_1 = require("../Actions/ActionFtueChoosePawnToMove");
    var ActionFtueCanKill_1 = require("../Actions/ActionFtueCanKill");
    var ActionDiceRoll = function(_super) {
      __extends(ActionDiceRoll, _super);
      function ActionDiceRoll(index, diceRoll, hasAutoMoves, isWasteTurn) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionDiceRoll", true);
        _this.mTimeout = null;
        _this.mIndex = index;
        _this.mDiceRoll = diceRoll;
        _this.mHasAutoMoves = hasAutoMoves;
        _this.mIsWasteTurn = isWasteTurn;
        return _this;
      }
      ActionDiceRoll.Create = function(index, diceRoll, hasAutoMoves, isWasteTurn) {
        return new ActionDiceRoll(index, diceRoll, hasAutoMoves, isWasteTurn);
      };
      ActionDiceRoll.prototype.queueable = function() {
        return true;
      };
      ActionDiceRoll.prototype.getName = function() {
        return "ActionDiceRoll";
      };
      ActionDiceRoll.prototype.start = function() {
        var gameModel = this.mGameController.getModel();
        if (-1 == this.mIndex) {
          this.onSuccess();
          return;
        }
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        pawnContainer && pawnContainer.stopHighlightForUser(this.mIndex);
        var board = gameComponent.getBoardComponent();
        var pawns = pawnContainer.getPawnsMap()[this.mGameController.getMyIndex()] || [];
        var playerSub = board.getPlayerSub(this.mIndex);
        if (!playerSub) {
          this.onSuccess();
          return;
        }
        this.mDice = playerSub.getDice();
        this.mDice.activateRoll();
        this.mDice.doRoll();
        this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.DICE_ROLL, false));
        var inActivePawn = 0;
        if (this.mDice.isMyDice()) {
          var possibleKiller = -1;
          for (var i = 0; i < pawns.length; i++) {
            var pawnPosition = pawns[i].getCellIndex();
            if (pawnPosition < 0 || pawnPosition > 51) {
              inActivePawn++;
              continue;
            }
            var referPosition = pawnPosition + this.mDiceRoll;
            if (this.mGameController.getModel().isSafeCell(referPosition)) continue;
            var pawnsAtGivePosition = pawnContainer.getPawnsAtCellByCellIndex(referPosition);
            1 == pawnsAtGivePosition.length && (possibleKiller = i);
          }
          if (possibleKiller > -1 && 3 != inActivePawn) this.mActionController.runAction(ActionFtueCanKill_1.ActionFtueCanKill.Create(possibleKiller)); else if (4 === inActivePawn && 6 !== this.mDiceRoll) this.mActionController.runAction(ActionFtueRollNonSix_1.ActionFtueRollNonSix.Create(this.mDice.node)); else {
            var pawnToUse_1 = null, maxPosition_1 = -1, count = 0;
            count = pawns.reduce(function(count, pawn) {
              if (pawn.getCellIndex() < 0) return count;
              var pos = pawn.getRelativeCellIndex();
              if (pos > maxPosition_1) {
                pawnToUse_1 = pawn;
                maxPosition_1 = pos;
              }
              return count + 1;
            }, 0);
            count > 1 && !this.mHasAutoMoves && !this.mIsWasteTurn && this.mActionController.runAction(ActionFtueChoosePawnToMove_1.ActionFtueChoosePawnToMove.Create(pawnToUse_1));
          }
        }
        this.mDice.isMyDice() && 6 === this.mDiceRoll && this.mGameController.getModel().updateSixCount();
        var self = this;
        this.mTimeout = setTimeout(function() {
          self.mDice.showRollOp(self.mDiceRoll, function() {
            self.onSuccess();
          });
          self.mTimeout = null;
        }, 200);
      };
      ActionDiceRoll.prototype.stopAction = function() {
        if (this.mTimeout) {
          clearTimeout(this.mTimeout);
          this.mTimeout = null;
        }
        if (this.mDice) {
          this.mDice.stopAnimations();
          this.mDice.showOverlay();
        }
        this.onSuccess();
      };
      ActionDiceRoll.prototype.forceStop = function() {
        if (this.mTimeout) {
          clearTimeout(this.mTimeout);
          this.mTimeout = null;
        }
        this.mDice && this.mDice.stopAnimations();
        this.onSuccess();
      };
      return ActionDiceRoll;
    }(AbstractAction_1.AbstractAction);
    exports.ActionDiceRoll = ActionDiceRoll;
    cc._RF.pop();
  }, {
    "../Actions/ActionFtueCanKill": "ActionFtueCanKill",
    "../Actions/ActionFtueChoosePawnToMove": "ActionFtueChoosePawnToMove",
    "../Actions/ActionFtueRollNonSix": "ActionFtueRollNonSix",
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlaySound": "ActionPlaySound"
  } ],
  ActionDoPawnHighlight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cadb5y0OytFWIWN6M2QU6Lx", "ActionDoPawnHighlight");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionRepositionForHighlight_1 = require("./ActionRepositionForHighlight");
    var ActionSortPawns_1 = require("./ActionSortPawns");
    var ActionRepositionPawns_1 = require("./ActionRepositionPawns");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var ActionDoPawnHighlight = function(_super) {
      __extends(ActionDoPawnHighlight, _super);
      function ActionDoPawnHighlight(uIndex, pawnIndexes) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionDoPawnHighlight", true);
        _this.mUserIndex = uIndex;
        _this.mPawnIndexes = pawnIndexes;
        return _this;
      }
      ActionDoPawnHighlight.Create = function(uIndex, pawnIndexes) {
        return new ActionDoPawnHighlight(uIndex, pawnIndexes);
      };
      ActionDoPawnHighlight.prototype.queueable = function() {
        return true;
      };
      ActionDoPawnHighlight.prototype.getName = function() {
        return "ActionDoPawnHighlight";
      };
      ActionDoPawnHighlight.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        this.mPawnComponents = [];
        var gameModel = this.mGameController.getModel();
        if (-1 == this.mUserIndex) {
          this.onSuccess();
          return;
        }
        if (this.mGameController.getCurrentIndex() != this.mUserIndex) {
          this.onSuccess();
          return;
        }
        var gamePlayer = gameModel.getPlayerIndexMap()[this.mUserIndex];
        if (gamePlayer) {
          var isLastRoll = gamePlayer.getIsLastDiceRoll();
          if (!isLastRoll) {
            this.onSuccess();
            return;
          }
        }
        var pawnContainer = gameComponent.getPawnContainer();
        for (var i = 0; i < this.mPawnIndexes.length; i++) {
          var pawnComponent = pawnContainer.getPawn(this.mUserIndex, this.mPawnIndexes[i]);
          this.mPawnComponents.push(pawnComponent);
          this.mActionController.runAction(ActionRepositionForHighlight_1.ActionRepositionForHighlight.Create(pawnComponent.getCellIndex(), this.mUserIndex, pawnComponent));
          this.mActionController.runAction(ActionSortPawns_1.ActionSortPawns.Create());
        }
        this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.HIGHLIGHT));
        this.mGameController.setListenBoardClicks(true);
        this.onSuccess();
      };
      ActionDoPawnHighlight.prototype.runResetPawnAction = function() {
        if (this.mPawnComponents) for (var i = 0; i < this.mPawnComponents.length; i++) {
          var pawnComponent = this.mPawnComponents[i];
          pawnComponent.stopHighlight();
          this.mActionController.runAction(ActionRepositionPawns_1.ActionRepositionPawns.Create(pawnComponent.getCellIndex(), this.mUserIndex));
          this.mActionController.runAction(ActionSortPawns_1.ActionSortPawns.Create());
        }
        this.onSuccess();
      };
      ActionDoPawnHighlight.prototype.forceStop = function() {
        if (this.mPawnComponents) for (var i = 0; i < this.mPawnComponents.length; i++) {
          var pawnComponent = this.mPawnComponents[i];
          pawnComponent.stopHighlight();
        }
        this.onSuccess();
      };
      return ActionDoPawnHighlight;
    }(AbstractAction_1.AbstractAction);
    exports.ActionDoPawnHighlight = ActionDoPawnHighlight;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlaySound": "ActionPlaySound",
    "./ActionRepositionForHighlight": "ActionRepositionForHighlight",
    "./ActionRepositionPawns": "ActionRepositionPawns",
    "./ActionSortPawns": "ActionSortPawns"
  } ],
  ActionDoTurnTint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fccc9lnelhDvKSR028W7NJN", "ActionDoTurnTint");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Helper_1 = require("../Generic/Helper");
    var ActionDoTurnTint = function(_super) {
      __extends(ActionDoTurnTint, _super);
      function ActionDoTurnTint(userIndex) {
        var _this = _super.call(this) || this;
        _this.mPlayerIndex = userIndex;
        _this.mHouse = null;
        _this.mBoardComponent = null;
        return _this;
      }
      ActionDoTurnTint.Create = function(userIndex) {
        return new ActionDoTurnTint(userIndex);
      };
      ActionDoTurnTint.prototype.queueable = function() {
        return false;
      };
      ActionDoTurnTint.prototype.getName = function() {
        return "ActionDoTurnTint";
      };
      ActionDoTurnTint.prototype.start = function() {
        if (Helper_1.Helper.isRendererCanvas()) {
          this.onSuccess();
          return;
        }
        var gameModel = this.mGameController.getModel();
        var gameComponent = this.mViewComponent;
        this.mBoardComponent = gameComponent.getBoardComponent();
        for (var index = 0; index < 4; index++) if (gameModel.getPlayerIndexMap().hasOwnProperty(index.toString())) {
          var house = this.mBoardComponent.getHouseSprite(index);
          var anim = house.getComponent(cc.Animation);
          if (anim) if (index == this.mPlayerIndex) {
            this.mHouse = house;
            anim.play("base" + this.mPlayerIndex + "tint");
          } else {
            anim.stop();
            house.node.color = this.mBoardComponent.getHouseColor(index);
          }
        }
      };
      ActionDoTurnTint.prototype.forceStop = function() {
        if (this.mHouse && this.mHouse.node && this.mBoardComponent && this.mBoardComponent.node) {
          var anim = this.mHouse.getComponent(cc.Animation);
          if (anim) {
            anim.stop();
            this.mHouse.node.color = this.mBoardComponent.getHouseColor(this.mPlayerIndex);
          }
        }
        this.onSuccess();
      };
      return ActionDoTurnTint;
    }(AbstractAction_1.AbstractAction);
    exports.ActionDoTurnTint = ActionDoTurnTint;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionEnablePrivateGameStart: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8d698h6DkZEXKk3TDNbib97", "ActionEnablePrivateGameStart");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var InviteWaitingPopupComponent_1 = require("../Components/InviteWaitingPopupComponent");
    var ActionEnablePrivateGameStart = function(_super) {
      __extends(ActionEnablePrivateGameStart, _super);
      function ActionEnablePrivateGameStart(enable) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionEnablePrivateGameStart", true);
        _this.mEnable = enable;
        return _this;
      }
      ActionEnablePrivateGameStart.Create = function(enable) {
        void 0 === enable && (enable = true);
        return new ActionEnablePrivateGameStart(enable);
      };
      ActionEnablePrivateGameStart.prototype.queueable = function() {
        return false;
      };
      ActionEnablePrivateGameStart.prototype.getName = function() {
        return "ActionEnablePrivateGameStart";
      };
      ActionEnablePrivateGameStart.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var inviteWaitingPopupComponent = gameComponent.inviteWaitingPopup.getComponent(InviteWaitingPopupComponent_1.default);
        inviteWaitingPopupComponent && inviteWaitingPopupComponent.enableStartButton(this.mEnable);
      };
      return ActionEnablePrivateGameStart;
    }(AbstractAction_1.AbstractAction);
    exports.ActionEnablePrivateGameStart = ActionEnablePrivateGameStart;
    cc._RF.pop();
  }, {
    "../Components/InviteWaitingPopupComponent": "InviteWaitingPopupComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionForceResetDice: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea742EkkbRKoZrDKy5FYusY", "ActionForceResetDice");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionForceResetDice = function(_super) {
      __extends(ActionForceResetDice, _super);
      function ActionForceResetDice() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionForceResetDice", true);
        return _this;
      }
      ActionForceResetDice.Create = function() {
        return new ActionForceResetDice();
      };
      ActionForceResetDice.prototype.queueable = function() {
        return false;
      };
      ActionForceResetDice.prototype.getName = function() {
        return "ActionForceResetDice";
      };
      ActionForceResetDice.prototype.start = function() {
        if (!(this.mViewComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var gameComponent = this.mViewComponent;
        var board = gameComponent.getBoardComponent();
        if (board) for (var i = 0; i < 4; i++) {
          var playerSub = board.getPlayerSub(i);
          if (playerSub) {
            var dice = playerSub.getDice();
            dice && dice.deactivateRoll();
          }
        }
        this.onSuccess();
      };
      return ActionForceResetDice;
    }(AbstractAction_1.AbstractAction);
    exports.ActionForceResetDice = ActionForceResetDice;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtueCanKill: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5ce3n4pSFKgoGp8KQB7xgF", "ActionFtueCanKill");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionFtueCanKill = function(_super) {
      __extends(ActionFtueCanKill, _super);
      function ActionFtueCanKill(pawnIndex) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionFtueCanKill", true);
        _this.mPawnIndex = pawnIndex;
        _this.clearCallback = _this.clear.bind(_this);
        return _this;
      }
      ActionFtueCanKill.prototype.clear = function() {
        clearTimeout(this.timer);
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
      };
      ActionFtueCanKill.Create = function(pawnIndex) {
        return new ActionFtueCanKill(pawnIndex);
      };
      ActionFtueCanKill.prototype.queueable = function() {
        return true;
      };
      ActionFtueCanKill.prototype.getName = function() {
        return "ActionFtueCanKill";
      };
      ActionFtueCanKill.prototype.onTimerExpire = function() {
        this.mLogger.Log("Harish: Ftue: ActionFtueCanKill: start: show ftue");
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var target = pawnContainer.getPawn(this.mGameController.getMyIndex(), this.mPawnIndex);
        this.mFtueComponent = gameComponent.getFtueComponent();
        this.mFtueComponent.showToolTip("#PSST_KILL_TEXT", "top", target.node, Constants_1.constants.FTUE_EVENTS.KILL);
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.KILL);
        this.mPresistantNodeComponent.getFtueController().updateFtueShown(Constants_1.constants.FTUE_EVENTS.KILL, this.mPresistantNodeComponent.GetGameController().getRoomId());
        this.onSuccess();
      };
      ActionFtueCanKill.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.KILL)) {
          this.mLogger.Log("Harish: Ftue: ActionFtueCanKill: start: not eligible");
          this.onSuccess();
          return;
        }
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        var ftueTimers = this.mPresistantNodeComponent.GetPlayerController().getModel().getFtueTimers();
        this.timer = setTimeout(this.onTimerExpire.bind(this), ftueTimers[Constants_1.constants.FTUE_EVENTS.KILL]);
      };
      ActionFtueCanKill.prototype.forceStop = function() {
        clearTimeout(this.timer);
        this.onSuccess();
      };
      return ActionFtueCanKill;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtueCanKill = ActionFtueCanKill;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtueChoosePawnToMove: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3c6bO5zelOE6/1UaDVQUAS", "ActionFtueChoosePawnToMove");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionFtueChoosePawnToMove = function(_super) {
      __extends(ActionFtueChoosePawnToMove, _super);
      function ActionFtueChoosePawnToMove(pawnToUse) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionFtueChoosePawnToMove", true);
        _this.mpawnToUse = pawnToUse;
        _this.clearCallback = _this.clear.bind(_this);
        return _this;
      }
      ActionFtueChoosePawnToMove.prototype.clear = function() {
        clearTimeout(this.timer);
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
      };
      ActionFtueChoosePawnToMove.prototype.queueable = function() {
        return false;
      };
      ActionFtueChoosePawnToMove.Create = function(pawnToUse) {
        return new ActionFtueChoosePawnToMove(pawnToUse);
      };
      ActionFtueChoosePawnToMove.prototype.getName = function() {
        return "ActionFtueChoosePawnToMove";
      };
      ActionFtueChoosePawnToMove.prototype.onTimerExpire = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) return;
        this.mFtueComponent = gameComponent.getFtueComponent();
        this.mFtueComponent.showToolTip("#TAP_PAWN_MOVE_TEXT", "top", this.mpawnToUse.node, Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_AFTER);
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_AFTER);
        this.mLogger.Log("Harish: Ftue: ActionFtueChoosePawnToMove: start: shown ftue");
        this.mPresistantNodeComponent.getFtueController().updateFtueShown(Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_AFTER, this.mPresistantNodeComponent.GetGameController().getRoomId());
      };
      ActionFtueChoosePawnToMove.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_AFTER)) {
          this.mLogger.Log("Harish: Ftue: ActionFtueChoosePawnToMove: start: not eligible");
          return;
        }
        this.mLogger.Log("Harish: Ftue: ActionFtueChoosePawnToMove: start: show ftue");
        var ftueTimers = this.mPresistantNodeComponent.GetPlayerController().getModel().getFtueTimers();
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        this.timer = setTimeout(this.onTimerExpire.bind(this), ftueTimers[Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_AFTER]);
      };
      ActionFtueChoosePawnToMove.prototype.forceStop = function() {
        clearTimeout(this.timer);
      };
      return ActionFtueChoosePawnToMove;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtueChoosePawnToMove = ActionFtueChoosePawnToMove;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtueHomeLane: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e818dNQecdPBopk4mpttUqi", "ActionFtueHomeLane");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionFtueHomeLane = function(_super) {
      __extends(ActionFtueHomeLane, _super);
      function ActionFtueHomeLane(pawnIndex) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionFtueHomeLane", true);
        _this.mPawnIndex = pawnIndex;
        _this.clearCallback = _this.clear.bind(_this);
        return _this;
      }
      ActionFtueHomeLane.prototype.clear = function() {
        clearTimeout(this.timer);
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
      };
      ActionFtueHomeLane.Create = function(pawnIndex) {
        return new ActionFtueHomeLane(pawnIndex);
      };
      ActionFtueHomeLane.prototype.queueable = function() {
        return true;
      };
      ActionFtueHomeLane.prototype.getName = function() {
        return "ActionFtueHomeLane";
      };
      ActionFtueHomeLane.prototype.onTimerExpire = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var target = pawnContainer.getPawn(this.mGameController.getMyIndex(), this.mPawnIndex);
        this.mFtueComponent = gameComponent.getFtueComponent();
        this.mFtueComponent.showToolTip("#SAFE_AT_LAST_TEXT", "top", target.node, Constants_1.constants.FTUE_EVENTS.HOME_LANE);
        this.mPresistantNodeComponent.getFtueController().updateFtueShown(Constants_1.constants.FTUE_EVENTS.HOME_LANE, this.mPresistantNodeComponent.GetGameController().getRoomId());
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.HOME_LANE);
        this.onSuccess();
      };
      ActionFtueHomeLane.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.HOME_LANE)) {
          this.mLogger.Log("Harish: Ftue: ActionFtueHomeLane: start: not eligible");
          this.onSuccess();
          return;
        }
        this.mLogger.Log("Harish: Ftue: ActionFtueHomeLane: start: show ftue");
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        var ftueTimers = this.mPresistantNodeComponent.GetPlayerController().getModel().getFtueTimers();
        this.timer = setTimeout(this.onTimerExpire.bind(this), ftueTimers[Constants_1.constants.FTUE_EVENTS.HOME_LANE]);
      };
      ActionFtueHomeLane.prototype.forceStop = function() {
        clearTimeout(this.timer);
        this.onSuccess();
      };
      return ActionFtueHomeLane;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtueHomeLane = ActionFtueHomeLane;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtueInactiveOnLobby: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "beef0i7GnJHjpr6ywUt6sIs", "ActionFtueInactiveOnLobby");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LobbyComponent_1 = require("../Components/LobbyComponent");
    var ActionFtueInactiveOnLobby = function(_super) {
      __extends(ActionFtueInactiveOnLobby, _super);
      function ActionFtueInactiveOnLobby(animNode) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionFtueInactiveOnLobby", true);
        _this.animNode = null;
        _this.mStartDelay = 0;
        _this.mQueueable = false;
        _this.animNode = animNode;
        _this.clearCallback = _this.clear.bind(_this);
        return _this;
      }
      ActionFtueInactiveOnLobby.prototype.clear = function() {
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        this.animNode.stop("lobbyShineAnim");
      };
      ActionFtueInactiveOnLobby.Create = function(animNode) {
        return new ActionFtueInactiveOnLobby(animNode);
      };
      ActionFtueInactiveOnLobby.prototype.queueable = function() {
        return false;
      };
      ActionFtueInactiveOnLobby.prototype.getName = function() {
        return "ActionFtueInactiveOnLobby";
      };
      ActionFtueInactiveOnLobby.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.INACTIVE_ON_LOBBY)) {
          this.mLogger.Log("Harish: Ftue: ActionFtueInactiveOnLobby: start: not eligible");
          return;
        }
        this.animNode && this.playAnimation(this.animNode);
      };
      ActionFtueInactiveOnLobby.prototype.playAnimation = function(node) {
        if (!this.animNode || Helper_1.Helper.isRendererCanvas() || null === this.mViewComponent) return;
        var lobbyComponent = this.mViewComponent;
        if (!lobbyComponent || !(lobbyComponent instanceof LobbyComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without lobby component");
          this.onSuccess();
          return;
        }
        this.animNode.node.parent.active = true;
        this.animNode.stop("lobbyShineAnim");
        this.animNode.play("lobbyShineAnim");
        this.mPresistantNodeComponent.GetStatsController().count("ftue", 1, "popup", "ftue", Constants_1.constants.FTUE_EVENTS.INACTIVE_ON_LOBBY, this.mPresistantNodeComponent.getFtueController().getCount(Constants_1.constants.FTUE_EVENTS.INACTIVE_ON_LOBBY) + 1 + "", "");
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.INACTIVE_ON_LOBBY, 0);
      };
      return ActionFtueInactiveOnLobby;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtueInactiveOnLobby = ActionFtueInactiveOnLobby;
    cc._RF.pop();
  }, {
    "../Components/LobbyComponent": "LobbyComponent",
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtueMovePawnOut: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7e0b7ENOv5AWbbzuAGvGDYq", "ActionFtueMovePawnOut");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionFtueMovePawnOut = function(_super) {
      __extends(ActionFtueMovePawnOut, _super);
      function ActionFtueMovePawnOut() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionFtueMovePawnOut", true);
        _this.clearCallback = _this.clear.bind(_this);
        return _this;
      }
      ActionFtueMovePawnOut.prototype.clear = function() {
        clearTimeout(this.timer);
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
      };
      ActionFtueMovePawnOut.Create = function() {
        return new ActionFtueMovePawnOut();
      };
      ActionFtueMovePawnOut.prototype.queueable = function() {
        return false;
      };
      ActionFtueMovePawnOut.prototype.getName = function() {
        return "ActionFtueMovePawnOut";
      };
      ActionFtueMovePawnOut.prototype.onTimerExpire = function() {
        this.mLogger.Log("Harish: Ftue: ActionFtueMovePawnOut: start: timer expired");
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) return;
        this.mFtueComponent = gameComponent.getFtueComponent();
        var pawnContainer = gameComponent.getPawnContainer();
        var target = pawnContainer.getPawn(this.mGameController.getMyIndex(), 2);
        this.mFtueComponent.showToolTip("#WOHOO_SIX_MOVE_TEXT", "top", target.node, Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_OUT);
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_OUT);
        this.mLogger.Log("Harish: Ftue: ActionFtueMovePawnOut: start: show ftue");
        this.mPresistantNodeComponent.getFtueController().updateFtueShown(Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_OUT, this.mPresistantNodeComponent.GetGameController().getRoomId());
      };
      ActionFtueMovePawnOut.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_OUT)) {
          this.mLogger.Log("Harish: Ftue: ActionFtueMovePawnOut: start: not eligible");
          return;
        }
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        this.mLogger.Log("Harish: Ftue: ActionFtueMovePawnOut: start: show ftue");
        this.mLogger.Log("Harish: Ftue: ActionFtueMovePawnOut: start: timer started");
        var ftueTimers = this.mPresistantNodeComponent.GetPlayerController().getModel().getFtueTimers();
        this.timer = setTimeout(this.onTimerExpire.bind(this), ftueTimers[Constants_1.constants.FTUE_EVENTS.MOVE_PAWN_OUT]);
      };
      ActionFtueMovePawnOut.prototype.forceStop = function() {
        clearTimeout(this.timer);
      };
      return ActionFtueMovePawnOut;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtueMovePawnOut = ActionFtueMovePawnOut;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtuePawnKilled: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f31314SEZ9L4ZT4GlqpE5VM", "ActionFtuePawnKilled");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionFtuePawnKilled = function(_super) {
      __extends(ActionFtuePawnKilled, _super);
      function ActionFtuePawnKilled(pawnIndex) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionFtuePawnKilled", true);
        _this.mPawnIndex = pawnIndex;
        _this.clearCallback = _this.clear.bind(_this);
        return _this;
      }
      ActionFtuePawnKilled.prototype.clear = function() {
        clearTimeout(this.timer);
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
      };
      ActionFtuePawnKilled.Create = function(pawnIndex) {
        return new ActionFtuePawnKilled(pawnIndex);
      };
      ActionFtuePawnKilled.prototype.queueable = function() {
        return true;
      };
      ActionFtuePawnKilled.prototype.getName = function() {
        return "ActionFtuePawnKilled";
      };
      ActionFtuePawnKilled.prototype.onTimerExpire = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var target = pawnContainer.getPawn(this.mGameController.getMyIndex(), this.mPawnIndex);
        this.mFtueComponent = gameComponent.getFtueComponent();
        this.mFtueComponent.showToolTip("#OH_NO_PAWN_KILLED_TEXT", "top", target.node, Constants_1.constants.FTUE_EVENTS.KILLED, true);
        this.mPresistantNodeComponent.getFtueController().updateFtueShown(Constants_1.constants.FTUE_EVENTS.KILLED, this.mPresistantNodeComponent.GetGameController().getRoomId());
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.KILLED);
        this.onSuccess();
      };
      ActionFtuePawnKilled.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.KILLED)) {
          this.mLogger.Log("Harish: Ftue: ActionFtuePawnKilled: start: not eligible");
          this.onSuccess();
          return;
        }
        this.mLogger.Log("Harish: Ftue: ActionFtuePawnKilled: start: show ftue");
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        var ftueTimers = this.mPresistantNodeComponent.GetPlayerController().getModel().getFtueTimers();
        this.timer = setTimeout(this.onTimerExpire.bind(this), ftueTimers[Constants_1.constants.FTUE_EVENTS.KILLED]);
      };
      ActionFtuePawnKilled.prototype.forceStop = function() {
        clearTimeout(this.timer);
        this.onSuccess();
      };
      return ActionFtuePawnKilled;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtuePawnKilled = ActionFtuePawnKilled;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtueRollDice: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cbc74b61mJCzYSrHbB3X8pB", "ActionFtueRollDice");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionFtueRollDice = function(_super) {
      __extends(ActionFtueRollDice, _super);
      function ActionFtueRollDice() {
        var _this = this;
        _this.mLogger = new Logger_1.Logger("ActionFtueRollDice", true);
        _this.mFtueComponent = null;
        _this.clearCallback = _this.clear.bind(_this);
        _this = _super.call(this) || this;
        return _this;
      }
      ActionFtueRollDice.prototype.clear = function() {
        clearTimeout(this.timer);
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
      };
      ActionFtueRollDice.Create = function() {
        return new ActionFtueRollDice();
      };
      ActionFtueRollDice.prototype.queueable = function() {
        return false;
      };
      ActionFtueRollDice.prototype.getName = function() {
        return "ActionFtueRollDice";
      };
      ActionFtueRollDice.prototype.onTimerExpire = function() {
        this.mLogger.Log("Harish: Ftue: ActionFtueRollDice: start: timer expired");
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) return;
        var board = gameComponent.getBoardComponent();
        var playerSub = board.getPlayerSub(this.mGameController.getMyIndex());
        if (!playerSub) return;
        var targetDice = playerSub.getDice();
        this.mFtueComponent = gameComponent.getFtueComponent();
        this.mFtueComponent.showToolTip("#TAP_DICE_ROLL_TEXT", "left", targetDice.node, Constants_1.constants.FTUE_EVENTS.DICE_ROLL);
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.DICE_ROLL);
        this.mLogger.Log("Harish: Ftue: ActionFtueRollDice: start: show ftue");
      };
      ActionFtueRollDice.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.DICE_ROLL)) {
          this.mLogger.Log("Harish: Ftue: ActionFtueRollDice: start: not eligible");
          return;
        }
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        this.mLogger.Log("Harish: Ftue: ActionFtueRollDice: start: timer started");
        this.mPresistantNodeComponent.getFtueController().updateFtueShown(Constants_1.constants.FTUE_EVENTS.DICE_ROLL, this.mPresistantNodeComponent.GetGameController().getRoomId());
        var ftueTimers = this.mPresistantNodeComponent.GetPlayerController().getModel().getFtueTimers();
        this.timer = setTimeout(this.onTimerExpire.bind(this), ftueTimers[Constants_1.constants.FTUE_EVENTS.DICE_ROLL]);
      };
      ActionFtueRollDice.prototype.forceStop = function() {
        clearTimeout(this.timer);
        this.onSuccess();
      };
      return ActionFtueRollDice;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtueRollDice = ActionFtueRollDice;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtueRollNonSix: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84312EAn1VBA5Cfh2euWsAE", "ActionFtueRollNonSix");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionFtueRollNonSix = function(_super) {
      __extends(ActionFtueRollNonSix, _super);
      function ActionFtueRollNonSix(target) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionFtueRollNonSix", true);
        _this.target = target;
        _this.clearCallback = _this.clear.bind(_this);
        return _this;
      }
      ActionFtueRollNonSix.prototype.clear = function() {
        clearTimeout(this.timer);
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
      };
      ActionFtueRollNonSix.Create = function(target) {
        return new ActionFtueRollNonSix(target);
      };
      ActionFtueRollNonSix.prototype.queueable = function() {
        return false;
      };
      ActionFtueRollNonSix.prototype.getName = function() {
        return "ActionFtueRollNonSix";
      };
      ActionFtueRollNonSix.prototype.onTimerExpire = function() {
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.ROLL_NON_SIX);
        this.mLogger.Log("Harish: Ftue: ActionFtueRollNonSix: start: show ftue");
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) return;
        var board = gameComponent.getBoardComponent();
        var playerSub = board.getPlayerSub(this.mGameController.getMyIndex());
        if (!playerSub) return;
        var targetDice = playerSub.getDice();
        this.mFtueComponent = gameComponent.getFtueComponent();
        this.mFtueComponent.showToolTip("#YOU_NO_SIX_TEXT", "left", targetDice.node, Constants_1.constants.FTUE_EVENTS.ROLL_NON_SIX);
        this.mPresistantNodeComponent.getFtueController().updateFtueShown(Constants_1.constants.FTUE_EVENTS.ROLL_NON_SIX, this.mPresistantNodeComponent.GetGameController().getRoomId());
      };
      ActionFtueRollNonSix.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.ROLL_NON_SIX)) {
          this.mLogger.Log("Harish: Ftue: ActionFtueRollNonSix: start: not eligible");
          return;
        }
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        var ftueTimers = this.mPresistantNodeComponent.GetPlayerController().getModel().getFtueTimers();
        this.timer = setTimeout(this.onTimerExpire.bind(this), ftueTimers[Constants_1.constants.FTUE_EVENTS.ROLL_NON_SIX]);
      };
      ActionFtueRollNonSix.prototype.forceStop = function() {
        clearTimeout(this.timer);
      };
      return ActionFtueRollNonSix;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtueRollNonSix = ActionFtueRollNonSix;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionFtueSafeZone: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5fa423/qcpL/Ja6VHbJpCQt", "ActionFtueSafeZone");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionFtueSafeZone = function(_super) {
      __extends(ActionFtueSafeZone, _super);
      function ActionFtueSafeZone(pawnIndex) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionFtueSafeZone", true);
        _this.mPawnIndex = pawnIndex;
        _this.clearCallback = _this.clear.bind(_this);
        return _this;
      }
      ActionFtueSafeZone.prototype.clear = function() {
        clearTimeout(this.timer);
        this.mPresistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
      };
      ActionFtueSafeZone.Create = function(pawnIndex) {
        return new ActionFtueSafeZone(pawnIndex);
      };
      ActionFtueSafeZone.prototype.queueable = function() {
        return true;
      };
      ActionFtueSafeZone.prototype.getName = function() {
        return "ActionFtueSafeZone";
      };
      ActionFtueSafeZone.prototype.onTimerExpire = function() {
        this.mPresistantNodeComponent.getFtueController().updateFtueCount(Constants_1.constants.FTUE_EVENTS.SAFE_ZONE);
        this.mLogger.Log("Harish: Ftue: ActionFtueSafeZone: start: show ftue");
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var target = pawnContainer.getPawn(this.mGameController.getMyIndex(), this.mPawnIndex);
        this.mFtueComponent = gameComponent.getFtueComponent();
        this.mFtueComponent.showToolTip("#PAWN_IN_SAFE_ZONE_TEXT", "top", target.node, Constants_1.constants.FTUE_EVENTS.ROLL_NON_SIX, true);
        this.mPresistantNodeComponent.getFtueController().updateFtueShown(Constants_1.constants.FTUE_EVENTS.SAFE_ZONE, this.mPresistantNodeComponent.GetGameController().getRoomId());
        this.onSuccess();
      };
      ActionFtueSafeZone.prototype.start = function() {
        if (!this.mPresistantNodeComponent.getFtueController().isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.SAFE_ZONE)) {
          this.mLogger.Log("Harish: Ftue: ActionFtueSafeZone: start: not eligible");
          this.onSuccess();
          return;
        }
        this.mPresistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_FTUE_CLEAR, this.clearCallback);
        var ftueTimers = this.mPresistantNodeComponent.GetPlayerController().getModel().getFtueTimers();
        this.timer = setTimeout(this.onTimerExpire.bind(this), ftueTimers[Constants_1.constants.FTUE_EVENTS.ROLL_NON_SIX]);
      };
      ActionFtueSafeZone.prototype.forceStop = function() {
        clearTimeout(this.timer);
        this.onSuccess();
      };
      return ActionFtueSafeZone;
    }(AbstractAction_1.AbstractAction);
    exports.ActionFtueSafeZone = ActionFtueSafeZone;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionHideBetSelectionPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b79b1XMMNlLw5F/v2Z082g8", "ActionHideBetSelectionPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var LobbyComponent_1 = require("../Components/LobbyComponent");
    var ActionHideBetSelectionPopup = function(_super) {
      __extends(ActionHideBetSelectionPopup, _super);
      function ActionHideBetSelectionPopup() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionHideBetSelectionPopup", true);
        return _this;
      }
      ActionHideBetSelectionPopup.Create = function() {
        return new ActionHideBetSelectionPopup();
      };
      ActionHideBetSelectionPopup.prototype.queueable = function() {
        return false;
      };
      ActionHideBetSelectionPopup.prototype.getName = function() {
        return "ActionHideBetSelectionPopup";
      };
      ActionHideBetSelectionPopup.prototype.start = function() {
        var lobbyComponent = this.mViewComponent;
        if (!lobbyComponent || !(lobbyComponent instanceof LobbyComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without lobby component");
          this.onSuccess();
          return;
        }
        lobbyComponent.hideBetSelectionPopup();
        this.onSuccess();
      };
      return ActionHideBetSelectionPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionHideBetSelectionPopup = ActionHideBetSelectionPopup;
    cc._RF.pop();
  }, {
    "../Components/LobbyComponent": "LobbyComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionHideChatForIndex: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec574vMJAxDUrYSqEW4HIJ0", "ActionHideChatForIndex");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionHideChatForIndex = function(_super) {
      __extends(ActionHideChatForIndex, _super);
      function ActionHideChatForIndex(index) {
        var _this = _super.call(this) || this;
        _this.mIndex = index;
        return _this;
      }
      ActionHideChatForIndex.Create = function(index) {
        return new ActionHideChatForIndex(index);
      };
      ActionHideChatForIndex.prototype.queueable = function() {
        return false;
      };
      ActionHideChatForIndex.prototype.getName = function() {
        return "ActionHideChatForIndex";
      };
      ActionHideChatForIndex.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var board = gameComponent.getBoardComponent();
        var playerSub = board.getPlayerSub(this.mIndex);
        playerSub && playerSub.getChatComponent().hideChat();
        this.onSuccess();
      };
      ActionHideChatForIndex.prototype.getIndex = function() {
        return this.mIndex;
      };
      return ActionHideChatForIndex;
    }(AbstractAction_1.AbstractAction);
    exports.ActionHideChatForIndex = ActionHideChatForIndex;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionHideDiceForUser: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a2baW/kLNKi5t3p89Q3G10", "ActionHideDiceForUser");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionHideDiceForUser = function(_super) {
      __extends(ActionHideDiceForUser, _super);
      function ActionHideDiceForUser(index, startDelay) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionHideDiceForUser", true);
        _this.mIndex = index;
        _this.mStartDelay = startDelay;
        return _this;
      }
      ActionHideDiceForUser.Create = function(index, startDelay) {
        return new ActionHideDiceForUser(index, startDelay);
      };
      ActionHideDiceForUser.prototype.queueable = function() {
        return true;
      };
      ActionHideDiceForUser.prototype.getName = function() {
        return "ActionHideDiceForUser";
      };
      ActionHideDiceForUser.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var board = gameComponent.getBoardComponent();
        var self = this;
        this.mTimeout = setTimeout(function() {
          if (board) {
            var playerSub = board.getPlayerSub(self.mIndex);
            if (playerSub) {
              var dice = playerSub.getDice();
              dice && dice.deactivateRoll();
            }
          }
          self.onSuccess();
        }, this.mStartDelay);
      };
      ActionHideDiceForUser.prototype.forceStop = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
        this.onSuccess();
      };
      return ActionHideDiceForUser;
    }(AbstractAction_1.AbstractAction);
    exports.ActionHideDiceForUser = ActionHideDiceForUser;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionHideFtue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c60a81ry9FFupdUVnTDZ1iG", "ActionHideFtue");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionHideFtue = function(_super) {
      __extends(ActionHideFtue, _super);
      function ActionHideFtue() {
        var _this = this;
        _this.mLogger = new Logger_1.Logger("ActionHideFtue", true);
        return _this;
      }
      ActionHideFtue.Create = function() {
        return new ActionHideFtue();
      };
      ActionHideFtue.prototype.queueable = function() {
        return false;
      };
      ActionHideFtue.prototype.getName = function() {
        return "ActionHideFtue";
      };
      ActionHideFtue.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) return;
        this.mFtueComponent = gameComponent.getFtueComponent();
        this.mFtueComponent.onFtueClear();
      };
      ActionHideFtue.prototype.forceStop = function() {};
      return ActionHideFtue;
    }(AbstractAction_1.AbstractAction);
    exports.ActionHideFtue = ActionHideFtue;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionHidePlayerSelectionPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "63eabkWt09FKIdwVAdtEonn", "ActionHidePlayerSelectionPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var LobbyComponent_1 = require("../Components/LobbyComponent");
    var ActionHidePlayerSelectionPopup = function(_super) {
      __extends(ActionHidePlayerSelectionPopup, _super);
      function ActionHidePlayerSelectionPopup() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionHidePlayerSelectionPopup", true);
        return _this;
      }
      ActionHidePlayerSelectionPopup.Create = function() {
        return new ActionHidePlayerSelectionPopup();
      };
      ActionHidePlayerSelectionPopup.prototype.queueable = function() {
        return false;
      };
      ActionHidePlayerSelectionPopup.prototype.getName = function() {
        return "ActionHidePlayerSelectionPopup";
      };
      ActionHidePlayerSelectionPopup.prototype.start = function() {
        var lobbyComponent = this.mViewComponent;
        if (!lobbyComponent || !(lobbyComponent instanceof LobbyComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without lobby component");
          this.onSuccess();
          return;
        }
        lobbyComponent.hidePlayerSelectionPopup();
        this.onSuccess();
      };
      return ActionHidePlayerSelectionPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionHidePlayerSelectionPopup = ActionHidePlayerSelectionPopup;
    cc._RF.pop();
  }, {
    "../Components/LobbyComponent": "LobbyComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionInitializePlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0432ExT+ZLSo5/UJZO5psn", "ActionInitializePlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var Helper_1 = require("../Generic/Helper");
    var ProfileImageComponent_1 = require("../Components/ProfileImageComponent");
    var ProfileCustomizationController_1 = require("../Controllers/ProfileCustomizationController");
    var ActionInitializePlayer = function(_super) {
      __extends(ActionInitializePlayer, _super);
      function ActionInitializePlayer(userIndex) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionInitializePlayer", true);
        _this.mIndex = -1;
        _this.mIndex = userIndex;
        return _this;
      }
      ActionInitializePlayer.Create = function(userIndex) {
        return new ActionInitializePlayer(userIndex);
      };
      ActionInitializePlayer.prototype.queueable = function() {
        return false;
      };
      ActionInitializePlayer.prototype.getName = function() {
        return "ActionInitializePlayer";
      };
      ActionInitializePlayer.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var board = gameComponent.getBoardComponent();
        var gameModel = this.mGameController.getModel();
        var configurationController = this.mPresistantNodeComponent.GetConfigurationController();
        var player = gameModel.getPlayerIndexMap()[this.mIndex];
        pawnContainer.initializePawnsOfPlayer(player);
        var playerSub = board.getPlayerSub(player.getIndex());
        this.mLogger.Log("Loading player " + player.getName() + " to index " + player.getIndex());
        if (playerSub) {
          playerSub.getNameLabel().node.active = true;
          playerSub.getNameLabel().string = Helper_1.Helper.getTruncatedString(player.getName(), 15, true);
          if (ProfileCustomizationController_1.ProfileCustomizationController.getInstance().isEnabled()) {
            playerSub.getNameLabel().node.active = false;
            playerSub.getFlagComponent().node.active = true;
            playerSub.getFlagComponent().initialize(player.getCountry());
            playerSub.getCustomLabelComponent().node.active = true;
            playerSub.getCustomLabelComponent().string = Helper_1.Helper.getTruncatedString(player.getName(), 8, true);
          }
          var myPid = this.mPlayerController.getModel().getId();
          var isSelf = myPid == player.getId();
          playerSub.getDice().initialize(isSelf);
          playerSub.getProfileNode().getComponent(ProfileImageComponent_1.default).showLeft(false);
          var badge = configurationController.getBadgeFromTrophies(player.getPlayerTrophies());
          if (isSelf) {
            badge = this.getMyStoredBadge();
            var myLocalPhoto = FBInstant.player.getPhoto();
            playerSub.getProfileNode().initialize(myLocalPhoto);
            myLocalPhoto != player.getPhotoUrl() && this.mGameController.sendProfileUpdate(myLocalPhoto);
          } else playerSub.getProfileNode().initialize(player.getPhotoUrl());
          playerSub.getProfileNode().setIndex(player.getIndex());
          playerSub.getProfileNode().getComponent(ProfileImageComponent_1.default).showBadge(badge);
          playerSub.getProfileNode().getComponent(ProfileImageComponent_1.default).showLeagueBadge(player.getLeague());
        }
      };
      ActionInitializePlayer.prototype.getMyStoredBadge = function() {
        var storedBadgeString = FBInstant.player.getID() + "storedBadge";
        var storedBadge = cc.sys.localStorage.getItem(storedBadgeString);
        return null === storedBadge ? 0 : parseInt(storedBadge);
      };
      return ActionInitializePlayer;
    }(AbstractAction_1.AbstractAction);
    exports.ActionInitializePlayer = ActionInitializePlayer;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/ProfileImageComponent": "ProfileImageComponent",
    "../Controllers/ProfileCustomizationController": "ProfileCustomizationController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionJumpPawn: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac66fq6CHxDP7YbiJipdgC+", "ActionJumpPawn");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var ActionJumpPawn = function(_super) {
      __extends(ActionJumpPawn, _super);
      function ActionJumpPawn(userIndex, pawnIndex, initialPos, finalPos) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionJumpPawn", true);
        _this.mDuration = .2;
        _this.mJumpOffset = 30;
        _this.mUserIndex = userIndex;
        _this.mPawnIndex = pawnIndex;
        _this.mFinalPos = finalPos;
        _this.mInitialPos = initialPos;
        return _this;
      }
      ActionJumpPawn.Create = function(userIndex, pawnIndex, initialPos, finalPos) {
        return new ActionJumpPawn(userIndex, pawnIndex, initialPos, finalPos);
      };
      ActionJumpPawn.prototype.queueable = function() {
        return true;
      };
      ActionJumpPawn.prototype.getName = function() {
        return "ActionJumpPawn";
      };
      ActionJumpPawn.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.PAWN_MOVE));
        this.mPawnContainer = gameComponent.getPawnContainer();
        this.mPawn = this.mPawnContainer.getPawn(this.mUserIndex, this.mPawnIndex);
        if (null == this.mPawn) {
          this.onSuccess();
          return;
        }
        this.mPawn.node.setLocalZOrder(200);
        var currentPosition = this.mPawnContainer.getPositionPawn(this.mInitialPos, this.mUserIndex, this.mPawnIndex);
        var finalPosition = this.mPawnContainer.getPositionPawn(this.mFinalPos, this.mUserIndex, this.mPawnIndex);
        var middlePoint = currentPosition.add(finalPosition.sub(currentPosition).div(2));
        middlePoint.y += this.mJumpOffset;
        var halfDuration = this.mDuration / 2 * .9;
        var move1 = cc.moveTo(halfDuration, middlePoint);
        var move2 = cc.moveTo(halfDuration, finalPosition);
        var moveSequence = cc.sequence(move1, move2);
        var scale1 = cc.scaleTo(halfDuration, 1, 1.2);
        var scale2 = cc.scaleTo(halfDuration, 1, 1);
        var scaleSequence = cc.sequence(scale1, scale2);
        var delay = cc.delayTime(this.mDuration);
        var callFunc = cc.callFunc(this.animationComplete, this);
        var callbackSequence = cc.sequence(delay, callFunc);
        this.mPawn.node.runAction(moveSequence);
        this.mPawn.node.runAction(scaleSequence);
        this.mPawn.node.runAction(callbackSequence);
      };
      ActionJumpPawn.prototype.animationComplete = function() {
        this.mPawn && this.mPawn.setCellIndex(this.mFinalPos);
        this.onSuccess();
      };
      return ActionJumpPawn;
    }(AbstractAction_1.AbstractAction);
    exports.ActionJumpPawn = ActionJumpPawn;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlaySound": "ActionPlaySound"
  } ],
  ActionKillAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "995206fak5HMbFHoc5evKvP", "ActionKillAnimation");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var PawnsContainerComponent_1 = require("../Components/PawnsContainerComponent");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var Helper_1 = require("../Generic/Helper");
    var ActionKillAnimation = function(_super) {
      __extends(ActionKillAnimation, _super);
      function ActionKillAnimation(position, userIndex, pawnIndex) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionKillAnimation", true);
        _this.mPosition = position;
        _this.mUserIndex = userIndex;
        _this.mPawnIndex = pawnIndex;
        return _this;
      }
      ActionKillAnimation.Create = function(position, userIndex, pawnIndex) {
        Helper_1.Helper.sendSentryLog("ActionKillAnimation create userIndex: " + userIndex + " userIndex: " + pawnIndex);
        return new ActionKillAnimation(position, userIndex, pawnIndex);
      };
      ActionKillAnimation.prototype.queueable = function() {
        return true;
      };
      ActionKillAnimation.prototype.getName = function() {
        return "ActionKillAnimation";
      };
      ActionKillAnimation.prototype.start = function() {
        var gameModel = this.mGameController.getModel();
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        this.mPawnContainer = gameComponent.getPawnContainer();
        this.mPawn = this.mPawnContainer.getPawn(this.mUserIndex, this.mPawnIndex);
        null == this.mPawn && Helper_1.Helper.sendSentryLog("ActionKillAnimation userIndex: " + this.mUserIndex + " pawnIndex: " + this.mPawnIndex);
        var pos = this.mPawn.node.getPosition();
        var pawnContainerComponent = this.mPawnContainer.getComponent(PawnsContainerComponent_1.default);
        this.mSkull = pawnContainerComponent.skullSprite.node;
        this.mSkull.active = true;
        this.mSkull.setLocalZOrder(300);
        var duration = 1;
        var callFunc = cc.callFunc(this.animationComplete, this);
        var scaleAction = cc.scaleTo(duration, .7, .7);
        var callbackSequence = cc.sequence(scaleAction, callFunc);
        var fadeSequence = cc.sequence(cc.fadeIn(duration / 2), cc.fadeOut(duration / 2));
        this.mSkull.setScale(.2);
        this.mSkull.runAction(fadeSequence);
        this.mSkull.runAction(callbackSequence);
        this.mSkull.setPosition(pos);
        this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.KILL_FX1));
      };
      ActionKillAnimation.prototype.animationComplete = function() {
        if (this.mPawnContainer) {
          null == this.mPawnContainer.getPawn(this.mUserIndex, this.mPawnIndex) && Helper_1.Helper.sendSentryLog("ActionKillAnimation animationComplete userIndex: " + this.mUserIndex + " pawnIndex: " + this.mPawnIndex);
          this.mPawnContainer.getPawn(this.mUserIndex, this.mPawnIndex).node.scale = 1;
        }
        this.mSkull && (this.mSkull.active = false);
        this.onSuccess();
      };
      ActionKillAnimation.prototype.forceStop = function() {
        this.animationComplete();
      };
      return ActionKillAnimation;
    }(AbstractAction_1.AbstractAction);
    exports.ActionKillAnimation = ActionKillAnimation;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/PawnsContainerComponent": "PawnsContainerComponent",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlaySound": "ActionPlaySound"
  } ],
  ActionMoveKilledPawn: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4fc7fQ2CTVLMbSv9sVMoAn8", "ActionMoveKilledPawn");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionFtuePawnKilled_1 = require("./ActionFtuePawnKilled");
    var ActionMoveKilledPawn = function(_super) {
      __extends(ActionMoveKilledPawn, _super);
      function ActionMoveKilledPawn(userIndex, pawnIndex, initialPos, finalPos) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionMoveKilledPawn", true);
        _this.mDuration = .2;
        _this.mUserIndex = userIndex;
        _this.mPawnIndex = pawnIndex;
        _this.mFinalPos = finalPos;
        _this.mInitialPos = initialPos;
        return _this;
      }
      ActionMoveKilledPawn.Create = function(userIndex, pawnIndex, initialPos, finalPos) {
        return new ActionMoveKilledPawn(userIndex, pawnIndex, initialPos, finalPos);
      };
      ActionMoveKilledPawn.prototype.queueable = function() {
        return true;
      };
      ActionMoveKilledPawn.prototype.getName = function() {
        return "ActionMoveKilledPawn";
      };
      ActionMoveKilledPawn.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        this.mPawnContainer = gameComponent.getPawnContainer();
        this.mPawn = this.mPawnContainer.getPawn(this.mUserIndex, this.mPawnIndex);
        if (this.mUserIndex === this.mGameController.getMyIndex()) {
          this.mLogger.Log("Harish: Ftue: ActionMoveKilledPawn: start: My pawn was killed");
          this.mActionController.runAction(ActionFtuePawnKilled_1.ActionFtuePawnKilled.Create(this.mPawnIndex));
        }
        this.mPawn.node.setLocalZOrder(200);
        var currentPosition = this.mPawnContainer.getPositionPawn(this.mInitialPos, this.mUserIndex, this.mPawnIndex);
        var finalPosition = this.mPawnContainer.getPositionPawn(this.mFinalPos, this.mUserIndex, this.mPawnIndex);
        this.mDuration = .05;
        var move1 = cc.moveTo(.9 * this.mDuration, finalPosition);
        var delay = cc.delayTime(this.mDuration);
        var callFunc = cc.callFunc(this.animationComplete, this);
        var callbackSequence = cc.sequence(delay, callFunc);
        this.mPawn.node.runAction(move1);
        this.mPawn.node.runAction(callbackSequence);
      };
      ActionMoveKilledPawn.prototype.animationComplete = function() {
        this.mPawn && this.mPawn.setCellIndex(this.mFinalPos);
        this.onSuccess();
      };
      return ActionMoveKilledPawn;
    }(AbstractAction_1.AbstractAction);
    exports.ActionMoveKilledPawn = ActionMoveKilledPawn;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionFtuePawnKilled": "ActionFtuePawnKilled"
  } ],
  ActionPlayConfettiAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "556d7SAuDhJxbtFhFKF9d3s", "ActionPlayConfettiAnimation");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var Helper_1 = require("../Generic/Helper");
    var ActionPlayConfettiAnimation = function(_super) {
      __extends(ActionPlayConfettiAnimation, _super);
      function ActionPlayConfettiAnimation(confettiNode, startDelay, queueable) {
        void 0 === queueable && (queueable = false);
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionPlayConfettiAnimation", true);
        _this.mConfettiNode = null;
        _this.mStartDelay = 0;
        _this.mQueueable = false;
        _this.mTimeout = null;
        _this.mConfettiNode = confettiNode;
        startDelay && (_this.mStartDelay = startDelay);
        _this.mQueueable = queueable;
        return _this;
      }
      ActionPlayConfettiAnimation.Create = function(confettiNode, startDelay, queueable) {
        void 0 === queueable && (queueable = false);
        return new ActionPlayConfettiAnimation(confettiNode, startDelay, queueable);
      };
      ActionPlayConfettiAnimation.prototype.queueable = function() {
        return this.mQueueable;
      };
      ActionPlayConfettiAnimation.prototype.getName = function() {
        return "ActionPlayConfettiAnimation";
      };
      ActionPlayConfettiAnimation.prototype.start = function() {
        if (this.mConfettiNode) {
          var self = this;
          this.mTimeout = setTimeout(function() {
            self.playConfettiAnimation(self.mConfettiNode);
          }, this.mStartDelay);
          this.onSuccess();
        } else this.onFail();
      };
      ActionPlayConfettiAnimation.prototype.playConfettiAnimation = function(confettiNode) {
        if (!confettiNode || Helper_1.Helper.isRendererCanvas() || null === this.mViewComponent) {
          this.onSuccess();
          return;
        }
        this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.BOOM));
        confettiNode.active = true;
        var confettilSkeleton = confettiNode.getComponent(sp.Skeleton);
        confettilSkeleton.setAnimation(0, "animation", false);
        confettilSkeleton.setCompleteListener(function() {
          confettiNode.active = false;
        });
      };
      ActionPlayConfettiAnimation.prototype.forceStop = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
        this.onSuccess();
      };
      return ActionPlayConfettiAnimation;
    }(AbstractAction_1.AbstractAction);
    exports.ActionPlayConfettiAnimation = ActionPlayConfettiAnimation;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlaySound": "ActionPlaySound"
  } ],
  ActionPlayHomeReachAnim: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5728F+CF5AZ4vBgvLJg7XN", "ActionPlayHomeReachAnim");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var ActionPlayConfettiAnimation_1 = require("./ActionPlayConfettiAnimation");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var ActionPlayHomeReachAnim = function(_super) {
      __extends(ActionPlayHomeReachAnim, _super);
      function ActionPlayHomeReachAnim(queueable) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionPlayHomeReachAnim", true);
        _this.mQueuable = false;
        _this.mQueuable = queueable;
        return _this;
      }
      ActionPlayHomeReachAnim.Create = function(queueable) {
        void 0 === queueable && (queueable = false);
        return new ActionPlayHomeReachAnim(queueable);
      };
      ActionPlayHomeReachAnim.prototype.queueable = function() {
        return false;
      };
      ActionPlayHomeReachAnim.prototype.getName = function() {
        return "ActionPlayHomeReachAnim";
      };
      ActionPlayHomeReachAnim.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        var persistantNode = cc.find("PersistantNode");
        var mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        var gameController = mPersistantComponent.GetGameController();
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        var spineNode = gameComponent.getHomeReachAnimNode();
        this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.HOME, true));
        this.mActionController.runAction(ActionPlayConfettiAnimation_1.ActionPlayConfettiAnimation.Create(spineNode, 0, true));
        this.onSuccess();
      };
      return ActionPlayHomeReachAnim;
    }(AbstractAction_1.AbstractAction);
    exports.ActionPlayHomeReachAnim = ActionPlayHomeReachAnim;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlayConfettiAnimation": "ActionPlayConfettiAnimation",
    "./ActionPlaySound": "ActionPlaySound"
  } ],
  ActionPlayLobbySound: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80130bZ3WFID7WKxul6NwJc", "ActionPlayLobbySound");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var LobbyComponent_1 = require("../Components/LobbyComponent");
    var SoundController_1 = require("../Controllers/SoundController");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var ActionPlayLobbySound = function(_super) {
      __extends(ActionPlayLobbySound, _super);
      function ActionPlayLobbySound(soundType, startDelay, queueable) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionPlayLobbySound", true);
        _this.mSoundType = soundType;
        _this.mStartDelay = startDelay;
        _this.mQueueable = queueable || false;
        return _this;
      }
      ActionPlayLobbySound.Create = function(soundType, startDelay, queueable) {
        return new ActionPlayLobbySound(soundType, startDelay, queueable);
      };
      ActionPlayLobbySound.prototype.queueable = function() {
        return this.mQueueable;
      };
      ActionPlayLobbySound.prototype.getName = function() {
        return "ActionPlayLobbySound";
      };
      ActionPlayLobbySound.prototype.playSound = function(callback) {
        if (SoundController_1.SoundController.getInstance().isSoundEnabled() && !SoundController_1.SoundController.getInstance().isAppInBackground()) {
          var lobbyComponent = this.mViewComponent;
          if (!lobbyComponent || !(lobbyComponent instanceof LobbyComponent_1.default)) {
            this.onSuccess();
            return;
          }
          switch (this.mSoundType) {
           case ActionPlaySound_1.SoundType.BOOM:
            lobbyComponent.boomSound.play();
            break;

           case ActionPlaySound_1.SoundType.WINNER:
            lobbyComponent.winnerSound.play();
          }
        }
        callback();
      };
      ActionPlayLobbySound.prototype.start = function() {
        var self = this;
        this.mTimeout = setTimeout(function() {
          self.playSound(function() {
            self.onSuccess();
          });
        }, this.mStartDelay);
      };
      ActionPlayLobbySound.prototype.forceStop = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
        this.onSuccess();
      };
      return ActionPlayLobbySound;
    }(AbstractAction_1.AbstractAction);
    exports.ActionPlayLobbySound = ActionPlayLobbySound;
    cc._RF.pop();
  }, {
    "../Components/LobbyComponent": "LobbyComponent",
    "../Controllers/SoundController": "SoundController",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlaySound": "ActionPlaySound"
  } ],
  ActionPlaySound: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c6e00/hQP1JGa7IDNJsMHH8", "ActionPlaySound");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var SoundController_1 = require("../Controllers/SoundController");
    var SoundType;
    (function(SoundType) {
      SoundType[SoundType["DICE_ROLL"] = 0] = "DICE_ROLL";
      SoundType[SoundType["PAWN_MOVE"] = 1] = "PAWN_MOVE";
      SoundType[SoundType["PAWN_SAFE"] = 2] = "PAWN_SAFE";
      SoundType[SoundType["PAWN_TIMER"] = 3] = "PAWN_TIMER";
      SoundType[SoundType["KILL_FX1"] = 4] = "KILL_FX1";
      SoundType[SoundType["KILL_FX2"] = 5] = "KILL_FX2";
      SoundType[SoundType["HIGHLIGHT"] = 6] = "HIGHLIGHT";
      SoundType[SoundType["GAMESTART"] = 7] = "GAMESTART";
      SoundType[SoundType["WINNER"] = 8] = "WINNER";
      SoundType[SoundType["HOME"] = 9] = "HOME";
      SoundType[SoundType["BOOM"] = 10] = "BOOM";
      SoundType[SoundType["FTUE"] = 11] = "FTUE";
    })(SoundType = exports.SoundType || (exports.SoundType = {}));
    var ActionPlaySound = function(_super) {
      __extends(ActionPlaySound, _super);
      function ActionPlaySound(soundType, queueable) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionPlaySound", true);
        _this.mSoundType = soundType;
        _this.mQueueable = queueable || false;
        return _this;
      }
      ActionPlaySound.Create = function(soundType, queueable) {
        return new ActionPlaySound(soundType, queueable);
      };
      ActionPlaySound.prototype.queueable = function() {
        return this.mQueueable;
      };
      ActionPlaySound.prototype.getName = function() {
        return "ActionPlaySound";
      };
      ActionPlaySound.prototype.start = function() {
        if (SoundController_1.SoundController.getInstance().isSoundEnabled() && !SoundController_1.SoundController.getInstance().isAppInBackground()) {
          var gameComponent = this.mViewComponent;
          if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
            this.onSuccess();
            return;
          }
          switch (this.mSoundType) {
           case SoundType.DICE_ROLL:
            gameComponent.diceRollSound.play();
            break;

           case SoundType.PAWN_MOVE:
            gameComponent.pawnMoveSound.play();
            break;

           case SoundType.PAWN_SAFE:
            gameComponent.safePawnSound.play();
            break;

           case SoundType.PAWN_TIMER:
            gameComponent.tickSound.play();
            break;

           case SoundType.KILL_FX1:
            gameComponent.killFx1.play();
            break;

           case SoundType.KILL_FX2:
            gameComponent.killFx2.play();
            break;

           case SoundType.HIGHLIGHT:
            gameComponent.highlightSound.play();
            break;

           case SoundType.GAMESTART:
            gameComponent.gameStartSound.play();
            break;

           case SoundType.WINNER:
            gameComponent.winnerSound.play();
            break;

           case SoundType.HOME:
            gameComponent.homeSound.play();
            break;

           case SoundType.BOOM:
            gameComponent.boomSound.play();
            break;

           case SoundType.FTUE:
            gameComponent.ftueSound.play();
          }
        }
        this.onSuccess();
      };
      return ActionPlaySound;
    }(AbstractAction_1.AbstractAction);
    exports.ActionPlaySound = ActionPlaySound;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Controllers/SoundController": "SoundController",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionPlayVibration: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "491ac5U6DxC3pjeN+VQ7Vaf", "ActionPlayVibration");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var SoundController_1 = require("../Controllers/SoundController");
    var SoundType;
    (function(SoundType) {
      SoundType[SoundType["DICE_ROLL"] = 0] = "DICE_ROLL";
      SoundType[SoundType["PAWN_MOVE"] = 1] = "PAWN_MOVE";
      SoundType[SoundType["PAWN_SAFE"] = 2] = "PAWN_SAFE";
      SoundType[SoundType["PAWN_TIMER"] = 3] = "PAWN_TIMER";
      SoundType[SoundType["KILL_FX1"] = 4] = "KILL_FX1";
      SoundType[SoundType["KILL_FX2"] = 5] = "KILL_FX2";
      SoundType[SoundType["HIGHLIGHT"] = 6] = "HIGHLIGHT";
      SoundType[SoundType["GAMESTART"] = 7] = "GAMESTART";
    })(SoundType = exports.SoundType || (exports.SoundType = {}));
    var ActionPlayVibration = function(_super) {
      __extends(ActionPlayVibration, _super);
      function ActionPlayVibration(queueable) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionPlayVibration", true);
        _this.mQueueable = queueable;
        return _this;
      }
      ActionPlayVibration.Create = function(queueable) {
        void 0 === queueable && (queueable = false);
        return new ActionPlayVibration(queueable);
      };
      ActionPlayVibration.prototype.queueable = function() {
        return this.mQueueable;
      };
      ActionPlayVibration.prototype.getName = function() {
        return "ActionPlayVibration";
      };
      ActionPlayVibration.prototype.start = function() {
        this.onSuccess();
        try {
          SoundController_1.SoundController.getInstance().isVibrationEnabled() && SoundController_1.SoundController.playVibration();
        } catch (e) {
          var ua = window.navigator.userAgent + "";
          this.mPresistantNodeComponent.GetStatsController().count("debug", 1, "vibration_exception", ua);
        }
      };
      return ActionPlayVibration;
    }(AbstractAction_1.AbstractAction);
    exports.ActionPlayVibration = ActionPlayVibration;
    cc._RF.pop();
  }, {
    "../Controllers/SoundController": "SoundController",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionPlayWinAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "df737TfrhFAya2saY9efU0Y", "ActionPlayWinAnimation");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var ActionPlayConfettiAnimation_1 = require("./ActionPlayConfettiAnimation");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var ActionShowQuickChatPopup_1 = require("./ActionShowQuickChatPopup");
    var ActionPlayWinAnimation = function(_super) {
      __extends(ActionPlayWinAnimation, _super);
      function ActionPlayWinAnimation() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionPlayWinAnimation", true);
        return _this;
      }
      ActionPlayWinAnimation.Create = function() {
        return new ActionPlayWinAnimation();
      };
      ActionPlayWinAnimation.prototype.queueable = function() {
        return true;
      };
      ActionPlayWinAnimation.prototype.getName = function() {
        return "ActionPlayWinAnimation";
      };
      ActionPlayWinAnimation.prototype.start = function() {
        this.mLogger.Log("starting gameEnd test action");
        var gameComponent = this.mViewComponent;
        var persistantNode = cc.find("PersistantNode");
        var mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        var gameController = mPersistantComponent.GetGameController();
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        gameComponent.hidePlayerProfilePopup();
        gameComponent.hideGenericPopup();
        var spineNodes = gameComponent.getConfettiSpineNodes();
        this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.WINNER, false));
        this.mActionController.runAction(ActionShowQuickChatPopup_1.ActionShowQuickChatPopup.Create(true));
        this.mActionController.runAction(ActionPlayConfettiAnimation_1.ActionPlayConfettiAnimation.Create(spineNodes[0], 10, false));
        this.mActionController.runAction(ActionPlayConfettiAnimation_1.ActionPlayConfettiAnimation.Create(spineNodes[1], 300, false));
        this.mActionController.runAction(ActionPlayConfettiAnimation_1.ActionPlayConfettiAnimation.Create(spineNodes[2], 500, false));
        this.onSuccess();
      };
      return ActionPlayWinAnimation;
    }(AbstractAction_1.AbstractAction);
    exports.ActionPlayWinAnimation = ActionPlayWinAnimation;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlayConfettiAnimation": "ActionPlayConfettiAnimation",
    "./ActionPlaySound": "ActionPlaySound",
    "./ActionShowQuickChatPopup": "ActionShowQuickChatPopup"
  } ],
  ActionQueueActions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fd960qf1hBA2bY1+FbrfON+", "ActionQueueActions");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Queue_1 = require("../Generic/Queue");
    var ActionQueueActions = function(_super) {
      __extends(ActionQueueActions, _super);
      function ActionQueueActions(actions) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionQueueActions", true);
        _this.mActions = new Queue_1.Queue();
        _this.mCurrentAction = null;
        for (var i = 0; i < actions.length; i++) _this.mActions.push(actions[i]);
        return _this;
      }
      ActionQueueActions.Create = function(actions) {
        return new ActionQueueActions(actions);
      };
      ActionQueueActions.prototype.queueable = function() {
        return false;
      };
      ActionQueueActions.prototype.getName = function() {
        return "ActionQueueActions";
      };
      ActionQueueActions.prototype.start = function() {
        this.processQueue();
      };
      ActionQueueActions.prototype.processQueue = function() {
        if (null == this.mCurrentAction && this.mActions.length() > 0) {
          var action = this.mActions.pop();
          this.mCurrentAction = action;
          action.initialize(this.mViewComponent, this.onCompleteSubAction.bind(this), this.mPresistantNodeComponent);
          action.start();
        }
      };
      ActionQueueActions.prototype.onCompleteSubAction = function(action) {
        this.mCurrentAction = null;
        this.isQueueEmpty() ? this.onSuccess() : this.processQueue();
      };
      ActionQueueActions.prototype.isQueueEmpty = function() {
        return 0 == this.mActions.length();
      };
      ActionQueueActions.prototype.forceStop = function() {
        this.mActions.clear();
        this.mCurrentAction && this.mCurrentAction.forceStop();
        this.onSuccess();
      };
      return ActionQueueActions;
    }(AbstractAction_1.AbstractAction);
    exports.ActionQueueActions = ActionQueueActions;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "../Generic/Queue": "Queue",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionRankUpdate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "168f4gUWjhM4Y/FqeCILnyI", "ActionRankUpdate");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var GameComponent_1 = require("../Components/GameComponent");
    var ProfileImageComponent_1 = require("../Components/ProfileImageComponent");
    var ActionRankUpdate = function(_super) {
      __extends(ActionRankUpdate, _super);
      function ActionRankUpdate(userId, index, rank) {
        var _this = _super.call(this) || this;
        _this.mUserId = userId;
        _this.mIndex = index;
        _this.mRank = rank;
        return _this;
      }
      ActionRankUpdate.Create = function(userId, index, rank) {
        return new ActionRankUpdate(userId, index, rank);
      };
      ActionRankUpdate.prototype.queueable = function() {
        return true;
      };
      ActionRankUpdate.prototype.getName = function() {
        return "ActionRankUpdate";
      };
      ActionRankUpdate.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var board = gameComponent.getBoardComponent();
        var index = this.mGameController.getModel().getIndexOfPid(this.mUserId);
        var playerSub = board.getPlayerSub(this.mIndex);
        playerSub && playerSub.getProfileNode().getComponent(ProfileImageComponent_1.default).showRankNode(true, this.mRank);
        this.onSuccess();
      };
      return ActionRankUpdate;
    }(AbstractAction_1.AbstractAction);
    exports.ActionRankUpdate = ActionRankUpdate;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/ProfileImageComponent": "ProfileImageComponent",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionRepositionForHighlight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b4a8b/42fZB6InffyByZVAq", "ActionRepositionForHighlight");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var Config_1 = require("../Config");
    var ActionRepositionForHighlight = function(_super) {
      __extends(ActionRepositionForHighlight, _super);
      function ActionRepositionForHighlight(cIndex, uIndex, highlightPawn) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionRepositionForHighlight", true);
        _this.mCellIndex = cIndex;
        _this.mUserIndex = uIndex;
        _this.mHighlightPawn = highlightPawn;
        return _this;
      }
      ActionRepositionForHighlight.Create = function(cIndex, uIndex, highlightPawn) {
        return new ActionRepositionForHighlight(cIndex, uIndex, highlightPawn);
      };
      ActionRepositionForHighlight.prototype.queueable = function() {
        return true;
      };
      ActionRepositionForHighlight.prototype.getName = function() {
        return "ActionRepositionForHighlight";
      };
      ActionRepositionForHighlight.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        if (0 == this.mGameController.getHighlightedPawns().length) {
          this.onSuccess();
          return;
        }
        this.mHighlightPawn.startHighlight();
        if (-1 == this.mCellIndex) {
          this.onSuccess();
          return;
        }
        var pawnsContainer = gameComponent.getPawnContainer();
        var pawns = pawnsContainer.getPawnsAtCellIndex(this.mCellIndex, this.mUserIndex);
        var newPawns = [];
        for (var i = 0; i < pawns.length; i++) {
          var pComponent = pawns[i];
          if (pComponent.getUserIndex() == this.mUserIndex) {
            newPawns.push(pComponent);
            pawns.splice(i, 1);
            break;
          }
        }
        for (var i = 0; i < pawns.length; i++) {
          var pComponent = pawns[i];
          newPawns.push(pComponent);
        }
        this.mLogger.Log("Pawns at index is" + newPawns.length);
        if (newPawns.length > 0 && newPawns.length <= 7) {
          var config1 = Config_1.Config.PAWN_HIGHLIGHT_CONFIG[newPawns.length.toString()];
          for (var i = 0; i < newPawns.length; i++) {
            var key = (i + 1).toString();
            var pawn = newPawns[i];
            var positionConfig = config1[key];
            var pOffset = new cc.Vec2(parseFloat(positionConfig["p"]["x"]), parseFloat(positionConfig["p"]["y"]));
            var scale = parseFloat(positionConfig["s"]);
            var cellPosition = pawnsContainer.getPositionPawn(pawn.getCellIndex(), pawn.getUserIndex(), pawn.getPawnIndex());
            pawn.node.setPosition(cellPosition.add(pOffset));
            pawn.node.scale = scale;
          }
        }
        this.onSuccess();
      };
      return ActionRepositionForHighlight;
    }(AbstractAction_1.AbstractAction);
    exports.ActionRepositionForHighlight = ActionRepositionForHighlight;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Config": "Config",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionRepositionPawns: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35efay0tdpAro+oBa6DGiey", "ActionRepositionPawns");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var Config_1 = require("../Config");
    var ActionRepositionPawns = function(_super) {
      __extends(ActionRepositionPawns, _super);
      function ActionRepositionPawns(cIndex, uIndex) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionRepositionPawns", true);
        _this.mCellIndex = cIndex;
        _this.mUserIndex = uIndex;
        return _this;
      }
      ActionRepositionPawns.Create = function(cIndex, uIndex) {
        return new ActionRepositionPawns(cIndex, uIndex);
      };
      ActionRepositionPawns.prototype.queueable = function() {
        return true;
      };
      ActionRepositionPawns.prototype.getName = function() {
        return "ActionRepositionPawns";
      };
      ActionRepositionPawns.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (-1 == this.mCellIndex || !gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnsContainer = gameComponent.getPawnContainer();
        var pawns = pawnsContainer.getPawnsAtCellIndex(this.mCellIndex, this.mUserIndex);
        this.mLogger.Log("Pawns at index is" + pawns.length);
        if (pawns.length > 0 && pawns.length <= 7) {
          var config1 = Config_1.Config.PAWN_POSITION_CONFIG[pawns.length.toString()];
          for (var i = 0; i < pawns.length; i++) {
            var key = (i + 1).toString();
            var pawn = pawns[i];
            var positionConfig = config1[key];
            var pOffset = new cc.Vec2(parseFloat(positionConfig["p"]["x"]), parseFloat(positionConfig["p"]["y"]));
            var scale = parseFloat(positionConfig["s"]);
            var cellPosition = pawnsContainer.getPositionPawn(pawn.getCellIndex(), pawn.getUserIndex(), pawn.getPawnIndex());
            pawn.node.setPosition(cellPosition.add(pOffset));
            pawn.node.scale = scale;
          }
        }
        this.onSuccess();
      };
      return ActionRepositionPawns;
    }(AbstractAction_1.AbstractAction);
    exports.ActionRepositionPawns = ActionRepositionPawns;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Config": "Config",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionResetOnPlayerWin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cec92eLVR1INYumLeae71Pg", "ActionResetOnPlayerWin");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionResetOnPlayerWin = function(_super) {
      __extends(ActionResetOnPlayerWin, _super);
      function ActionResetOnPlayerWin(uIndex) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionResetOnPlayerWin", true);
        _this.mUserIndex = uIndex;
        return _this;
      }
      ActionResetOnPlayerWin.Create = function(uIndex) {
        return new ActionResetOnPlayerWin(uIndex);
      };
      ActionResetOnPlayerWin.prototype.queueable = function() {
        return true;
      };
      ActionResetOnPlayerWin.prototype.getName = function() {
        return "ActionResetOnPlayerWin";
      };
      ActionResetOnPlayerWin.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnsContainer = gameComponent.getPawnContainer();
        pawnsContainer.hidePawnsForUser(this.mUserIndex);
        this.onSuccess();
      };
      return ActionResetOnPlayerWin;
    }(AbstractAction_1.AbstractAction);
    exports.ActionResetOnPlayerWin = ActionResetOnPlayerWin;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowChat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b85d0d69lHD6tCMVa+3CyD", "ActionShowChat");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var GameComponent_1 = require("../Components/GameComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var ActionShowChat = function(_super) {
      __extends(ActionShowChat, _super);
      function ActionShowChat(userId, index, chatMessage) {
        var _this = _super.call(this) || this;
        _this.mTimeout = null;
        _this.mUserId = userId;
        _this.mIndex = index;
        _this.mChatModel = chatMessage;
        return _this;
      }
      ActionShowChat.Create = function(userId, index, chatMessage) {
        return new ActionShowChat(userId, index, chatMessage);
      };
      ActionShowChat.prototype.queueable = function() {
        return true;
      };
      ActionShowChat.prototype.getName = function() {
        return "ActionShowChat";
      };
      ActionShowChat.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        var isGameOver = this.mGameController.isGameOver();
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default) || !this.mGameController.validateIndex(this.mIndex) || isGameOver) {
          this.onSuccess();
          return;
        }
        var board = gameComponent.getBoardComponent();
        var playerSub = board.getPlayerSub(this.mIndex);
        var timeout = 3e3;
        if (playerSub) {
          var historyChatPopup = gameComponent.getChatHistoryPopupComponent();
          if (this.mChatModel.mIsQuickChat) {
            var message = LocalizationController_1.LocalizationController.getInstance().LocalizedString(this.mChatModel.getQuickChatText(), {});
            playerSub.getChatComponent().showMessage(message);
            historyChatPopup.showMessage(this.mChatModel.mName, this.mIndex, message);
          } else if (this.mChatModel.mIsEmoji) {
            playerSub.getChatComponent().showEmoji(this.mChatModel.getEmojiId());
            historyChatPopup.showEmoji(this.mChatModel.mName, this.mIndex, this.mChatModel.getEmojiId());
          } else if (this.mChatModel.mIsUserLeaveMessage) {
            historyChatPopup.showUserLeftMessage(this.mChatModel.mMessage);
            timeout = 0;
          } else {
            playerSub.getChatComponent().showMessage(this.mChatModel.mMessage);
            historyChatPopup.showMessage(this.mChatModel.mName, this.mIndex, this.mChatModel.mMessage);
            timeout = 4e3;
          }
        }
        var self = this;
        this.mTimeout = setTimeout(function() {
          self.onSuccess();
        }, timeout);
      };
      ActionShowChat.prototype.isChatAction = function() {
        return true;
      };
      ActionShowChat.prototype.getIndex = function() {
        return this.mIndex;
      };
      ActionShowChat.prototype.forceStop = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
        this.onSuccess();
      };
      return ActionShowChat;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowChat = ActionShowChat;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Controllers/LocalizationController": "LocalizationController",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowExitConfirmationPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c4353LyeuRANIkNx/izlLPw", "ActionShowExitConfirmationPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionShowExitConfirmationPopup = function(_super) {
      __extends(ActionShowExitConfirmationPopup, _super);
      function ActionShowExitConfirmationPopup() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowExitConfirmationPopup", true);
        _this.mGameComponent = null;
        return _this;
      }
      ActionShowExitConfirmationPopup.Create = function() {
        return new ActionShowExitConfirmationPopup();
      };
      ActionShowExitConfirmationPopup.prototype.queueable = function() {
        return false;
      };
      ActionShowExitConfirmationPopup.prototype.getName = function() {
        return "ActionShowExitConfirmationPopup";
      };
      ActionShowExitConfirmationPopup.prototype.start = function() {
        if (!(this.mViewComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        this.mGameComponent = this.mViewComponent;
        this.mGameComponent.BackPressed();
        this.onSuccess();
      };
      return ActionShowExitConfirmationPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowExitConfirmationPopup = ActionShowExitConfirmationPopup;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowFriendOfflinePopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4660a+fQt5Ds7+9zsWiI9CK", "ActionShowFriendOfflinePopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var LobbyComponent_1 = require("../Components/LobbyComponent");
    var ActionShowFriendOfflinePopup = function(_super) {
      __extends(ActionShowFriendOfflinePopup, _super);
      function ActionShowFriendOfflinePopup() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowFriendOfflinePopup", true);
        _this.mLobbyComponent = null;
        return _this;
      }
      ActionShowFriendOfflinePopup.Create = function() {
        return new ActionShowFriendOfflinePopup();
      };
      ActionShowFriendOfflinePopup.prototype.queueable = function() {
        return false;
      };
      ActionShowFriendOfflinePopup.prototype.getName = function() {
        return "ActionShowFriendOfflinePopup";
      };
      ActionShowFriendOfflinePopup.prototype.start = function() {
        if (!(this.mViewComponent instanceof LobbyComponent_1.default)) {
          this.onSuccess();
          return;
        }
        this.mLobbyComponent = this.mViewComponent;
        this.mLobbyComponent.showFriendOfflinePopup();
        this.onSuccess();
      };
      return ActionShowFriendOfflinePopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowFriendOfflinePopup = ActionShowFriendOfflinePopup;
    cc._RF.pop();
  }, {
    "../Components/LobbyComponent": "LobbyComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowInviteWaitingPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "13c91SUyRtPUYu3m8zeYJwn", "ActionShowInviteWaitingPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionShowInviteWaitingPopup = function(_super) {
      __extends(ActionShowInviteWaitingPopup, _super);
      function ActionShowInviteWaitingPopup(show, hostInit) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowInviteWaitingPopup", true);
        _this.mGameComponent = null;
        _this.mShow = show;
        _this.mHostInit = hostInit;
        return _this;
      }
      ActionShowInviteWaitingPopup.Create = function(show, hostInit) {
        void 0 === show && (show = true);
        void 0 === hostInit && (hostInit = false);
        return new ActionShowInviteWaitingPopup(show, hostInit);
      };
      ActionShowInviteWaitingPopup.prototype.queueable = function() {
        return false;
      };
      ActionShowInviteWaitingPopup.prototype.getName = function() {
        return "ActionShowInviteWaitingPopup";
      };
      ActionShowInviteWaitingPopup.prototype.start = function() {
        if (!(this.mViewComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        this.mGameComponent = this.mViewComponent;
        this.mGameComponent.showInviteWaitingPopup(this.mShow, this.mHostInit);
        this.onSuccess();
      };
      return ActionShowInviteWaitingPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowInviteWaitingPopup = ActionShowInviteWaitingPopup;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowJoiningBanner: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "77dd1pZPz5L2rn4FBJppqA9", "ActionShowJoiningBanner");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionShowJoiningBanner = function(_super) {
      __extends(ActionShowJoiningBanner, _super);
      function ActionShowJoiningBanner(hide) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowJoiningBanner", true);
        _this.mHidePoppup = false;
        _this.mHidePoppup = !!hide;
        return _this;
      }
      ActionShowJoiningBanner.Create = function(hide) {
        return new ActionShowJoiningBanner(hide);
      };
      ActionShowJoiningBanner.prototype.queueable = function() {
        return false;
      };
      ActionShowJoiningBanner.prototype.getName = function() {
        return "ActionShowJoiningBanner";
      };
      ActionShowJoiningBanner.prototype.start = function() {
        this.mLogger.Log("starting gameEnd test action");
        var lobbyComponent = this.mViewComponent;
        if (!lobbyComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        lobbyComponent.showJoiningBanner(!this.mHidePoppup);
        this.onSuccess();
      };
      return ActionShowJoiningBanner;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowJoiningBanner = ActionShowJoiningBanner;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowLeaderBoardPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c1334Zp475AB7pDKgDYDW76", "ActionShowLeaderBoardPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var LobbyComponent_1 = require("../Components/LobbyComponent");
    var ActionShowLeaderBoardPopup = function(_super) {
      __extends(ActionShowLeaderBoardPopup, _super);
      function ActionShowLeaderBoardPopup() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowLeaderBoardPopup", true);
        return _this;
      }
      ActionShowLeaderBoardPopup.Create = function() {
        return new ActionShowLeaderBoardPopup();
      };
      ActionShowLeaderBoardPopup.prototype.queueable = function() {
        return false;
      };
      ActionShowLeaderBoardPopup.prototype.getName = function() {
        return "ActionShowLeaderBoardPopup";
      };
      ActionShowLeaderBoardPopup.prototype.start = function() {
        this.mLogger.Log("starting gameEnd test action");
        var lobbyComponent = this.mViewComponent;
        var persistantNode = cc.find("PersistantNode");
        var mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        if (!lobbyComponent || !(lobbyComponent instanceof LobbyComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var leaderBoardPopup = lobbyComponent.getLeaderBoardPopup();
        leaderBoardPopup && leaderBoardPopup.initialize();
      };
      return ActionShowLeaderBoardPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowLeaderBoardPopup = ActionShowLeaderBoardPopup;
    cc._RF.pop();
  }, {
    "../Components/LobbyComponent": "LobbyComponent",
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowLobbyAutoPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8da9cvcRMhNjpLXQ131CDnA", "ActionShowLobbyAutoPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var LobbyComponent_1 = require("../Components/LobbyComponent");
    var ActionShowLobbyAutoPopup = function(_super) {
      __extends(ActionShowLobbyAutoPopup, _super);
      function ActionShowLobbyAutoPopup() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowLobbyAutoPopup", true);
        return _this;
      }
      ActionShowLobbyAutoPopup.Create = function() {
        return new ActionShowLobbyAutoPopup();
      };
      ActionShowLobbyAutoPopup.prototype.queueable = function() {
        return false;
      };
      ActionShowLobbyAutoPopup.prototype.getName = function() {
        return "ActionShowLobbyAutoPopup";
      };
      ActionShowLobbyAutoPopup.prototype.start = function() {
        var lobbyComponent = this.mViewComponent;
        if (!lobbyComponent || !(lobbyComponent instanceof LobbyComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        lobbyComponent.isAutoPopupShowing() || lobbyComponent.checkAndShowLobbyPopup();
        this.onSuccess();
      };
      return ActionShowLobbyAutoPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowLobbyAutoPopup = ActionShowLobbyAutoPopup;
    cc._RF.pop();
  }, {
    "../Components/LobbyComponent": "LobbyComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowNewRankPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3675agZbo9MLaqNpQQxs5qq", "ActionShowNewRankPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var LobbyComponent_1 = require("../Components/LobbyComponent");
    var ActionShowNewRankPopup = function(_super) {
      __extends(ActionShowNewRankPopup, _super);
      function ActionShowNewRankPopup() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowNewRankPopup", true);
        return _this;
      }
      ActionShowNewRankPopup.Create = function() {
        return new ActionShowNewRankPopup();
      };
      ActionShowNewRankPopup.prototype.queueable = function() {
        return false;
      };
      ActionShowNewRankPopup.prototype.getName = function() {
        return "ActionShowNewRankPopup";
      };
      ActionShowNewRankPopup.prototype.start = function() {
        var lobbyComponent = this.mViewComponent;
        if (!lobbyComponent || !(lobbyComponent instanceof LobbyComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        lobbyComponent.showNewRankPopup();
        this.onSuccess();
      };
      return ActionShowNewRankPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowNewRankPopup = ActionShowNewRankPopup;
    cc._RF.pop();
  }, {
    "../Components/LobbyComponent": "LobbyComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowNotEnoughCurrenyPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8a72bNthnZA4rjQLZpwLZwG", "ActionShowNotEnoughCurrenyPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionShowNotEnoughCurrenyPopup = function(_super) {
      __extends(ActionShowNotEnoughCurrenyPopup, _super);
      function ActionShowNotEnoughCurrenyPopup() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowNotEnoughCurrenyPopup", true);
        return _this;
      }
      ActionShowNotEnoughCurrenyPopup.Create = function() {
        return new ActionShowNotEnoughCurrenyPopup();
      };
      ActionShowNotEnoughCurrenyPopup.prototype.queueable = function() {
        return false;
      };
      ActionShowNotEnoughCurrenyPopup.prototype.getName = function() {
        return "ActionShowNotEnoughCurrenyPopup";
      };
      ActionShowNotEnoughCurrenyPopup.prototype.start = function() {
        var viewComponent = this.mViewComponent;
        viewComponent && viewComponent.showNotEnoughChipsPopup();
        this.onSuccess();
      };
      return ActionShowNotEnoughCurrenyPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowNotEnoughCurrenyPopup = ActionShowNotEnoughCurrenyPopup;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowPointerAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f75fI4etFGE4CPzV9hMRl7", "ActionShowPointerAnimation");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Constants_1 = require("../Constants");
    var ActionShowPointerAnimation = function(_super) {
      __extends(ActionShowPointerAnimation, _super);
      function ActionShowPointerAnimation(stopAnim) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowPointerAnimation", true);
        _this.mStopAnimation = stopAnim;
        return _this;
      }
      ActionShowPointerAnimation.Create = function(stopAnim) {
        void 0 === stopAnim && (stopAnim = false);
        return new ActionShowPointerAnimation(stopAnim);
      };
      ActionShowPointerAnimation.prototype.queueable = function() {
        return true;
      };
      ActionShowPointerAnimation.prototype.getName = function() {
        return "ActionShowPointerAnimation";
      };
      ActionShowPointerAnimation.prototype.start = function() {
        if (!(this.mViewComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        this.mGameComponent = this.mViewComponent;
        this.mPointerAnim = this.mGameComponent.pointer.getComponent(cc.Animation);
        var power_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        var animName = 2 == power_variant ? "powerupPointer" : "pointer";
        if (this.mStopAnimation) {
          this.mPointerAnim.stop(animName);
          this.mGameComponent.pointer.active = false;
        } else {
          this.mGameComponent.pointer.active = true;
          this.mPointerAnim && this.mPointerAnim.play(animName);
        }
        this.onSuccess();
      };
      ActionShowPointerAnimation.prototype.forceStop = function() {
        this.mGameComponent && this.mGameComponent.pointer && (this.mGameComponent.pointer.active = false);
        this.mPointerAnim && this.mPointerAnim.stop();
        this.onSuccess();
      };
      return ActionShowPointerAnimation;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowPointerAnimation = ActionShowPointerAnimation;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowQuickChatPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ba30+01BVHYrXOXAAPCd8N", "ActionShowQuickChatPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var ActionShowQuickChatPopup = function(_super) {
      __extends(ActionShowQuickChatPopup, _super);
      function ActionShowQuickChatPopup(hide) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowQuickChatPopup", true);
        _this.mHidePoppup = false;
        _this.mHidePoppup = !!hide;
        return _this;
      }
      ActionShowQuickChatPopup.Create = function(hide) {
        return new ActionShowQuickChatPopup(hide);
      };
      ActionShowQuickChatPopup.prototype.queueable = function() {
        return false;
      };
      ActionShowQuickChatPopup.prototype.getName = function() {
        return "ActionShowQuickChatPopup";
      };
      ActionShowQuickChatPopup.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        var persistantNode = cc.find("PersistantNode");
        var mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        var gameController = mPersistantComponent.GetGameController();
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        this.mHidePoppup ? gameComponent.hideQuickChatPopup() : gameComponent.showQuickChatPopup();
        this.onSuccess();
      };
      return ActionShowQuickChatPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowQuickChatPopup = ActionShowQuickChatPopup;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowReconnectionPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "124d3DPmslIOKUiKa3Luqhf", "ActionShowReconnectionPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionShowReconnectionPopup = function(_super) {
      __extends(ActionShowReconnectionPopup, _super);
      function ActionShowReconnectionPopup(startDelay) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowReconnectionPopup", true);
        _this.mStartDelay = 0;
        startDelay && (_this.mStartDelay = startDelay);
        return _this;
      }
      ActionShowReconnectionPopup.Create = function(startDelay) {
        return new ActionShowReconnectionPopup(startDelay);
      };
      ActionShowReconnectionPopup.prototype.queueable = function() {
        return true;
      };
      ActionShowReconnectionPopup.prototype.getName = function() {
        return "ActionShowReconnectionPopup";
      };
      ActionShowReconnectionPopup.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        gameComponent.showReconnectionPopup();
        this.onSuccess();
      };
      return ActionShowReconnectionPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowReconnectionPopup = ActionShowReconnectionPopup;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowResultsPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "73a96PdarJNEIa/KjdX5zRQ", "ActionShowResultsPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var ActionShowResultsPopup = function(_super) {
      __extends(ActionShowResultsPopup, _super);
      function ActionShowResultsPopup(startDelay) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowResultsPopup", true);
        _this.mStartDelay = 0;
        _this.mTimeout = null;
        startDelay && (_this.mStartDelay = startDelay);
        return _this;
      }
      ActionShowResultsPopup.Create = function(startDelay) {
        return new ActionShowResultsPopup(startDelay);
      };
      ActionShowResultsPopup.prototype.queueable = function() {
        return true;
      };
      ActionShowResultsPopup.prototype.getName = function() {
        return "ActionShowResultsPopup";
      };
      ActionShowResultsPopup.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        var persistantNode = cc.find("PersistantNode");
        var mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        var gameController = mPersistantComponent.GetGameController();
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        var self = this;
        this.mTimeout = setTimeout(function() {
          gameComponent && gameComponent.showResultsScreenPopup();
          mPersistantComponent.GetGameController().hideFtue();
          self.onSuccess();
        }, 1e3);
      };
      ActionShowResultsPopup.prototype.forceStop = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
        this.onSuccess();
      };
      return ActionShowResultsPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowResultsPopup = ActionShowResultsPopup;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionShowWaitingForHostPopup: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "354667RHNBKZJ5Jb9jXwrmi", "ActionShowWaitingForHostPopup");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionShowWaitingForHostPopup = function(_super) {
      __extends(ActionShowWaitingForHostPopup, _super);
      function ActionShowWaitingForHostPopup(show) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionShowWaitingForHostPopup", true);
        _this.mGameComponent = null;
        _this.mShow = show;
        return _this;
      }
      ActionShowWaitingForHostPopup.Create = function(show) {
        void 0 === show && (show = true);
        return new ActionShowWaitingForHostPopup(show);
      };
      ActionShowWaitingForHostPopup.prototype.queueable = function() {
        return false;
      };
      ActionShowWaitingForHostPopup.prototype.getName = function() {
        return "ActionShowWaitingForHostPopup";
      };
      ActionShowWaitingForHostPopup.prototype.start = function() {
        if (!(this.mViewComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        this.mGameComponent = this.mViewComponent;
        this.mGameComponent.showInviteWaitingPopup(this.mShow);
        this.onSuccess();
      };
      return ActionShowWaitingForHostPopup;
    }(AbstractAction_1.AbstractAction);
    exports.ActionShowWaitingForHostPopup = ActionShowWaitingForHostPopup;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionSortPawns: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "da0f3hk/xdDuZyOUliX2PIf", "ActionSortPawns");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionSortPawns = function(_super) {
      __extends(ActionSortPawns, _super);
      function ActionSortPawns() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionSortPawns", true);
        return _this;
      }
      ActionSortPawns.Create = function() {
        return new ActionSortPawns();
      };
      ActionSortPawns.prototype.queueable = function() {
        return true;
      };
      ActionSortPawns.prototype.getName = function() {
        return "ActionSortPawns";
      };
      ActionSortPawns.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var pawnMap = pawnContainer.getPawnsMap();
        var pawns = [];
        for (var i = 0; i < 4; i++) if (pawnMap[i]) for (var j = 0; j < pawnMap[i].length; j++) pawns.push(pawnMap[i][j]);
        pawns.sort(function(a, b) {
          return a.node.getPositionY() < b.node.getPositionY() ? 1 : a.node.getPositionY() > b.node.getPositionY() ? -1 : 0;
        });
        for (var index = 0; index < pawns.length; index++) pawns[index].node.setLocalZOrder(100 + index);
        this.onSuccess();
      };
      return ActionSortPawns;
    }(AbstractAction_1.AbstractAction);
    exports.ActionSortPawns = ActionSortPawns;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionStartGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "172d59O2TZGoKCwdsl/67bM", "ActionStartGame");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionStartGame = function(_super) {
      __extends(ActionStartGame, _super);
      function ActionStartGame() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionStartGame", true);
        return _this;
      }
      ActionStartGame.Create = function() {
        return new ActionStartGame();
      };
      ActionStartGame.prototype.queueable = function() {
        return false;
      };
      ActionStartGame.prototype.getName = function() {
        return "ActionStartGame";
      };
      ActionStartGame.prototype.start = function() {
        this.mLogger.Log("starting gameEnd test action");
        var lobbyComponent = this.mViewComponent;
        if (!lobbyComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        lobbyComponent.startGameAsync();
        this.onSuccess();
      };
      return ActionStartGame;
    }(AbstractAction_1.AbstractAction);
    exports.ActionStartGame = ActionStartGame;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionTestDiceRoll: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eaa24MOUOtHIptRSIkLtxX/", "ActionTestDiceRoll");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionTestDiceRoll = function(_super) {
      __extends(ActionTestDiceRoll, _super);
      function ActionTestDiceRoll() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestDiceRoll", true);
        _this.mTimeout1 = null;
        _this.mTimeout2 = null;
        _this.mTimeout3 = null;
        return _this;
      }
      ActionTestDiceRoll.Create = function() {
        return new ActionTestDiceRoll();
      };
      ActionTestDiceRoll.prototype.queueable = function() {
        return false;
      };
      ActionTestDiceRoll.prototype.getName = function() {
        return "ActionTestDiceRoll";
      };
      ActionTestDiceRoll.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var boardComponent = gameComponent.getBoardComponent();
        var playerSub = boardComponent.getPlayerSub(0);
        if (playerSub) {
          playerSub.getDice().activateRoll();
          this.mTimeout1 = setTimeout(function() {
            playerSub.getDice().showRollOp(5);
          }, 1e4);
          this.mTimeout2 = setTimeout(function() {
            playerSub.getDice().showOverlay();
          }, 12e3);
          this.mTimeout3 = setTimeout(function() {
            playerSub.getDice().deactivateRoll();
          }, 14e3);
        }
        this.onSuccess();
      };
      ActionTestDiceRoll.prototype.forceStop = function() {
        this.mTimeout1 && clearTimeout(this.mTimeout1);
        this.mTimeout2 && clearTimeout(this.mTimeout2);
        this.mTimeout3 && clearTimeout(this.mTimeout3);
        this.mTimeout1 = null;
        this.mTimeout2 = null;
        this.mTimeout3 = null;
        this.onSuccess();
      };
      return ActionTestDiceRoll;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestDiceRoll = ActionTestDiceRoll;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionTestGameEnd: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b6c3cUjX9LX6lsxlj2zPfb", "ActionTestGameEnd");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionPlayConfettiAnimation_1 = require("./ActionPlayConfettiAnimation");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var ActionTestGameEnd = function(_super) {
      __extends(ActionTestGameEnd, _super);
      function ActionTestGameEnd() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestGameEnd", true);
        return _this;
      }
      ActionTestGameEnd.Create = function() {
        return new ActionTestGameEnd();
      };
      ActionTestGameEnd.prototype.queueable = function() {
        return false;
      };
      ActionTestGameEnd.prototype.getName = function() {
        return "ActionTestGameEnd";
      };
      ActionTestGameEnd.prototype.start = function() {
        this.mLogger.Log("starting gameEnd test action");
        var gameComponent = this.mViewComponent;
        var persistantNode = cc.find("PersistantNode");
        var mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        var gameController = mPersistantComponent.GetGameController();
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var spineNodes = gameComponent.getConfettiSpineNodes();
        this.mActionController.runAction(ActionPlayConfettiAnimation_1.ActionPlayConfettiAnimation.Create(spineNodes[0], 0));
        this.onSuccess();
      };
      return ActionTestGameEnd;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestGameEnd = ActionTestGameEnd;
    cc._RF.pop();
  }, {
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionPlayConfettiAnimation": "ActionPlayConfettiAnimation"
  } ],
  ActionTestKilledPawnMovement: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36610sYqZBFh56pGAnhJSv3", "ActionTestKilledPawnMovement");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionUpdateKilledPawnPosition_1 = require("./ActionUpdateKilledPawnPosition");
    var ActionTestKilledPawnMovement = function(_super) {
      __extends(ActionTestKilledPawnMovement, _super);
      function ActionTestKilledPawnMovement() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestKilledPawnMovement", true);
        return _this;
      }
      ActionTestKilledPawnMovement.Create = function() {
        return new ActionTestKilledPawnMovement();
      };
      ActionTestKilledPawnMovement.prototype.queueable = function() {
        return false;
      };
      ActionTestKilledPawnMovement.prototype.getName = function() {
        return "ActionTestKilledPawnMovement";
      };
      ActionTestKilledPawnMovement.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var uIndx = pawnContainer.getFirstUserIndex();
        this.mActionController.runAction(ActionUpdateKilledPawnPosition_1.ActionUpdateKilledPawnPosition.Create(uIndx, 0, [ 6, 5, 4, 3, 2, 1, -1 ], -1));
        this.onSuccess();
      };
      return ActionTestKilledPawnMovement;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestKilledPawnMovement = ActionTestKilledPawnMovement;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionUpdateKilledPawnPosition": "ActionUpdateKilledPawnPosition"
  } ],
  ActionTestPawnHighlight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4bc3c7b17RGMaEwEfItd/UW", "ActionTestPawnHighlight");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionDoPawnHighlight_1 = require("./ActionDoPawnHighlight");
    var ActionTestPawnHighlight = function(_super) {
      __extends(ActionTestPawnHighlight, _super);
      function ActionTestPawnHighlight() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestPawnHighlight", true);
        _this.mTimeout = null;
        return _this;
      }
      ActionTestPawnHighlight.Create = function() {
        return new ActionTestPawnHighlight();
      };
      ActionTestPawnHighlight.prototype.queueable = function() {
        return false;
      };
      ActionTestPawnHighlight.prototype.getName = function() {
        return "ActionTestPawnHighlight";
      };
      ActionTestPawnHighlight.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var uIndx = pawnContainer.getFirstUserIndex();
        var action = ActionDoPawnHighlight_1.ActionDoPawnHighlight.Create(uIndx, [ 0, 1, 2 ]);
        this.mActionController.runAction(action);
        this.mTimeout = setTimeout(function() {
          action.forceStop();
        }, 3e3);
        this.onSuccess();
      };
      ActionTestPawnHighlight.prototype.forceStop = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
        this.onSuccess();
      };
      return ActionTestPawnHighlight;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestPawnHighlight = ActionTestPawnHighlight;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionDoPawnHighlight": "ActionDoPawnHighlight"
  } ],
  ActionTestPawnMovement: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "197acCHMeZCZ5ZYQYAJnm4M", "ActionTestPawnMovement");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionUpdatePawnPosition_1 = require("./ActionUpdatePawnPosition");
    var ActionTestPawnMovement = function(_super) {
      __extends(ActionTestPawnMovement, _super);
      function ActionTestPawnMovement() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestPawnMovement", true);
        return _this;
      }
      ActionTestPawnMovement.Create = function() {
        return new ActionTestPawnMovement();
      };
      ActionTestPawnMovement.prototype.queueable = function() {
        return false;
      };
      ActionTestPawnMovement.prototype.getName = function() {
        return "ActionTestPawnMovement";
      };
      ActionTestPawnMovement.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var uIndx = pawnContainer.getFirstUserIndex();
        this.mActionController.runAction(ActionUpdatePawnPosition_1.ActionUpdatePawnPosition.Create(uIndx, 0, [ 0, 1, 2, 3, 4, 5, 6 ], 6));
        this.onSuccess();
      };
      return ActionTestPawnMovement;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestPawnMovement = ActionTestPawnMovement;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionUpdatePawnPosition": "ActionUpdatePawnPosition"
  } ],
  ActionTestPawnPositions: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "924dbinYZJGhLzyNpWyJ0yc", "ActionTestPawnPositions");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionTestPawnPositions = function(_super) {
      __extends(ActionTestPawnPositions, _super);
      function ActionTestPawnPositions() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestPawnPositions", true);
        return _this;
      }
      ActionTestPawnPositions.Create = function() {
        return new ActionTestPawnPositions();
      };
      ActionTestPawnPositions.prototype.queueable = function() {
        return false;
      };
      ActionTestPawnPositions.prototype.getName = function() {
        return "ActionTestPawnPositions";
      };
      ActionTestPawnPositions.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        pawnContainer.addPawnsAll();
        this.onSuccess();
      };
      return ActionTestPawnPositions;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestPawnPositions = ActionTestPawnPositions;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionTestProfileTimer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9e2cMGZdFE2qyPgK1iDldx", "ActionTestProfileTimer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionTestProfileTimer = function(_super) {
      __extends(ActionTestProfileTimer, _super);
      function ActionTestProfileTimer() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestProfileTimer", true);
        _this.mTimeout1 = null;
        _this.mTimeout2 = null;
        _this.mTimeout3 = null;
        return _this;
      }
      ActionTestProfileTimer.Create = function() {
        return new ActionTestProfileTimer();
      };
      ActionTestProfileTimer.prototype.queueable = function() {
        return false;
      };
      ActionTestProfileTimer.prototype.getName = function() {
        return "ActionTestProfileTimer";
      };
      ActionTestProfileTimer.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var boardComponent = gameComponent.getBoardComponent();
        var profileSub = boardComponent.getPlayerSub(0);
        if (profileSub) {
          var player = this.mPlayerController.getModel();
          profileSub.getProfileNode().initialize(player.getPhotoUrl());
          this.mTimeout1 = setTimeout(function() {
            profileSub.getProfileNode().startTimer(10);
          }, 5e3);
          this.mTimeout2 = setTimeout(function() {
            profileSub.getProfileNode().setTimerOffset(5);
          }, 7e3);
          this.mTimeout3 = setTimeout(function() {
            profileSub.getProfileNode().stopTimer();
          }, 9e3);
        }
        this.onSuccess();
      };
      ActionTestProfileTimer.prototype.forceStop = function() {
        this.mTimeout1 && clearTimeout(this.mTimeout1);
        this.mTimeout2 && clearTimeout(this.mTimeout2);
        this.mTimeout3 && clearTimeout(this.mTimeout3);
        this.mTimeout1 = null;
        this.mTimeout2 = null;
        this.mTimeout3 = null;
        this.onSuccess();
      };
      return ActionTestProfileTimer;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestProfileTimer = ActionTestProfileTimer;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionTestReconnect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42eecVkOHlFX7e0XXjQLFsV", "ActionTestReconnect");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionUpdateGameState_1 = require("./ActionUpdateGameState");
    var ActionTestReconnect = function(_super) {
      __extends(ActionTestReconnect, _super);
      function ActionTestReconnect() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestReconnect", true);
        return _this;
      }
      ActionTestReconnect.Create = function() {
        return new ActionTestReconnect();
      };
      ActionTestReconnect.prototype.queueable = function() {
        return false;
      };
      ActionTestReconnect.prototype.getName = function() {
        return "ActionTestReconnect";
      };
      ActionTestReconnect.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var boardComponent = gameComponent.getBoardComponent();
        var pawnContainer = gameComponent.getPawnContainer();
        var uIndx = pawnContainer.getFirstUserIndex();
        pawnContainer.movePawn(uIndx, 0, -2);
        pawnContainer.movePawn(uIndx, 1, -2);
        pawnContainer.movePawn(uIndx, 2, -2);
        pawnContainer.movePawn((uIndx + 2) % 4, 0, -2);
        pawnContainer.movePawn((uIndx + 2) % 4, 1, -2);
        pawnContainer.movePawn((uIndx + 2) % 4, 2, -2);
        this.mActionController.runAction(ActionUpdateGameState_1.ActionUpdateGameState.Create());
        this.onSuccess();
      };
      return ActionTestReconnect;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestReconnect = ActionTestReconnect;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionUpdateGameState": "ActionUpdateGameState"
  } ],
  ActionTestRepositionPawns: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0229c5QT15A1pqXYqeIeO5S", "ActionTestRepositionPawns");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var ActionRepositionPawns_1 = require("./ActionRepositionPawns");
    var ActionSortPawns_1 = require("./ActionSortPawns");
    var ActionTestRepositionPawns = function(_super) {
      __extends(ActionTestRepositionPawns, _super);
      function ActionTestRepositionPawns() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionTestRepositionPawns", true);
        return _this;
      }
      ActionTestRepositionPawns.Create = function() {
        return new ActionTestRepositionPawns();
      };
      ActionTestRepositionPawns.prototype.queueable = function() {
        return false;
      };
      ActionTestRepositionPawns.prototype.getName = function() {
        return "ActionTestRepositionPawns";
      };
      ActionTestRepositionPawns.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var uIndx = pawnContainer.getFirstUserIndex();
        for (var i = 1; i <= 50; i++) {
          pawnContainer.createDummyPawnsForTest(i, i % 7 + 1);
          this.mActionController.runAction(ActionRepositionPawns_1.ActionRepositionPawns.Create(i, uIndx));
        }
        this.mActionController.runAction(ActionSortPawns_1.ActionSortPawns.Create());
        this.onSuccess();
      };
      return ActionTestRepositionPawns;
    }(AbstractAction_1.AbstractAction);
    exports.ActionTestRepositionPawns = ActionTestRepositionPawns;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionRepositionPawns": "ActionRepositionPawns",
    "./ActionSortPawns": "ActionSortPawns"
  } ],
  ActionUpdateAutoPlayButton: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d8d3qLVFRHpqQNSVtYgkWf", "ActionUpdateAutoPlayButton");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionHideFtue_1 = require("../Actions/ActionHideFtue");
    var ActionUpdateAutoPlayButton = function(_super) {
      __extends(ActionUpdateAutoPlayButton, _super);
      function ActionUpdateAutoPlayButton(autoPlay) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionUpdateAutoPlayButton", true);
        _this.mAutoPlayActive = autoPlay;
        return _this;
      }
      ActionUpdateAutoPlayButton.Create = function(autoPlay) {
        return new ActionUpdateAutoPlayButton(autoPlay);
      };
      ActionUpdateAutoPlayButton.prototype.queueable = function() {
        return false;
      };
      ActionUpdateAutoPlayButton.prototype.getName = function() {
        return "ActionUpdateAutoPlayButton";
      };
      ActionUpdateAutoPlayButton.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        this.mPresistantNodeComponent.getFtueController().setAutoBotStatus(this.mAutoPlayActive);
        this.mAutoPlayActive && this.mActionController.runAction(ActionHideFtue_1.ActionHideFtue.Create());
        gameComponent.showAutoBotButton(this.mAutoPlayActive);
      };
      return ActionUpdateAutoPlayButton;
    }(AbstractAction_1.AbstractAction);
    exports.ActionUpdateAutoPlayButton = ActionUpdateAutoPlayButton;
    cc._RF.pop();
  }, {
    "../Actions/ActionHideFtue": "ActionHideFtue",
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionUpdateGameState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "839f2bVC2VISIKoovZSbwri", "ActionUpdateGameState");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var Game_1 = require("../models/Game");
    var ActionInitializePlayer_1 = require("./ActionInitializePlayer");
    var ActionSortPawns_1 = require("./ActionSortPawns");
    var ActionUpdateGameState = function(_super) {
      __extends(ActionUpdateGameState, _super);
      function ActionUpdateGameState() {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionUpdateGameState", true);
        return _this;
      }
      ActionUpdateGameState.Create = function() {
        return new ActionUpdateGameState();
      };
      ActionUpdateGameState.prototype.queueable = function() {
        return false;
      };
      ActionUpdateGameState.prototype.getName = function() {
        return "ActionUpdateGameState";
      };
      ActionUpdateGameState.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var gameModel = this.mGameController.getModel();
        var pawnContainer = gameComponent.getPawnContainer();
        var board = gameComponent.getBoardComponent();
        board.doSeatMapping();
        board.rotate(this.mGameController.getBoardRotationDegrees());
        for (var index = 0; index < 4; index++) gameModel.getPlayerIndexMap().hasOwnProperty(index.toString()) && this.mActionController.runAction(ActionInitializePlayer_1.ActionInitializePlayer.Create(index));
        pawnContainer.respositionAllPawns();
        this.mActionController.runAction(ActionSortPawns_1.ActionSortPawns.Create());
        this.mLogger.Log("State on start " + gameModel.getRoomState());
        gameModel.getRoomState() == Game_1.RoomSate.STATE_WAITING_FOR_PLAYERS || gameModel.getRoomState() == Game_1.RoomSate.STATE_INACTIVE ? gameModel.isPrivateTable() ? gameComponent.waitingPanel.showWithInvite("#WAITING_ROOM_ID_IG", {
          ID: gameModel.getPrivateRoomId()
        }) : gameComponent.waitingPanel.show("#WAITING_FOR_PLAYERS") : gameModel.getRoomState() == Game_1.RoomSate.STATE_COUNTDOWN ? gameComponent.waitingPanel.show("#GAME_STARTING_GAME") : gameComponent.waitingPanel.hide();
        this.onSuccess();
      };
      return ActionUpdateGameState;
    }(AbstractAction_1.AbstractAction);
    exports.ActionUpdateGameState = ActionUpdateGameState;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "../models/Game": "Game",
    "./AbstractAction": "AbstractAction",
    "./ActionInitializePlayer": "ActionInitializePlayer",
    "./ActionSortPawns": "ActionSortPawns"
  } ],
  ActionUpdateKilledPawnPosition: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15a59TMPGdJWIhKAlNqUxSS", "ActionUpdateKilledPawnPosition");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionQueueActions_1 = require("./ActionQueueActions");
    var ActionMoveKilledPawn_1 = require("./ActionMoveKilledPawn");
    var ActionKillAnimation_1 = require("./ActionKillAnimation");
    var ActionRepositionPawns_1 = require("./ActionRepositionPawns");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var ActionPlayVibration_1 = require("./ActionPlayVibration");
    var ActionUpdateKilledPawnPosition = function(_super) {
      __extends(ActionUpdateKilledPawnPosition, _super);
      function ActionUpdateKilledPawnPosition(userIndex, pawnIndex, movementArray, finalPos) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionUpdateKilledPawnPosition", true);
        _this.mUserIndex = userIndex;
        _this.mPawnIndex = pawnIndex;
        _this.mMovementArray = movementArray;
        _this.mFinalPos = finalPos;
        return _this;
      }
      ActionUpdateKilledPawnPosition.Create = function(userIndex, pawnIndex, movementArray, finalPos) {
        return new ActionUpdateKilledPawnPosition(userIndex, pawnIndex, movementArray, finalPos);
      };
      ActionUpdateKilledPawnPosition.prototype.queueable = function() {
        return true;
      };
      ActionUpdateKilledPawnPosition.prototype.getName = function() {
        return "ActionUpdateKilledPawnPosition";
      };
      ActionUpdateKilledPawnPosition.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var actions = [];
        actions.push(ActionPlayVibration_1.ActionPlayVibration.Create());
        this.mLogger.Log("Moving : " + this.mUserIndex);
        for (var index = 1; index < this.mMovementArray.length; index++) {
          var cellIndex = this.mMovementArray[index];
          var prevCellIndex = this.mMovementArray[index - 1];
          1 == index && actions.push(ActionKillAnimation_1.ActionKillAnimation.Create(prevCellIndex, this.mUserIndex, this.mPawnIndex));
          if (2 == index) {
            actions.push(ActionRepositionPawns_1.ActionRepositionPawns.Create(this.mMovementArray[0], this.mUserIndex));
            actions.push(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.KILL_FX2));
          }
          actions.push(ActionMoveKilledPawn_1.ActionMoveKilledPawn.Create(this.mUserIndex, this.mPawnIndex, prevCellIndex, cellIndex));
        }
        var queuedActions = ActionQueueActions_1.ActionQueueActions.Create(actions);
        this.mActionController.runAction(queuedActions);
        var self = this;
        queuedActions.getPromise().then(function() {
          self.onSuccess();
        });
      };
      return ActionUpdateKilledPawnPosition;
    }(AbstractAction_1.AbstractAction);
    exports.ActionUpdateKilledPawnPosition = ActionUpdateKilledPawnPosition;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionKillAnimation": "ActionKillAnimation",
    "./ActionMoveKilledPawn": "ActionMoveKilledPawn",
    "./ActionPlaySound": "ActionPlaySound",
    "./ActionPlayVibration": "ActionPlayVibration",
    "./ActionQueueActions": "ActionQueueActions",
    "./ActionRepositionPawns": "ActionRepositionPawns"
  } ],
  ActionUpdatePawnPosition: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1321A9ftJHyIFj+27D8ML+", "ActionUpdatePawnPosition");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionQueueActions_1 = require("./ActionQueueActions");
    var ActionJumpPawn_1 = require("./ActionJumpPawn");
    var ActionRepositionPawns_1 = require("./ActionRepositionPawns");
    var ActionFtueSafeZone_1 = require("./ActionFtueSafeZone");
    var ActionFtueHomeLane_1 = require("./ActionFtueHomeLane");
    var ActionSortPawns_1 = require("./ActionSortPawns");
    var ActionPlaySound_1 = require("./ActionPlaySound");
    var ActionUpdatePawnPosition = function(_super) {
      __extends(ActionUpdatePawnPosition, _super);
      function ActionUpdatePawnPosition(userIndex, pawnIndex, movementArray, finalPos) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionUpdatePawnPosition", true);
        _this.mUserIndex = userIndex;
        _this.mPawnIndex = pawnIndex;
        _this.mMovementArray = movementArray;
        _this.mFinalPos = finalPos;
        _this.mLogger.Log("Harish: Ftue: ActionUpdatePawnPosition: mMovementArray: " + JSON.stringify(movementArray));
        return _this;
      }
      ActionUpdatePawnPosition.Create = function(userIndex, pawnIndex, movementArray, finalPos) {
        return new ActionUpdatePawnPosition(userIndex, pawnIndex, movementArray, finalPos);
      };
      ActionUpdatePawnPosition.prototype.queueable = function() {
        return true;
      };
      ActionUpdatePawnPosition.prototype.getName = function() {
        return "ActionUpdatePawnPosition";
      };
      ActionUpdatePawnPosition.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.mLogger.Log("GEO_LOG called without game component");
          this.onSuccess();
          return;
        }
        var pawnContainer = gameComponent.getPawnContainer();
        var actions = [];
        for (var index = 1; index < this.mMovementArray.length; index++) {
          var cellIndex = this.mMovementArray[index];
          var prevCellIndex = this.mMovementArray[index - 1];
          actions.push(ActionJumpPawn_1.ActionJumpPawn.Create(this.mUserIndex, this.mPawnIndex, prevCellIndex, cellIndex));
          actions.push(ActionRepositionPawns_1.ActionRepositionPawns.Create(cellIndex, this.mUserIndex));
          actions.push(ActionRepositionPawns_1.ActionRepositionPawns.Create(prevCellIndex, this.mUserIndex));
          actions.push(ActionSortPawns_1.ActionSortPawns.Create());
        }
        var gameModel = this.mGameController.getModel();
        if (gameModel.isSafeCell(this.mFinalPos)) {
          actions.push(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.PAWN_SAFE, true));
          this.mGameController.getMyIndex() === this.mUserIndex && -1 !== this.mMovementArray[0] && actions.push(ActionFtueSafeZone_1.ActionFtueSafeZone.Create(this.mPawnIndex));
        }
        this.mGameController.getMyIndex() === this.mUserIndex && this.mFinalPos > 51 && this.mMovementArray[0] < 51 && actions.push(ActionFtueHomeLane_1.ActionFtueHomeLane.Create(this.mPawnIndex));
        var queuedActions = ActionQueueActions_1.ActionQueueActions.Create(actions);
        this.mActionController.runAction(queuedActions);
        var self = this;
        queuedActions.getPromise().then(function() {
          self.onSuccess();
        });
      };
      return ActionUpdatePawnPosition;
    }(AbstractAction_1.AbstractAction);
    exports.ActionUpdatePawnPosition = ActionUpdatePawnPosition;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionFtueHomeLane": "ActionFtueHomeLane",
    "./ActionFtueSafeZone": "ActionFtueSafeZone",
    "./ActionJumpPawn": "ActionJumpPawn",
    "./ActionPlaySound": "ActionPlaySound",
    "./ActionQueueActions": "ActionQueueActions",
    "./ActionRepositionPawns": "ActionRepositionPawns",
    "./ActionSortPawns": "ActionSortPawns"
  } ],
  ActionUpdateTurn: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "075b9agMyNDW4InPCxLektl", "ActionUpdateTurn");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var ActionDoTurnTint_1 = require("./ActionDoTurnTint");
    var ActionFtueRollDice_1 = require("./ActionFtueRollDice");
    var Constants_1 = require("../Constants");
    var ActionUpdateTurn = function(_super) {
      __extends(ActionUpdateTurn, _super);
      function ActionUpdateTurn(isRepeatTurn, halfTurnVibration) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionUpdateTurn", true);
        _this.mProfileNode = null;
        _this.mHalfTurnVibration = halfTurnVibration;
        _this.mIsRepeatTurn = isRepeatTurn;
        return _this;
      }
      ActionUpdateTurn.Create = function(isRepeatTurn, halfTurnVibration) {
        void 0 === halfTurnVibration && (halfTurnVibration = false);
        return new ActionUpdateTurn(isRepeatTurn, halfTurnVibration);
      };
      ActionUpdateTurn.prototype.queueable = function() {
        return true;
      };
      ActionUpdateTurn.prototype.getName = function() {
        return "ActionUpdateTurn";
      };
      ActionUpdateTurn.prototype.start = function() {
        var gameModel = this.mGameController.getModel();
        var currentIndex = gameModel.getCurrentIndex();
        if (-1 == currentIndex) {
          this.onSuccess();
          return;
        }
        var currentTimer = gameModel.getCurrentTimer();
        var gamePlayer = gameModel.getPlayerIndexMap()[currentIndex];
        if (!gamePlayer) {
          this.onSuccess();
          return;
        }
        var isLastRoll = gamePlayer.getIsLastDiceRoll();
        var totalTime = isLastRoll ? gameModel.getPawnTimer() : gameModel.getDiceTimer();
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        currentIndex != this.mGameController.getMyIndex() || this.mIsRepeatTurn ? currentIndex != this.mGameController.getMyIndex() && this.mPresistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_MY_TURN_END) : this.mPresistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_MY_TURN_START);
        var board = gameComponent.getBoardComponent();
        var playerSub = board.getPlayerSub(currentIndex);
        if (playerSub) {
          this.mProfileNode = playerSub.getProfileNode();
          this.mDice = playerSub.getDice();
          this.mProfileNode.startTimer(totalTime / 1e3, this.mHalfTurnVibration);
          this.mProfileNode.setTimerOffset(currentTimer / 1e3);
          isLastRoll || this.mDice.activateRoll();
          currentIndex != this.mGameController.getMyIndex() || this.mIsRepeatTurn || this.mActionController.runAction(ActionFtueRollDice_1.ActionFtueRollDice.Create());
          this.mActionController.runAction(ActionDoTurnTint_1.ActionDoTurnTint.Create(currentIndex));
        }
        this.onSuccess();
      };
      ActionUpdateTurn.prototype.stopAction = function() {
        this.mDice && this.mDice.showOverlay();
        this.mProfileNode && this.mProfileNode.stopTimer();
        this.onSuccess();
      };
      ActionUpdateTurn.prototype.forceStop = function() {
        this.mProfileNode && this.mProfileNode.forceStopTimer();
        this.onSuccess();
      };
      return ActionUpdateTurn;
    }(AbstractAction_1.AbstractAction);
    exports.ActionUpdateTurn = ActionUpdateTurn;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction",
    "./ActionDoTurnTint": "ActionDoTurnTint",
    "./ActionFtueRollDice": "ActionFtueRollDice"
  } ],
  ActionUpdateWaitingLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c29b1z0pURIMo4Jap54VfBi", "ActionUpdateWaitingLayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var Logger_1 = require("../Generic/Logger");
    var GameComponent_1 = require("../Components/GameComponent");
    var WaitingPanelComponent_1 = require("../Components/WaitingPanelComponent");
    var ActionUpdateWaitingLayer = function(_super) {
      __extends(ActionUpdateWaitingLayer, _super);
      function ActionUpdateWaitingLayer(show, showWithInvite, text, roomId) {
        var _this = _super.call(this) || this;
        _this.mLogger = new Logger_1.Logger("ActionUpdateWaitingLayer", true);
        _this.mShow = show;
        _this.mText = text;
        _this.mShowWithInvite = showWithInvite;
        _this.mRoomId = roomId;
        return _this;
      }
      ActionUpdateWaitingLayer.Create = function(show, showWithInvite, text, roomId) {
        return new ActionUpdateWaitingLayer(show, showWithInvite, text, roomId);
      };
      ActionUpdateWaitingLayer.prototype.queueable = function() {
        return true;
      };
      ActionUpdateWaitingLayer.prototype.getName = function() {
        return "ActionUpdateWaitingLayer";
      };
      ActionUpdateWaitingLayer.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!(this.mViewComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        if (!gameComponent || !gameComponent.waitingPanel) {
          this.onSuccess();
          return;
        }
        var waitingLayerComponent = gameComponent.waitingPanel.getComponent(WaitingPanelComponent_1.default);
        this.mShow ? this.mShowWithInvite ? waitingLayerComponent.showWithInvite(this.mText, {
          ID: this.mRoomId
        }) : waitingLayerComponent.show(this.mText) : waitingLayerComponent.hide();
        this.onSuccess();
      };
      return ActionUpdateWaitingLayer;
    }(AbstractAction_1.AbstractAction);
    exports.ActionUpdateWaitingLayer = ActionUpdateWaitingLayer;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/WaitingPanelComponent": "WaitingPanelComponent",
    "../Generic/Logger": "Logger",
    "./AbstractAction": "AbstractAction"
  } ],
  ActionUserLeaveUpdate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "45631w39x1FHqDrw6kCUtQT", "ActionUserLeaveUpdate");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AbstractAction_1 = require("./AbstractAction");
    var GameComponent_1 = require("../Components/GameComponent");
    var ProfileImageComponent_1 = require("../Components/ProfileImageComponent");
    var ActionUserLeaveUpdate = function(_super) {
      __extends(ActionUserLeaveUpdate, _super);
      function ActionUserLeaveUpdate(userId, index) {
        var _this = _super.call(this) || this;
        _this.mUserId = userId;
        _this.mIndex = index;
        return _this;
      }
      ActionUserLeaveUpdate.Create = function(userId, index) {
        return new ActionUserLeaveUpdate(userId, index);
      };
      ActionUserLeaveUpdate.prototype.queueable = function() {
        return false;
      };
      ActionUserLeaveUpdate.prototype.getName = function() {
        return "ActionUserLeaveUpdate";
      };
      ActionUserLeaveUpdate.prototype.start = function() {
        var gameComponent = this.mViewComponent;
        if (!gameComponent || !(gameComponent instanceof GameComponent_1.default)) {
          this.onSuccess();
          return;
        }
        var board = gameComponent.getBoardComponent();
        var index = this.mGameController.getModel().getIndexOfPid(this.mUserId);
        var playerSub = board.getPlayerSub(this.mIndex);
        playerSub && playerSub.getProfileNode().getComponent(ProfileImageComponent_1.default).showLeft();
        this.onSuccess();
      };
      return ActionUserLeaveUpdate;
    }(AbstractAction_1.AbstractAction);
    exports.ActionUserLeaveUpdate = ActionUserLeaveUpdate;
    cc._RF.pop();
  }, {
    "../Components/GameComponent": "GameComponent",
    "../Components/ProfileImageComponent": "ProfileImageComponent",
    "./AbstractAction": "AbstractAction"
  } ],
  AdsButtonComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2df77DXEFVEhaQ/vnok2XhV", "AdsButtonComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AdsButtonComponent = function(_super) {
      __extends(AdsButtonComponent, _super);
      function AdsButtonComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.videoCountLabel = null;
        _this.enabledAdsButton = null;
        _this.disabledAdsButton = null;
        _this.enabledNode = null;
        _this.disabledNode = null;
        _this.spinner = null;
        _this.bannerNode = null;
        _this.powerupOffbanner = null;
        _this.mPersistantComponent = null;
        _this.mStatsController = null;
        return _this;
      }
      AdsButtonComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.enabledAdsButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "AdsButtonComponent", "onAdsButtonClicked", true));
        this.disabledAdsButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "AdsButtonComponent", "onAdsButtonClicked", false));
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_SUCCESS, this.onVideoPreloadSuccess, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_ERROR, this.onVideoPreloadError, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.onVideoVerifySuccess, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_ERROR, this.onVideoVerifyError, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_VIDEO_AVAILABLE_COUNT_CHANGED, this.onAvailableVideoCountChange, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_RESET_ADS, this.resetAdsButton, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_START, this.resetAdsButton, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_SHOW_COMPLETE, this.videoShowComplete, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_NOT_ENOUGH_COIN_DISABLE_POPUP, this.WatchAdDisabledStateClick, this);
        this.mStatsController = persistantController.GetStatsController();
        if (this.bannerNode) {
          var powerUpVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
          var progAdRewardVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_PROG_ADREWARDS);
          this.bannerNode.active = (2 == progAdRewardVar || 3 == progAdRewardVar) && 2 == powerUpVar;
          this.powerupOffbanner.active = progAdRewardVar < 2 || 2 != powerUpVar;
        }
      };
      AdsButtonComponent.prototype.start = function() {
        this.resetAdsButton();
      };
      AdsButtonComponent.prototype.resetAdsButton = function() {
        this.videoCountLabel.string = this.mPersistantComponent.GetAdsController().getVideoAvailableCount() + "";
        this.mPersistantComponent.GetAdsController().getVideoAvailableCount() > 0 && this.mPersistantComponent.GetAdsController().isVideoPreloaded() ? this.enableAdsButton() : this.disableAdsButton();
      };
      AdsButtonComponent.prototype.onAdsButtonClicked = function(event, customEventData) {
        var adVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_PROG_ADREWARDS);
        if ((true == customEventData || adVariant > 1) && event) {
          this.mStatsController.count("button", 1, "ad", "HUD_icon", this.mPersistantComponent.GetAdsController().getVideoAvailableCount() + "");
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_ADS_CONFIRMATION);
        } else if (this.mPersistantComponent.GetAdsController().getVideoAvailableCount() <= 0) {
          this.mStatsController.count("button", 1, "ad", "HUD_icon", "0");
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ADS_FINISHED);
        } else this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ADS_UNAVAILABLE);
      };
      AdsButtonComponent.prototype.WatchAdDisabledStateClick = function(event) {
        this.onAdsButtonClicked(null, null);
      };
      AdsButtonComponent.prototype.videoShowComplete = function() {};
      AdsButtonComponent.prototype.onVideoPreloadSuccess = function() {
        this.enableAdsButton();
      };
      AdsButtonComponent.prototype.onVideoPreloadError = function() {
        this.disableAdsButton();
      };
      AdsButtonComponent.prototype.onVideoVerifySuccess = function() {};
      AdsButtonComponent.prototype.onVideoVerifyError = function() {};
      AdsButtonComponent.prototype.onAvailableVideoCountChange = function() {
        this.videoCountLabel.string = this.mPersistantComponent.GetAdsController().getVideoAvailableCount() + "";
        this.mPersistantComponent.GetAdsController().getVideoAvailableCount() && this.mPersistantComponent.GetAdsController().isVideoPreloaded() ? this.enableAdsButton() : this.disableAdsButton();
      };
      AdsButtonComponent.prototype.disableAdsButton = function() {
        this.enabledAdsButton.enabled = false;
        this.enabledNode.active = false;
        this.disabledNode.active = true;
      };
      AdsButtonComponent.prototype.enableAdsButton = function() {
        this.enabledAdsButton.enabled = true;
        this.enabledNode.active = true;
        this.disabledNode.active = false;
      };
      AdsButtonComponent.prototype.onDestroy = function() {
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_SUCCESS, this.onVideoPreloadSuccess, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_ERROR, this.onVideoPreloadError, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.onVideoVerifySuccess, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_ERROR, this.onVideoVerifyError, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_VIDEO_AVAILABLE_COUNT_CHANGED, this.onAvailableVideoCountChange, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_RESET_ADS, this.resetAdsButton, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_SHOW_COMPLETE, this.videoShowComplete, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_START, this.resetAdsButton, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_NOT_ENOUGH_COIN_DISABLE_POPUP, this.WatchAdDisabledStateClick, this);
      };
      __decorate([ property(cc.Label) ], AdsButtonComponent.prototype, "videoCountLabel", void 0);
      __decorate([ property(cc.Button) ], AdsButtonComponent.prototype, "enabledAdsButton", void 0);
      __decorate([ property(cc.Button) ], AdsButtonComponent.prototype, "disabledAdsButton", void 0);
      __decorate([ property(cc.Node) ], AdsButtonComponent.prototype, "enabledNode", void 0);
      __decorate([ property(cc.Node) ], AdsButtonComponent.prototype, "disabledNode", void 0);
      __decorate([ property(cc.Node) ], AdsButtonComponent.prototype, "spinner", void 0);
      __decorate([ property(cc.Node) ], AdsButtonComponent.prototype, "bannerNode", void 0);
      __decorate([ property(cc.Node) ], AdsButtonComponent.prototype, "powerupOffbanner", void 0);
      AdsButtonComponent = __decorate([ ccclass ], AdsButtonComponent);
      return AdsButtonComponent;
    }(cc.Component);
    exports.AdsButtonComponent = AdsButtonComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  AdsController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec740424StHYb4uBaEtuGn2", "AdsController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var Constants_1 = require("../Constants");
    var ExperiementController_1 = require("./ExperiementController");
    var State_1 = require("../states/State");
    var Helper_1 = require("../Generic/Helper");
    var AdsController = function() {
      function AdsController(persistantNodeComponent) {
        this.mPreloadedRewardedVideo = null;
        this.mPreloadedRewardedVideoLoaded = false;
        this.mShowingRewardedVideo = false;
        this.mPreloadingVideo = false;
        this.mRewardedVideoAvailableCount = 0;
        this.mPreloadVideoTryCount = 0;
        this.mPreloadErrorCode = "";
        this.mInitialized = false;
        this.mQueuedChips = 0;
        this.mQueuedGems = 0;
        this.mFirstTimeVideoPreload = false;
        this.countPreloadedVideo = 0;
        this.mAdInstanceTryCount = 0;
        this.mPendingRewardedVideo = null;
        this.mVideoSource = 0;
        this.mLogger = new Logger_1.Logger("AdsController", true);
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mFirstTimeVideoPreload = true;
        this.mAdInstanceTryCount = 0;
        document.addEventListener("visibilitychange", this.onVisibilityChange.bind(this));
      }
      AdsController.prototype.setVideoAvailableCount = function(count) {
        this.mRewardedVideoAvailableCount = count;
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_VIDEO_AVAILABLE_COUNT_CHANGED);
        this.mLogger.Log("tanisha setVideoAvailableCount enter " + this.mRewardedVideoAvailableCount);
        this.mInitialized && this.startPreloadRewardedVideo();
      };
      AdsController.prototype.startPreloadRewardedVideo = function() {
        var self = this;
        this.preloadRewardedVideo(function(val) {
          if (val == Constants_1.constants.AD_ERROR_CODE.DONT_TRY_PRELOAD) {
            self.mLogger.Log("tanisha startPreloadRewardedVideo enter DONT_TRY_PRELOAD");
            return;
          }
          if (val == Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOADED) {
            self.mLogger.Log("tanisha startPreloadRewardedVideo enter ADS_INSTANCE_DOWNLOADED");
            self.mPreloadVideoTryCount = 0;
            self.loadRewardedVideo();
          } else if (val == Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOAD_FAIL && self.mAdInstanceTryCount <= 3) {
            self.mLogger.Log("tanisha startPreloadRewardedVideo enter ADS_INSTANCE_DOWNLOAD_FAIL");
            setTimeout(self.preloadRewardedVideo.bind(self), 3e4);
          }
        });
      };
      AdsController.prototype.getVideoAvailableCount = function() {
        return this.mRewardedVideoAvailableCount;
      };
      AdsController.prototype.initiateRewardedVideoAds = function(source) {
        if (this.mShowingRewardedVideo || this.mPreloadingVideo || this.mRewardedVideoAvailableCount <= 0 && !this.mPersistantNodeComponent.GetPlayerController().getModel().canShowDailyBonusVideo() || !this.mPreloadedRewardedVideo && !this.mPendingRewardedVideo) return;
        this.mShowingRewardedVideo = true;
        this.mPersistantNodeComponent.GetStatsController().count("ads", 1, "initiate", source, this.getVideoAvailableCount() + "", "rewarded", this.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerRewardedAdPlacementId());
        this.mPersistantNodeComponent.GetStateMachineController().onEvent(State_1.StateEvent.EXIT_TO_LOBBY, {
          reason: "rewardedAdsExit"
        });
        var self = this;
        var videoToShow;
        this.mVideoSource = "daily_bonus" == source ? Constants_1.constants.REWARDED_VIDEO_SOURCE.DAILYBONUS : 0;
        if (this.mPendingRewardedVideo) videoToShow = this.mPendingRewardedVideo; else {
          videoToShow = this.mPreloadedRewardedVideo;
          this.mPreloadedRewardedVideo = null;
          this.mPreloadedRewardedVideoLoaded = false;
          this.mLogger.Log("tanisha initiateRewardedVideoAds enter");
          this.startPreloadRewardedVideo();
          this.mPendingRewardedVideo = videoToShow;
        }
        videoToShow.showAsync().then(function() {
          self.managePendingInstances();
          self.mPersistantNodeComponent.GetStatsController().count("ads", 1, "end_client", "success", self.getVideoAvailableCount() + "", "rewarded", self.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerRewardedAdPlacementId());
          self.mLogger.Log("tanisha initiateRewardedVideoAds success");
          Helper_1.Helper.sendFBAnalytics("rewarded_ads_watched");
          self.cleanupOnRewardedVideShown();
          self.verifyAdsGrant();
        }).catch(function(e) {
          self.mPersistantNodeComponent.GetStatsController().count("ads", 1, "end_client", "error", self.getVideoAvailableCount() + "", "rewarded", self.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerRewardedAdPlacementId());
          self.cleanupOnRewardedVideShown();
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ADS_UNAVAILABLE);
          self.mShowingRewardedVideo = false;
        });
      };
      AdsController.prototype.managePendingInstances = function() {
        this.mPendingRewardedVideo = null;
      };
      AdsController.prototype.preloadRewardedVideo = function(successCallback) {
        this.mLogger.Log("eagle preloadRewardedVideo enter mPreloadingVideo" + this.mPreloadingVideo + " --mRewardedVideoAvailableCount " + this.mRewardedVideoAvailableCount + "this.mPreloadedRewardedVideo " + this.mPreloadedRewardedVideo + " session_function_cnt " + this.countPreloadedVideo++);
        if (!this.isRewardedVideoSupported()) return Constants_1.constants.AD_ERROR_CODE.DONT_TRY_PRELOAD;
        var dbVideoAvail = this.mPersistantNodeComponent.GetPlayerController().getModel().canShowDailyBonusVideo();
        if (this.mPreloadedRewardedVideo || this.mPreloadingVideo || this.mFirstTimeVideoPreload && this.mRewardedVideoAvailableCount < 1 && !dbVideoAvail || !this.mFirstTimeVideoPreload && this.mRewardedVideoAvailableCount <= 1) {
          this.mLogger.Log("eagle preloadRewardedVideo return ");
          return Constants_1.constants.AD_ERROR_CODE.DONT_TRY_PRELOAD;
        }
        this.mLogger.Log("eagle preloading rewarded video");
        this.mFirstTimeVideoPreload = false;
        var self = this;
        this.mPreloadingVideo = true;
        this.mPreloadErrorCode = "";
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_START);
        FBInstant.getRewardedVideoAsync(self.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerRewardedAdPlacementId()).then(function(rewarded) {
          self.mPreloadedRewardedVideo = rewarded;
          self.mPreloadedRewardedVideoLoaded = false;
          self.mLogger.Log("getRewardedVideoAsync return value" + JSON.stringify(rewarded));
          self.mAdInstanceTryCount = 0;
          successCallback && successCallback(Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOADED);
        }, function(err) {
          self.mLogger.Log("getRewardedVideoAsync error" + err.code);
          self.mAdInstanceTryCount++;
          successCallback && successCallback(Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOAD_FAIL);
        });
      };
      AdsController.prototype.loadRewardedVideo = function() {
        var self = this;
        this.mLogger.Log("loadRewardedVideo enter");
        if (this.mPreloadedRewardedVideo) {
          this.mLogger.Log("loadRewardedVideo loadAsync call" + JSON.stringify(this.mPreloadedRewardedVideo));
          this.mPreloadedRewardedVideo.loadAsync().then(function() {
            self.mLogger.Log("Rewarded video preloaded successfull");
            self.mPreloadedRewardedVideoLoaded = true;
            self.mPreloadingVideo = false;
            self.mPersistantNodeComponent.GetStatsController().count("ads", 1, "loaded", "", self.getVideoAvailableCount() + "", "rewarded", self.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerRewardedAdPlacementId());
            self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_SUCCESS);
          }, function(err) {
            self.mLogger.Log("LoadAsync Rewarded video preload Error: " + err.code);
            self.onVideoPreloadError(err.code);
          }).catch(function(err) {
            self.mLogger.Log("catchhhh LoadAsync Rewarded video preload Error: " + err.code);
            self.onVideoPreloadError(err.code);
          });
        }
      };
      AdsController.prototype.onVideoPreloadError = function(errorMsg) {
        this.mLogger.Log("eagle preloading rewarded video error " + errorMsg);
        this.mPersistantNodeComponent.GetStatsController().count("ads", 1, "failed", null != errorMsg ? errorMsg : "", this.getVideoAvailableCount() + "", "rewarded");
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_ERROR, {
          error: errorMsg
        });
        this.mPreloadingVideo = false;
        this.mPreloadErrorCode = errorMsg;
        if ("ADS_TOO_MANY_INSTANCES" != errorMsg) {
          this.mPreloadVideoTryCount++;
          if (!document.hidden && this.mPreloadVideoTryCount < 5) {
            this.mPersistantNodeComponent.GetStatsController().count("ads", 1, "retry", "", this.getVideoAvailableCount() + "", "rewarded");
            this.mLogger.Log("eagle preloading rewarded video setting to retry");
            setTimeout(this.loadRewardedVideo.bind(this), 3e4);
          }
        }
      };
      AdsController.prototype.onVisibilityChange = function() {
        this.mLogger.Log("eagle onvisibility change");
        if (!document.hidden && !this.mPreloadedRewardedVideoLoaded && this.mPreloadVideoTryCount > 0) {
          this.mLogger.Log("eagle retry preload on visibilitychange");
          this.loadRewardedVideo();
        }
      };
      AdsController.prototype.isVideoPreloaded = function() {
        return !this.mPreloadingVideo && null != this.mPreloadedRewardedVideo && this.mPreloadedRewardedVideoLoaded;
      };
      AdsController.prototype.cleanupOnRewardedVideShown = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_SHOW_COMPLETE);
      };
      AdsController.prototype.verifyAdsGrant = function() {
        var playerController = this.mPersistantNodeComponent.GetPlayerController();
        this.mLogger.Log("tanisha verifyAdsGrant enter");
        var params = {
          pid: playerController.getModel().getId(),
          access_token: playerController.getModel().getAccessToken(),
          duid: playerController.getModel().getSnuid()
        };
        this.mVideoSource == Constants_1.constants.REWARDED_VIDEO_SOURCE.DAILYBONUS ? this.verifyDailyBonusVideoGrant(params) : this.verifySimpleVideoGrant(params);
      };
      AdsController.prototype.verifyDailyBonusVideoGrant = function(params) {
        var self = this;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/user/verifyDBRewardedAds", params, function(d) {
          self.setVideoAvailableCount(d.availableVideos);
          self.cleanupOnVerifyAdsGrantComplete();
          self.mLogger.Log("eagle verifyAdsGrant success for dailybonus... EVENT_REWARDED_VIDEO_VERIFY_SUCCESS chips- " + d.grantedChips + " gems " + d.grantGems);
          self.mPersistantNodeComponent.GetPlayerController().onReceiptFetch(d);
          self.mPersistantNodeComponent.GetPlayerController().getModel().incrementDBValue(d.grantedChips, d.grantedGems);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_DB_VIDEO_VERIFY_SUCCESS, {
            grantChips: d.grantedChips,
            grantGems: d.grantedGems
          });
        }, function() {
          self.cleanupOnVerifyAdsGrantComplete();
          self.mLogger.Log("eagle: payment verification error. Retrying again");
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_ERROR);
        });
      };
      AdsController.prototype.verifySimpleVideoGrant = function(params) {
        var self = this;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/user/verifyRewardedAds", params, function(d) {
          self.setVideoAvailableCount(d.availableVideos);
          self.cleanupOnVerifyAdsGrantComplete();
          self.mLogger.Log("tanisha verifyAdsGrant success... EVENT_REWARDED_VIDEO_VERIFY_SUCCESS chips- " + d.grantedChips + " gems " + d.grantGems);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, {
            grantChips: d.grantedChips,
            grantGems: d.grantedGems
          });
          self.mPersistantNodeComponent.GetPlayerController().onReceiptFetch(d);
        }, function() {
          self.cleanupOnVerifyAdsGrantComplete();
          self.mLogger.Log("eagle: payment verification error. Retrying again");
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_ERROR);
        });
      };
      AdsController.prototype.cleanupOnVerifyAdsGrantComplete = function() {
        this.mShowingRewardedVideo = false;
      };
      AdsController.prototype.isRewardedVideoSupported = function() {
        var supportedAPIs = FBInstant.getSupportedAPIs();
        var adsVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ADS);
        var economyVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        if (!(null != supportedAPIs && supportedAPIs.indexOf("getRewardedVideoAsync") > -1) || 2 != adsVariant || 2 != economyVariant) return false;
        return true;
      };
      AdsController.prototype.initRewardedVideoAds = function() {
        this.mInitialized = true;
        if (!this.isRewardedVideoSupported()) {
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_NOT_SUPPORTED);
          return;
        }
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_SUPPORTED);
        this.startPreloadRewardedVideo();
      };
      AdsController.prototype.queueAdsSuccessPopup = function(queuedChips, queuedGems) {
        this.mQueuedChips = queuedChips;
        this.mQueuedGems = queuedGems;
      };
      AdsController.prototype.getQueuedRewardChips = function() {
        return this.mQueuedChips;
      };
      AdsController.prototype.getQueuedRewardGems = function() {
        return this.mQueuedGems;
      };
      AdsController.prototype.clearQueuedRewardChips = function() {
        this.mQueuedChips = 0;
      };
      AdsController.prototype.clearQueuedRewardGems = function() {
        this.mQueuedGems = 0;
      };
      return AdsController;
    }();
    exports.AdsController = AdsController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../states/State": "State",
    "./ExperiementController": "ExperiementController"
  } ],
  AnimatorComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68d8aISOp1BlKX/po3WZ5YK", "AnimatorComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var LobbyTopHudComponent_1 = require("./LobbyTopHudComponent");
    var CoinAnimationComponent_1 = require("./CoinAnimationComponent");
    var GameTopHudComponent_1 = require("./GameTopHudComponent");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AnimatorComponent = function(_super) {
      __extends(AnimatorComponent, _super);
      function AnimatorComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mTopHudComponent = null;
        _this.coinNode = null;
        return _this;
      }
      AnimatorComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
      };
      AnimatorComponent.prototype.start = function() {
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, this.onCoinsCollect, this);
      };
      AnimatorComponent.prototype.onCoinsCollect = function(event) {
        this.onDisable();
        if (event) {
          var data = event.getUserData();
          var hudComponent;
          hudComponent = this.mTopHudComponent.getComponent(LobbyTopHudComponent_1.default) ? this.mTopHudComponent.getComponent(LobbyTopHudComponent_1.default) : this.mTopHudComponent.getComponent(GameTopHudComponent_1.default);
          this.coinNode.addComponent(CoinAnimationComponent_1.default);
          this.coinNode.getComponent(CoinAnimationComponent_1.default).initializeDefaults(data.comp, data.firstHitEvent);
          this.coinNode.getComponent(CoinAnimationComponent_1.default).initialize(data.position, hudComponent.getFinalCoinPosition());
        }
      };
      AnimatorComponent.prototype.onDisable = function() {
        var comp = this.coinNode.getComponent(CoinAnimationComponent_1.default);
        comp && comp.onDisable();
      };
      AnimatorComponent.prototype.onDestroy = function() {
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, this.onCoinsCollect, this);
      };
      __decorate([ property(cc.Node) ], AnimatorComponent.prototype, "mTopHudComponent", void 0);
      __decorate([ property(cc.Node) ], AnimatorComponent.prototype, "coinNode", void 0);
      AnimatorComponent = __decorate([ ccclass ], AnimatorComponent);
      return AnimatorComponent;
    }(cc.Component);
    exports.default = AnimatorComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./CoinAnimationComponent": "CoinAnimationComponent",
    "./GameTopHudComponent": "GameTopHudComponent",
    "./LobbyTopHudComponent": "LobbyTopHudComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  BadgeComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee600NmqyVOP4tAsf1qTEqp", "BadgeComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BadgeComponent = function(_super) {
      __extends(BadgeComponent, _super);
      function BadgeComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mBadgeNode = null;
        _this.emptyBadge = null;
        _this.bronzeBadge = null;
        _this.SilverBadge = null;
        _this.GoldBadge = null;
        _this.PlatinumBadge = null;
        _this.DiamondBadge = null;
        _this.mForceShow = false;
        return _this;
      }
      BadgeComponent.prototype.onLoad = function() {
        this.mSpriteMap = {};
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.mPlayerController = persistantController.GetPlayerController();
        this.mPlayerModel = this.mPlayerController.getModel();
        this.mConfigurationController = persistantController.GetConfigurationController();
        this.mSpriteMap[Constants_1.constants.BADGE.NONE] = this.emptyBadge;
        this.mSpriteMap[Constants_1.constants.BADGE.BRONZE] = this.bronzeBadge;
        this.mSpriteMap[Constants_1.constants.BADGE.SILVER] = this.SilverBadge;
        this.mSpriteMap[Constants_1.constants.BADGE.GOLD] = this.GoldBadge;
        this.mSpriteMap[Constants_1.constants.BADGE.PLATINUM] = this.PlatinumBadge;
        this.mSpriteMap[Constants_1.constants.BADGE.DIAMOND] = this.DiamondBadge;
      };
      BadgeComponent.prototype.start = function() {
        var enableProgression = this.mPersistantComponent.GetPlayerController().shouldEnableProgression();
        this.node.active = enableProgression || this.mForceShow;
      };
      BadgeComponent.prototype.showBadge = function(badge) {
        var enableProgression = this.mPersistantComponent.GetPlayerController().shouldEnableProgression();
        if (!enableProgression && !this.mForceShow) return;
        for (var i in this.mSpriteMap) {
          this.mSpriteMap[i].node.active = i == badge.toString();
          this.mSpriteMap[i].enabled = i == badge.toString();
        }
      };
      BadgeComponent.prototype.forceShowBadge = function(show) {
        this.mForceShow = show;
      };
      __decorate([ property(cc.Sprite) ], BadgeComponent.prototype, "emptyBadge", void 0);
      __decorate([ property(cc.Sprite) ], BadgeComponent.prototype, "bronzeBadge", void 0);
      __decorate([ property(cc.Sprite) ], BadgeComponent.prototype, "SilverBadge", void 0);
      __decorate([ property(cc.Sprite) ], BadgeComponent.prototype, "GoldBadge", void 0);
      __decorate([ property(cc.Sprite) ], BadgeComponent.prototype, "PlatinumBadge", void 0);
      __decorate([ property(cc.Sprite) ], BadgeComponent.prototype, "DiamondBadge", void 0);
      BadgeComponent = __decorate([ ccclass ], BadgeComponent);
      return BadgeComponent;
    }(cc.Component);
    exports.BadgeComponent = BadgeComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  BetSelectionPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9cc6fsBYkNN2JifjrWFhmpx", "BetSelectionPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BetSelectionPopupComponent = function(_super) {
      __extends(BetSelectionPopupComponent, _super);
      function BetSelectionPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.selectionText = null;
        _this.plusButtonEnabled = null;
        _this.minusButtonEnabled = null;
        _this.plusButtonDisabled = null;
        _this.minusButtonDisabled = null;
        _this.betSelectEnabled = null;
        _this.betSelectDisabled = null;
        _this.betAmountEnabled = null;
        _this.betAmountDisabled = null;
        _this.rewardAmountLabel = null;
        _this.startButton = null;
        _this.playerLabel = null;
        _this.spinnerComponent = null;
        _this.closeBetSelectPopupButton = null;
        _this.entryFeeLabel = null;
        _this.entryFeeLabelVar3 = null;
        _this.rewardNodeAnimation = null;
        _this.betSelectDisabledAnimation = null;
        _this.mStatsController = null;
        _this.mCurrentActiveIndexOfBetList = 0;
        return _this;
      }
      BetSelectionPopupComponent.prototype.onLoad = function() {
        this.initLogger();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayer = this.mPersistantNodeComponent.GetPlayerController().getModel();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.plusButtonEnabled.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "BetSelectionPopupComponent", "onPlusButtonClicked", false));
        this.minusButtonEnabled.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "BetSelectionPopupComponent", "onMinusButtonClicked", false));
        this.startButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "BetSelectionPopupComponent", "onStartButtonClicked", false));
        this.closeBetSelectPopupButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "BetSelectionPopupComponent", "onCloseButtonClicked", false));
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_STOP_SPINNER_ON_BET_SELECT_POPUP, this.buttonSpinnerStop, this);
      };
      BetSelectionPopupComponent.prototype.initLogger = function() {
        this.mLogger || (this.mLogger = new Logger_1.Logger("BetSelectionPopupComponent", true));
      };
      BetSelectionPopupComponent.prototype.start = function() {};
      BetSelectionPopupComponent.prototype.resetButtonSpinner = function() {
        this.closeBetSelectPopupButton.interactable = true;
        this.spinnerComponent.node.active = false;
        this.startButton.interactable = true;
        this.plusButtonEnabled.enabled = true;
        this.minusButtonEnabled.enabled = true;
      };
      BetSelectionPopupComponent.prototype.setGameType = function(gameType) {
        this.mGameType = gameType;
      };
      BetSelectionPopupComponent.prototype.getGameType = function() {
        return this.mGameType;
      };
      BetSelectionPopupComponent.prototype.initialize = function(gameType) {
        this.haveWinMetaList();
        this.calculateCurrentIndex();
        this.resetButtonSpinner();
        this.mLogger.Log("tanisha BetSelectionPopupComponent initialize enter -- index " + this.getCurrentIndex() + " gameType " + gameType + " Object.keys(this.mCurrentBetAmountList).length " + Object.keys(this.mCurrentBetAmountList).length + " Object.keys(this.mTwoPlayerWinMetaList).length " + Object.keys(this.mTwoPlayerWinMetaList).length);
        this.setGameType(gameType);
        this.setBetAmountAndReward(this.mCurrentActiveIndexOfBetList, gameType);
      };
      BetSelectionPopupComponent.prototype.getCurrentIndex = function() {
        return this.mCurrentActiveIndexOfBetList;
      };
      BetSelectionPopupComponent.prototype.onPlusButtonClicked = function() {
        this.mCurrentActiveIndexOfBetList++;
        this.setBetAmountAndReward(this.mCurrentActiveIndexOfBetList, this.getGameType());
      };
      BetSelectionPopupComponent.prototype.onMinusButtonClicked = function() {
        this.mCurrentActiveIndexOfBetList--;
        this.setBetAmountAndReward(this.mCurrentActiveIndexOfBetList, this.getGameType());
      };
      BetSelectionPopupComponent.prototype.setBetAmountAndReward = function(index, gameType) {
        if (index >= Object.keys(this.mCurrentBetAmountList).length) return;
        var betAmount = this.mCurrentBetAmountList[index];
        this.betAmountEnabled.string = Helper_1.Helper.getLocaleNumber(betAmount);
        this.betAmountDisabled.string = Helper_1.Helper.getLocaleNumber(betAmount);
        var localizationComponent = this.playerLabel.getComponent(LocalizationComponent_1.default);
        if (gameType == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_1V1) {
          this.rewardAmountLabel.string = Helper_1.Helper.getLocaleNumber(this.mTwoPlayerWinMetaList[index][0]);
          localizationComponent.setValues("#2PLAYERS_TEXT");
        } else {
          this.rewardAmountLabel.string = Helper_1.Helper.getLocaleNumber(this.mFourPlayerWinMetaList[index][0]);
          localizationComponent.setValues("#4PLAYERS_TEXT");
        }
        this.betSelectEnabled.active = betAmount <= this.mPlayer.getCoins();
        this.betSelectDisabled.active = betAmount > this.mPlayer.getCoins();
        this.betSelectDisabled.active && this.disableContainerAnimation();
        var bet_select_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_BET_SELECT);
        var showButtons = 2 == bet_select_variant || 3 == bet_select_variant && this.mPlayer.getPublicGamesCount() >= 5;
        this.plusButtonEnabled.node.active = showButtons && index < Object.keys(this.mCurrentBetAmountList).length - 1;
        this.plusButtonDisabled.active = showButtons && index >= Object.keys(this.mCurrentBetAmountList).length - 1;
        this.minusButtonEnabled.node.active = showButtons && index > 0;
        this.minusButtonDisabled.active = showButtons && index <= 0;
        this.entryFeeLabel.node.active = showButtons;
        this.entryFeeLabelVar3.node.active = !showButtons;
        this.initRewardAnimation();
      };
      BetSelectionPopupComponent.prototype.disableContainerAnimation = function() {
        var animation = this.betSelectDisabledAnimation.getComponent(cc.Animation);
        animation.play("betSelectDisabledAnim");
      };
      BetSelectionPopupComponent.prototype.initRewardAnimation = function() {
        var animation = this.rewardNodeAnimation.getComponent(cc.Animation);
        animation.play("betSelectRewardNodeAnim");
      };
      BetSelectionPopupComponent.prototype.haveWinMetaList = function() {
        this.mCurrentBetAmountList = this.mPlayer.getCurrentBetAmountList();
        this.mTwoPlayerWinMetaList = this.mPlayer.getTwoPlayerWinMetaList();
        this.mFourPlayerWinMetaList = this.mPlayer.getFourPlayerWinMetaList();
      };
      BetSelectionPopupComponent.prototype.getIndexForBetAmount = function(currentBetAmount) {
        this.mCurrentActiveIndexOfBetList = 0;
        var bet_select_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_BET_SELECT);
        var lastBetCondition = 3 == bet_select_variant && this.mPlayer.getPublicGamesCount() < 5;
        if (!lastBetCondition && currentBetAmount <= this.mPlayer.getCoins()) for (var idx = 0; idx < Object.keys(this.mCurrentBetAmountList).length; idx++) {
          if (currentBetAmount == this.mCurrentBetAmountList[idx]) {
            this.mCurrentActiveIndexOfBetList = idx;
            return true;
          }
          if (currentBetAmount < this.mCurrentBetAmountList[idx]) break;
        }
        return false;
      };
      BetSelectionPopupComponent.prototype.calculateCurrentIndex = function() {
        this.mCurrentActiveIndexOfBetList = 0;
        var currentBetAmount = this.mPlayer.getLastBetSelectedAmount();
        if (!this.getIndexForBetAmount(currentBetAmount)) {
          currentBetAmount = this.mPlayer.getDefaultBetSelectAmount();
          this.getIndexForBetAmount(currentBetAmount);
        }
      };
      BetSelectionPopupComponent.prototype.onStartButtonClicked = function() {
        this.spinnerComponent.node.active = true;
        this.spinnerComponent.showLoader();
        this.closeBetSelectPopupButton.interactable = false;
        this.plusButtonEnabled.enabled = false;
        this.minusButtonEnabled.enabled = false;
        var currentIndex = this.getCurrentIndex();
        this.mPlayer.setLastBetSelectedAmount(this.mCurrentBetAmountList[currentIndex]);
        this.mStatsController.count("gameplay", 1, "bet_select", "" + this.mCurrentBetAmountList[currentIndex], "" + this.mPlayer.getDefaultBetSelectAmount());
        this.getGameType() == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_1V1 ? this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_START_TWO_PLAYER_GAME, {
          bet_selected: this.mCurrentBetAmountList[currentIndex]
        }) : this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_START_FOUR_PLAYER_GAME, {
          bet_selected: this.mCurrentBetAmountList[currentIndex]
        });
      };
      BetSelectionPopupComponent.prototype.onCloseButtonClicked = function() {
        this.mStatsController.count("button", 1, "bet_selected", this.getGameType() == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_1V1 ? "2player" : "4player", "online", "close");
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_CLOSED_BET_SELECT_POPUP);
        this.getComponent(PopupComponent_1.default).hidePopup();
        this.buttonSpinnerStop();
      };
      BetSelectionPopupComponent.prototype.buttonSpinnerStop = function() {
        this.mLogger.Log("tanisha spinner stop");
        this.resetButtonSpinner();
        this.spinnerComponent.hideLoader();
      };
      BetSelectionPopupComponent.prototype.onDestroy = function() {
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_STOP_SPINNER_ON_BET_SELECT_POPUP, this.buttonSpinnerStop, this);
      };
      __decorate([ property(cc.Label) ], BetSelectionPopupComponent.prototype, "selectionText", void 0);
      __decorate([ property(cc.Button) ], BetSelectionPopupComponent.prototype, "plusButtonEnabled", void 0);
      __decorate([ property(cc.Button) ], BetSelectionPopupComponent.prototype, "minusButtonEnabled", void 0);
      __decorate([ property(cc.Node) ], BetSelectionPopupComponent.prototype, "plusButtonDisabled", void 0);
      __decorate([ property(cc.Node) ], BetSelectionPopupComponent.prototype, "minusButtonDisabled", void 0);
      __decorate([ property(cc.Node) ], BetSelectionPopupComponent.prototype, "betSelectEnabled", void 0);
      __decorate([ property(cc.Node) ], BetSelectionPopupComponent.prototype, "betSelectDisabled", void 0);
      __decorate([ property(cc.Label) ], BetSelectionPopupComponent.prototype, "betAmountEnabled", void 0);
      __decorate([ property(cc.Label) ], BetSelectionPopupComponent.prototype, "betAmountDisabled", void 0);
      __decorate([ property(cc.Label) ], BetSelectionPopupComponent.prototype, "rewardAmountLabel", void 0);
      __decorate([ property(cc.Button) ], BetSelectionPopupComponent.prototype, "startButton", void 0);
      __decorate([ property(cc.Label) ], BetSelectionPopupComponent.prototype, "playerLabel", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], BetSelectionPopupComponent.prototype, "spinnerComponent", void 0);
      __decorate([ property(cc.Button) ], BetSelectionPopupComponent.prototype, "closeBetSelectPopupButton", void 0);
      __decorate([ property(cc.Label) ], BetSelectionPopupComponent.prototype, "entryFeeLabel", void 0);
      __decorate([ property(cc.Label) ], BetSelectionPopupComponent.prototype, "entryFeeLabelVar3", void 0);
      __decorate([ property(cc.Node) ], BetSelectionPopupComponent.prototype, "rewardNodeAnimation", void 0);
      __decorate([ property(cc.Node) ], BetSelectionPopupComponent.prototype, "betSelectDisabledAnimation", void 0);
      BetSelectionPopupComponent = __decorate([ ccclass ], BetSelectionPopupComponent);
      return BetSelectionPopupComponent;
    }(cc.Component);
    exports.default = BetSelectionPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  BoardComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "024aafl5vRAmrktmDT1i5ml", "BoardComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var DiceComponent_1 = require("./DiceComponent");
    var ProfileImageComponent_1 = require("./ProfileImageComponent");
    var Logger_1 = require("../Generic/Logger");
    var PawnsContainerComponent_1 = require("./PawnsContainerComponent");
    var ChatComponent_1 = require("./ChatComponent");
    var CountryFlagComponent_1 = require("./CountryFlagComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerSub = function() {
      function PlayerSub(homeNode, baseParent, dice, profileNode, nameLabel, chatPrefab, flagComp, cName) {
        this.mHomeNode = homeNode;
        this.mDice = dice;
        this.mProfileNode = profileNode;
        this.mBaseCells = [];
        this.mNameLabel = nameLabel;
        for (var index = 1; index <= 4; index++) {
          var nodeName = "p" + index;
          this.mBaseCells.push(baseParent.getChildByName(nodeName));
        }
        this.mChatComponent = chatPrefab;
        this.mFlagComponent = flagComp;
        this.mCustomNameLabel = cName;
      }
      PlayerSub.prototype.getBaseCells = function() {
        return this.mBaseCells;
      };
      PlayerSub.prototype.getHomeNode = function() {
        return this.mHomeNode;
      };
      PlayerSub.prototype.getDice = function() {
        return this.mDice;
      };
      PlayerSub.prototype.getProfileNode = function() {
        return this.mProfileNode;
      };
      PlayerSub.prototype.getNameLabel = function() {
        return this.mNameLabel;
      };
      PlayerSub.prototype.getChatComponent = function() {
        return this.mChatComponent;
      };
      PlayerSub.prototype.getFlagComponent = function() {
        return this.mFlagComponent;
      };
      PlayerSub.prototype.getCustomLabelComponent = function() {
        return this.mCustomNameLabel;
      };
      return PlayerSub;
    }();
    exports.PlayerSub = PlayerSub;
    var BoardComponent = function(_super) {
      __extends(BoardComponent, _super);
      function BoardComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cellsParent = null;
        _this.homeNode0 = null;
        _this.homeNode1 = null;
        _this.homeNode2 = null;
        _this.homeNode3 = null;
        _this.baseNode0 = null;
        _this.baseNode1 = null;
        _this.baseNode2 = null;
        _this.baseNode3 = null;
        _this.diceO = null;
        _this.dice1 = null;
        _this.dice2 = null;
        _this.dice3 = null;
        _this.profile0 = null;
        _this.profile1 = null;
        _this.profile2 = null;
        _this.profile3 = null;
        _this.pawnsContainerComponent = null;
        _this.safeCellPrefab = null;
        _this.house0 = null;
        _this.house1 = null;
        _this.house2 = null;
        _this.house3 = null;
        _this.color0 = null;
        _this.color1 = null;
        _this.color2 = null;
        _this.color3 = null;
        _this.name0 = null;
        _this.name1 = null;
        _this.name2 = null;
        _this.name3 = null;
        _this.cname0 = null;
        _this.cname1 = null;
        _this.cname2 = null;
        _this.cname3 = null;
        _this.chatNode0 = null;
        _this.chatNode1 = null;
        _this.chatNode2 = null;
        _this.chatNode3 = null;
        return _this;
      }
      BoardComponent.prototype.onLoad = function() {
        var persistNode = cc.find("PersistantNode");
        var persistNodeComponent = persistNode.getComponent(PersistantNodeComponent_1.default);
        this.mGameController = persistNodeComponent.GetGameController();
        this.mLogger = new Logger_1.Logger("BoardComponent", true);
        this.mCells = [];
        for (var index = 0; index <= 71; index++) {
          var nodeName = "cell_" + index;
          this.mCells.push(this.cellsParent.getChildByName(nodeName));
        }
        this.name0.node.active = false;
        this.name1.node.active = false;
        this.name2.node.active = false;
        this.name3.node.active = false;
        this.flag0.node.active = false;
        this.flag1.node.active = false;
        this.flag2.node.active = false;
        this.flag3.node.active = false;
        this.cname0.node.active = false;
        this.cname1.node.active = false;
        this.cname2.node.active = false;
        this.cname3.node.active = false;
        this.mHouses = [];
        this.mHouses.push(this.house0, this.house1, this.house2, this.house3);
        this.mColours = [];
        this.mColours.push(this.color0, this.color1, this.color2, this.color3);
      };
      BoardComponent.prototype.doSeatMapping = function() {
        var dicesBySeat = [];
        dicesBySeat.push(this.diceO, this.dice1, this.dice2, this.dice3);
        var dicesByIndex = [];
        for (var index = 0; index < 4; index++) {
          var seatIndex = this.mGameController.getSeatIndex(index);
          dicesByIndex[index] = dicesBySeat[seatIndex];
        }
        var profilesBySeat = [];
        profilesBySeat.push(this.profile0, this.profile1, this.profile2, this.profile3);
        var profilesByIndex = [];
        for (var index = 0; index < 4; index++) {
          var seatIndex = this.mGameController.getSeatIndex(index);
          profilesByIndex[index] = profilesBySeat[seatIndex];
          this.mLogger.Log("Mapping " + index + " to seat " + seatIndex);
        }
        var namesBySeat = [];
        namesBySeat.push(this.name0, this.name1, this.name2, this.name3);
        var namesByIndex = [];
        for (var index = 0; index < 4; index++) {
          var seatIndex = this.mGameController.getSeatIndex(index);
          namesByIndex[index] = namesBySeat[seatIndex];
        }
        var flagsBySeat = [];
        flagsBySeat.push(this.flag0, this.flag1, this.flag2, this.flag3);
        var flagsByIndex = [];
        for (var index = 0; index < 4; index++) {
          var seatIndex = this.mGameController.getSeatIndex(index);
          flagsByIndex[index] = flagsBySeat[seatIndex];
        }
        var customNameBySeat = [];
        customNameBySeat.push(this.cname0, this.cname1, this.cname2, this.cname3);
        var customNameIndex = [];
        for (var index = 0; index < 4; index++) {
          var seatIndex = this.mGameController.getSeatIndex(index);
          customNameIndex[index] = customNameBySeat[seatIndex];
        }
        var chatBySeat = [];
        chatBySeat.push(this.chatNode0, this.chatNode1, this.chatNode2, this.chatNode3);
        var chatByIndex = [];
        for (var index = 0; index < 4; index++) {
          var seatIndex = this.mGameController.getSeatIndex(index);
          chatByIndex[index] = chatBySeat[seatIndex];
        }
        this.mPlayerSub = [];
        this.mPlayerSub.push(new PlayerSub(this.homeNode0, this.baseNode0, dicesByIndex[0], profilesByIndex[0], namesByIndex[0], chatByIndex[0], flagsByIndex[0], customNameIndex[0]));
        this.mPlayerSub.push(new PlayerSub(this.homeNode1, this.baseNode1, dicesByIndex[1], profilesByIndex[1], namesByIndex[1], chatByIndex[1], flagsByIndex[1], customNameIndex[1]));
        this.mPlayerSub.push(new PlayerSub(this.homeNode2, this.baseNode2, dicesByIndex[2], profilesByIndex[2], namesByIndex[2], chatByIndex[2], flagsByIndex[2], customNameIndex[2]));
        this.mPlayerSub.push(new PlayerSub(this.homeNode3, this.baseNode3, dicesByIndex[3], profilesByIndex[3], namesByIndex[3], chatByIndex[3], flagsByIndex[3], customNameIndex[3]));
      };
      BoardComponent.prototype.start = function() {};
      BoardComponent.prototype.getWorldPositionCell = function(cellIndex, playerIndex, pawnIndex) {
        var targetCell = null;
        cellIndex > -1 ? targetCell = this.mCells[cellIndex] : -1 == cellIndex ? targetCell = this.mPlayerSub[playerIndex].getBaseCells()[pawnIndex] : -2 == cellIndex && (targetCell = this.mPlayerSub[playerIndex].getHomeNode());
        return targetCell.parent.convertToWorldSpaceAR(targetCell.getPosition());
      };
      BoardComponent.prototype.getPlayerSub = function(index) {
        if (this.mPlayerSub) return this.mPlayerSub[index];
        return null;
      };
      BoardComponent.prototype.rotate = function(angle) {
        this.node.rotation = angle;
      };
      BoardComponent.prototype.isCellColoured = function(index) {
        var cell = this.mCells[index];
        if (16777215 != cell.color.toRGBValue()) return true;
        return false;
      };
      BoardComponent.prototype.getHouseSprite = function(index) {
        return this.mHouses[index];
      };
      BoardComponent.prototype.getHouseColor = function(index) {
        return this.mColours[index];
      };
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "cellsParent", void 0);
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "homeNode0", void 0);
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "homeNode1", void 0);
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "homeNode2", void 0);
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "homeNode3", void 0);
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "baseNode0", void 0);
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "baseNode1", void 0);
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "baseNode2", void 0);
      __decorate([ property(cc.Node) ], BoardComponent.prototype, "baseNode3", void 0);
      __decorate([ property(DiceComponent_1.default) ], BoardComponent.prototype, "diceO", void 0);
      __decorate([ property(DiceComponent_1.default) ], BoardComponent.prototype, "dice1", void 0);
      __decorate([ property(DiceComponent_1.default) ], BoardComponent.prototype, "dice2", void 0);
      __decorate([ property(DiceComponent_1.default) ], BoardComponent.prototype, "dice3", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], BoardComponent.prototype, "profile0", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], BoardComponent.prototype, "profile1", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], BoardComponent.prototype, "profile2", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], BoardComponent.prototype, "profile3", void 0);
      __decorate([ property(PawnsContainerComponent_1.default) ], BoardComponent.prototype, "pawnsContainerComponent", void 0);
      __decorate([ property(cc.Prefab) ], BoardComponent.prototype, "safeCellPrefab", void 0);
      __decorate([ property(cc.Sprite) ], BoardComponent.prototype, "house0", void 0);
      __decorate([ property(cc.Sprite) ], BoardComponent.prototype, "house1", void 0);
      __decorate([ property(cc.Sprite) ], BoardComponent.prototype, "house2", void 0);
      __decorate([ property(cc.Sprite) ], BoardComponent.prototype, "house3", void 0);
      __decorate([ property(cc.Color) ], BoardComponent.prototype, "color0", void 0);
      __decorate([ property(cc.Color) ], BoardComponent.prototype, "color1", void 0);
      __decorate([ property(cc.Color) ], BoardComponent.prototype, "color2", void 0);
      __decorate([ property(cc.Color) ], BoardComponent.prototype, "color3", void 0);
      __decorate([ property(cc.Label) ], BoardComponent.prototype, "name0", void 0);
      __decorate([ property(cc.Label) ], BoardComponent.prototype, "name1", void 0);
      __decorate([ property(cc.Label) ], BoardComponent.prototype, "name2", void 0);
      __decorate([ property(cc.Label) ], BoardComponent.prototype, "name3", void 0);
      __decorate([ property(CountryFlagComponent_1.default) ], BoardComponent.prototype, "flag0", void 0);
      __decorate([ property(CountryFlagComponent_1.default) ], BoardComponent.prototype, "flag1", void 0);
      __decorate([ property(CountryFlagComponent_1.default) ], BoardComponent.prototype, "flag2", void 0);
      __decorate([ property(CountryFlagComponent_1.default) ], BoardComponent.prototype, "flag3", void 0);
      __decorate([ property(cc.Label) ], BoardComponent.prototype, "cname0", void 0);
      __decorate([ property(cc.Label) ], BoardComponent.prototype, "cname1", void 0);
      __decorate([ property(cc.Label) ], BoardComponent.prototype, "cname2", void 0);
      __decorate([ property(cc.Label) ], BoardComponent.prototype, "cname3", void 0);
      __decorate([ property(ChatComponent_1.default) ], BoardComponent.prototype, "chatNode0", void 0);
      __decorate([ property(ChatComponent_1.default) ], BoardComponent.prototype, "chatNode1", void 0);
      __decorate([ property(ChatComponent_1.default) ], BoardComponent.prototype, "chatNode2", void 0);
      __decorate([ property(ChatComponent_1.default) ], BoardComponent.prototype, "chatNode3", void 0);
      BoardComponent = __decorate([ ccclass ], BoardComponent);
      return BoardComponent;
    }(cc.Component);
    exports.default = BoardComponent;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./ChatComponent": "ChatComponent",
    "./CountryFlagComponent": "CountryFlagComponent",
    "./DiceComponent": "DiceComponent",
    "./PawnsContainerComponent": "PawnsContainerComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./ProfileImageComponent": "ProfileImageComponent"
  } ],
  BotSubscribtionController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36b64PF7GpAJ6L3hdronVpM", "BotSubscribtionController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var Constants_1 = require("../Constants");
    var Helper_1 = require("../Generic/Helper");
    var BotSubscribtionController = function() {
      function BotSubscribtionController(persistantNodeComponent) {
        this.mBotSubscriptionStatus = false;
        this.mStatsController = null;
        this.mShowingFbBotSubscriptionPopup = false;
        this.mBotSubscribeType = 0;
        this.mHasUserAlreadySubscribed = false;
        this.mLogger = new Logger_1.Logger("BotSubscriptionController", true);
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mShowingFbBotSubscriptionPopup = false;
        this.checkAndResetLocalSubscribeValue();
      }
      BotSubscribtionController.prototype.initialize = function(botSubscribeType) {
        this.mBotSubscribeType = botSubscribeType;
        botSubscribeType == Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_NONE && (this.mBotSubscribeType = null != cc.sys.localStorage.getItem("botSubscribeType") && cc.sys.localStorage.getItem("botSubscribeType"));
        0 != this.mBotSubscribeType && cc.sys.localStorage.setItem("botSubscribeType", this.mBotSubscribeType);
      };
      BotSubscribtionController.prototype.checkAndResetLocalSubscribeValue = function() {
        var botSubscribeTypeFromLocal = null != cc.sys.localStorage.getItem("botSubscribeType") && cc.sys.localStorage.getItem("botSubscribeType");
        botSubscribeTypeFromLocal == Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_LOBBY_RETURN_ALL && cc.sys.localStorage.setItem("botSubscribeType", Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_NONE);
        this.mLogger.Log("eagle subscribeToBot canSubscribeFromLocal local: " + botSubscribeTypeFromLocal + " final:" + this.mHasUserAlreadySubscribed);
      };
      BotSubscribtionController.prototype.setUserSubscribedToBotValue = function(value) {
        this.mLogger.Log("tanisha ----- setUserSubscribedToBotValue " + value);
        this.mHasUserAlreadySubscribed = value;
      };
      BotSubscribtionController.prototype.setUserViewedSubscribedToBot = function() {
        if (this.mBotSubscribeType != Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_NONE && this.mBotSubscribeType != Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_LOBBY_RETURN_ALL) {
          cc.sys.localStorage.setItem("botSubscribeType", Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_NONE);
          this.mBotSubscribeType = Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_NONE;
        }
      };
      BotSubscribtionController.prototype.canSubscribeBot = function() {
        var returningFromLobby = this.mPersistantNodeComponent.isBackFromGame();
        if (returningFromLobby && !(this.mBotSubscribeType == Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_LOBBY_RETURN_ALL || this.mBotSubscribeType == Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_LOBBY_RETURN)) return false;
        if (!returningFromLobby && this.mBotSubscribeType != Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_USER_LOAD) return false;
        this.mLogger.Log("tanisha ----- check canSubscribeBot this.mHasUserAlreadySubscribed " + this.mHasUserAlreadySubscribed);
        return this.mBotSubscribeType != Constants_1.constants.BOT_SUBSCRIBE_TYPE.BOT_SUBSCRIBE_NONE && !this.mHasUserAlreadySubscribed;
      };
      BotSubscribtionController.prototype.fbCallSubscribeBot = function() {
        var self = this;
        FBInstant.player.canSubscribeBotAsync().then(function(can_subscribe) {
          self.mLogger.Log("eagle can_subscribe val" + can_subscribe);
          self.mStatsController.count("chatbot", 1, "canSubscribe", can_subscribe);
          can_subscribe && self.subscribeToBot();
        }).catch(function(error) {
          self.mLogger.Log("eagle canSubscribeBotAsync() error " + JSON.stringify(error));
          self.mStatsController.count("chatbot", 1, "canSubscribe", error.code);
          self.mHasUserAlreadySubscribed = true;
          self.closeFbSubscriptionPopup();
        });
      };
      BotSubscribtionController.prototype.isShowingFbBotSubscriptionPopup = function() {
        return this.mShowingFbBotSubscriptionPopup;
      };
      BotSubscribtionController.prototype.subscribeToBot = function() {
        if (!this.canSubscribeBot()) return;
        this.setUserViewedSubscribedToBot();
        var self = this;
        this.mStatsController.count("popup", 1, "fb_subscribe");
        this.mShowingFbBotSubscriptionPopup = true;
        FBInstant.player.subscribeBotAsync().then(function() {
          self.mStatsController.count("button", 1, "fb_subscribe", "turn_on");
          Helper_1.Helper.sendFBAnalytics("bot_subscribed");
          self.mLogger.Log("eagle subscribeBotAsync successfull");
          self.updateAfterBotSubscribedSuccessfull();
          self.closeFbSubscriptionPopup();
        }).catch(function(error) {
          self.mStatsController.count("button", 1, "fb_subscribe", error.code);
          self.mLogger.Log("eagle subscribeBotAsync error " + JSON.stringify(error));
          self.mHasUserAlreadySubscribed = true;
          self.closeFbSubscriptionPopup();
        });
      };
      BotSubscribtionController.prototype.updateAfterBotSubscribedSuccessfull = function() {
        this.mHasUserAlreadySubscribed = true;
        this.updateSubscribedToBot();
        this.mPersistantNodeComponent.GetPlayerController().getModel().setSubscribedToBotStatus(true);
        this.mPersistantNodeComponent.GetPlayerController().getModel().resetEmojiStatusList();
      };
      BotSubscribtionController.prototype.updateSubscribedToBot = function() {
        var playerController = this.mPersistantNodeComponent.GetPlayerController();
        this.mLogger.Log("tanisha verifyInterstitialAdsGrant enter");
        var params = {
          pid: playerController.getModel().getId(),
          access_token: playerController.getModel().getAccessToken(),
          duid: playerController.getModel().getSnuid()
        };
        var self = this;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/user/setSubscribedToBot", params, function(d) {
          self.mLogger.Log("tanisha setSubscribedToBot server set true");
        }, function() {
          self.mLogger.Log("tanisha setSubscribedToBot server set false");
        });
      };
      BotSubscribtionController.prototype.closeFbSubscriptionPopup = function() {
        this.mShowingFbBotSubscriptionPopup = false;
        this.mPersistantNodeComponent.node.emit("popup_closed", {
          popup_name: "fbBotSubscriptionPopup"
        });
      };
      return BotSubscribtionController;
    }();
    exports.BotSubscribtionController = BotSubscribtionController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger"
  } ],
  BurgerMenuComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fbcfazOajBPGIOaVv1AccEK", "BurgerMenuComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BurgerMenuComponent = function(_super) {
      __extends(BurgerMenuComponent, _super);
      function BurgerMenuComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bgButton = null;
        _this.helpButton = null;
        _this.mPersistantComponent = null;
        return _this;
      }
      BurgerMenuComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.bgButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "BurgerMenuComponent", "onBgPressed"));
      };
      BurgerMenuComponent.prototype.onBgPressed = function() {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_BACK_PRESSED);
      };
      BurgerMenuComponent.prototype.start = function() {};
      __decorate([ property(cc.Button) ], BurgerMenuComponent.prototype, "bgButton", void 0);
      __decorate([ property(cc.Button) ], BurgerMenuComponent.prototype, "helpButton", void 0);
      BurgerMenuComponent = __decorate([ ccclass ], BurgerMenuComponent);
      return BurgerMenuComponent;
    }(cc.Component);
    exports.default = BurgerMenuComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ButtonPressComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9aecb2LV/dK47Doz+FeH/nP", "ButtonPressComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("./../Generic/Helper");
    var Logger_1 = require("../Generic/Logger");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ButtonPressComponent = function(_super) {
      __extends(ButtonPressComponent, _super);
      function ButtonPressComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.yShiftPercent = 0;
        return _this;
      }
      ButtonPressComponent.prototype.onLoad = function() {
        this.mPressed = false;
        this.mEntered = false;
        this.mHitState = false;
        this.spinner && (this.spinner.active = false);
        this.mPosition = this.contents.getPosition();
        this.mLogger = new Logger_1.Logger("ButtonPressComponent", true);
        this.button.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart.bind(this));
        this.button.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnded.bind(this));
        this.button.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnded.bind(this));
        this.button.node.on(cc.Node.EventType.MOUSE_ENTER, this.onMouseEnter.bind(this));
        this.button.node.on(cc.Node.EventType.MOUSE_LEAVE, this.onMouseLeave.bind(this));
        this.button.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove.bind(this));
        this.button.clickEvents.push(this.getEventHandler("OnPressed"));
      };
      ButtonPressComponent.prototype.reset = function() {
        this.mPressed = false;
        this.mEntered = false;
        this.spinner && (this.spinner.active = false);
      };
      ButtonPressComponent.prototype.start = function() {
        this.mPosition = this.contents.getPosition();
      };
      ButtonPressComponent.prototype.onTouchStart = function() {
        this.mPressed = true;
        this.mHitState = true;
        this.onDown();
      };
      ButtonPressComponent.prototype.onTouchEnded = function() {
        this.mPressed = false;
        this.onUp();
      };
      ButtonPressComponent.prototype.onMouseLeave = function() {
        this.mEntered = false;
        this.mPressed && this.onUp();
      };
      ButtonPressComponent.prototype.onTouchMove = function(event) {
        var hit = this.button.node._hitTest(event.touch.getLocation());
        if (this.mHitState != hit) {
          hit ? this.onMouseEnter() : this.onMouseLeave();
          this.mHitState = hit;
        }
      };
      ButtonPressComponent.prototype.onMouseEnter = function() {
        this.mPressed && !this.mEntered && this.onDown();
        this.mEntered = true;
      };
      ButtonPressComponent.prototype.onUp = function() {
        this.mPosition || this.node && Helper_1.Helper.sendSentryLog("ButtonPressComponent null position " + this.node.name);
        this.button.interactable && this.contents && this.mPosition && this.contents.setPosition(this.mPosition);
      };
      ButtonPressComponent.prototype.onDown = function() {
        if (this.button.interactable && this.mPosition) {
          var newPos = this.mPosition.clone();
          newPos.y -= this.contents.getContentSize().height * this.yShiftPercent;
          this.contents.setPosition(newPos);
        }
      };
      ButtonPressComponent.prototype.getEventHandler = function(functionName) {
        var eHandler = new cc.Component.EventHandler();
        eHandler.target = this.node;
        eHandler.component = "ButtonPressComponent";
        eHandler.handler = functionName;
        return eHandler;
      };
      ButtonPressComponent.prototype.OnPressed = function() {
        if (this.spinner) {
          this.spinner.active = true;
          this.spinner.getComponent(SpinnerComponent_1.default).showLoader();
        }
      };
      ButtonPressComponent.prototype.onDestroy = function() {
        if (!this.button || !this.button.node) return;
        this.button.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);
        this.button.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEnded, this);
        this.button.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnded, this);
        this.button.node.off(cc.Node.EventType.MOUSE_ENTER, this.onMouseEnter, this);
        this.button.node.off(cc.Node.EventType.MOUSE_LEAVE, this.onMouseLeave, this);
        this.button.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
        if (this.button && this.button.clickEvents && this.button.clickEvents.length > 0) for (var i = 0; i < this.button.clickEvents.length; i++) this.button.clickEvents.pop();
      };
      ButtonPressComponent.prototype.onDisable = function() {
        if (this.spinner) {
          this.spinner.active = false;
          this.spinner.getComponent(SpinnerComponent_1.default).hideLoader();
        }
      };
      __decorate([ property(cc.Button) ], ButtonPressComponent.prototype, "button", void 0);
      __decorate([ property(cc.Node) ], ButtonPressComponent.prototype, "contents", void 0);
      __decorate([ property(cc.Node) ], ButtonPressComponent.prototype, "spinner", void 0);
      __decorate([ property ], ButtonPressComponent.prototype, "yShiftPercent", void 0);
      ButtonPressComponent = __decorate([ ccclass ], ButtonPressComponent);
      return ButtonPressComponent;
    }(cc.Component);
    exports.default = ButtonPressComponent;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./../Generic/Helper": "Helper",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  ButtonSoundComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "005c2GB9C9LcZMo3QKmmwBy", "ButtonSoundComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var SoundController_1 = require("../Controllers/SoundController");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ButtonSoundComponent = function(_super) {
      __extends(ButtonSoundComponent, _super);
      function ButtonSoundComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.soundName = "hello";
        _this.mEnabled = true;
        _this.mPersistantController = null;
        return _this;
      }
      ButtonSoundComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.initializeCallback();
      };
      ButtonSoundComponent.prototype.initializeCallback = function() {
        this.getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ButtonSoundComponent", "PlaySound"));
      };
      ButtonSoundComponent.prototype.PlaySound = function() {
        SoundController_1.SoundController.getInstance().isSoundEnabled() && this.mEnabled && this.mPersistantController.node.emit("play_sound_event", {
          sound_name: this.soundName
        });
      };
      ButtonSoundComponent.prototype.setEnabled = function(enable) {
        this.mEnabled = enable;
      };
      __decorate([ property ], ButtonSoundComponent.prototype, "soundName", void 0);
      ButtonSoundComponent = __decorate([ ccclass ], ButtonSoundComponent);
      return ButtonSoundComponent;
    }(cc.Component);
    exports.default = ButtonSoundComponent;
    cc._RF.pop();
  }, {
    "../Controllers/SoundController": "SoundController",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ChatBlockController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e038dzCXdBLxKM3nHVs2EFh", "ChatBlockController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var ChatBlockController = function() {
      function ChatBlockController(persistantComponent) {
        this.mChatBlocked = false;
        this.mStatsController = null;
        this.mLogger = new Logger_1.Logger("ChatBlockController", true);
        this.mPersistantNodeComponent = persistantComponent;
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mBlockedPidMap = {};
        var chatBlocked = cc.sys.localStorage.getItem("chat_blocked");
        "true" == chatBlocked && (this.mChatBlocked = true);
      }
      ChatBlockController.prototype.reset = function() {
        this.mBlockedPidMap = {};
      };
      ChatBlockController.prototype.blockPid = function(pid) {
        this.mBlockedPidMap[pid] = true;
        this.mStatsController.count("chat", 1, "block", pid);
      };
      ChatBlockController.prototype.unblockPid = function(pid) {
        if (this.mBlockedPidMap[pid]) {
          delete this.mBlockedPidMap[pid];
          this.mStatsController.count("chat", 1, "unblock", pid);
        }
      };
      ChatBlockController.prototype.isPidBlocked = function(pid) {
        if (this.mBlockedPidMap[pid]) return true;
        return false;
      };
      ChatBlockController.prototype.enableChat = function() {
        cc.sys.localStorage.setItem("chat_blocked", "false");
        this.mChatBlocked = false;
      };
      ChatBlockController.prototype.disableChat = function() {
        cc.sys.localStorage.setItem("chat_blocked", "true");
        this.mChatBlocked = true;
      };
      ChatBlockController.prototype.isChatBlocked = function() {
        return this.mChatBlocked;
      };
      return ChatBlockController;
    }();
    exports.ChatBlockController = ChatBlockController;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger"
  } ],
  ChatBubbleViewComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a92frcjbpLIb9gUu6u5SOY", "ChatBubbleViewComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var ChatBubbleAlignment;
    (function(ChatBubbleAlignment) {
      ChatBubbleAlignment[ChatBubbleAlignment["LEFT"] = 0] = "LEFT";
      ChatBubbleAlignment[ChatBubbleAlignment["CENTER"] = 1] = "CENTER";
      ChatBubbleAlignment[ChatBubbleAlignment["RIGHT"] = 2] = "RIGHT";
    })(ChatBubbleAlignment = exports.ChatBubbleAlignment || (exports.ChatBubbleAlignment = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChatBubbleViewComponent = function(_super) {
      __extends(ChatBubbleViewComponent, _super);
      function ChatBubbleViewComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nameLabel = null;
        _this.messageLabel = null;
        _this.emojiNode = null;
        _this.pawnNode = null;
        _this.chatBubble = null;
        _this.bubbleAnimation = null;
        _this.mOriginalBubbleSize = null;
        _this.mOriginalLabelSize = null;
        _this.maxWidth = 350;
        _this.mIsResized = false;
        _this.mPersistantComponent = null;
        _this.mChatBubbleAlignment = ChatBubbleAlignment.LEFT;
        return _this;
      }
      ChatBubbleViewComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.chatBubble && this.chatBubble.node && (this.mOriginalBubbleSize = this.chatBubble.node.getContentSize());
        this.messageLabel && this.messageLabel.node && (this.mOriginalLabelSize = this.messageLabel.node.getContentSize());
        this.bubbleAnimation && this.bubbleAnimation.on("stop", this.onAnimationComplete.bind(this));
      };
      ChatBubbleViewComponent.prototype.start = function() {
        this.resizeBubble();
      };
      ChatBubbleViewComponent.prototype.initializeNameAndMessage = function(name, message, colorIndex, chatBubbleAlignment) {
        this.nameLabel.string = Helper_1.Helper.getTruncatedString(name, 15, true);
        this.messageLabel.string = message;
        this.resizeBubble();
        this.showPawn(colorIndex);
        this.mChatBubbleAlignment = chatBubbleAlignment;
      };
      ChatBubbleViewComponent.prototype.initializeEmoji = function(name, emojiId, colorIndex, chatBubbleAlignment) {
        this.nameLabel.string = Helper_1.Helper.getTruncatedString(name, 15, true);
        this.showEmojiSprite(emojiId);
        this.showPawn(colorIndex);
        this.mChatBubbleAlignment = chatBubbleAlignment;
      };
      ChatBubbleViewComponent.prototype.initializeMessage = function(message, chatBubbleAlignment) {
        this.messageLabel.string = message;
        this.mChatBubbleAlignment = chatBubbleAlignment;
      };
      ChatBubbleViewComponent.prototype.showEmojiSprite = function(emojiId) {
        var emojiName = "emoji" + emojiId;
        for (var i in this.emojiNode.children) {
          var child = this.emojiNode.children[i];
          if (-1 == child.name.indexOf("emoji")) continue;
          child.active = child.name == emojiName;
        }
      };
      ChatBubbleViewComponent.prototype.showPawn = function(colorIndex) {
        var pawnName = "pawn" + colorIndex;
        for (var i in this.pawnNode.children) {
          var child = this.pawnNode.children[i];
          if (-1 == child.name.indexOf("pawn")) continue;
          child.active = child.name == pawnName;
        }
      };
      ChatBubbleViewComponent.prototype.resizeBubble = function() {
        if (this.mIsResized || !this.chatBubble || !this.mOriginalLabelSize || this.messageLabel.node.getContentSize() == this.mOriginalLabelSize) return;
        var size = new cc.Size(this.mOriginalLabelSize.width, this.messageLabel.lineHeight);
        while (size.width < this.maxWidth) {
          this.messageLabel.node.setContentSize(size);
          this.messageLabel.string = this.messageLabel.string;
          if (this.messageLabel.node.height <= this.messageLabel.lineHeight) break;
          size.width = size.width + 10;
        }
        this.chatBubble.node.width = this.chatBubble.node.width + (size.width - this.mOriginalLabelSize.width);
        var oldHeight = this.messageLabel.lineHeight;
        if (this.messageLabel.node.height > this.messageLabel.lineHeight) {
          this.chatBubble.node.height = this.chatBubble.node.height + this.messageLabel.node.height - oldHeight;
          this.node.setContentSize(this.node.getContentSize().width, this.node.getContentSize().height + (this.messageLabel.node.height - oldHeight));
          this.node.parent.emit(Constants_1.constants.Events.EVENT_BUBBLE_RESIZED);
          this.mIsResized = true;
        }
      };
      ChatBubbleViewComponent.prototype.onAnimationComplete = function() {
        this.mPersistantComponent && this.mPersistantComponent.node && this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_CHAT_BUBBLE_ANIMATION_DONE);
      };
      __decorate([ property(cc.Label) ], ChatBubbleViewComponent.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Label) ], ChatBubbleViewComponent.prototype, "messageLabel", void 0);
      __decorate([ property(cc.Node) ], ChatBubbleViewComponent.prototype, "emojiNode", void 0);
      __decorate([ property(cc.Node) ], ChatBubbleViewComponent.prototype, "pawnNode", void 0);
      __decorate([ property(cc.Sprite) ], ChatBubbleViewComponent.prototype, "chatBubble", void 0);
      __decorate([ property(cc.Animation) ], ChatBubbleViewComponent.prototype, "bubbleAnimation", void 0);
      ChatBubbleViewComponent = __decorate([ ccclass ], ChatBubbleViewComponent);
      return ChatBubbleViewComponent;
    }(cc.Component);
    exports.default = ChatBubbleViewComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ChatComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f8a3xn4lxEfLwOu+Opt5Xn", "ChatComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var ActionShowQuickChatPopup_1 = require("../Actions/ActionShowQuickChatPopup");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Constants_1 = require("../Constants");
    var SoundController_1 = require("../Controllers/SoundController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChatComponent = function(_super) {
      __extends(ChatComponent, _super);
      function ChatComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.chatLabel = null;
        _this.emojiNode = null;
        _this.emojiAnimNode = null;
        _this.chatNode = null;
        _this.emojiSoundNode = null;
        _this.chatButton = null;
        _this.disabledChatButton = null;
        _this.chatBubble = null;
        _this.mActionController = null;
        _this.mGameController = null;
        _this.mChatBubbleAnimation = null;
        _this.mShouldPlaySpineAnim = false;
        _this.mSpineAnimationEmojiId = -1;
        _this.mPersistantNodeComponent = null;
        _this.maxWidth = 350;
        _this.mOriginalLabelSize = null;
        _this.mOriginalBubbleSize = null;
        return _this;
      }
      ChatComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantNodeComponent = persistantController;
        var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_chat");
        player && !player.isCustomChatEnabled() && 2 != variant && this.hideChatButton();
        this.mOriginalLabelSize = this.chatLabel.node.getContentSize();
        this.mOriginalBubbleSize = this.chatBubble.getContentSize();
      };
      ChatComponent.prototype.start = function() {
        this.hideChat();
        this.chatButton && this.chatButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatComponent", "onQuickChatPressed"));
        this.disabledChatButton && this.disabledChatButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatComponent", "onDisabledChatPressed"));
        this.mActionController = this.mPersistantNodeComponent.GetActionController();
        this.mGameController = this.mPersistantNodeComponent.GetGameController();
        this.mChatBubbleAnimation = this.node.getComponent(cc.Animation);
        this.mChatBubbleAnimation.on("finished", this.onChatBubbleAnimationComplete, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_CHAT_STATUS_CHANGED, this.updateChatButton, this);
        this.updateChatButton();
      };
      ChatComponent.prototype.updateChatButton = function() {
        var isSpectating = -1 == this.mGameController.getMyIndex();
        var isChatBlocked = this.mPersistantNodeComponent.getChatBlockController().isChatBlocked();
        this.chatButton && (this.chatButton.node.active = !isSpectating && !isChatBlocked);
        this.disabledChatButton && (this.disabledChatButton.node.active = !isSpectating && isChatBlocked);
      };
      ChatComponent.prototype.showMessage = function(message) {
        this.chatBubble.setContentSize(this.mOriginalBubbleSize);
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_chat");
        var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
        if (player && !player.isCustomChatEnabled() && 2 != variant) return;
        this.chatLabel.string = message;
        var isEmojiVisible = this.emojiNode.active;
        this.emojiNode.active = false;
        this.emojiAnimNode.active = false;
        if (!this.chatNode.active) {
          this.chatNode.active = true;
          if (!isEmojiVisible) {
            this.chatBubble.active = true;
            this.mChatBubbleAnimation.play(this.mChatBubbleAnimation.defaultClip.name);
          }
        }
        this.resizeBubble();
      };
      ChatComponent.prototype.showEmoji = function(emojiId) {
        this.chatBubble.setContentSize(this.mOriginalBubbleSize);
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_chat");
        var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
        if (player && !player.isCustomChatEnabled() && 2 != variant) return;
        this.showEmojiSprite(emojiId);
        var isChatVisible = this.chatNode.active;
        this.chatNode.active = false;
        if (this.emojiNode.active) {
          this.playSpineAnimation(emojiId);
          this.playEmojiSound(emojiId);
        } else {
          this.emojiNode.active = true;
          this.emojiAnimNode.active = true;
          if (isChatVisible) {
            this.playSpineAnimation(emojiId);
            this.playEmojiSound(emojiId);
          } else {
            this.chatBubble.active = true;
            this.mChatBubbleAnimation.play(this.mChatBubbleAnimation.defaultClip.name);
            this.mShouldPlaySpineAnim = true;
            this.mSpineAnimationEmojiId = emojiId;
          }
        }
      };
      ChatComponent.prototype.hideChat = function() {
        this.chatNode.active = false;
        this.emojiNode.active = false;
        this.emojiAnimNode.active = false;
        this.chatBubble.active = false;
      };
      ChatComponent.prototype.hideChatButton = function() {
        this.node.active = false;
      };
      ChatComponent.prototype.showEmojiSprite = function(emojiId) {
        var emojiAnimName = "emojiAnim" + emojiId;
        for (var i in this.emojiAnimNode.children) {
          var child = this.emojiAnimNode.children[i];
          if (-1 == child.name.indexOf("emojiAnim")) continue;
          child.active = child.name == emojiAnimName && !Helper_1.Helper.isRendererCanvas();
        }
        var emojiName = "emoji" + emojiId;
        for (var i in this.emojiNode.children) {
          var child = this.emojiNode.children[i];
          if (-1 == child.name.indexOf("emoji")) continue;
          child.active = child.name == emojiName && Helper_1.Helper.isRendererCanvas();
        }
      };
      ChatComponent.prototype.playSpineAnimation = function(emojiId) {
        if (Helper_1.Helper.isRendererCanvas()) return;
        var emojiAnimName = "emojiAnim" + emojiId;
        var child = this.emojiAnimNode.getChildByName(emojiAnimName);
        if (child) {
          var anim = child.getComponent(sp.Skeleton);
          anim && anim.setAnimation(0, anim.defaultAnimation, false);
        }
      };
      ChatComponent.prototype.playEmojiSound = function(emojiId) {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_chat");
        var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
        if (player && !player.isCustomChatEnabled() && 2 != variant) return;
        var emojiSoundName = "emojiSound" + emojiId;
        var child = this.emojiSoundNode.getChildByName(emojiSoundName);
        if (child) {
          var sound = child.getComponent(cc.AudioSource);
          if (sound && SoundController_1.SoundController.getInstance().isSoundEnabled() && !SoundController_1.SoundController.getInstance().isChatSoundPlaying()) {
            sound.play();
            SoundController_1.SoundController.getInstance().setCurrentPlayingChatSound(sound);
          }
        }
      };
      ChatComponent.prototype.onQuickChatPressed = function() {
        this.mGameController.Reconnecting() || this.mActionController.runAction(ActionShowQuickChatPopup_1.ActionShowQuickChatPopup.Create());
      };
      ChatComponent.prototype.onDisabledChatPressed = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_CHAT_OFF_POPUP);
      };
      ChatComponent.prototype.onChatBubbleAnimationComplete = function() {
        if (this.mShouldPlaySpineAnim) {
          this.playSpineAnimation(this.mSpineAnimationEmojiId);
          this.playEmojiSound(this.mSpineAnimationEmojiId);
          this.mShouldPlaySpineAnim = false;
          this.mSpineAnimationEmojiId = -1;
        }
      };
      ChatComponent.prototype.onDestroy = function() {
        this.mChatBubbleAnimation && this.mChatBubbleAnimation.off("finished", this.onChatBubbleAnimationComplete, this);
      };
      ChatComponent.prototype.resizeBubble = function() {
        var size = new cc.Size(this.mOriginalLabelSize.width, this.chatLabel.lineHeight);
        this.chatBubble.width = this.chatBubble.width + (size.width - this.mOriginalLabelSize.width);
        var oldHeight = this.chatLabel.lineHeight;
        if (this.chatLabel.node.height > this.chatLabel.lineHeight) {
          this.chatBubble.height = this.chatBubble.height + this.chatLabel.node.height - oldHeight;
          this.node.setContentSize(this.node.getContentSize().width, this.node.getContentSize().height + (this.chatLabel.node.height - oldHeight));
          this.node.parent.emit(Constants_1.constants.Events.EVENT_BUBBLE_RESIZED);
        }
      };
      __decorate([ property(cc.Label) ], ChatComponent.prototype, "chatLabel", void 0);
      __decorate([ property(cc.Node) ], ChatComponent.prototype, "emojiNode", void 0);
      __decorate([ property(cc.Node) ], ChatComponent.prototype, "emojiAnimNode", void 0);
      __decorate([ property(cc.Node) ], ChatComponent.prototype, "chatNode", void 0);
      __decorate([ property(cc.Node) ], ChatComponent.prototype, "emojiSoundNode", void 0);
      __decorate([ property(cc.Button) ], ChatComponent.prototype, "chatButton", void 0);
      __decorate([ property(cc.Button) ], ChatComponent.prototype, "disabledChatButton", void 0);
      __decorate([ property(cc.Node) ], ChatComponent.prototype, "chatBubble", void 0);
      ChatComponent = __decorate([ ccclass ], ChatComponent);
      return ChatComponent;
    }(cc.Component);
    exports.default = ChatComponent;
    cc._RF.pop();
  }, {
    "../Actions/ActionShowQuickChatPopup": "ActionShowQuickChatPopup",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Controllers/SoundController": "SoundController",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ChatHistoryPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "81852Leq/xNgaeNspDlyx/c", "ChatHistoryPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var Constants_1 = require("../Constants");
    var HistoryChatBubbleComponent_1 = require("./HistoryChatBubbleComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var ChatPopupTab;
    (function(ChatPopupTab) {
      ChatPopupTab[ChatPopupTab["EMOJI"] = 0] = "EMOJI";
      ChatPopupTab[ChatPopupTab["QUICK_CHAT"] = 1] = "QUICK_CHAT";
      ChatPopupTab[ChatPopupTab["CUSTOM_CHAT"] = 2] = "CUSTOM_CHAT";
    })(ChatPopupTab = exports.ChatPopupTab || (exports.ChatPopupTab = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChatHistoryPopupComponent = function(_super) {
      __extends(ChatHistoryPopupComponent, _super);
      function ChatHistoryPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.quickChatTab = null;
        _this.emojiTab = null;
        _this.customChatTab = null;
        _this.quickChatTabButton = null;
        _this.emojiTabButton = null;
        _this.customChatTabButton = null;
        _this.scrollViewMaskNode = null;
        _this.scrollViewContent = null;
        _this.scrollView = null;
        _this.scrollVerticalLayout = null;
        _this.quickChatsNode = null;
        _this.emojisNode = null;
        _this.emojisLockedNode = null;
        _this.editBox = null;
        _this.sendButton = null;
        _this.headerNode = null;
        _this.tabsNode = null;
        _this.tabNodeTopPositionNode = null;
        _this.chatBgOutline = null;
        _this.chatBgBlueOverlay = null;
        _this.chatBubblePrefab = null;
        _this.characterLimitLabel = null;
        _this.mCurrentTab = ChatPopupTab.EMOJI;
        _this.mPersistantComponent = null;
        _this.mGameController = null;
        _this.mIsInitialized = false;
        _this.mMyTurnIndicator = null;
        _this.mInitialChatPosition = null;
        _this.mScrollviewInitialPosition = null;
        _this.mStatsController = null;
        _this.mPlayerController = null;
        return _this;
      }
      ChatHistoryPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.mGameController = persistantController.GetGameController();
        this.mTabNodeNormalPosition = this.tabsNode.getPosition();
        this.mIsInitialized = true;
        this.mCurrentTab = ChatPopupTab.EMOJI;
        for (var i = 0; i < this.quickChatsNode.childrenCount; i++) this.quickChatsNode.children[i].getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatHistoryPopupComponent", "onQuichChatPressed", i + 1));
        for (var i = 0; i < this.emojisNode.childrenCount; i++) this.emojisNode.children[i].getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatHistoryPopupComponent", "onEmojiPressed", i + 1));
        for (var i = 0; i < this.emojisLockedNode.childrenCount; i++) this.emojisLockedNode.children[i].getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatHistoryPopupComponent", "onLockedEmojiPressed", i + 1));
        this.refreshTabView(ChatPopupTab.EMOJI);
        this.sendButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatHistoryPopupComponent", "onSendPressed"));
        this.quickChatTabButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatHistoryPopupComponent", "onQuickChatTabPressed"));
        this.emojiTabButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatHistoryPopupComponent", "onEmojiTabPressed"));
        this.customChatTabButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatHistoryPopupComponent", "onCustomChatPresed"));
        this.editBox.keyboardOpen = this.onKeyboardOpen.bind(this);
        this.editBox.keyboardClose = this.onKeyboardClose.bind(this);
        this.editBox.editBoxEditingReturn = this.onSendPressed.bind(this);
        this.editBox.editBoxTextChanged = this.onTextChanged.bind(this);
        this.headerNode.active = true;
        this.handleResolution();
        this.scrollVerticalLayout.setContentSize(this.scrollVerticalLayout.getContentSize().width, 0);
        this.initializeChat();
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_MY_TURN_START, this.showMyTurnIndicator, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_MY_TURN_END, this.removeMyTurnIndicator, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_BUBBLE_RESIZED, this.onBubbleResized, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REFRESH_CHAT_HISTORY, this.refreshHistory, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_CHAT_BUBBLE_ANIMATION_DONE, this.scrollToBottom, this);
        this.onTextChanged();
        this.mScrollviewInitialPosition = this.scrollVerticalLayout.getPosition();
        this.mStatsController = this.mPersistantComponent.GetStatsController();
        this.mPlayerController = this.mPersistantComponent.GetPlayerController();
        this.mInitialChatPosition = this.node.getPosition();
      };
      ChatHistoryPopupComponent.prototype.start = function() {};
      ChatHistoryPopupComponent.prototype.initialize = function() {
        var emojiStatusList = this.mPlayerController.getModel().getEmojisStatusList();
        var lockedStatus;
        for (var i = 0; i < this.emojisNode.childrenCount; i++) {
          lockedStatus = emojiStatusList[i + 1] ? emojiStatusList[i + 1] : 0;
          this.emojisNode.children[i].active = 0 == lockedStatus;
          this.emojisLockedNode.children[i].active = 0 != lockedStatus;
        }
      };
      ChatHistoryPopupComponent.prototype.handleResolution = function() {
        var wPosition = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());
        var deltaY = cc.director.getVisibleSize().height - this.node.getContentSize().height - wPosition.y;
        this.headerNode.setPositionY(this.headerNode.getPositionY() + deltaY);
        this.tabNodeTopPositionNode.setPositionY(this.tabNodeTopPositionNode.getPositionY() + deltaY);
        this.scrollView.setPositionY(this.scrollView.getPositionY() + deltaY);
        this.chatBgOutline.setContentSize(this.chatBgOutline.getContentSize().width, this.chatBgOutline.getContentSize().height + deltaY);
        this.chatBgBlueOverlay.setContentSize(this.chatBgBlueOverlay.getContentSize().width, this.chatBgBlueOverlay.getContentSize().height + deltaY);
        this.scrollViewMaskNode.setContentSize(this.scrollViewMaskNode.getContentSize().width, this.scrollViewMaskNode.getContentSize().height + deltaY);
        this.scrollView.setContentSize(this.scrollView.getContentSize().width, this.scrollView.getContentSize().height + deltaY);
      };
      ChatHistoryPopupComponent.prototype.onQuichChatPressed = function(event, customEventData) {
        this.mGameController.sendSpecialMessage(customEventData, false);
        this.hidePopup();
      };
      ChatHistoryPopupComponent.prototype.onEmojiPressed = function(event, customEventData) {
        this.mGameController.sendSpecialMessage(customEventData, true);
        this.hidePopup();
      };
      ChatHistoryPopupComponent.prototype.onLockedEmojiPressed = function(event, customEventData) {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_GET_EMOJIS_POPUP);
        this.hidePopup();
      };
      ChatHistoryPopupComponent.prototype.sendCustomChat = function(text) {
        this.mGameController.sendCustomMessage(text);
        this.hidePopup();
      };
      ChatHistoryPopupComponent.prototype.refreshTabView = function(tab) {
        this.mCurrentTab = tab;
        this.quickChatTab.active = this.mCurrentTab == ChatPopupTab.QUICK_CHAT;
        this.emojiTab.active = this.mCurrentTab == ChatPopupTab.EMOJI;
        this.customChatTab.active = this.mCurrentTab == ChatPopupTab.CUSTOM_CHAT;
      };
      ChatHistoryPopupComponent.prototype.hidePopup = function() {
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      ChatHistoryPopupComponent.prototype.onSendPressed = function() {
        this.mStatsController.count("button", 1, "chatPopup", "onSendPressed");
        var message = this.editBox.string;
        if (message && message.replace(/\s/g, "").length) {
          this.sendCustomChat(message);
          this.editBox.string = "";
          this.onTextChanged();
        }
      };
      ChatHistoryPopupComponent.prototype.onQuickChatTabPressed = function() {
        this.mStatsController.count("popup", 1, "tab", "chat", "quick_chat", "", this.mGameController.getInstanceId());
        this.refreshTabView(ChatPopupTab.QUICK_CHAT);
      };
      ChatHistoryPopupComponent.prototype.onEmojiTabPressed = function() {
        this.mStatsController.count("popup", 1, "tab", "chat", "emoji", "", this.mGameController.getInstanceId());
        this.refreshTabView(ChatPopupTab.EMOJI);
      };
      ChatHistoryPopupComponent.prototype.onCustomChatPresed = function() {
        this.mStatsController.count("popup", 1, "tab", "chat", "custom", "", this.mGameController.getInstanceId());
        this.refreshTabView(ChatPopupTab.CUSTOM_CHAT);
      };
      ChatHistoryPopupComponent.prototype.onKeyboardOpen = function() {
        var isIos = cc.sys.os == cc.sys.OS_IOS && cc.sys.isMobile;
        if (isIos) {
          var localposition = this.node.parent.convertToNodeSpaceAR(new cc.Vec2(0, 0));
          this.node.setPositionY(localposition.y);
        } else {
          this.headerNode.active = false;
          this.tabsNode.stopAllActions();
          this.tabsNode.runAction(cc.moveTo(.2, this.tabNodeTopPositionNode.getPosition()));
        }
      };
      ChatHistoryPopupComponent.prototype.onKeyboardClose = function() {
        var isIos = cc.sys.os == cc.sys.OS_IOS && cc.sys.isMobile;
        if (isIos) this.node.setPositionY(this.mInitialChatPosition.y); else {
          this.tabsNode.stopAllActions();
          this.tabsNode.setPosition(this.mTabNodeNormalPosition);
          this.headerNode.active = true;
        }
      };
      ChatHistoryPopupComponent.prototype.showMessage = function(name, index, message) {
        if (!this.mIsInitialized) return;
        var bubbleComponent = this.createBubble();
        if (index == this.mGameController.getMyIndex() && -1 != index) {
          var youText = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#YOU_TEXT", {});
          bubbleComponent.initializeMyMessage(youText, message, index);
        } else bubbleComponent.initializeOpponentMessage(name, message, index);
        this.scrollToBottom(bubbleComponent.node.getContentSize());
      };
      ChatHistoryPopupComponent.prototype.showEmoji = function(name, index, emojiId) {
        if (!this.mIsInitialized) return;
        var bubbleComponent = this.createBubble();
        if (index == this.mGameController.getMyIndex() && -1 != index) {
          var youText = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#YOU_TEXT", {});
          bubbleComponent.initializeMyEmoji(youText, emojiId, index);
        } else bubbleComponent.initializeOpponentEmoji(name, emojiId, index);
        this.scrollToBottom(bubbleComponent.node.getContentSize());
      };
      ChatHistoryPopupComponent.prototype.showUserLeftMessage = function(message) {
        if (!this.mIsInitialized) return;
        var bubbleComponent = this.createBubble();
        bubbleComponent.initializeUserLeaveMessage(message);
        this.scrollToBottom(bubbleComponent.node.getContentSize());
      };
      ChatHistoryPopupComponent.prototype.showTurnIndicator = function(message) {
        if (!this.mIsInitialized) return;
        var bubble = cc.instantiate(this.chatBubblePrefab);
        var bubbleComponent = bubble.getComponent(HistoryChatBubbleComponent_1.default);
        bubbleComponent.initializeTurnIndicatorMessage(message);
        this.mMyTurnIndicator = bubbleComponent.node;
        this.scrollView.setContentSize(this.scrollView.getContentSize().width, this.scrollView.getContentSize().height - this.mMyTurnIndicator.getContentSize().height);
        this.scrollViewMaskNode.setContentSize(this.scrollViewMaskNode.getContentSize().width, this.scrollViewMaskNode.getContentSize().height - this.mMyTurnIndicator.getContentSize().height);
        this.mMyTurnIndicator.setPosition(this.scrollView.getPositionX(), this.scrollView.getPositionY() - this.scrollView.getContentSize().height);
        this.scrollView.parent.addChild(this.mMyTurnIndicator);
      };
      ChatHistoryPopupComponent.prototype.createBubble = function() {
        var bubble = cc.instantiate(this.chatBubblePrefab);
        var bubbleComponent = bubble.getComponent(HistoryChatBubbleComponent_1.default);
        this.scrollVerticalLayout.addChild(bubble);
        return bubbleComponent;
      };
      ChatHistoryPopupComponent.prototype.initializeChat = function() {
        var game = this.mGameController.getModel();
        if (game) {
          var chatHistory = game.getChatHistory();
          for (var i = 0; i < chatHistory.length; i++) {
            var chatModel = chatHistory[i];
            if (chatModel.mIsQuickChat) {
              var message = LocalizationController_1.LocalizationController.getInstance().LocalizedString(chatModel.getQuickChatText(), {});
              this.showMessage(chatModel.mName, chatModel.mIndex, message);
            } else chatModel.mIsEmoji ? this.showEmoji(chatModel.mName, chatModel.mIndex, chatModel.getEmojiId()) : chatModel.mIsUserLeaveMessage ? this.showUserLeftMessage(chatModel.mMessage) : this.showMessage(chatModel.mName, chatModel.mIndex, chatModel.mMessage);
          }
        }
      };
      ChatHistoryPopupComponent.prototype.scrollToBottom = function(extraSize) {
        this.scrollView.getComponent(cc.ScrollView).scrollToBottom(.1);
      };
      ChatHistoryPopupComponent.prototype.onBubbleResized = function(event) {
        if (event.getUserData()) {
          var size = event.getUserData();
          this.scrollView.getComponent(cc.ScrollView).scrollToBottom(.1);
        }
      };
      ChatHistoryPopupComponent.prototype.showMyTurnIndicator = function() {
        if (this.mMyTurnIndicator) return;
        this.showTurnIndicator("");
      };
      ChatHistoryPopupComponent.prototype.removeMyTurnIndicator = function() {
        if (!this.mMyTurnIndicator) return;
        this.scrollView.setContentSize(this.scrollView.getContentSize().width, this.scrollView.getContentSize().height + this.mMyTurnIndicator.getContentSize().height);
        this.scrollViewMaskNode.setContentSize(this.scrollViewMaskNode.getContentSize().width, this.scrollViewMaskNode.getContentSize().height + this.mMyTurnIndicator.getContentSize().height);
        this.mMyTurnIndicator.removeFromParent();
        this.mMyTurnIndicator = null;
      };
      ChatHistoryPopupComponent.prototype.refreshHistory = function() {
        this.scrollVerticalLayout.removeAllChildren();
        this.initializeChat();
      };
      ChatHistoryPopupComponent.prototype.onDisable = function() {
        this.node && this.node.stopAllActions();
      };
      ChatHistoryPopupComponent.prototype.onTextChanged = function() {
        this.characterLimitLabel.string = this.editBox.maxLength - this.editBox.string.length + "/" + this.editBox.maxLength;
      };
      ChatHistoryPopupComponent.prototype.repositionScrollView = function() {
        if (!this.mIsInitialized) return;
        var offset = -this.scrollView.getContentSize().height + this.scrollVerticalLayout.height;
        offset < 0 ? this.scrollVerticalLayout.setPositionY(this.mScrollviewInitialPosition.y + offset) : this.scrollVerticalLayout.setPositionY(this.mScrollviewInitialPosition.y);
      };
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "quickChatTab", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "emojiTab", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "customChatTab", void 0);
      __decorate([ property(cc.Button) ], ChatHistoryPopupComponent.prototype, "quickChatTabButton", void 0);
      __decorate([ property(cc.Button) ], ChatHistoryPopupComponent.prototype, "emojiTabButton", void 0);
      __decorate([ property(cc.Button) ], ChatHistoryPopupComponent.prototype, "customChatTabButton", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "scrollViewMaskNode", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "scrollViewContent", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "scrollView", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "scrollVerticalLayout", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "quickChatsNode", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "emojisNode", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "emojisLockedNode", void 0);
      __decorate([ property(cc.EditBox) ], ChatHistoryPopupComponent.prototype, "editBox", void 0);
      __decorate([ property(cc.Button) ], ChatHistoryPopupComponent.prototype, "sendButton", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "headerNode", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "tabsNode", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "tabNodeTopPositionNode", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "chatBgOutline", void 0);
      __decorate([ property(cc.Node) ], ChatHistoryPopupComponent.prototype, "chatBgBlueOverlay", void 0);
      __decorate([ property(cc.Prefab) ], ChatHistoryPopupComponent.prototype, "chatBubblePrefab", void 0);
      __decorate([ property(cc.Label) ], ChatHistoryPopupComponent.prototype, "characterLimitLabel", void 0);
      ChatHistoryPopupComponent = __decorate([ ccclass ], ChatHistoryPopupComponent);
      return ChatHistoryPopupComponent;
    }(cc.Component);
    exports.default = ChatHistoryPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "./HistoryChatBubbleComponent": "HistoryChatBubbleComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  ChatModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e84eE5/+1PwIxE22jAO52f", "ChatModel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChatModel = function() {
      function ChatModel(message, pid, name) {
        this.mMessage = "";
        this.mPid = "";
        this.mName = "";
        this.mIndex = -1;
        this.mIsEmoji = false;
        this.mIsQuickChat = false;
        this.mIsUserLeaveMessage = false;
        this.mMyTurnMessage = false;
        this.mMessage = message;
        this.mPid = pid;
        this.mName = name;
        this.mIsEmoji = this.isEmoji();
        this.mIsQuickChat = this.isQuickChat();
      }
      ChatModel.prototype.isEmoji = function() {
        if (0 == this.mMessage.indexOf("em:")) return true;
        return false;
      };
      ChatModel.prototype.getEmojiId = function() {
        if (this.isEmoji()) {
          var idString = this.mMessage.substr("em:".length, this.mMessage.length - "em:".length);
          var id = parseInt(idString);
          return id;
        }
        return -1;
      };
      ChatModel.prototype.isQuickChat = function() {
        if (0 == this.mMessage.indexOf("tt:")) return true;
      };
      ChatModel.prototype.getQuickChatText = function() {
        if (this.isQuickChat()) {
          var idString = this.mMessage.substr("tt:".length, this.mMessage.length - "tt:".length);
          return "#QUICK_CHAT_" + idString;
        }
        return "";
      };
      return ChatModel;
    }();
    exports.ChatModel = ChatModel;
    cc._RF.pop();
  }, {} ],
  ChatPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "89415cTGxRIk4Hsuagmq0Jt", "ChatPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ChatPopupComponent = function(_super) {
      __extends(ChatPopupComponent, _super);
      function ChatPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.quickChatButton1 = null;
        _this.quickChatButton2 = null;
        _this.quickChatButton3 = null;
        _this.quickChatButton4 = null;
        _this.quickChatButton5 = null;
        _this.quickChatButton6 = null;
        _this.emojiButtonsNode = null;
        _this.emojiLockedButtonsNode = null;
        return _this;
      }
      ChatPopupComponent.prototype.onLoad = function() {
        this.createEventHandlers();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayerController = this.mPersistantController.GetPlayerController();
        this.mGameController = this.mPersistantController.GetGameController();
      };
      ChatPopupComponent.prototype.createEventHandlers = function() {
        this.quickChatButton1.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatPopupComponent", "onQuichChatPressed", 1));
        this.quickChatButton2.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatPopupComponent", "onQuichChatPressed", 2));
        this.quickChatButton3.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatPopupComponent", "onQuichChatPressed", 3));
        this.quickChatButton4.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatPopupComponent", "onQuichChatPressed", 4));
        this.quickChatButton5.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatPopupComponent", "onQuichChatPressed", 5));
        this.quickChatButton6.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatPopupComponent", "onQuichChatPressed", 6));
        for (var i = 0; i < this.emojiButtonsNode.childrenCount; i++) this.emojiButtonsNode.children[i].getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatPopupComponent", "onEmojiPressed", i + 1));
        for (var i = 0; i < this.emojiLockedButtonsNode.childrenCount; i++) this.emojiLockedButtonsNode.children[i].getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ChatPopupComponent", "onLockedEmojiPressed", i + 1));
      };
      ChatPopupComponent.prototype.initialize = function() {
        var emojiStatusList = this.mPlayerController.getModel().getEmojisStatusList();
        var lockedStatus;
        for (var i = 0; i < this.emojiButtonsNode.childrenCount; i++) {
          lockedStatus = emojiStatusList[i + 1] ? emojiStatusList[i + 1] : 0;
          this.emojiButtonsNode.children[i].active = 0 == lockedStatus;
          this.emojiLockedButtonsNode.children[i].active = 0 != lockedStatus;
        }
      };
      ChatPopupComponent.prototype.onQuichChatPressed = function(event, customEventData) {
        this.mGameController.sendSpecialMessage(customEventData, false);
        this.hidePopup();
      };
      ChatPopupComponent.prototype.onEmojiPressed = function(event, customEventData) {
        this.mGameController.sendSpecialMessage(customEventData, true);
        this.hidePopup();
      };
      ChatPopupComponent.prototype.onLockedEmojiPressed = function(event, customEventData) {
        this.mPersistantController.node.emit(Constants_1.constants.Events.EVENT_SHOW_GET_EMOJIS_POPUP);
        this.hidePopup();
      };
      ChatPopupComponent.prototype.hidePopup = function() {
        var popup = this.node.getComponent(PopupComponent_1.default);
        popup && popup.hidePopup();
      };
      ChatPopupComponent.prototype.onDestroy = function() {
        this.clearCallbacks(this.quickChatButton1);
        this.clearCallbacks(this.quickChatButton2);
        this.clearCallbacks(this.quickChatButton3);
        this.clearCallbacks(this.quickChatButton4);
        this.clearCallbacks(this.quickChatButton5);
        this.clearCallbacks(this.quickChatButton6);
        if (this.emojiButtonsNode && this.emojiButtonsNode.children) for (var i = 0; i < this.emojiButtonsNode.childrenCount; i++) this.clearCallbacks(this.emojiButtonsNode.children[i].getComponent(cc.Button));
        if (this.emojiLockedButtonsNode && this.emojiLockedButtonsNode.children) for (var i = 0; i < this.emojiLockedButtonsNode.childrenCount; i++) this.clearCallbacks(this.emojiLockedButtonsNode.children[i].getComponent(cc.Button));
      };
      ChatPopupComponent.prototype.clearCallbacks = function(button) {
        if (button && button.clickEvents && button.clickEvents.length > 0) for (var i = 0; i < button.clickEvents.length; i++) button.clickEvents.pop();
      };
      __decorate([ property(cc.Button) ], ChatPopupComponent.prototype, "quickChatButton1", void 0);
      __decorate([ property(cc.Button) ], ChatPopupComponent.prototype, "quickChatButton2", void 0);
      __decorate([ property(cc.Button) ], ChatPopupComponent.prototype, "quickChatButton3", void 0);
      __decorate([ property(cc.Button) ], ChatPopupComponent.prototype, "quickChatButton4", void 0);
      __decorate([ property(cc.Button) ], ChatPopupComponent.prototype, "quickChatButton5", void 0);
      __decorate([ property(cc.Button) ], ChatPopupComponent.prototype, "quickChatButton6", void 0);
      __decorate([ property(cc.Node) ], ChatPopupComponent.prototype, "emojiButtonsNode", void 0);
      __decorate([ property(cc.Node) ], ChatPopupComponent.prototype, "emojiLockedButtonsNode", void 0);
      ChatPopupComponent = __decorate([ ccclass ], ChatPopupComponent);
      return ChatPopupComponent;
    }(cc.Component);
    exports.default = ChatPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  CoinAnimationComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30055cU4jNCGY9plYg6t75/", "CoinAnimationComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var SoundController_1 = require("../Controllers/SoundController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CoinAnimationComponent = function(_super) {
      __extends(CoinAnimationComponent, _super);
      function CoinAnimationComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mInitialCoinPositions = [];
        _this.mCompleteCallback = null;
        _this.coinSprite = null;
        _this.radius = 100;
        _this.numberOfCoins = 5;
        _this.coinsScale = 1;
        _this.coinsStartScale = 1;
        _this.coinsEndScale = 1;
        _this.coinMoveTime = 1.5;
        _this.animateCompleteFunc = null;
        _this.firstHitEvent = null;
        _this.timer = 0;
        _this.completeEvent = null;
        _this.coinHitSound = null;
        _this.coinWhooshSound = null;
        _this.mPersistantComponent = null;
        return _this;
      }
      CoinAnimationComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
      };
      CoinAnimationComponent.prototype.start = function() {};
      CoinAnimationComponent.prototype.initializeDefaults = function(meta, firstHitEvent, completeEvent) {
        this.coinSprite = meta.getSpriteFrame();
        this.radius = meta.getSpawnRadius();
        this.numberOfCoins = meta.getNumberOfCoins();
        this.coinsStartScale = meta.getStartCoinsScale();
        this.coinsEndScale = meta.getEndCoinsScale();
        this.coinMoveTime = meta.getCoinMoveTime();
        this.coinHitSound = meta.getCoinHitSound();
        this.coinWhooshSound = meta.getCoinWhooshSound();
        this.firstHitEvent = firstHitEvent;
        this.completeEvent = completeEvent;
        this.timer = 1;
      };
      CoinAnimationComponent.prototype.initialize = function(startPosition, endPosition) {
        this.initCoinNodes();
        this.startPosition = this.node.convertToNodeSpaceAR(startPosition);
        this.targetPosition = this.node.convertToNodeSpaceAR(endPosition);
        for (var i = 0; i < this.numberOfCoins; i++) {
          var xOffset = Math.random() * this.radius - this.radius / 2;
          var yOffset = Math.random() * this.radius - this.radius / 2;
          this.mInitialCoinPositions.push(new cc.Vec2(this.startPosition.x + xOffset, this.startPosition.y + yOffset));
        }
        this.animate(null);
      };
      CoinAnimationComponent.prototype.animate = function(completeCallback) {
        this.mCompleteCallback = completeCallback;
        for (var i = 0; i < this.numberOfCoins; i++) {
          var child = this.mCoinsNodes[i];
          child.setPosition(this.mInitialCoinPositions[i]);
          child.opacity = 0;
          child.setScale(this.coinsStartScale);
          child.getComponent(cc.Sprite).enabled = true;
          var actions = [];
          actions.push(cc.fadeOut(0));
          if (0 != i) {
            actions.push(cc.delayTime(.3 * Math.random()));
            this.timer = .8;
          }
          actions.push(cc.fadeIn(0));
          i % 2 == 0 && actions.push(cc.callFunc(this.playCoinWhooshSound, this));
          var val = cc.moveTo(this.coinMoveTime, new cc.Vec2(this.targetPosition.x, this.targetPosition.y));
          var scaleAction = cc.scaleTo(this.coinMoveTime, this.coinsEndScale);
          var spawnedAction = cc.spawn([ val.easing(cc.easeBackIn()), scaleAction ]);
          actions.push(spawnedAction);
          if (0 == i) {
            actions.push(cc.callFunc(this.animationFirstHitCallback, this));
            actions.push(cc.callFunc(this.playCoinHitSound, this));
          }
          actions.push(cc.fadeOut(.5));
          i == this.numberOfCoins - 1 && completeCallback && actions.push(cc.callFunc(this.animateCompleteCallback, this));
          child.runAction(cc.sequence(actions));
        }
      };
      CoinAnimationComponent.prototype.playCoinHitSound = function() {
        this.coinHitSound && SoundController_1.SoundController.getInstance().isSoundEnabled() && this.coinHitSound.play();
      };
      CoinAnimationComponent.prototype.playCoinWhooshSound = function() {
        this.coinWhooshSound && SoundController_1.SoundController.getInstance().isSoundEnabled() && this.coinWhooshSound.play();
      };
      CoinAnimationComponent.prototype.animationFirstHitCallback = function() {
        this.firstHitEvent && this.firstHitEvent.eventName && this.mPersistantComponent.node.emit(this.firstHitEvent.eventName, {
          value: this.firstHitEvent.value,
          timer: this.timer
        });
      };
      CoinAnimationComponent.prototype.animateCompleteCallback = function() {
        this.mCompleteCallback && this.mCompleteCallback();
        this.completeEvent && this.completeEvent.eventName && this.mPersistantComponent.node.emit(this.completeEvent.eventName, {
          timer: this.timer
        });
      };
      CoinAnimationComponent.prototype.initCoinNodes = function() {
        for (var j in this.mCoinsNodes) this.mCoinsNodes[j].removeFromParent();
        this.mCoinsNodes = [];
        for (var i = 0; i < this.numberOfCoins; i++) {
          var node = new cc.Node("coinsSprite");
          node.addComponent(cc.Sprite);
          node.getComponent(cc.Sprite).spriteFrame = this.coinSprite;
          node.getComponent(cc.Sprite).enabled = false;
          node.setPosition(new cc.Vec2(0, 0));
          this.node.addChild(node);
          this.mCoinsNodes.push(node);
        }
      };
      CoinAnimationComponent.prototype.onDisable = function() {
        for (var j in this.mCoinsNodes) {
          this.mCoinsNodes[j].stopAllActions();
          this.mCoinsNodes[j].getComponent(cc.Sprite).enabled = false;
        }
      };
      CoinAnimationComponent.prototype.setNoOfSprites = function(num) {
        this.numberOfCoins = num;
      };
      CoinAnimationComponent = __decorate([ ccclass ], CoinAnimationComponent);
      return CoinAnimationComponent;
    }(cc.Component);
    exports.default = CoinAnimationComponent;
    cc._RF.pop();
  }, {
    "../Controllers/SoundController": "SoundController",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  CoinAnimationMetaComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb2e5TJJxZFnYf2yzRMAuVx", "CoinAnimationMetaComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CoinAnimationMetaComponent = function(_super) {
      __extends(CoinAnimationMetaComponent, _super);
      function CoinAnimationMetaComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.radius = 100;
        _this.numberOfCoins = 5;
        _this.coinsStartScale = 1;
        _this.coinsEndScale = 1.3;
        _this.coinMoveTime = 1.5;
        _this.coinHitSound = null;
        _this.coinWhooshSound = null;
        return _this;
      }
      CoinAnimationMetaComponent.prototype.start = function() {};
      CoinAnimationMetaComponent.prototype.getNumberOfCoins = function() {
        return this.numberOfCoins;
      };
      CoinAnimationMetaComponent.prototype.getStartCoinsScale = function() {
        return this.coinsStartScale;
      };
      CoinAnimationMetaComponent.prototype.getEndCoinsScale = function() {
        return this.coinsEndScale;
      };
      CoinAnimationMetaComponent.prototype.getCoinMoveTime = function() {
        return this.coinMoveTime;
      };
      CoinAnimationMetaComponent.prototype.getSpawnRadius = function() {
        return this.radius;
      };
      CoinAnimationMetaComponent.prototype.getSpriteFrame = function() {
        return this.coinSprite;
      };
      CoinAnimationMetaComponent.prototype.getCoinHitSound = function() {
        return this.coinHitSound;
      };
      CoinAnimationMetaComponent.prototype.getCoinWhooshSound = function() {
        return this.coinWhooshSound;
      };
      __decorate([ property(cc.SpriteFrame) ], CoinAnimationMetaComponent.prototype, "coinSprite", void 0);
      __decorate([ property(cc.Float) ], CoinAnimationMetaComponent.prototype, "radius", void 0);
      __decorate([ property(cc.Float) ], CoinAnimationMetaComponent.prototype, "numberOfCoins", void 0);
      __decorate([ property(cc.Float) ], CoinAnimationMetaComponent.prototype, "coinsStartScale", void 0);
      __decorate([ property(cc.Float) ], CoinAnimationMetaComponent.prototype, "coinsEndScale", void 0);
      __decorate([ property(cc.Float) ], CoinAnimationMetaComponent.prototype, "coinMoveTime", void 0);
      __decorate([ property(cc.AudioSource) ], CoinAnimationMetaComponent.prototype, "coinHitSound", void 0);
      __decorate([ property(cc.AudioSource) ], CoinAnimationMetaComponent.prototype, "coinWhooshSound", void 0);
      CoinAnimationMetaComponent = __decorate([ ccclass ], CoinAnimationMetaComponent);
      return CoinAnimationMetaComponent;
    }(cc.Component);
    exports.default = CoinAnimationMetaComponent;
    cc._RF.pop();
  }, {} ],
  Config: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "afc9bYDIIBM4IAyGd659aue", "Config");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Config = function() {
      function Config() {}
      Config.VERSION = "2.0.8";
      Config.CLIENT_VERSION = "1389";
      Config.USER_SERVER_ADDR = "https://igludo-dev-03.moonfroglabs.in";
      Config.GAME_SERVER_ADDR = "https://igludo-dev-03.moonfroglabs.in";
      Config.GAME_SERVER_ADDR_1V1 = "https://igludo-dev-03.moonfroglabs.in";
      Config.GAME_SERVER_ADDR_4P = "https://igludo-dev-03.moonfroglabs.in";
      Config.FEEDBACK_SERVER_ADDR = "https://ludo-dev-user-01.moonfroglabs.com";
      Config.STATUS_SERVER_ADDR = "https://ludo-dev-user-01.moonfroglabs.com";
      Config.STATS_SERVER_ADDR = "https://igludo-dev-03.moonfroglabs.in";
      Config.ROUTER_ADDR = "wss://igl-dev-leagues.moonfroglabs.com";
      Config.PAWN_POSITION_CONFIG = JSON.parse('{"1":{"1":{"p":{"x":"0.00","y":"0.00"},"s":1}},"2":{"1":{"p":{"x":"-7.50","y":"12.50"},"s":0.7},"2":{"p":{"x":"6.75","y":"-10.00"},"s":0.7}},"3":{"1":{"p":{"x":"-7.50","y":"12.50"},"s":0.6},"2":{"p":{"x":"11.25","y":"-10.00"},"s":0.6},"3":{"p":{"x":"-7.50","y":"-10.00"},"s":0.6}},"4":{"1":{"p":{"x":"-7.50","y":"12.50"},"s":0.5},"2":{"p":{"x":"11.25","y":"-10.00"},"s":0.5},"3":{"p":{"x":"-7.50","y":"-10.00"},"s":0.5},"4":{"p":{"x":"11.25","y":"12.50"},"s":0.5}},"5":{"1":{"p":{"x":"-7.50","y":"12.50"},"s":0.5},"2":{"p":{"x":"11.25","y":"-10.00"},"s":0.5},"3":{"p":{"x":"-7.50","y":"-10.00"},"s":0.5},"4":{"p":{"x":"11.25","y":"12.50"},"s":0.5},"5":{"p":{"x":"0.00","y":"1.25"},"s":0.5}},"6":{"1":{"p":{"x":"-15.75","y":"15.75"},"s":0.4},"2":{"p":{"x":"13.50","y":"-6.75"},"s":0.4},"3":{"p":{"x":"-15.75","y":"-6.75"},"s":0.4},"4":{"p":{"x":"13.50","y":"15.75"},"s":0.4},"5":{"p":{"x":"0.00","y":"-6.75"},"s":0.4},"6":{"p":{"x":"0.00","y":"15.75"},"s":0.4}},"7":{"1":{"p":{"x":"-7.50","y":"11.25"},"s":0.4},"2":{"p":{"x":"7.50","y":"11.25"},"s":0.4},"3":{"p":{"x":"-21.25","y":"0.00"},"s":0.4},"4":{"p":{"x":"0.00","y":"0.00"},"s":0.4},"5":{"p":{"x":"21.25","y":"0.00"},"s":0.4},"6":{"p":{"x":"-7.50","y":"-11.25"},"s":0.4},"7":{"p":{"x":"7.50","y":"-11.25"},"s":0.4}}}');
      Config.PAWN_HIGHLIGHT_CONFIG = JSON.parse('{"1":{"1":{"p":{"x":"0.00","y":"0.00"},"s":1}},"2":{"1":{"p":{"x":"5.63","y":"-10.00"},"s":0.8},"2":{"p":{"x":"-13.50","y":"9.00"},"s":0.4}},"3":{"1":{"p":{"x":"5.63","y":"-10.00"},"s":0.8},"2":{"p":{"x":"0.00","y":"18.00"},"s":0.4},"3":{"p":{"x":"-13.50","y":"6.75"},"s":0.4}},"4":{"1":{"p":{"x":"5.63","y":"-10.00"},"s":0.7},"2":{"p":{"x":"-15.75","y":"11.25"},"s":0.3},"3":{"p":{"x":"0.00","y":"11.25"},"s":0.3},"4":{"p":{"x":"-15.75","y":"-11.25"},"s":0.3}},"5":{"1":{"p":{"x":"5.63","y":"-10.00"},"s":0.7},"2":{"p":{"x":"-15.75","y":"11.25"},"s":0.3},"3":{"p":{"x":"0.00","y":"11.25"},"s":0.3},"4":{"p":{"x":"-15.75","y":"-11.25"},"s":0.3},"5":{"p":{"x":"-15.75","y":"0.00"},"s":0.3}},"6":{"1":{"p":{"x":"5.63","y":"-10.00"},"s":0.7},"2":{"p":{"x":"-15.75","y":"11.25"},"s":0.3},"3":{"p":{"x":"0.00","y":"11.25"},"s":0.3},"4":{"p":{"x":"-15.75","y":"-11.25"},"s":0.3},"5":{"p":{"x":"-15.75","y":"0.00"},"s":0.3},"6":{"p":{"x":"11.25","y":"11.25"},"s":0.3}},"7":{"1":{"p":{"x":"5.63","y":"-10.00"},"s":0.7},"2":{"p":{"x":"-15.75","y":"11.25"},"s":0.3},"3":{"p":{"x":"0.00","y":"11.25"},"s":0.3},"4":{"p":{"x":"-15.75","y":"-11.25"},"s":0.3},"5":{"p":{"x":"-15.75","y":"0.00"},"s":0.3},"6":{"p":{"x":"11.25","y":"11.25"},"s":0.3},"7":{"p":{"x":"-4.50","y":"0.00"},"s":0.3}}}');
      Config.CLIENT_RETRY_REQ_TIME = 3e3;
      return Config;
    }();
    exports.Config = Config;
    cc._RF.pop();
  }, {} ],
  ConfigurationController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f3a301m8XRIMoBH5OT5Vuqa", "ConfigurationController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var ConfigurationController = function() {
      function ConfigurationController() {
        this.mTrophiesMap = Constants_1.constants.TROPHIES_MAP;
        this.mStoreConfig = Constants_1.constants.STORE_CONFIG;
      }
      ConfigurationController.prototype.getCoinsPacks = function(viewVal) {
        var coinsVal = this.mStoreConfig.views[viewVal].coins;
        var packsOrder = this.mStoreConfig.orders.coins[coinsVal];
        return packsOrder;
      };
      ConfigurationController.prototype.getGemsPacks = function(viewVal) {
        var gemsVal = this.mStoreConfig.views[viewVal].gems;
        var packsOrder = this.mStoreConfig.orders.gems[gemsVal];
        return packsOrder;
      };
      ConfigurationController.prototype.getNewBadgeShowTime = function() {
        return Constants_1.constants.NEW_BADGE_SHOW_TIME;
      };
      ConfigurationController.prototype.updatePlayerBadge = function(playerTrophies, statsController) {
        var storedBadgeString = FBInstant.player.getID() + "storedBadge";
        var storedBadge = cc.sys.localStorage.getItem(storedBadgeString);
        var playerBadge = this.getBadgeFromTrophies(playerTrophies);
        null !== storedBadge && parseInt(storedBadge) < playerBadge && cc.sys.localStorage.setItem(storedBadgeString, playerBadge);
      };
      ConfigurationController.prototype.getNextBadgeTrophy = function(trophies) {
        if (trophies <= 0) return 1;
        for (var i = 0; i < Object.keys(this.mTrophiesMap).length; i++) if (trophies < this.mTrophiesMap[i].trophies) return this.mTrophiesMap[i].trophies;
        return this.mTrophiesMap[Object.keys(this.mTrophiesMap).length - 1].trophies;
      };
      ConfigurationController.prototype.getPreviousBadgeTrophy = function(trophies) {
        if (trophies <= 0) return 0;
        var badgeCurrent = this.getBadgeFromTrophies(trophies);
        if (badgeCurrent === Object.keys(this.mTrophiesMap).length - 1) return this.mTrophiesMap[badgeCurrent - 1].trophies;
        return this.mTrophiesMap[badgeCurrent].trophies;
      };
      ConfigurationController.prototype.getBadgeFromTrophies = function(trophies) {
        if (trophies <= 0) return 0;
        for (var i = 0; i < Object.keys(this.mTrophiesMap).length; i++) if (trophies < this.mTrophiesMap[i].trophies) return i - 1;
        return Object.keys(this.mTrophiesMap).length - 1;
      };
      ConfigurationController.prototype.getTrophiesFromBadge = function(badge) {
        if (badge <= 0) return 0;
        if (badge < 0 || badge >= Object.keys(this.mTrophiesMap).length) return 0;
        return this.mTrophiesMap[badge].trophies;
      };
      ConfigurationController.prototype.getPercentageFromTrophies = function(trophies) {
        if (trophies <= 0) return 0;
        var trophiesMax = 0;
        var trophiesMin = 0;
        for (var i = 0; i < Object.keys(this.mTrophiesMap).length; i++) {
          if (trophies < this.mTrophiesMap[i].trophies) {
            trophiesMax = this.mTrophiesMap[i].trophies;
            break;
          }
          trophiesMin = this.mTrophiesMap[i].trophies;
        }
        if (0 === trophiesMax) return 1;
        if (trophiesMax === trophiesMin) return 0;
        return (trophies - trophiesMin) / (trophiesMax - trophiesMin);
      };
      ConfigurationController.prototype.getBadgeName = function(badge) {
        if (badge < 0 || badge >= Object.keys(this.mTrophiesMap).length) return "";
        return this.mTrophiesMap[badge].tierName;
      };
      ConfigurationController.prototype.getBadgeShareName = function(badge) {
        if (badge < 0 || badge >= Object.keys(this.mTrophiesMap).length) return "";
        return this.mTrophiesMap[badge].socialLocalizationId;
      };
      ConfigurationController.prototype.getTrophiesRequiredForNextBadgeString = function(trophies) {
        var previousBadgeTrophies = this.getPreviousBadgeTrophy(trophies);
        var nextBadgeTrophies = this.getNextBadgeTrophy(trophies);
        if (trophies - previousBadgeTrophies > nextBadgeTrophies - previousBadgeTrophies) return nextBadgeTrophies - previousBadgeTrophies + " / " + (nextBadgeTrophies - previousBadgeTrophies);
        return trophies - previousBadgeTrophies + " / " + (nextBadgeTrophies - previousBadgeTrophies);
      };
      return ConfigurationController;
    }();
    exports.ConfigurationController = ConfigurationController;
    cc._RF.pop();
  }, {
    "../Constants": "Constants"
  } ],
  ConfirmationPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57e4esqN8xG1Zx4j57AfRu4", "ConfirmationPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ConfirmationPopupComponent = function(_super) {
      __extends(ConfirmationPopupComponent, _super);
      function ConfirmationPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.primaryButton = null;
        _this.secondaryButton = null;
        _this.crossButton = null;
        _this.titleLabel = null;
        _this.messageLabel = null;
        _this.primaryBtnLabel = null;
        _this.secondaryBtnLabel = null;
        return _this;
      }
      ConfirmationPopupComponent.prototype.onLoad = function() {};
      ConfirmationPopupComponent.prototype.start = function() {};
      ConfirmationPopupComponent.prototype.initialize = function(title, message, primaryBtnText, secondaryBtnText, showCloseButton, primaryBtnCallback, secondaryBtnCallback, closeBtnCallBack) {
        this.setLocalizedString(this.titleLabel, title);
        this.setLocalizedString(this.messageLabel, message);
        this.setLocalizedString(this.primaryBtnLabel, primaryBtnText);
        this.setLocalizedString(this.secondaryBtnLabel, secondaryBtnText);
        this.crossButton.node.active = showCloseButton;
        this.resetButtons();
        this.primaryButton.clickEvents.push(primaryBtnCallback);
        this.secondaryButton.clickEvents.push(secondaryBtnCallback);
        this.crossButton.clickEvents.push(closeBtnCallBack);
      };
      ConfirmationPopupComponent.prototype.getPrimaryButtonLabel = function() {
        return this.primaryBtnLabel;
      };
      ConfirmationPopupComponent.prototype.resetButtons = function() {
        this.clearCallbacks(this.primaryButton);
        this.clearCallbacks(this.secondaryButton);
        this.clearCallbacks(this.crossButton);
      };
      ConfirmationPopupComponent.prototype.setLocalizedString = function(label, token) {
        var localizationComponent = label.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues(token);
      };
      ConfirmationPopupComponent.prototype.clearCallbacks = function(button) {
        if (button && button.clickEvents && button.clickEvents.length > 0) for (var i = 0; i < button.clickEvents.length; i++) button.clickEvents.pop();
      };
      __decorate([ property(cc.Button) ], ConfirmationPopupComponent.prototype, "primaryButton", void 0);
      __decorate([ property(cc.Button) ], ConfirmationPopupComponent.prototype, "secondaryButton", void 0);
      __decorate([ property(cc.Button) ], ConfirmationPopupComponent.prototype, "crossButton", void 0);
      __decorate([ property(cc.Label) ], ConfirmationPopupComponent.prototype, "titleLabel", void 0);
      __decorate([ property(cc.Label) ], ConfirmationPopupComponent.prototype, "messageLabel", void 0);
      __decorate([ property(cc.Label) ], ConfirmationPopupComponent.prototype, "primaryBtnLabel", void 0);
      __decorate([ property(cc.Label) ], ConfirmationPopupComponent.prototype, "secondaryBtnLabel", void 0);
      ConfirmationPopupComponent = __decorate([ ccclass ], ConfirmationPopupComponent);
      return ConfirmationPopupComponent;
    }(cc.Component);
    exports.default = ConfirmationPopupComponent;
    cc._RF.pop();
  }, {
    "./LocalizationComponent": "LocalizationComponent"
  } ],
  Connection: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8232dGqaAZGupOnYVc2jUII", "Connection");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("./Logger");
    var HttpRequestImpl_1 = require("./HttpRequestImpl");
    var Message_1 = require("./Message");
    var Helper_1 = require("./Helper");
    var Hash_1 = require("./Hash");
    var Connection = function() {
      function Connection(registryUrl) {
        this.wsConnecting = false;
        this.wsReady = false;
        this.registryUrl = registryUrl;
        this.messageListener = null;
        this.logger = new Logger_1.Logger("Connection", true);
      }
      Connection.prototype.setListener = function(mListener) {
        this.messageListener = mListener;
      };
      Connection.prototype.doGet = function(endPoint, params, onSuccess, onFailure) {
        var self = this;
        var url = this.registryUrl + endPoint + "?" + this.getQueryUrl(params);
        this.logger.Log("Calling=> " + url);
        var client = new HttpRequestImpl_1.HTTPRequestImpl().init();
        client.get(endPoint, url, function(data) {
          var jso = JSON.parse(data);
          if (null != jso.payload && jso.payload.length > 0) {
            var decodedPayload = JSON.parse(jso.payload);
            onSuccess(decodedPayload);
          } else onSuccess(jso);
        }, function(reason) {
          self.logger.Log("Api call to " + endPoint + " failed. Reason: " + reason);
          onFailure && onFailure();
        });
      };
      Connection.prototype.doPost = function(endPoint, params, onSuccess, onFailure) {
        var self = this;
        var url = this.registryUrl + endPoint;
        this.logger.Log("Calling=> " + url);
        params["h"] = this.getChecksum(params);
        var client = new HttpRequestImpl_1.HTTPRequestImpl().init();
        client.post(endPoint, url, JSON.stringify(params), function(data) {
          var jso = JSON.parse(data);
          if (null != jso.payload && jso.payload.length > 0) {
            var decodedPayload = JSON.parse(jso.payload);
            onSuccess(decodedPayload);
          } else onSuccess(jso);
        }, function(reason) {
          self.logger.Log("Api call to " + endPoint + " failed. Reason: " + reason);
          onFailure && onFailure();
        });
      };
      Connection.prototype.connectWs = function() {
        var url = this.registryUrl;
        this.lastConnectionUrl = url;
        this.wsConnecting = true;
        if (this.wsReady || null != this.ws) {
          this.logger.Log("ws was already initialized.");
          this.closeWs();
        }
        this.logger.Log("Connection to " + url);
        var self = this;
        var ws = new WebSocket(url);
        ws.onopen = function(e) {
          self.wsReady = true;
          self.wsConnecting = false;
          self.messageListener(new Message_1.ConnectionReady());
        };
        ws.onerror = function(e) {
          self.logger.Log("Failed to connect" + e);
          self.wsReady = false;
          self.wsConnecting = false;
          self.ws = null;
          self.messageListener(new Message_1.ConnectionFailed());
        };
        ws.onclose = function(e) {
          self.logger.Log("ws closed");
          self.wsReady = false;
          self.wsConnecting = false;
          self.ws = null;
          self.messageListener(new Message_1.ConnectionLost());
        };
        ws.onmessage = function(e) {
          self.wsConnecting = false;
          if ("HB" === e.data) {
            self.onMessage(e.data);
            return;
          }
          var parsedData = Helper_1.Helper.safeJson(e.data);
          null != parsedData && self.onMessage(parsedData);
        };
        this.ws = ws;
      };
      Connection.prototype.isConnectingWs = function() {
        return this.wsConnecting;
      };
      Connection.prototype.isReadyWs = function() {
        return this.wsReady;
      };
      Connection.prototype.closeWs = function() {
        null != this.ws && this.wsReady && this.ws.close();
        this.wsReady = false;
        this.ws = null;
      };
      Connection.prototype.reconnectWs = function() {
        if (this.wsConnecting) {
          this.logger.Log("Already trying to reconnect.");
          return;
        }
        this.connectWs();
      };
      Connection.prototype.sendMessage = function(message) {
        if (!this.wsReady) {
          this.logger.Log("ws not ready! Fail to send: " + str);
          return;
        }
        var str = JSON.stringify(message.getRaw());
        try {
          this.ws.send(str);
        } catch (e) {
          this.logger.Log("Failed to send message on ws: " + e);
        }
      };
      Connection.prototype.onMessage = function(data) {
        null != data && this.messageListener(new Message_1.Message(data));
      };
      Connection.prototype.getQueryUrl = function(params) {
        var i = new Array();
        for (var key in params) i.push(key);
        i.sort(function(e, i) {
          return e == i ? 0 : i > e ? -1 : 1;
        });
        var query = "";
        for (var p = 0; p < i.length; p++) {
          query += i[p] + "=" + params[i[p]];
          query += "&";
        }
        query = query.substring(0, query.length - 1);
        var SHA1 = new Hash_1.Hashes.SHA1(void 0);
        var querySha = SHA1.hex(query);
        query += "&h=" + querySha;
        return query;
      };
      Connection.prototype.getChecksum = function(params) {
        var i = new Array();
        for (var key in params) i.push(key);
        i.sort(function(e, i) {
          return e == i ? 0 : i > e ? -1 : 1;
        });
        var query = "";
        for (var p = 0; p < i.length; p++) {
          query += i[p] + "=" + params[i[p]];
          query += "&";
        }
        query = query.substring(0, query.length - 1);
        var SHA1 = new Hash_1.Hashes.SHA1(void 0);
        var querySha = SHA1.hex(query);
        return querySha;
      };
      return Connection;
    }();
    exports.Connection = Connection;
    cc._RF.pop();
  }, {
    "./Hash": "Hash",
    "./Helper": "Helper",
    "./HttpRequestImpl": "HttpRequestImpl",
    "./Logger": "Logger",
    "./Message": "Message"
  } ],
  Constants: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ceda1dQvJZF7YwZcd/jLo4P", "Constants");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.constants = {};
    exports.constants.USER_RECONNECT_WINDOW = 12e4;
    exports.constants.HEARTBEAT_INTERVAL = 7e3;
    exports.constants.NUM_QUEUE_CONSUMERS = 2;
    exports.constants.DELTA_KEY_PREFIX = "delta-";
    exports.constants.USER_AUTO_CLOSE_TIMEOUT = 6e4;
    exports.constants.USER_IDLE_KICKOUT_WINDOW = 12e4;
    exports.constants.PRIVATE_IDLE_KICKOUT_WINDOW = 3e5;
    exports.constants.POKER_IDLE_KICKOUT_WINDOW = 18e4;
    exports.constants.USER_GAMEOVER_KICK_WINDOW = 30;
    exports.constants.MAX_QUEUE_PROCESS = 50;
    exports.constants.QUEUE_FLUSH_INTERVAL = 500;
    exports.constants.MAX_EMPTY_QUEUE_COUNTER = 6;
    exports.constants.DELAY_QUEUE_TTL = 3e5;
    exports.constants.RETENTION_EVENT_TTL = 432e3;
    exports.constants.SIMULATE_DISABLE_PERC = 15;
    exports.constants.BUCKET_WINDOW_HIGH = 1;
    exports.constants.BUCKET_WINDOW_LOW = 1;
    exports.constants.CONFIG_REFRESH_INTERVAL = 5e3;
    exports.constants.TABLE_FILL_DIFF_ALLOWED = 1;
    exports.constants.USER_RECEIPT_TOKEN_EXPIRY_INTERVAL = 3e4;
    exports.constants.TOURNAMENT_GAME_MODE_START = 100;
    exports.constants.TOURNAMENT_GAME_MODE_END = 108;
    exports.constants.TOURNAMENT = {
      OLDER_LONDON_ID: 103,
      NEWER_LONDON_ID: 104
    };
    exports.constants.SIDE_POT_GAME_START_DELAY = 2e3;
    exports.constants.CURRENCY_INFLOW_PAID = 0;
    exports.constants.CURRENCY_INFLOW_FREE = 1;
    exports.constants.CURRENCY_OUTFLOW_FREE = 2;
    exports.constants.CURRENCY_OUTFLOW_PAID = 3;
    exports.constants.CURRENCY_OUTFLOW_MIXED = 4;
    exports.constants.CURRENCY_OUTFLOW_TRANSITION = 5;
    exports.constants.IPAYY_AUTH_KEY = "Basic WnFGLUlKdFhXRDU1eE0tdFI0R1ZiQTo5QnhkbDE4cW40MFZUV2U1azF4N0ZR";
    exports.constants.DEFAULT_INSTANCE_ID = "DEFAULT";
    exports.constants.DEFAULT_RAISED_MULTIPLIER = 2;
    exports.constants.INVALIDATE_RAISED_MULTIPLIER = -1;
    exports.constants.GPLAY_PRICING_VARIANT = 1;
    exports.constants.PROBABILITY_BASE = 100;
    exports.constants.STORE_DEALER_MESSAGE_NEW_USER_PROBABILITY = 5;
    exports.constants.STORE_DEALER_MESSAGE_EXISTING_USER_PROBABILITY = 2;
    exports.constants.STORE_DEALER_PROBABILITY_CUTOFF = 40;
    exports.constants.DEALER_MESSAGE_NAME_LENGTH = 10;
    exports.constants.POKER_CARDS_PER_PLAYER = 2;
    exports.constants.POKER_COMMUNITY_CARDS = 5;
    exports.constants.INT_MAX = 2147483648;
    exports.constants.BANK_PAYMENT_DENIAL_PK = 24e3;
    exports.constants.BUCKET_LIMIT = 19;
    exports.constants.DYNAMIC_BUCKETS = 3;
    exports.constants.ONE_CR = 1e7;
    exports.constants.NEW_BADGE_SHOW_TIME = 15;
    exports.constants.SHORTCUT_POPUP_KEY = "shortcut_popup_shown";
    exports.constants.CONFIG_VERSION_KEY = "config_version_key";
    exports.constants.LEAGUE_RANK_CHANGE_UNDEFINED = 99999;
    exports.constants.TOURNAMENT_ID = {
      SINGAPORE: 100,
      DUBAI: 101,
      DUBAI_VIP: 105
    };
    exports.constants.TIME_S = {
      MINUTE: 60,
      HOUR: 3600,
      DAY: 86400,
      WEEK: 604800,
      MONTH: 2592e3,
      FIFTEEN_DAY: 1296e3
    };
    exports.constants.TIME_MS = {
      SECOND: 1e3,
      MINUTE: 6e4,
      HOUR: 36e5,
      DAY: 864e5,
      TWO_DAY: 1728e5,
      WEEK: 6048e5,
      MONTH: 2592e6
    };
    exports.constants.ROOM_STATE = {
      INACTIVE: 0,
      WAITING_FOR_PLAYERS: 1,
      COUNTDOWN: 2,
      ACTIVE: 3,
      WAITING_FOR_REMATCH: 4,
      DESTROYED: 5
    };
    exports.constants.GAME_RULE_TYPE = {
      GAME_MODE_CLASSIC: 1,
      GAME_MODE_MASTER: 2,
      GAME_MODE_QUICK: 3
    };
    exports.constants.TABLE_TYPE = {
      TABLE_TYPE_1V1: 1,
      TABLE_TYPE_2V2: 2,
      TABLE_TYPE_4P: 3,
      TABLE_TYPE_PRIVATE: 4
    };
    exports.constants.GAME_MODE = {
      GAME_MODE_NOLIMIT: 1,
      GAME_MODE_NOLIMIT_JOKER: 1,
      GAME_MODE_NOLIMIT_HUKAM: 1,
      GAME_MODE_NOLIMIT_MUFLIS: 1,
      GAME_MODE_NOLIMIT_POTBLIN: 1,
      GAME_MODE_NORMAL: 1,
      GAME_MODE_JOKER: 1,
      GAME_MODE_HUKAM: 1,
      GAME_MODE_MUFLIS: 1,
      GAME_MODE_ROYAL: 1,
      GAME_MODE_AK4: 1
    };
    exports.constants.GAME_MODE_DELUXE = [];
    exports.constants.GAME_MODE_REGULAR = [];
    exports.constants.ROOM_FRAUD_SOURCE = {
      ROOM_NOFRAUD: 0,
      ROOM_HFR_PLAYER: 1,
      ROOM_TWOFRIENDS_PLAYING: 2,
      ROOM_USER_INVITED: 3,
      ROOM_TWOPLAYER_STANDING: 4,
      ROOM_FRAUD_MESSAGE: 5,
      ROOM_TWOPLAYER_SAMEIP: 6
    };
    exports.constants.PAYMENT_MODE = {
      GPLAY: 1,
      IPAYY: 2,
      NINE_GAMES: 3
    };
    exports.constants.BOT_WIN_CHANCE = {
      YES: 0,
      NO: 1,
      UNKNOWN: 2
    };
    exports.constants.BOT_MALE_PERCENTAGE = 90;
    exports.constants.DELTA = 2e3;
    exports.constants.HOUSE_COLOR = {
      GREEN: 0,
      RED: 1,
      YELLOW: 2,
      BLUE: 3,
      NONE: 4
    };
    exports.constants.PACKET_TYPE = {
      CHAAL: 0,
      DICE_ROLL: 1,
      POT_LIMIT_REACHED: 2,
      FOLD: 3,
      SEE_CARD: 4,
      SIDE_SHOW_REQUEST: 5,
      SIDE_SHOW_ACCEPT: 6,
      SIDE_SHOW_DENY: 7,
      JOIN_TABLE: 8,
      LEAVE_TABLE: 9,
      DEALER_CHANGE: 10,
      DEALER_TIP: 11,
      GIFT: 12,
      GAME_START_COUNTDOWN: 13,
      BOOT_COLLECT: 14,
      STANDUP: 15,
      VIEW_PROFILE: 16,
      INVITE_FRND: 17,
      PURCHASE_DONE: 18,
      LOCALE_CHANGE: 19,
      BLOCK_USER: 20,
      QUEUE: 21,
      FRIEND_REQUEST_RAISING: 22,
      FRIEND_REQUEST_REMOVING: 23,
      FRIEND_REQUEST_ACCEPT: 24,
      FRIEND_REQUEST_DENY: 25,
      FRIEND_REQUEST_ADD: 26,
      FRIEND_REQUEST_CHANGE_UPDATE: 27,
      CHIPS_GIFT: 28,
      CHAT_SETTING_UPDATE: 29,
      HAND_STRENGTH_METER: 30,
      BOOT_UPDATE: 31,
      SHOW: 32,
      PLAYER_START: 33,
      PLAYER_WON: 34,
      DEBUG_DICE_SELECT: 35,
      CUSTOMIZE_PAWN_PACKET: 36,
      CUSTOMIZE_BOARD_PACKET: 37,
      AUTOPLAY: 38,
      REINITIALIZE: 39,
      REINIT_PRIVATE_TIMER: 40,
      SURVEY_POPUP: 41
    };
    exports.constants.TIME = {
      TWENTY_ONE: 1814400,
      WEEK: 604800,
      DAY: 86400,
      HOUR: 3600,
      MIN: 60
    };
    exports.constants.USER_STATE = {
      OFFLINE: "0",
      ENTERED_LOBBY: "1",
      IN_GAME: "2"
    };
    exports.constants.DICE_ROLL_TYPE = {
      STACKING: 1,
      ALTERNATE: 2
    };
    exports.constants.TIMING_TYPE = {
      OLD_TIMING: 1,
      NEW_TIMING: 2
    };
    exports.constants.DELIM = {
      LEG_STATUS: "-",
      STATUS: ";",
      KEY: "_",
      MESSAGE: ":",
      ROOM_ID: "|",
      REDIS_KEY: ":",
      ROOM_N_ID: "*",
      CSV: ",",
      CHANNEL: ":",
      REDIS_MSG: ";",
      IPAYY: ":",
      REDIS_CHIPS: "|",
      SUMMARY_DEL: "|"
    };
    exports.constants.LOCALE_TYPE = {
      ENGLISH: "en",
      HINDI: "hi",
      GUJRATI: "gj",
      MARATHI: "ma",
      TELUGU: "tl",
      TAMIL: "tm"
    };
    exports.constants.STATUS_MSG_TYPE = {
      ROOM_JOIN: 1
    };
    exports.constants.MID = {
      JOIN_ROOM: "jr",
      SELECT_TICKETS: "st",
      GAME_JOINED: "GJ",
      CLOSE: "cl",
      CLOSE_ACK: "CK",
      RECONNECT: "rc",
      RECONNECT_ACK: "RK",
      REINIT_ACK: "RIA",
      GAME_END: "GE",
      USE_POWERUP: "up",
      SOCIAL: "SO",
      UPDATE_DETAILS: "ud",
      GAME_START: "GS",
      ROOM_UPDATE_NORMAL: "RU",
      IN_GAME_ACTION: "ia",
      BOOT_COLLECT: "BC",
      ROOM_JOIN: "RJ",
      ROOM_JOIN_ACK: "RA",
      ROOM_JOIN_UPDATE: "RE",
      ROOM_VIEW_PROFILE: "VP",
      ROOM_PLAYER_GIFT: "PG",
      ROOM_PLAYER_CHIPS_GIFT: "CG",
      HEART_BEAT: "HB",
      ADMIN: "adm",
      IN_GAME_INVITE: "IGI",
      FORCE_KICK: "FK",
      PURCHASE_ACK: "PA",
      SERVER_MESSAGE_PACKET: "SP",
      DEALER_MESSAGE_PACKET: "DM",
      REJOIN_PACKET: "RP",
      FRIEND_REQUEST_USER_ACTION: "fa",
      SET_WEB_SOCKET: "SWS",
      FRIEND_REQUEST_UPDATE: "FU",
      ROUTE_HEADER: "HD",
      PID: "PID",
      PAYLOAD: "PY",
      URI: "UR",
      ROUTER_ID: "RI",
      SEQUENCE_ID: "SQ",
      SERVICE_TYPE: "SY",
      HAND_STRENGTH_METER: "HS",
      GAMEPLAY_ACHIEVEMENT_UNLOCKED: "AV",
      LEVEL_UPDATE_ACK: "LU",
      MESSAGE_TYPE: "MT",
      SURVEY_POPUP_PACKET: "SUP",
      CRICKET: {
        MATCH_DETAIL: "MD",
        MATCH_LIST: "ML",
        MATCH_BET_ACK: "MBA",
        MATCH_COLLECT_ACK: "MCA"
      },
      LUDO: {
        DICE_ROLL_ACK: "DRA",
        PAWN_PROGRESS_ACK: "PPA",
        PLAYER_WON_ACK: "PWA",
        PAWN_AVATAR_UPDATE: "PAU",
        BOARD_CHANGE_UPDATE: "BCU",
        AUTOPLAY_UPDATE: "AP"
      }
    };
    exports.constants.FID = {
      AUTH_TOKEN: "AT",
      TROPHIES: "tro",
      TOURNAMENT_VERSION: "TV",
      TOURNAMENT_ROUND: "TR",
      ROOM_ENTRY_FEE: "EF",
      JOIN_TABLE_FEE: "JF",
      ROOM_ENTRY_FEE_MAP: "EFM",
      INSTANCE_ID: "II",
      MESSAGE_ID: "MI",
      MESSAGE_PARAMS: "MP",
      RE_ROLL: "RR",
      NEW_BINGOS: "NB",
      POWERUP_TYPE: "PT",
      RESULT: "RL",
      REWARD_COUNT: "RC",
      REWARD_ID: "RD",
      GIFT_USER: "GU",
      GIFT_ALL: "GA",
      REWARDS: "RW",
      REWARDS_META: "RWM",
      ROOM_ID: "RI",
      SWAP_ID: "SP",
      ROOM_STATE: "RS",
      QUEUE_STATE: "QS",
      ROOM_TYPE: "RT",
      SECONDS_TO_START: "SS",
      SESSION_KEY: "SK",
      TICKETS_SELECTED: "TS",
      USER_ID: "UI",
      USER_BLOCKED: "UB",
      USERS_TOTAL: "UT",
      SOCIAL_MESSAGES: "SMS",
      PROFILE_PIC_URL: "PPU",
      SN_USERNAME: "SU",
      HASH: "HH",
      NUMBER_CALL_INDEX: "NC",
      POWER_UP_USED: "PU",
      MYSTERY_BOX_CLICKED: "MC",
      PACKET_TYPE: "PT",
      INDEX: "IN",
      CHAAL: "CH",
      CASH_IN_HAND: "CI",
      CASH_IN_GAME: "CG",
      TIMER: "TI",
      DEALER: "DE",
      PLAYER_INFO: "PI",
      NEXT_INDEX: "NI",
      POT_AMOUNT: "PA",
      HAND_STRENGTH_METER_FEE: "HF",
      AMOUNT: "AM",
      PID: "PD",
      PID2: "PDII",
      SNUID: "SD",
      SNUID2: "SDII",
      SNID: "SI",
      FIRST_NAME: "FN",
      POWERUP_ENABLED: "PE",
      CARDS: "CA",
      BOOT_AMOUNT: "BA",
      MAX_CHAAL_LIMIT: "MCL",
      WINNER: "WI",
      PATTERN: "PN",
      CROWN_HOLDER: "CR",
      ROOM_INFO: "RF",
      AVATAR: "AR",
      HANDS_WON: "HW",
      HANDS_PLAYED: "HP",
      AMOUNT_CHANGED: "AC",
      USER_XP: "XP",
      DEALER_TIP: "TP",
      FORCED: "FD",
      TYPE: "TE",
      CREATE_PRIVATE_ROOM: "CP",
      CREATE_PRIVATE_ROOM_OPTIONS: "CO",
      IS_PRIVATE: "IP",
      BUCKET_ID: "BI",
      HEADING: "HG",
      MESSAGE: "ME",
      ACTION: "AN",
      HUKAM_CARD: "HC",
      DEALER_ID: "DI",
      ADDRESS: "AD",
      SSL_ADDRESS: "SA",
      WELCOME_MSG: "WM",
      GIFT_BANNER_MSG: "GB",
      PLAYER_ID: "PI",
      IS_FAST_MESSAGE: "FM",
      ARE_FAST_MESSAGES: "AFM",
      TICKET: "TT",
      TEXT: "TX",
      CANCEL: "CL",
      LOCALE: "LL",
      CHAT_SETTING: "CS",
      HSM_SETTING: "HS",
      TEXT_MESSAGE: "TME",
      JOKER_CARDS: "JC",
      TIED_PLAYERS: "TIE",
      INGAME_AUTO_POPUP: "GAP",
      DYNAMIC_DG_PRICE: "DP",
      TIP_COUNT: "TC",
      ATTENTION_CHIPS_STATE: "ACS",
      WARNING_CHIPS_STATE: "WCS",
      RECOM_CHIPS_COUNT: "RCC",
      RECOM_CHIPS_PKGID: "RCP",
      JOIN_CHIPS_STATE: "JCS",
      SN_AVATAR_ID: "SAI",
      HAS_RAISED: "HR",
      FETCH_ALL: "FA",
      PLAYER_PROFILE_INFO: "PPI",
      AMOUNT_SPENT: "AS",
      SELF_CARDS: "SC",
      STAR: "ST",
      PVS_WEEK_HANDS: "PWH",
      FRIEND_COUNT: "FC",
      MAX_FRIENDS: "MF",
      LEVEL: "LE",
      DELTA: "DT",
      STATUS: "ST",
      STATUS_PARAM1: "PR1",
      STANDUP_REASON: "STR",
      IS_ALL_IN: "HAI",
      TOURNAMENT_POSITION: "TPP",
      TOURNAMENT_CHIPS_WON: "TCW",
      IS_TIED: "TD",
      SIDE_POT_WINNERS: "TSW",
      SIDE_POT_AMOUNTS: "TSA",
      SIDE_POT_PATTERNS: "SWP",
      SIDE_POT_TIED_PLAYERS: "TST",
      HSM_SHOW_FTU: "SF",
      HSM_SHOW_TRIAL_OVER: "TO",
      HSM_SCORE: "SC",
      HANDSTRENGTH_SCORE: "HSS",
      HANDSTRENGTH_ENABLED: "HE",
      HANDSTRENGTH_TRIAL_PERIOD: "HT",
      HANDSTRENGTH_SETTING_FLAG: "HSF",
      FRAME_ASSET_ID: "FAI",
      GAMEPLAY_ACHIEVEMENTS: "AH",
      CHAAL_RAISED_MULTIPLIER: "RM",
      LEVEL_UP_BONUS_CHIPS: "LC",
      NEXT_LEVEL_BONUS: "NLB",
      POKER_ROOM_INFO: "PRI",
      IS_AUTO_JOIN: "AJ",
      JOIN_TYPE: "JT",
      FAIL_ERROR: "FE",
      PROGRESS: "PR",
      ADHOC: {
        IS_CONNECTED: "IC"
      },
      SN_PHOTO_URL: "SPU",
      CRICKET: {
        SUCCESS_MESSAGE: "SM",
        ERROR_MESSAGE: "EM",
        MATCH_ID: "MAI",
        MATCH: "MT",
        HOME_TEAM: "HTE",
        AWAY_TEAM: "AWE",
        END_TIME: "ET",
        TIME_LINE_ID: "TL",
        TOTAL_AMOUNTS: "TA",
        CHIPS: "CHP",
        GEMS: "GM",
        QUESTIONS: "QUS",
        QUESTION_ID: "QID",
        QUESTION: "QUE",
        QUESTION_OPTIONS: "QO",
        ANSWER_SELECTED: "ASW",
        CORRECT_ANSWER: "CAW",
        REWARD_AMOUNT: "RAM",
        SHOW: "SH",
        COLLECT_STATUS: "CST",
        MATCH_STATUS: "MST",
        TIME_DIFF: "TDI",
        MULTIPLIER: "MLT"
      },
      POKER: {
        BUY_IN_AMOUNT: "BI",
        SMALL_BLIND_INDEX: "SBI",
        BIG_BLIND_INDEX: "BBI",
        COMMUNITY_CARDS: "CC",
        ROUND_OVER: "RO",
        WINNING_COMMUNITY_CARDS: "WCC",
        WINNING_USER_CARDS: "WUC"
      },
      LUDO: {
        PLAYER_WON: "PW",
        CAPTURE_META: "CM",
        PAWN_POS: "PP",
        PAWN_ID: "PPI",
        MOVE_COUNT: "MCT",
        PAWN_MOVEMENT: "PM",
        WASTE_TURN: "WT",
        DICE_ROLLS: "DR",
        IS_LAST_ROLL: "ILR",
        ROLL_INDEX: "RID",
        TABLE_TYPE: "GID",
        RULE_TYPE: "MID",
        COLOR: "CL",
        BET_AMT: "BAMT",
        CAN_START: "CST",
        USER_RANK: "USR",
        END_GAME: "EG",
        PROGRESS_META: "PRM",
        PAWN_HIGHLIGHT: "PH",
        MOVEABLE_DICE_ROLL: "MDR",
        SAFE_LOCATIONS: "SLL",
        TOTAL_EARNING: "TE",
        ONE_V_ONE_WIN: "OOW",
        FOUR_P_WIN: "FPW",
        TWO_V_TWO_WIN: "TTW",
        PAWN_CAPTURE: "PCC",
        SKIN_OWNED: "SOW",
        IN_HAND_COINS: "IHC",
        IS_REMATCH: "IR",
        IS_DESTROYED: "IDR",
        PAWN_AVATAR_ID: "PAI",
        BOARD_AVATAR_ID: "BAI",
        AUTOPLAY: "AP",
        NEW_DICE_ROLL: "NDR",
        NEXT_DICE_NUMBER: "NDN",
        WIN_POPUP_DELAY_TIME: "WPD",
        COUNTRY: "CTR",
        PLAYER_WIN_META: "PWM",
        IS_IN_DICE_ROLL: "INDR",
        QUEUED_TURNS: "QT",
        NEXT_DICE_META: "NDM",
        POWERUP_ID: "PUI",
        POWERUP_COUNT: "PUC",
        POWERUP_PRICE: "PUP",
        NEXT_POWERUP_PRICE: "NPP",
        POWER_USED: "PUD",
        REROLL_TIME: "RRT",
        GEMS: "GM",
        PRIVATE_KEY: "PKY",
        CREATOR_ID: "CI",
        REWARDS_INFO: "RWI",
        INVITE_WAITING_DURATION: "IWD",
        INVITE_WAITING_TIME_REM: "IWR",
        FORCE_KICK_REASON: "FKR",
        IG_BET_AMT: "IBA",
        IG_WIN_META: "IWM",
        IG_NEXT_BET_AMT: "INB",
        IG_NEXT_TWOPLAYER_REWARD_META: "ITRM",
        IG_NEXT_FOURPLAYER_REWARD_META: "IFRM",
        IG_PROFILE_INFO: "IPI",
        FORCE_FETCH_RECEIPT: "FFR",
        REROLL_TIMER: "RRT",
        CUSTOM_COUNTRY_CODE: "CCCODE",
        CUSTOM_USER_NAME: "CUNAME",
        GAMES_UNLOCK_COUNT_FOR_POWERUP: "GUP",
        TOTAL_GAMES_UNLOCK_COUNT_FOR_POWERUP: "TGP"
      },
      LEAGUES: {
        LEAGUE: "LE",
        LEAGUE_POINTS: "PL",
        LEAGUE_POINTS_DELTA: "LPD",
        CHANGE: "CG",
        CHIPS: "CH",
        NEW_LEAGUE: "NL",
        RANK: "RK",
        CONFIG_LAST_UPDATED: "CLU",
        INFO_LAST_UPDATED: "ILU",
        POINTS: "PO",
        PID: "ID",
        CONFIG: "LC",
        LEAGUE_ID: "LI",
        LEAGUE_EXPIRY: "LTX",
        RESULT: "RS",
        TIMEOUT: "TM",
        INFO: "IN",
        PLAYER_COUNT: "PC",
        PLAYER_DESCRIPTION: "PD",
        LEAGUE_DESCRIPTION: "LD",
        DIVISION_DESCRIPTION: "DD",
        PLAYER_POINTS: "PP"
      },
      SURVEY_POPUP: {
        ID: "ID",
        CANCEL: "CA",
        NATIVE: "NA",
        HEADING: "HE",
        QUESTION: "QE",
        TYPE: "TY",
        OPTION1: "O1",
        OPTION2: "O2"
      }
    };
    exports.constants.LEAGUES_CONFIG_URI = {
      PROMOTION_INDEX: "PI",
      DEMOTION_INDEX: "DI",
      ICON: "IC",
      PREASSIGNED: "PA",
      NAME: "NM",
      REWARDS: "LRW",
      TOP_REWARDS: "TRW",
      START_TIME: "ST",
      PERIOD: "PE",
      LEAGUE_COUNT: "LC",
      PLAYERS_PER_DIV: "PD",
      ASSET_ZIP: "AZ",
      DEFS: "DF",
      PINFO_NAME: "NM",
      PINFO_LNAME: "LN",
      PINFO_AVATAR: "AV",
      PINFO_SNUID: "SU",
      PINFO_SNID: "SI",
      PINFO_FLAG: "FL",
      LAST_UPDATED: "LU",
      CHANGE: "change",
      CHIPS: "chips",
      RANK: "rank",
      NEW_LEAGUE: "newLeague",
      LEAGUE_ID: "leagueId",
      PLAYERS: "players",
      POINTS: "points",
      PID: "pid"
    };
    exports.constants.Experiments = {
      LUDO_IG_CHAT: "ludoig_chat",
      LUDO_IG_PROGRESSION: "ludoig_progression",
      LUDO_IG_ECONOMY: "ludoig_economy",
      LUDO_IG_SHORTCUT: "ludoig_shortcut",
      LUDO_IG_CUSTOM_CHAT: "ludoig_customchat",
      LUDO_IG_ADS: "ludoig_ads",
      LUDO_IG_STORE: "ludoig_store",
      LUDO_IG_LEADERBOARD_COINS: "ludoig_leaderboard_coins",
      LUDO_IG_LEAGUES: "ludoig_leagues",
      LUDO_IG_POWERUP: "ludoig_powerup",
      LUDO_IG_LEAGUES_UI: "ludoig_leagues_ui_and_backend",
      LUDO_IG_INTERSTITIAL: "ludoig_interstitial",
      LUDO_IG_PROG_ADREWARDS: "ludoig_prog_adrewards",
      LUDO_IG_HUD_ADBUTTON: "ludoig_hud_adbutton",
      LUDO_IG_SPANISH_LOC: "ludoig_spanish_loc",
      LUDO_IG_CUSTOM_PROFILE: "ludoig_profile_customization",
      LUDO_IG_BET_SELECT: "ludoig_bet_select",
      LUDO_IG_POWERUPS_DEBUG: "ludoig_powerups_debug",
      LUDO_IG_INTERSTITIAL_NEXT_BTN: "ludoig_interstitial_nextbtn",
      LUDO_IG_INTERSTITIAL_PRELOAD: "ludoig_interstitial_preload",
      LUDI_IG_FTUE: "ludoig_ftue",
      LUDO_IG_REFERRAL_BUTTON: "ludoig_referral_button",
      LUDO_IG_POWERUPS_DEBUG2: "ludoig_powerups_debug2",
      LUDO_IG_DBONUS_ADS: "ludoig_dbonus_ads"
    };
    exports.constants.Events = {
      EVENT_COIN_HUD_PRESSED: "event_coin_hud_pressed",
      EVENT_PROGRESSION_HUD_PRESSED: "event_progression_hud_pressed",
      EVENT_FEEDBACK_CLICKED: "event_feedback_clicked",
      EVENT_POPUP_CLOSED: "popup_closed",
      EVENT_POPUP_SHOWN: "popup_shown",
      EVENT_SHOW_SURVEY_DATA: "survey_popup_data",
      EVENT_KEYBOARD_OPEN: "event_keyboard_open",
      EVENT_KEYBOARD_CLOSE: "event_keyboard_close",
      EVENT_PROFILE_PRESSED: "event_profile_pressed",
      EVENT_CHAT_STATUS_CHANGED: "event_chat_status_changed",
      EVENT_BUBBLE_RESIZED: "event_bubble_resize",
      EVENT_MY_TURN_START: "event_my_turn_start",
      EVENT_MY_TURN_END: "event_my_turn_end",
      EVENT_REFRESH_CHAT_HISTORY: "event_refresh_chat_history",
      EVENT_SHOW_CHAT_OFF_POPUP: "event_show_chat_off_popup",
      EVENT_RESET_GAME: "event_reset_game",
      EVENT_CHAT_BUBBLE_ANIMATION_DONE: "event_chat_bubble_animation_done",
      EVENT_ON_PROGRESS: "event_on_progress",
      EVENT_ON_PURCHASE_SUCCESS: "event_on_purchase_success",
      EVENT_ON_PURCHASE_FAIL: "event_on_purchase_fail",
      EVENT_ON_SPINNER_STOP: "event_on_spinner_stop",
      EVENT_DISABLE_STORE_CLICK: "event_disable_store_click",
      EVENT_ENABLE_STORE_CLICK: "event_enable_store_click",
      EVENT_STORE_NOT_SUPPORTED_POPUP: "event_store_not_supported_popup",
      EVENT_LEADERBOARD_LOADED: "event_leaderboard_loaded",
      EVENT_REWARDED_VIDEO_SHOW_COMPLETE: "event_rewarded_video_show_complete",
      EVENT_REWARDED_VIDEO_PRELOADED_START: "event_rewarded_video_preloaded_start",
      EVENT_REWARDED_VIDEO_PRELOADED_SUCCESS: "event_rewarded_video_preloaded_success",
      EVENT_REWARDED_VIDEO_PRELOADED_ERROR: "event_rewarded_video_preloaded_error",
      EVENT_REWARDED_VIDEO_VERIFY_SUCCESS: "event_rewarded_video_verify_success",
      EVENT_REWARDED_VIDEO_VERIFY_ERROR: "event_rewarded_video_verify_error",
      EVENT_VIDEO_AVAILABLE_COUNT_CHANGED: "event_video_available_count_changed",
      EVENT_REWARDED_VIDEO_NOT_SUPPORTED: "event_rewarded_video_not_supported",
      EVENT_REWARDED_VIDEO_SUPPORTED: "event_rewarded_video_supported",
      EVENT_ADS_FINISHED: "event_ads_finished",
      EVENT_ADS_UNAVAILABLE: "event_ads_unavailable",
      EVENT_SHOW_ADS_CONFIRMATION: "event_show_ads_confirmation",
      EVENT_RESET_ADS: "event_reset_ads",
      EVENT_SHOW_STORE_POPUP: "event_show_store_popup",
      EVENT_SHOW_LEAGUE_INFO_POPUP: "event_show_league_info_popup",
      EVENT_ON_GEMS_COLLECT: "event_on_gems_collect",
      EVENT_ON_COINS_COLLECT: "event_on_coins_collect",
      EVENT_LEAGUE_DATA_FETCHED: "event_league_data_fetched",
      EVENT_SHOW_LEAGUE_END_POPUP: "event_show_league_end_popup",
      EVENT_LEAGUE_CLAIM_COMPLETE: "event_league_claim_complete",
      EVENT_UPDATE_LOBBY_COINS_HUD: "updateLobbyCoinsHud",
      EVENT_CHECK_FOR_AUTO_POPUPS: "event_check_for_auto_popups",
      EVENT_SHOW_PLAY_ONLINE_POPUP: "event_show_play_online_popup",
      EVENT_SHOW_INTERSTITIAL_ADS: "event_show_interstitial_ads",
      EVENT_POPUP_SHOW_COMPLETE: "popup_show_complete",
      EVENT_SHOW_LEAGUE_POPUP: "event_show_league_popup",
      EVENT_DICE_ROLLED: "event_dice_rolled",
      EVENT_BOARD_INITIALIZED: "event_board_initialized",
      EVENT_POWERUP_USED: "event_powerup_used",
      EVENT_BACK_PRESSED: "event_back_pressed",
      EVENT_CONFIRM_EXIT: "event_confirm_exit",
      EVENT_BOOT_COLLECT: "event_boot_collect",
      EVENT_SETTINGS_PRESSED: "event_settings_pressed",
      EVENT_GEMS_INSUFF: "event_gems_insuff",
      EVENT_HELP_PRESSED: "event_help_pressed",
      EVENT_POST_PROG_WATCH_AD: "event_post_prog_watch_ad",
      EVENT_PROG_AD_BUTTON_CLICK: "event_prog_ad_button_click",
      EVENT_PROG_CARD_CLICK: "event_prog_card_click",
      EVENT_NOT_ENOUGH_COIN_DISABLE_POPUP: "event_not_enough_coin_disable_popup",
      EVENT_SHOW_BET_SELECT_POPUP: "event_show_bet_select_popup",
      EVENT_START_TWO_PLAYER_GAME: "event_start_two_player_game",
      EVENT_START_FOUR_PLAYER_GAME: "event_start_four_player_game",
      EVENT_STOP_SPINNER_ON_BET_SELECT_POPUP: "event_stop_spinner_on_bet_select_popup",
      EVENT_CLOSED_BET_SELECT_POPUP: "event_closed_bet_select_popup",
      EVENT_START_GAME_FROM_RESULT_POPUP: "event_start_game_from_result_popup",
      EVENT_STOP_NEXT_BUTTON_SPINNER: "event_stop_next_button_spinner",
      EVENT_SHOW_REFERRAL_INVITE_POPUP: "event_show_referral_invite_popup",
      EVENT_SHOW_REFERRAL_SENT_SUCCESS_POPUP: "event_show_referral_sent_success_popup",
      EVENT_SHOW_REFERRAL_GRANTED_POPUP: "event_show_referral_granted_popup",
      EVENT_SHOW_REFERRAL_REWARD_POPUP: "event_show_referral_popup",
      EVENT_SHOW_REFERRAL_WELCOME_POPUP: "event_show_referral_welcome_popup",
      EVENT_SHOW_FRIENDS_NODE: "event_show_friends_node",
      EVENT_SHOW_ERROR_TEXT_CODE: "event_show_error_text",
      EVENT_CLOSE_INVITE_SENT_POPUP: "event_close_invite_popup",
      EVENT_POWERUP_SETTINGS_CHANGED: "event_powerup_settings_changed",
      EVENT_FTUE_CLEAR: "event_clear_ftue",
      EVENT_DB_VIDEO_NOT_AVAILABLE: "event_db_video_not_available",
      EVENT_DB_VIDEO_SERVER_ERROR: "event_db_video_server_error",
      EVENT_SHOW_GET_EMOJIS_POPUP: "event_show_get_emojis_popup",
      EVENT_SHOW_UNLOCKING_EMOJIS_POPUP: "event_show_unlocking_emojis_popup",
      EVENT_MUSIC_STATUS: "event_music_status",
      EVENT_LOCALE_CHANGE: "event_locale_change"
    };
    exports.constants.URI = {
      STATUS_UPDATE_ACK: "SUA",
      STATUS_GET: "SG",
      STATUS_GET_ACK: "SGA",
      RECONNECT: "RC",
      STATUS_UPDATE: "SU",
      LEADERBOARD_UPDATE: "LU",
      LEADERBOARD_GET: "LG",
      SUBMIT_STATUS: "SS",
      ROUTER_REGISTER: "RG",
      HEART_BEAT: "HB",
      GS_MESSAGE: "GM",
      GS_MSG_ACK: "GA",
      CLOSE_ACK: "CA",
      SERVICE_CONNECT: "SC",
      SERVICE_RECONNECT: "RC",
      RECONNECT_ACK: "RCA",
      SERVICE_EXIT: "SX",
      CLIENT_RECONNECT: "CR",
      CLIENT_DISCONNECT: "DC",
      CHECK_PLAYING: "CP",
      JOIN: "JO",
      JOIN_ACK: "JOA",
      CRICKET: {
        MATCH_DETAILS: "MD",
        MATCH_LIST: "ML",
        MATCH_BETS: "MB",
        MATCH_COLLECT: "CRE"
      },
      LEAGUES: {
        GET: "LG",
        UPDATE: "LU",
        INFO: "LI",
        END: "LE",
        CHANGE: "LC",
        RETRY: "LR",
        SERVICE_CONNECT_ACK: "SCA",
        LEAGUE_COOLDOWN: "LCD",
        LEAGUE_DETAILS: "LD"
      }
    };
    exports.constants.ROUTE_HEADER = {
      STATUS: "ST",
      LEADERBOARD: "LB",
      ROUTER: "RU",
      GAMESERVER: "GS",
      CRICKETSERVER: "CS",
      LEAGUES: "LS"
    };
    exports.constants.SNID_VALUE = {
      FACEBOOK: "1",
      GUEST: "0"
    };
    exports.constants.LUDO_GAME_TYPE = {
      LUDO_TYPE_FIRST_6_0: "first_6_0",
      LUDO_TYPE_FIRST_6_2: "first_6_2",
      LUDO_TYPE_FIRST_6_3: "first_6_3",
      LUDO_TYPE_QUICK_HOME_0: "quick_0",
      LUDO_TYPE_QUICK_HOME_2: "quick_2",
      LUDO_TYPE_QUICK_HOME_3: "quick_3",
      LUDO_TYPE_CAPTURE_0: "capture_0",
      LUDO_TYPE_CAPTURE_2: "capture_2",
      LUDO_TYPE_NO_KILL_NEW_1: "no_kill_new_1",
      LUDO_TYPE_NO_KILL_NEW_2: "no_kill_new_2"
    };
    exports.constants.BADGE = {
      NONE: 0,
      BRONZE: 1,
      SILVER: 2,
      GOLD: 3,
      PLATINUM: 4,
      DIAMOND: 5
    };
    exports.constants.AD_ERROR_CODE = {
      DONT_TRY_PRELOAD: 0,
      ADS_INSTANCE_DOWNLOADED: 1,
      ADS_INSTANCE_DOWNLOAD_FAIL: 2
    };
    exports.constants.TROPHIES_MAP = {
      0: {
        tierName: "#EMPTY_TEXT",
        trophies: 0,
        socialLocalizationId: "#EMPTY_SHARE_TEXT"
      },
      1: {
        tierName: "#BRONZE_TEXT",
        trophies: 1,
        socialLocalizationId: "#BRONZE_SHARE_TEXT"
      },
      2: {
        tierName: "#SILVER_TEXT",
        trophies: 5,
        socialLocalizationId: "#SILVER_SHARE_TEXT"
      },
      3: {
        tierName: "#GOLD_TEXT",
        trophies: 37,
        socialLocalizationId: "#GOLD_SHARE_TEXT"
      },
      4: {
        tierName: "#RUBY_TEXT",
        trophies: 165,
        socialLocalizationId: "#RUBY_SHARE_TEXT"
      },
      5: {
        tierName: "#DIAMOND_TEXT",
        trophies: 677,
        socialLocalizationId: "#DIAMOND_SHARE_TEXT"
      }
    };
    exports.constants.STORE_CONFIG = {
      packs: [ {
        pkg_id: "chips_30k",
        Coins: 3e4,
        price: [ .99, .99 ],
        Discounted_amount: 0,
        Image_type: 3,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: false,
        grantItems: {
          chips: 3e4
        }
      }, {
        pkg_id: "chips_100k",
        Coins: 1e5,
        price: [ 1.99, 1.99 ],
        Discounted_amount: 0,
        Image_type: 4,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: true,
        grantItems: {
          chips: 1e5
        }
      }, {
        pkg_id: "chips_500k",
        Coins: 5e5,
        price: [ 4.99, 4.99 ],
        Discounted_amount: 0,
        Image_type: 5,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: false,
        grantItems: {
          chips: 5e5
        }
      }, {
        pkg_id: "chips_1m",
        Coins: 1e6,
        price: [ 9.99, 9.99 ],
        Discounted_amount: 0,
        Image_type: 6,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: false,
        grantItems: {
          chips: 1e6
        }
      }, {
        pkg_id: "chips_4m",
        Coins: 4e6,
        price: [ 19.99, 19.99 ],
        Discounted_amount: 0,
        Image_type: 7,
        extra_perc: 0,
        Best_value: true,
        Most_Popular: false,
        grantItems: {
          chips: 4e6
        }
      }, {
        pkg_id: "chips_10m",
        Coins: 1e7,
        price: [ 29.99, 29.99 ],
        Discounted_amount: 0,
        Image_type: 8,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: false,
        grantItems: {
          chips: 1e7
        }
      }, {
        pkg_id: "gems_500",
        Gems: 500,
        price: [ .99, .99 ],
        Discounted_amount: 0,
        Image_type: 1,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: false,
        grantItems: {
          gems: 500
        }
      }, {
        pkg_id: "gems_1500",
        Gems: 1500,
        price: [ 1.99, 1.99 ],
        Discounted_amount: 0,
        Image_type: 2,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: false,
        grantItems: {
          gems: 1500
        }
      }, {
        pkg_id: "gems_4500",
        Gems: 4500,
        price: [ 4.99, 4.99 ],
        Discounted_amount: 0,
        Image_type: 3,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: true,
        grantItems: {
          gems: 4500
        }
      }, {
        pkg_id: "gems_12000",
        Gems: 12e3,
        price: [ 10.99, 10.99 ],
        Discounted_amount: 0,
        Image_type: 4,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: false,
        grantItems: {
          gems: 12e3
        }
      }, {
        pkg_id: "gems_28000",
        Gems: 28e3,
        price: [ 19.99, 19.99 ],
        Discounted_amount: 0,
        Image_type: 5,
        extra_perc: 0,
        Best_value: false,
        Most_Popular: false,
        grantItems: {
          gems: 28e3
        }
      }, {
        pkg_id: "gems_115000",
        Gems: 115e3,
        price: [ 49.99, 49.99 ],
        Discounted_amount: 0,
        Image_type: 6,
        extra_perc: 0,
        Best_value: true,
        Most_Popular: false,
        grantItems: {
          gems: 115e3
        }
      } ],
      orders: {
        coins: {
          order_1: [ "chips_30k", "chips_100k", "chips_500k", "chips_1m", "chips_4m", "chips_10m" ]
        },
        gems: {
          order_1: [ "gems_500", "gems_1500", "gems_4500", "gems_12000", "gems_28000", "gems_115000" ]
        }
      },
      views: {
        view_1: {
          coins: "order_1",
          gems: "order_1"
        },
        default: {
          coins: "order_1",
          gems: "order_1"
        }
      }
    };
    exports.constants.DESIGN_RESOLUTION = {
      WIDTH: 640,
      HEIGHT: 960
    };
    exports.constants.POWERUP_ID = {
      REROLL: 1
    };
    exports.constants.BOT_SUBSCRIBE_TYPE = {
      BOT_SUBSCRIBE_NONE: 0,
      BOT_SUBSCRIBE_LOBBY_RETURN: 1,
      BOT_SUBSCRIBE_USER_LOAD: 2,
      BOT_SUBSCRIBE_LOBBY_RETURN_ALL: 3
    };
    exports.constants.MODE_TO_NAME_MAP = {
      1: "2",
      3: "4",
      4: "Private"
    };
    exports.constants.FTUE_EVENTS = {
      DICE_ROLL: "dice_roll",
      HOME_LANE: "home_lane",
      INACTIVE_ON_LOBBY: "inactive_on_lobby",
      KILL: "kill",
      KILLED: "killed",
      MOVE_PAWN_AFTER: "move_pawn_after",
      MOVE_PAWN_OUT: "move_pawn_out",
      ROLL_FIRST_SIX: "roll_first_six",
      ROLL_NON_SIX: "roll_non_six",
      SAFE_ZONE: "safe_zone",
      WIN_CONDITION: "win_condition"
    };
    exports.constants.FTUE_OFF_TIMERS = {
      dice_roll: 8e3,
      home_lane: 8e3,
      inactive_on_lobby: 3e3,
      kill: 3e4,
      killed: 8e3,
      move_pawn_after: 3e4,
      move_pawn_out: 3e4,
      roll_first_six: 3e4,
      roll_non_six: 8e3,
      safe_zone: 8e3
    };
    exports.constants.FTUE_TIMERS = {
      dice_roll: 3e3,
      home_lane: 500,
      inactive_on_lobby: 3e3,
      kill: 300,
      killed: 0,
      move_pawn_after: 3e3,
      move_pawn_out: 3e3,
      roll_first_six: 0,
      roll_non_six: 500,
      safe_zone: 500
    };
    exports.constants.REWARDED_VIDEO_SOURCE = {
      HUD: 0,
      INSUFF_CHIPS: 1,
      DAILYBONUS: 2
    };
    cc._RF.pop();
  }, {} ],
  CountryFlagComponentForListView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "53e0bO6vMFF5L2zmxfXK77F", "CountryFlagComponentForListView");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfileCustomizationController_1 = require("../Controllers/ProfileCustomizationController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CountryFlagComponentForListView = function(_super) {
      __extends(CountryFlagComponentForListView, _super);
      function CountryFlagComponentForListView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteComponent = null;
        return _this;
      }
      CountryFlagComponentForListView.prototype.initialize = function(countryCode, atlas) {
        if (!ProfileCustomizationController_1.ProfileCustomizationController.getInstance().isEnabled()) return;
        var countryFlagFilename = ProfileCustomizationController_1.ProfileCustomizationController.getInstance().getCountryFileNameByCode(countryCode);
        var fsp = atlas.getSpriteFrame(countryFlagFilename);
        if (!fsp) {
          this.spriteComponent.spriteFrame = atlas.getSpriteFrame(ProfileCustomizationController_1.ProfileCustomizationController.GLOBAL_COUNTRY_FLAG_NAME);
          return;
        }
        this.spriteComponent.spriteFrame = atlas.getSpriteFrame(countryFlagFilename);
      };
      __decorate([ property(cc.Sprite) ], CountryFlagComponentForListView.prototype, "spriteComponent", void 0);
      CountryFlagComponentForListView = __decorate([ ccclass ], CountryFlagComponentForListView);
      return CountryFlagComponentForListView;
    }(cc.Component);
    exports.default = CountryFlagComponentForListView;
    cc._RF.pop();
  }, {
    "../Controllers/ProfileCustomizationController": "ProfileCustomizationController"
  } ],
  CountryFlagComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93f06SerbJLcrsUOm/qdNFy", "CountryFlagComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfileCustomizationController_1 = require("../Controllers/ProfileCustomizationController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CountryFlagComponent = function(_super) {
      __extends(CountryFlagComponent, _super);
      function CountryFlagComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        return _this;
      }
      CountryFlagComponent.prototype.onLoad = function() {
        if (!ProfileCustomizationController_1.ProfileCustomizationController.getInstance().isEnabled()) return;
      };
      CountryFlagComponent.prototype.initialize = function(countryCode) {
        if (!ProfileCustomizationController_1.ProfileCustomizationController.getInstance().isEnabled()) return;
        var self = this;
        var url = "";
        var countryFlagFilename = ProfileCustomizationController_1.ProfileCustomizationController.getInstance().getCountryFileNameByCode(countryCode);
        cc.loader.load({
          url: "country-flags/" + countryFlagFilename + ".png",
          type: "png"
        }, function(err, texture) {
          if (self.sprite) {
            self.sprite.spriteFrame = new cc.SpriteFrame(texture);
            self.node.active = true;
          }
        });
      };
      __decorate([ property(cc.Sprite) ], CountryFlagComponent.prototype, "sprite", void 0);
      CountryFlagComponent = __decorate([ ccclass ], CountryFlagComponent);
      return CountryFlagComponent;
    }(cc.Component);
    exports.default = CountryFlagComponent;
    cc._RF.pop();
  }, {
    "../Controllers/ProfileCustomizationController": "ProfileCustomizationController"
  } ],
  CountrySelectionNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "880de7o8PZHv72wf1CZiC6R", "CountrySelectionNode");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CountrySelectionNode = function(_super) {
      __extends(CountrySelectionNode, _super);
      function CountrySelectionNode() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      CountrySelectionNode.prototype.onLoad = function() {
        var onSelect = Helper_1.Helper.getEventHandler(this.node, "CountrySelectionNode", "onSelect");
        this.getComponent(cc.Button).clickEvents.push(onSelect);
      };
      CountrySelectionNode.prototype.start = function() {};
      CountrySelectionNode.prototype.onSelect = function() {};
      CountrySelectionNode = __decorate([ ccclass ], CountrySelectionNode);
      return CountrySelectionNode;
    }(cc.Component);
    exports.default = CountrySelectionNode;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper"
  } ],
  DailyBonusExpComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05444KCpdRN4r5RRKCMlli7", "DailyBonusExpComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var DailyBonusPopupComponent_1 = require("./DailyBonusPopupComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DailyBonusExpComponent = function(_super) {
      __extends(DailyBonusExpComponent, _super);
      function DailyBonusExpComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.collectNode = null;
        _this.collectedNode = null;
        _this.watchAdNode = null;
        _this.doubledNode = null;
        _this.doubleUpButton = null;
        _this.watchAdButton = null;
        _this.dbDoubledButton = null;
        _this.collectButton = null;
        _this.doubleUpSpinner = null;
        _this.watchAdSpinner = null;
        _this.gemsNode = null;
        _this.gemsText = null;
        _this.coinsText = null;
        _this.backButton = null;
        _this.doubleV2ButtonNode = null;
        _this.doubleV3ButtonNode = null;
        _this.watchAdTextEnable = null;
        _this.watchAdTextDisable = null;
        _this.doubleUpTextEnable = null;
        _this.doubleUpTextDisable = null;
        _this.doubleUpText2Enable = null;
        _this.doubleUpText2Disable = null;
        _this.collectTextEnable = null;
        _this.collectTextDisable = null;
        _this.coinsStackNode1 = null;
        _this.gemsStackNode1 = null;
        _this.coinsStackNode2 = null;
        _this.gemsStackNode2 = null;
        _this.mLogger = null;
        _this.mPersistantComponent = null;
        _this.mPlayerController = null;
        _this.mTimeLeft = 0;
        _this.mWatchTimer = null;
        return _this;
      }
      DailyBonusExpComponent.prototype.onLoad = function() {
        this.mLogger = new Logger_1.Logger("DailyBonusExpComponent", true);
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayerController = this.mPersistantComponent.GetPlayerController();
        this.mStatsController = this.mPersistantComponent.GetStatsController();
        this.collectButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "DailyBonusExpComponent", "closePopup"));
        this.dbDoubledButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "DailyBonusExpComponent", "onDoubledClicked"));
        this.doubleUpButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "DailyBonusExpComponent", "doubleUpClicked"));
        this.watchAdButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "DailyBonusExpComponent", "onWatchClicked"));
        this.backButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "DailyBonusExpComponent", "closeClicked"));
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_DB_VIDEO_VERIFY_SUCCESS, this.videoVerified, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ADS_UNAVAILABLE, this.showVideoNotAvailable, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_ERROR, this.showServerError, this);
        this.mDBAdsMultiplier = this.mPlayerController.getModel().getDBAdsMultiplier();
      };
      DailyBonusExpComponent.prototype.start = function() {
        this.mTimeLeft = 1e4;
        this.backButton.node.active = false;
        this.setButtonState(this.backButton, false);
        var gems = this.mPlayerController.getModel().getDailyBonusGemsAmount();
        if (gems > 0) {
          this.gemsStackNode1.active = true;
          this.gemsStackNode2.active = true;
          this.coinsStackNode1.active = false;
          this.coinsStackNode2.active = false;
        } else {
          this.gemsStackNode1.active = false;
          this.gemsStackNode2.active = false;
          this.coinsStackNode1.active = true;
          this.coinsStackNode2.active = true;
        }
      };
      DailyBonusExpComponent.prototype.doubleUpClicked = function() {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_DBONUS_ADS);
        this.mStatsController.count("button", this.mDBAdsMultiplier, "dailybonus", "watch_ad", "dailyAdBonus", "Step1");
        if (2 == variant) {
          this.collectNode.active = false;
          this.watchAdNode.active = true;
          this.backButton.node.active = true;
          this.watchAdButton.node.active = true;
          this.setButtonState(this.backButton, true);
          this.mStatsController.count("popup", this.mDBAdsMultiplier, "open", "DailyBonusPopUp", "dailyAdBonus", "Step2");
        } else {
          this.watchClicked();
          this.disableCollectNodeButtons();
        }
      };
      DailyBonusExpComponent.prototype.closeClicked = function() {
        this.mStatsController.count("button", this.mDBAdsMultiplier, "dailybonus", "close", "dailyAdBonus", "Step2");
        this.collectNode.active = true;
        this.watchAdNode.active = false;
        this.enableCollectNodeButtons();
      };
      DailyBonusExpComponent.prototype.enableCollectNodeButtons = function() {
        this.setButtonState(this.doubleUpButton, true);
        this.setButtonState(this.collectButton, true);
        this.setButtonState(this.backButton, false);
        this.backButton.node.active = false;
      };
      DailyBonusExpComponent.prototype.disableCollectNodeButtons = function() {
        this.setButtonState(this.doubleUpButton, false);
        this.setButtonState(this.collectButton, false);
      };
      DailyBonusExpComponent.prototype.disableWatchNodeButtons = function() {
        this.setButtonState(this.watchAdButton, false);
        this.setButtonState(this.backButton, false);
      };
      DailyBonusExpComponent.prototype.setButtonState = function(button, enable) {
        button.enabled = enable;
        button.interactable = enable;
        if (button == this.watchAdButton) {
          this.watchAdTextEnable.active = enable;
          this.watchAdTextDisable.active = !enable;
        }
        if (button == this.doubleUpButton) {
          this.doubleUpTextEnable.active = enable;
          this.doubleUpTextDisable.active = !enable;
          this.doubleUpText2Enable.active = enable;
          this.doubleUpText2Disable.active = !enable;
        }
        if (button == this.collectButton) {
          this.collectTextEnable.active = enable;
          this.collectTextDisable.active = !enable;
        }
      };
      DailyBonusExpComponent.prototype.onWatchClicked = function() {
        this.mStatsController.count("button", this.mDBAdsMultiplier, "dailybonus", "watch_ad", "dailyAdBonus", "Step2");
        this.watchClicked();
      };
      DailyBonusExpComponent.prototype.watchClicked = function() {
        this.disableWatchNodeButtons();
        this.watchAdNode.active ? this.watchAdSpinner.getComponent(SpinnerComponent_1.default).showLoader() : this.doubleUpSpinner.getComponent(SpinnerComponent_1.default).showLoader();
        if (this.mTimeLeft < 0) {
          clearTimeout(this.mWatchTimer);
          this.showVideoNotAvailable();
          return;
        }
        var adController = this.mPersistantComponent.GetAdsController();
        if (adController.isVideoPreloaded()) {
          adController.initiateRewardedVideoAds("daily_bonus");
          this.watchAdNode.active ? this.watchAdSpinner.getComponent(SpinnerComponent_1.default).hideLoader() : this.doubleUpSpinner.getComponent(SpinnerComponent_1.default).hideLoader();
        } else {
          clearTimeout(this.mWatchTimer);
          this.mTimeLeft -= 1e3;
          this.mWatchTimer = setTimeout(this.watchClicked.bind(this), 1e3);
        }
      };
      DailyBonusExpComponent.prototype.onCannotShowVideo = function() {
        this.watchAdNode.active ? this.watchAdSpinner.getComponent(SpinnerComponent_1.default).hideLoader() : this.doubleUpSpinner.getComponent(SpinnerComponent_1.default).hideLoader();
        this.collectNode.active = true;
        this.watchAdNode.active = false;
        this.doubledNode.active = false;
        this.backButton.node.active = false;
        this.collectButton.node.active = true;
        this.setButtonState(this.doubleUpButton, false);
        this.setButtonState(this.watchAdButton, false);
        this.setButtonState(this.backButton, false);
        this.setButtonState(this.collectButton, true);
      };
      DailyBonusExpComponent.prototype.showVideoNotAvailable = function() {
        this.onCannotShowVideo();
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_DB_VIDEO_NOT_AVAILABLE);
      };
      DailyBonusExpComponent.prototype.initialize = function() {
        this.watchAdNode.active = false;
        this.doubledNode.active = false;
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_DBONUS_ADS);
        this.doubleV2ButtonNode.active = 2 == variant;
        this.doubleV3ButtonNode.active = 3 == variant;
        variant > 1 && this.mStatsController.count("popup", this.mDBAdsMultiplier, "open", "DailyBonusPopUp", "dailyAdBonus", "Step1");
      };
      DailyBonusExpComponent.prototype.videoVerified = function(event) {
        this.watchAdNode.active ? this.watchAdSpinner.getComponent(SpinnerComponent_1.default).hideLoader() : this.doubleUpSpinner.getComponent(SpinnerComponent_1.default).hideLoader();
        var coins = this.mPlayerController.getModel().getDailyBonusAmount();
        var gems = this.mPlayerController.getModel().getDailyBonusGemsAmount();
        this.collectNode.active = false;
        this.watchAdNode.active = false;
        this.doubledNode.active = true;
        this.backButton.node.active = false;
        this.gemsNode.active = false;
        this.setButtonState(this.backButton, false);
        this.mStatsController.count("popup", this.mDBAdsMultiplier, "open", "DailyBonusPopUp", "dailyAdBonus", "Step3");
        coins && coins > 0 && (this.coinsText.string = Helper_1.Helper.getLocaleNumber(coins));
        if (gems && gems > 0) {
          this.gemsNode.active = true;
          this.gemsText.string = Helper_1.Helper.getLocaleNumber(gems);
        }
      };
      DailyBonusExpComponent.prototype.showServerError = function() {
        this.onCannotShowVideo();
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_DB_VIDEO_SERVER_ERROR);
      };
      DailyBonusExpComponent.prototype.closePopup = function() {
        this.getComponent(DailyBonusPopupComponent_1.default).closePopup();
      };
      DailyBonusExpComponent.prototype.onDoubledClicked = function() {
        this.mStatsController.count("button", this.mDBAdsMultiplier, "dailybonus", "collect", "dailyAdBonus", "Step3");
        this.getComponent(DailyBonusPopupComponent_1.default).closePopup(true);
      };
      DailyBonusExpComponent.prototype.onDisable = function() {
        clearTimeout(this.mWatchTimer);
        this.mWatchTimer = null;
      };
      DailyBonusExpComponent.prototype.onDestroy = function() {
        clearTimeout(this.mWatchTimer);
        this.mWatchTimer = null;
      };
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "collectNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "collectedNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "watchAdNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "doubledNode", void 0);
      __decorate([ property(cc.Button) ], DailyBonusExpComponent.prototype, "doubleUpButton", void 0);
      __decorate([ property(cc.Button) ], DailyBonusExpComponent.prototype, "watchAdButton", void 0);
      __decorate([ property(cc.Button) ], DailyBonusExpComponent.prototype, "dbDoubledButton", void 0);
      __decorate([ property(cc.Button) ], DailyBonusExpComponent.prototype, "collectButton", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "doubleUpSpinner", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "watchAdSpinner", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "gemsNode", void 0);
      __decorate([ property(cc.Label) ], DailyBonusExpComponent.prototype, "gemsText", void 0);
      __decorate([ property(cc.Label) ], DailyBonusExpComponent.prototype, "coinsText", void 0);
      __decorate([ property(cc.Button) ], DailyBonusExpComponent.prototype, "backButton", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "doubleV2ButtonNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "doubleV3ButtonNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "watchAdTextEnable", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "watchAdTextDisable", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "doubleUpTextEnable", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "doubleUpTextDisable", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "doubleUpText2Enable", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "doubleUpText2Disable", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "collectTextEnable", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "collectTextDisable", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "coinsStackNode1", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "gemsStackNode1", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "coinsStackNode2", void 0);
      __decorate([ property(cc.Node) ], DailyBonusExpComponent.prototype, "gemsStackNode2", void 0);
      DailyBonusExpComponent = __decorate([ ccclass ], DailyBonusExpComponent);
      return DailyBonusExpComponent;
    }(cc.Component);
    exports.default = DailyBonusExpComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./DailyBonusPopupComponent": "DailyBonusPopupComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  DailyBonusPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "16da1zdsKdOgID0BQWXBkM2", "DailyBonusPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var PopupComponent_1 = require("./PopupComponent");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var CoinAnimationMetaComponent_1 = require("./CoinAnimationMetaComponent");
    var DailyBonusExpComponent_1 = require("./DailyBonusExpComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DailyBonusPopupComponent = function(_super) {
      __extends(DailyBonusPopupComponent, _super);
      function DailyBonusPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.rewardLabel = null;
        _this.timerNode = null;
        _this.rewardNode = null;
        _this.collectButton = null;
        _this.closeButton = null;
        _this.timerLabel = null;
        _this.animNode = null;
        _this.coinAnimationNode = null;
        _this.gemsAnimationNode = null;
        _this.coinStackNode = null;
        _this.gemStackNode = null;
        _this.mLogger = null;
        _this.mPersistantComponent = null;
        _this.mPlayerController = null;
        _this.mTimeLeft = 0;
        _this.mTimeout = null;
        return _this;
      }
      DailyBonusPopupComponent.prototype.onLoad = function() {
        this.mLogger = new Logger_1.Logger("DailyBonusPopupComponent", true);
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayerController = this.mPersistantComponent.GetPlayerController();
        this.mStatsController = this.mPersistantComponent.GetStatsController();
        this.collectButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "DailyBonusPopupComponent", "closePopup"));
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "DailyBonusPopupComponent", "closePopup"));
      };
      DailyBonusPopupComponent.prototype.start = function() {};
      DailyBonusPopupComponent.prototype.initialize = function() {
        this.collectButton.interactable = true;
        this.closeButton.interactable = true;
        var player = this.mPlayerController.getModel();
        var isDailyBonusReady = false;
        player && (isDailyBonusReady = isDailyBonusReady || player.isDailyBonusGranted());
        this.rewardNode.active = isDailyBonusReady;
        this.timerNode.active = !isDailyBonusReady;
        this.closeButton.node.active = !isDailyBonusReady;
        if (isDailyBonusReady) {
          var localizationComponent = this.rewardLabel.node.getComponent(LocalizationComponent_1.default);
          if (player.getDailyBonusGemsAmount() <= 0 && player.getDailyBonusAmount() <= 0) return;
          player.getDailyBonusGemsAmount() > 0 ? player.getDailyBonusAmount() <= 0 ? localizationComponent.setValues("#COLLECT_TEXT_GEMS", {
            gem_num: Helper_1.Helper.getLocaleNumber(player.getDailyBonusGemsAmount())
          }) : localizationComponent.setValues("#COLLECT_TEXT_GEMS_COINS", {
            coin_num: Helper_1.Helper.getLocaleNumber(player.getDailyBonusAmount()),
            gem_num: Helper_1.Helper.getLocaleNumber(player.getDailyBonusGemsAmount())
          }) : localizationComponent.setValues("#COLLECT_TEXT", {
            coin_num: Helper_1.Helper.getLocaleNumber(player.getDailyBonusAmount())
          });
          var gems = player.getDailyBonusGemsAmount();
          if (gems > 0) {
            this.gemStackNode.active = true;
            this.coinStackNode.active = false;
          } else {
            this.gemStackNode.active = false;
            this.coinStackNode.active = true;
          }
        } else this.mTimeLeft = player.getDailyBonusCollectTime();
        this.getComponent(DailyBonusExpComponent_1.default) && this.getComponent(DailyBonusExpComponent_1.default).initialize();
      };
      DailyBonusPopupComponent.prototype.update = function(dt) {
        if (this.timerNode.active) {
          this.mTimeLeft = this.mTimeLeft - dt;
          this.mTimeLeft < 0 && (this.mTimeLeft = 0);
          this.timerLabel.string = this.getTimerStringForDailyBonus(Math.round(this.mTimeLeft));
        }
      };
      DailyBonusPopupComponent.prototype.closePopup = function(statsHadled) {
        if (!statsHadled) {
          var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_DBONUS_ADS);
          variant > 1 ? this.mStatsController.count("button", this.mPlayerController.getModel().getDBAdsMultiplier(), "dailybonus", "collect", "dailyAdBonus", "Step1") : this.mStatsController.count("button", 1, "dailybonus", "collect");
        }
        this.collectButton.interactable = false;
        this.closeButton.interactable = false;
        var player = this.mPlayerController.getModel();
        if (player && player.isDailyBonusGranted()) {
          var coins = player.getDailyBonusAmount();
          var gems = player.getDailyBonusGemsAmount();
          player.resetDailyBonus();
          if (coins > 0) {
            player.setCoins(player.getCoins() + coins);
            this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, {
              position: this.collectButton.node.parent.convertToWorldSpaceAR(this.collectButton.node.getPosition()),
              comp: this.coinAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
              firstHitEvent: {
                eventName: "updateLobbyCoinsHud",
                value: coins
              }
            });
          }
          if (gems > 0) {
            player.setGems(player.getGems() + gems);
            this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ON_GEMS_COLLECT, {
              position: this.collectButton.node.parent.convertToWorldSpaceAR(this.collectButton.node.getPosition()),
              comp: this.gemsAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
              firstHitEvent: {
                eventName: "updateLobbyGemsHud",
                value: gems
              }
            });
          }
        }
        this.hidePopup();
      };
      DailyBonusPopupComponent.prototype.hidePopup = function() {
        this.mPersistantComponent.node.emit("dailyBonusPopupClosed");
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      DailyBonusPopupComponent.prototype.getTimerStringForDailyBonus = function(timeLeft) {
        var timeString = "";
        var hour = Math.floor(timeLeft / Constants_1.constants.TIME_S.HOUR);
        timeString = hour < 10 ? "0" + hour : hour.toString();
        timeString += "h : ";
        timeLeft -= hour * Constants_1.constants.TIME_S.HOUR;
        var min = Math.floor(timeLeft / Constants_1.constants.TIME_S.MINUTE);
        min < 10 ? timeString = timeString + "0" + min : timeString += min;
        timeString += "m : ";
        var secs = Math.floor(timeLeft % Constants_1.constants.TIME_S.MINUTE);
        secs < 10 ? timeString = timeString + "0" + secs : timeString += secs;
        timeString += "s";
        return timeString;
      };
      DailyBonusPopupComponent.prototype.onDestroy = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
      };
      __decorate([ property(cc.Label) ], DailyBonusPopupComponent.prototype, "rewardLabel", void 0);
      __decorate([ property(cc.Node) ], DailyBonusPopupComponent.prototype, "timerNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusPopupComponent.prototype, "rewardNode", void 0);
      __decorate([ property(cc.Button) ], DailyBonusPopupComponent.prototype, "collectButton", void 0);
      __decorate([ property(cc.Button) ], DailyBonusPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Label) ], DailyBonusPopupComponent.prototype, "timerLabel", void 0);
      __decorate([ property(cc.Node) ], DailyBonusPopupComponent.prototype, "animNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusPopupComponent.prototype, "coinAnimationNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusPopupComponent.prototype, "gemsAnimationNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusPopupComponent.prototype, "coinStackNode", void 0);
      __decorate([ property(cc.Node) ], DailyBonusPopupComponent.prototype, "gemStackNode", void 0);
      DailyBonusPopupComponent = __decorate([ ccclass ], DailyBonusPopupComponent);
      return DailyBonusPopupComponent;
    }(cc.Component);
    exports.default = DailyBonusPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./CoinAnimationMetaComponent": "CoinAnimationMetaComponent",
    "./DailyBonusExpComponent": "DailyBonusExpComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  DiceComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ed038lg1klBsrzYwJ8snR31", "DiceComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DiceComponent = function(_super) {
      __extends(DiceComponent, _super);
      function DiceComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mRollOp = -1;
        _this.mStartAnimComplete = false;
        _this.mIsRolling = false;
        return _this;
      }
      DiceComponent.prototype.onLoad = function() {
        var persistNode = cc.find("PersistantNode");
        var persistNodeComponent = persistNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistNodeComponent = persistNodeComponent;
        this.mGameController = persistNodeComponent.GetGameController();
        this.mFtueController = persistNodeComponent.getFtueController();
        this.overlay.node.active = true;
        this.node.active = false;
        this.mLogger = new Logger_1.Logger("DiceComponent", true);
        this.mRollFrames = [];
        this.mRollOpFrames = [];
        for (var index = 1; index <= 20; index++) {
          var frameName = "dice_" + Helper_1.Helper.padString(index, 2);
          var spFrame = this.atlas.getSpriteFrame(frameName);
          this.mRollFrames.push(spFrame);
        }
        for (var index = 1; index <= 6; index++) {
          var frameName = "Dice_" + index;
          var spFrame = this.atlas.getSpriteFrame(frameName);
          this.mRollOpFrames.push(spFrame);
        }
        this.mAnimation = this.diceSprite.getComponent(cc.Animation);
        var clip = cc.AnimationClip.createWithSpriteFrames(this.mRollFrames, 20);
        clip.name = "roll";
        clip.wrapMode = cc.WrapMode.Loop;
        this.mAnimation.addClip(clip);
        this.diceButton.interactable = false;
        this.deactivateRoll();
        this.diceButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "DiceComponent", "onDiceClick"));
        this.mLoopAnimationCallback = this.playLoopCallback.bind(this);
        this.mSetFrameCallback = this.settingFrameCallback.bind(this);
      };
      DiceComponent.prototype.initialize = function(isSelf) {
        this.mSelf = isSelf;
        this.mSelf || (this.diceButton.interactable = false);
      };
      DiceComponent.prototype.isMyDice = function() {
        return this.mSelf;
      };
      DiceComponent.prototype.activateRoll = function() {
        this.overlay.node.runAction(cc.fadeOut(.3));
        this.node.active = true;
        this.mSelf && (this.diceButton.interactable = true);
        this.diceSprite.spriteFrame = this.defaultFrame;
      };
      DiceComponent.prototype.deactivateRoll = function() {
        this.node.active = false;
        if (this.mCompleteCallback) {
          this.mCompleteCallback();
          this.mCompleteCallback = null;
        }
      };
      DiceComponent.prototype.onDiceClick = function() {
        this.doRoll();
        this.mGameController.doDiceRoll();
        this.diceButton.interactable = false;
        this.mPersistNodeComponent.node.emit(Constants_1.constants.Events.EVENT_FTUE_CLEAR);
        this.mGameController.hideFtue();
      };
      DiceComponent.prototype.doRoll = function() {
        if (this.mIsRolling || !this.diceAnimation) return;
        this.mStartAnimationState = this.diceAnimation.play("diceStart");
        var self = this;
        this.diceAnimation.once("stop", this.mLoopAnimationCallback);
        this.mRollOp = -1;
        this.mStartAnimComplete = false;
        this.mIsRolling = true;
      };
      DiceComponent.prototype.playLoopCallback = function() {
        this.mStartAnimComplete = true;
        -1 != this.mRollOp ? this.doStopAnim() : this.diceAnimation && this.diceAnimation.play("diceLoop");
      };
      DiceComponent.prototype.showRollOp = function(diceOp, callback) {
        this.mCompleteCallback = callback;
        this.mRollOp = diceOp;
        true == this.mStartAnimComplete && this.doStopAnim();
      };
      DiceComponent.prototype.doStopAnim = function() {
        if (!this.diceAnimation) return;
        this.diceAnimation.play("diceDown");
        var self = this;
        this.diceAnimation.off("stop", this.mLoopAnimationCallback);
        this.diceAnimation.once("stop", this.mSetFrameCallback);
      };
      DiceComponent.prototype.stopAnimations = function() {
        if (!this.diceAnimation) return;
        this.diceAnimation.off("stop", this.mLoopAnimationCallback);
        this.diceAnimation.off("stop", this.mSetFrameCallback);
      };
      DiceComponent.prototype.settingFrameCallback = function() {
        if (!this.diceSprite || !this.diceButton) return;
        this.mIsRolling = false;
        this.diceSprite.node.scale = 1;
        this.diceSprite.spriteFrame = this.mRollOpFrames[this.mRollOp - 1];
        this.diceButton.interactable = false;
        this.mCompleteCallback && this.mCompleteCallback();
        this.mCompleteCallback = null;
      };
      DiceComponent.prototype.showOverlay = function() {
        if (this.mIsRolling) return;
        this.overlay && this.overlay.node && this.overlay.node.runAction(cc.fadeTo(.3, 130));
        this.diceButton && (this.diceButton.interactable = false);
      };
      DiceComponent.prototype.onDestroy = function() {
        this.overlay && this.overlay.node && this.overlay.node.stopAllActions();
      };
      __decorate([ property(cc.Button) ], DiceComponent.prototype, "diceButton", void 0);
      __decorate([ property(cc.Sprite) ], DiceComponent.prototype, "overlay", void 0);
      __decorate([ property(cc.Sprite) ], DiceComponent.prototype, "diceSprite", void 0);
      __decorate([ property(cc.Animation) ], DiceComponent.prototype, "diceAnimation", void 0);
      __decorate([ property(cc.SpriteAtlas) ], DiceComponent.prototype, "atlas", void 0);
      __decorate([ property(cc.SpriteFrame) ], DiceComponent.prototype, "defaultFrame", void 0);
      DiceComponent = __decorate([ ccclass ], DiceComponent);
      return DiceComponent;
    }(cc.Component);
    exports.default = DiceComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  EditProfilePopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87501wFrAFF26Eoujt7BxbM", "EditProfilePopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var ProfileCustomizationController_1 = require("../Controllers/ProfileCustomizationController");
    var PlayerProfilePopupComponent_1 = require("./PlayerProfilePopupComponent");
    var CountryFlagComponent_1 = require("./CountryFlagComponent");
    var CountryFlagComponentForListView_1 = require("./CountryFlagComponentForListView");
    var SmartScrollViewComponent_1 = require("./SmartScrollViewComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var SoundController_1 = require("../Controllers/SoundController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EditProfilePopupComponent = function(_super) {
      __extends(EditProfilePopupComponent, _super);
      function EditProfilePopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.countryLabel = null;
        _this.instructionLabel = null;
        _this.flagImage = null;
        _this.nameEditbox = null;
        _this.countryScrollViewNode = null;
        _this.countryScrollView = null;
        _this.contentScrollView = null;
        _this.countryNodePrefab = null;
        _this.saveBtn = null;
        _this.closeBtn = null;
        _this.countryConfirmBtn = null;
        _this.countryCloseBtn = null;
        _this.countryDropDownList = null;
        _this.countryDropDownBtn = null;
        _this.smartScroll = null;
        _this.sViewStartPosition = 0;
        _this.sViewPaddingY = 0;
        _this.mCountryCode = "";
        _this.mPlayerName = "";
        _this.mAllTickNodes = null;
        _this.mCurrentOptionCodeSelected = "";
        _this.mPersistantController = null;
        _this.allCodes = {};
        _this.clickHappened = false;
        _this.spriteSheet = null;
        return _this;
      }
      EditProfilePopupComponent.prototype.onLoad = function() {};
      EditProfilePopupComponent.prototype.initCountryScrollView = function() {
        if (!this.countryScrollView || !this.contentScrollView) return;
        this.contentScrollView.destroyAllChildren();
        this.mAllTickNodes = [];
        this.allCodes = ProfileCustomizationController_1.ProfileCustomizationController.getInstance().getCountryCodes();
        var startPos = this.sViewStartPosition;
        var contentSize = 0;
        var self = this;
        cc.loader.loadRes("country_sprite_sheet", cc.SpriteAtlas, function(err, atlas) {
          for (var i = 0; i < Object.keys(self.allCodes).length; i++) {
            var cNode = cc.instantiate(self.countryNodePrefab);
            cNode.parent = self.contentScrollView;
            cNode.position = new cc.Vec2(0, startPos);
            startPos -= Math.abs(self.sViewStartPosition) + self.sViewPaddingY + .5 * cNode.height;
            contentSize += cNode.height + this.sViewPaddingY;
            var flagNode = cNode.children[1].getComponent(cc.Sprite);
            var flagName = cNode.children[2].getComponent(cc.Label);
            var tickNode = cNode.children[3];
            flagName.string = Helper_1.Helper.getTruncatedString(this.allCodes[i].name, 15, true);
            flagNode.getComponent(CountryFlagComponentForListView_1.default).initialize(this.allCodes[i].code);
            tickNode.active = self.allCodes[i].code == self.mCountryCode;
            self.mAllTickNodes[i] = tickNode;
            cNode.getComponent(cc.Button).interactable = !tickNode.active;
            cNode.getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(self.node, "EditProfilePopupComponent", "onCountryOptionSelected", {
              index: i
            }));
          }
        });
        this.countryScrollView.content.height = Math.abs(contentSize);
      };
      EditProfilePopupComponent.prototype.onCountryOptionSelected = function(event, customData) {
        this.mCurrentOptionCodeSelected = this.allCodes[customData.index].code;
        this.clickHappened = true;
        for (var i = 0; i < this.mAllTickNodes.length; i++) {
          this.mAllTickNodes[i].active = i == customData.index;
          this.mAllTickNodes[i].parent.getComponent(cc.Button).interactable = !this.mAllTickNodes[i].active;
        }
      };
      EditProfilePopupComponent.prototype.onConfirmPressed = function() {
        var countryName = ProfileCustomizationController_1.ProfileCustomizationController.getInstance().getCountryNameByCode(this.mCurrentOptionCodeSelected);
        this.countryLabel.string = Helper_1.Helper.getTruncatedString(countryName, 9, true);
        this.flagImage.initialize(this.mCurrentOptionCodeSelected);
        this.countryScrollViewNode.active = false;
        this.clickHappened = false;
      };
      EditProfilePopupComponent.prototype.onCountrySelectPopupClose = function() {
        var countryName = ProfileCustomizationController_1.ProfileCustomizationController.getInstance().getCountryNameByCode(this.mCountryCode);
        countryName = "" == countryName ? "Global" : countryName;
        this.countryLabel.string = Helper_1.Helper.getTruncatedString(countryName, 9, true);
        this.mCurrentOptionCodeSelected = this.mCountryCode;
        this.flagImage.initialize(this.mCurrentOptionCodeSelected);
        this.countryScrollViewNode.active = false;
        var self = this;
        this.mAllTickNodes.forEach(function(node, index) {
          node.active = self.allCodes[index].code == self.mCountryCode;
          node.parent.getComponent(cc.Button).interactable = true;
        });
      };
      EditProfilePopupComponent.prototype.getCurrentCountrySelected = function() {
        return this.mCurrentOptionCodeSelected;
      };
      EditProfilePopupComponent.prototype.onSavePressed = function() {
        this.takeResponseMessage("#PLEASE_WAIT_TEXT");
        this.saveBtn.interactable = false;
        if (this.mCountryCode === this.mCurrentOptionCodeSelected && this.nameEditbox.string.trim() === this.mPlayerName) this.onSuccessfulChange(); else {
          this.mCountryCode !== this.mCurrentOptionCodeSelected && this.mPersistantController.GetStatsController().count("button", 1, "country", this.mCurrentOptionCodeSelected, "profile", "player_profile");
          this.nameEditbox.string.trim() !== this.mPlayerName && this.mPersistantController.GetStatsController().count("button", 1, "player_name", this.nameEditbox.string.trim(), "profile", "player_profile");
          this.isNameOk(this.nameEditbox.string.trim()) ? this.mPersistantController.GetPlayerController().saveProfileCustomization(this.nameEditbox.string.trim(), this.mCurrentOptionCodeSelected, this.onSuccessfulChange.bind(this), this.takeResponseMessage.bind(this)) : this.takeResponseMessage("#ENTER_VALID_NAME_TEXT", "#FF0000");
        }
      };
      EditProfilePopupComponent.prototype.onSuccessfulChange = function() {
        this.node.parent.getComponent(PlayerProfilePopupComponent_1.default).updateCustomProfile();
        this.node.active = false;
        this.mPersistantController.node.emit("name_change", {
          name: this.nameEditbox.string.trim()
        });
      };
      EditProfilePopupComponent.prototype.takeResponseMessage = function(msgKey, color) {
        this.saveBtn.interactable = true;
        this.instructionLabel.node.active = true;
        this.instructionLabel.string = LocalizationController_1.LocalizationController.getInstance().LocalizedString(msgKey, {});
        this.instructionLabel.node.color = cc.hexToColor(color || "#000000");
      };
      EditProfilePopupComponent.prototype.isNameOk = function(new_name) {
        if ("" == new_name) return false;
        return true;
      };
      EditProfilePopupComponent.prototype.onEditPressed = function() {
        SoundController_1.SoundController.getInstance().isSoundEnabled() && this.mPersistantController.node.emit("play_sound_event", {
          sound_name: "click1"
        });
        this.countryScrollViewNode.active = true;
      };
      EditProfilePopupComponent.prototype.onClosePressed = function() {
        this.mPersistantController.GetStatsController().count("popup", 1, "hide", "edit_profile_popup");
      };
      EditProfilePopupComponent.prototype.initialize = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.countryDropDownList.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "EditProfilePopupComponent", "onEditPressed"));
        this.countryLabel.node.parent.on(cc.Node.EventType.TOUCH_START, this.onEditPressed, this);
        this.countryConfirmBtn.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "EditProfilePopupComponent", "onConfirmPressed"));
        this.countryCloseBtn.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "EditProfilePopupComponent", "onCountrySelectPopupClose"));
        this.saveBtn.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "EditProfilePopupComponent", "onSavePressed"));
        this.closeBtn.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "EditProfilePopupComponent", "onClosePressed"));
        var name = this.mPersistantController.GetPlayerController().getPlayerName();
        this.mCountryCode = this.mPersistantController.GetGameController().getPlayerModel().getCustomCountryCode();
        this.mCountryCode = this.mCountryCode || ProfileCustomizationController_1.ProfileCustomizationController.GLOBAL_COUNTRY_FLAG_CODE;
        this.mPlayerName = name;
        this.mCurrentOptionCodeSelected = this.mCountryCode;
        this.flagImage.initialize(this.mCountryCode);
        var countryName = ProfileCustomizationController_1.ProfileCustomizationController.getInstance().getCountryNameByCode(this.mCountryCode);
        countryName = countryName || "Global";
        this.countryLabel.string = Helper_1.Helper.getTruncatedString(countryName, 9, true);
        this.nameEditbox.string = this.mPlayerName;
        this.nameEditbox.placeholder = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#ENTER_TEXT_HERE", {});
        this.saveBtn.interactable = true;
        this.instructionLabel.string = "";
        this.mAllTickNodes = [];
        var list = ProfileCustomizationController_1.ProfileCustomizationController.getInstance().getCountryCodes();
        this.allCodes = [];
        var myIndex;
        var self = this;
        Object.keys(list).forEach(function(e) {
          list[e].code !== self.mCurrentOptionCodeSelected ? self.allCodes.push(list[e]) : myIndex = e;
        });
        this.allCodes.unshift(list[myIndex]);
        var cNode = cc.instantiate(this.countryNodePrefab);
        var allCodeLength = Object.keys(this.allCodes).length;
        var self = this;
        function initScroll(err, atlas) {
          self.spriteSheet = atlas;
          self.smartScroll.initialize(cNode.getContentSize(), allCodeLength, self.countryNodePrefab, self.initCard.bind(self), null, allCodeLength, function() {
            self.mPersistantController.node.emit("EditPopUpLoadComplete");
          });
          self.smartScroll.getComponent(cc.ScrollView).scrollToTop();
          self.contentScrollView.setContentSize(new cc.Size(self.contentScrollView.getContentSize().width, cNode.getContentSize().height * allCodeLength + self.sViewPaddingY * allCodeLength));
        }
        this.spriteSheet ? initScroll(null, this.spriteSheet) : cc.loader.loadRes("country_sprite_sheet", cc.SpriteAtlas, initScroll);
      };
      EditProfilePopupComponent.prototype.initCard = function(card, index) {
        var flagNode = card.children[1].getComponent(cc.Sprite);
        var flagName = card.children[2].getComponent(cc.Label);
        var tickNode = card.children[3];
        card.getComponent(cc.Button).interactable = true;
        flagName.string = Helper_1.Helper.getTruncatedString(this.allCodes[index].name, 15, true);
        flagNode.getComponent(CountryFlagComponentForListView_1.default).initialize(this.allCodes[index].code, this.spriteSheet);
        this.clickHappened ? tickNode.active = this.allCodes[index].code == this.mCurrentOptionCodeSelected : tickNode.active = this.allCodes[index].code == this.mCountryCode;
        this.mAllTickNodes[index] = tickNode;
        card.getComponent(cc.Button).clickEvents = [];
        card.getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "EditProfilePopupComponent", "onCountryOptionSelected", {
          index: index
        }));
        card.active = index < Object.keys(this.allCodes).length;
        tickNode.active && (card.getComponent(cc.Button).interactable = false);
      };
      __decorate([ property(cc.Label) ], EditProfilePopupComponent.prototype, "countryLabel", void 0);
      __decorate([ property(cc.Label) ], EditProfilePopupComponent.prototype, "instructionLabel", void 0);
      __decorate([ property(CountryFlagComponent_1.default) ], EditProfilePopupComponent.prototype, "flagImage", void 0);
      __decorate([ property(cc.EditBox) ], EditProfilePopupComponent.prototype, "nameEditbox", void 0);
      __decorate([ property(cc.Node) ], EditProfilePopupComponent.prototype, "countryScrollViewNode", void 0);
      __decorate([ property(cc.ScrollView) ], EditProfilePopupComponent.prototype, "countryScrollView", void 0);
      __decorate([ property(cc.Node) ], EditProfilePopupComponent.prototype, "contentScrollView", void 0);
      __decorate([ property(cc.Prefab) ], EditProfilePopupComponent.prototype, "countryNodePrefab", void 0);
      __decorate([ property(cc.Button) ], EditProfilePopupComponent.prototype, "saveBtn", void 0);
      __decorate([ property(cc.Button) ], EditProfilePopupComponent.prototype, "closeBtn", void 0);
      __decorate([ property(cc.Button) ], EditProfilePopupComponent.prototype, "countryConfirmBtn", void 0);
      __decorate([ property(cc.Button) ], EditProfilePopupComponent.prototype, "countryCloseBtn", void 0);
      __decorate([ property(cc.Button) ], EditProfilePopupComponent.prototype, "countryDropDownList", void 0);
      __decorate([ property(cc.Button) ], EditProfilePopupComponent.prototype, "countryDropDownBtn", void 0);
      __decorate([ property(SmartScrollViewComponent_1.default) ], EditProfilePopupComponent.prototype, "smartScroll", void 0);
      __decorate([ property ], EditProfilePopupComponent.prototype, "sViewStartPosition", void 0);
      __decorate([ property ], EditProfilePopupComponent.prototype, "sViewPaddingY", void 0);
      EditProfilePopupComponent = __decorate([ ccclass ], EditProfilePopupComponent);
      return EditProfilePopupComponent;
    }(cc.Component);
    exports.default = EditProfilePopupComponent;
    cc._RF.pop();
  }, {
    "../Controllers/LocalizationController": "LocalizationController",
    "../Controllers/ProfileCustomizationController": "ProfileCustomizationController",
    "../Controllers/SoundController": "SoundController",
    "../Generic/Helper": "Helper",
    "./CountryFlagComponent": "CountryFlagComponent",
    "./CountryFlagComponentForListView": "CountryFlagComponentForListView",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PlayerProfilePopupComponent": "PlayerProfilePopupComponent",
    "./SmartScrollViewComponent": "SmartScrollViewComponent"
  } ],
  "ExitToLobbyComponent.ts": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "420860xDShNYbYVkrxA4EWn", "ExitToLobbyComponent.ts");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var State_1 = require("../states/State");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ExitToLobbyComponent = function(_super) {
      __extends(ExitToLobbyComponent, _super);
      function ExitToLobbyComponent() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ExitToLobbyComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStateMachineController = this.mPersistantNodeComponent.GetStateMachineController();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        var isPrivate = this.mPersistantNodeComponent.GetGameController().isPrivateRoom();
        this.normalNode.active = 2 != eco_variant || isPrivate;
        this.economyNode.active = 2 == eco_variant && !isPrivate;
      };
      ExitToLobbyComponent.prototype.okayPressed = function() {
        this.mStatsController.count("button", 1, "exit_popup_ok", "");
        this.mStateMachineController.onEvent(State_1.StateEvent.EXIT_TO_LOBBY, {
          reason: "exit_game"
        });
      };
      __decorate([ property(cc.Button) ], ExitToLobbyComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Node) ], ExitToLobbyComponent.prototype, "normalNode", void 0);
      __decorate([ property(cc.Node) ], ExitToLobbyComponent.prototype, "economyNode", void 0);
      ExitToLobbyComponent = __decorate([ ccclass ], ExitToLobbyComponent);
      return ExitToLobbyComponent;
    }(cc.Component);
    exports.default = ExitToLobbyComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../states/State": "State",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ExperiementController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3bfe76ubJhJjIdF2ZQgbo++", "ExperiementController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var ExperimentController = function() {
      function ExperimentController() {
        ExperimentController.instance = this;
        this.mExperimentVariants = {};
      }
      ExperimentController.prototype.parseExperimentAndInitialize = function(experimentData) {
        experimentData && (this.mExperimentVariants = experimentData);
      };
      ExperimentController.prototype.getExperimentVariant = function(experimentName) {
        if (isIE && experimentName == Constants_1.constants.Experiments.LUDO_IG_SPANISH_LOC) return 0;
        if (this.mExperimentVariants && experimentName in this.mExperimentVariants) return this.mExperimentVariants[experimentName];
        return 0;
      };
      ExperimentController.getInstance = function() {
        if (ExperimentController.instance) return ExperimentController.instance;
        ExperimentController.instance = new ExperimentController();
        return ExperimentController.instance;
      };
      return ExperimentController;
    }();
    exports.ExperimentController = ExperimentController;
    cc._RF.pop();
  }, {
    "../Constants": "Constants"
  } ],
  FtueComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4c0deNuW3FM5IrOqPtpeBQS", "FtueComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var ActionPlaySound_1 = require("../Actions/ActionPlaySound");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var FtueComponent = function(_super) {
      __extends(FtueComponent, _super);
      function FtueComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.leftToolTip = null;
        _this.leftToolTipLabel = null;
        _this.rightToolTip = null;
        _this.rightToolTipLabel = null;
        _this.normalToolTip = null;
        _this.normalToolTipLabel = null;
        _this.wholeNode = null;
        _this.timer = null;
        return _this;
      }
      FtueComponent.prototype.onLoad = function() {
        this.leftToolTip.active = false;
        this.rightToolTip.active = false;
        this.normalToolTip.active = false;
        this.wholeNode.active = false;
        var persistNode = cc.find("PersistantNode");
        this.mPersistNodeComponent = persistNode.getComponent(PersistantNodeComponent_1.default);
      };
      FtueComponent.prototype.start = function() {};
      FtueComponent.prototype.onDestroy = function() {
        clearTimeout(this.timer);
      };
      FtueComponent.prototype.initialize = function(type) {};
      FtueComponent.prototype.onFtueClear = function() {
        this.leftToolTip.active = false;
        this.rightToolTip.active = false;
        this.normalToolTip.active = false;
        clearTimeout(this.timer);
      };
      FtueComponent.prototype.showToolTip = function(text, direction, target, type, ignoreSound) {
        var self = this;
        this.onFtueClear();
        ignoreSound || this.mPersistNodeComponent.GetActionController().runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.FTUE));
        var toolTipWidth = this.normalToolTip.getContentSize().width;
        var position = target.parent.convertToWorldSpaceAR(target.getPosition());
        var positionOffset = this.wholeNode.parent.convertToWorldSpaceAR(this.wholeNode.getPosition());
        if ("top" === direction) {
          var toolTipToUse = this.normalToolTip;
          var toolTipLabel = this.normalToolTipLabel;
          if (position.x + toolTipWidth > cc.director.getVisibleSize().width) {
            toolTipToUse = this.rightToolTip;
            toolTipLabel = this.rightToolTipLabel;
            toolTipToUse.setPositionY(position.y - positionOffset.y);
            toolTipToUse.setPositionX(position.x - positionOffset.x - 30);
          } else if (position.x < 90) {
            toolTipToUse = this.leftToolTip;
            toolTipLabel = this.leftToolTipLabel;
            toolTipToUse.setPositionY(position.y - positionOffset.y);
            toolTipToUse.setPositionX(position.x - positionOffset.x + 30);
          } else {
            toolTipToUse.setPositionY(position.y - positionOffset.y + 30);
            toolTipToUse.setPositionX(position.x - positionOffset.x);
          }
          toolTipToUse.active = true;
          this.mPersistNodeComponent.GetStatsController().count("ftue", 1, "popup", "ftue", type, this.mPersistNodeComponent.getFtueController().getCount(type) + 1 + "", this.mPersistNodeComponent.GetGameController().getModel().getRoomId());
          var localizationComponent = toolTipLabel.getComponent(LocalizationComponent_1.default);
          localizationComponent.setValues(text);
        } else if ("left" === direction) {
          this.leftToolTip.active = true;
          this.mPersistNodeComponent.GetStatsController().count("ftue", 1, "popup", "ftue", type, this.mPersistNodeComponent.getFtueController().getCount(type) + 1 + "", this.mPersistNodeComponent.GetGameController().getModel().getRoomId());
          this.leftToolTip.parent.active = true;
          var localizationComponent = this.leftToolTipLabel.getComponent(LocalizationComponent_1.default);
          localizationComponent.setValues(text);
          this.leftToolTip.setPositionX(position.x - positionOffset.x + 30);
          this.leftToolTip.setPositionY(position.y - positionOffset.y);
        }
        var ftueOffTimer = this.mPersistNodeComponent.GetPlayerController().getModel().getFtueOffTimer();
        this.timer && clearTimeout(this.timer);
        this.timer = setTimeout(this.onFtueClear.bind(this), ftueOffTimer[type]);
      };
      __decorate([ property(cc.Node) ], FtueComponent.prototype, "leftToolTip", void 0);
      __decorate([ property(cc.Label) ], FtueComponent.prototype, "leftToolTipLabel", void 0);
      __decorate([ property(cc.Node) ], FtueComponent.prototype, "rightToolTip", void 0);
      __decorate([ property(cc.Label) ], FtueComponent.prototype, "rightToolTipLabel", void 0);
      __decorate([ property(cc.Node) ], FtueComponent.prototype, "normalToolTip", void 0);
      __decorate([ property(cc.Label) ], FtueComponent.prototype, "normalToolTipLabel", void 0);
      __decorate([ property(cc.Node) ], FtueComponent.prototype, "wholeNode", void 0);
      FtueComponent = __decorate([ ccclass ], FtueComponent);
      return FtueComponent;
    }(cc.Component);
    exports.default = FtueComponent;
    cc._RF.pop();
  }, {
    "../Actions/ActionPlaySound": "ActionPlaySound",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  FtueController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "91291jWX8lHk41+dwMtIPt9", "FtueController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Constants_1 = require("../Constants");
    var Config_1 = require("../Config");
    var FtueController = function() {
      function FtueController(persistantNodeComponent) {
        this.MAX_RETRIES_COUNT = 3;
        this.supressDiceRollFtue = false;
        this.supressMovePawnOutFtue = false;
        this.isAutoBotOn = false;
        this.mLogger = new Logger_1.Logger("FtueController", true);
        this.mPersistantNodeComponent = persistantNodeComponent;
      }
      FtueController.prototype.updateFtueShown = function(type, roomId) {
        this.ftueDetail.updateFtueShown(type, roomId);
      };
      FtueController.prototype.isEligibleForFtue = function(type) {
        this.mLogger.Log("Harish: Ftue: isEligibleForFtue: is auto bot on: " + this.getAutoBotStatus());
        return this.ftueDetail.isEligibleForFtue(type, this.mPersistantNodeComponent.GetGameController().getRoomId() || "") && !this.getAutoBotStatus();
      };
      FtueController.prototype.setFtueDetails = function(ftueDetail) {
        this.ftueDetail = ftueDetail;
        this.mLogger.Log("Harish: Ftue: setFtueDetails" + JSON.stringify(this.ftueDetail));
      };
      FtueController.prototype.updateFtueCount = function(ftue, retryCount) {
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        this.mLogger.Log("Harish: Ftue: updateFtueCount: making request: " + ftue + ", retry = " + retryCount);
        retryCount = retryCount || 0;
        if (retryCount > this.MAX_RETRIES_COUNT) return;
        var self = this;
        var playerController = this.mPersistantNodeComponent.GetPlayerController();
        var params = {
          pid: playerController.getModel().getId(),
          access_token: playerController.getModel().getAccessToken(),
          duid: playerController.getModel().getSnuid(),
          ftue_name: ftue
        };
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/user/updateFtue", params, function(d) {
          self.mLogger.Log("Harish: Ftue: updateFtue: server response: success: " + JSON.stringify(d));
          self.ftueDetail.ftueCountMap[ftue] = d.count;
          self.mLogger.Log("Harish: Ftue: updateFtue: final count of ftue: " + JSON.stringify(self.ftueDetail.ftueCountMap));
        }, function() {
          self.mLogger.Log("Harish: Ftue: updateFtue: server response: failure");
          self.updateFtueCount(ftue, retryCount + 1);
        });
      };
      FtueController.prototype.setAutoBotStatus = function(val) {
        this.isAutoBotOn = val;
      };
      FtueController.prototype.getAutoBotStatus = function() {
        return this.isAutoBotOn;
      };
      FtueController.prototype.getFtueTimers = function() {
        return Constants_1.constants.FTUE_TIMERS;
      };
      FtueController.prototype.getCount = function(type) {
        return this.ftueDetail.getCount(type);
      };
      return FtueController;
    }();
    exports.FtueController = FtueController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Logger": "Logger"
  } ],
  FtueModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a72c2OCDKdD5Z9AfPfaR/Bn", "FtueModel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var Logger_1 = require("../Generic/Logger");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var FtueModel = function() {
      function FtueModel(data, isEnabled) {
        this.ftueCountMap = {};
        this.ftueShownByGameIdMap = {};
        var self = this;
        this.mLogger = new Logger_1.Logger("FtueModel", true);
        this.isFtueEnabled = isEnabled || false;
        data && Object.keys(Constants_1.constants.FTUE_EVENTS).forEach(function(ftueKey) {
          self.ftueCountMap[Constants_1.constants.FTUE_EVENTS[ftueKey]] = data[Constants_1.constants.FTUE_EVENTS[ftueKey]] || 0;
        });
      }
      FtueModel.prototype.updateFtueShown = function(type, roomId) {
        this.ftueShownByGameIdMap[roomId] || (this.ftueShownByGameIdMap[roomId] = {});
        this.ftueShownByGameIdMap[roomId][type] = true;
      };
      FtueModel.prototype.isEligibleForFtue = function(type, roomid) {
        if (!this.isFtueEnabled) return false;
        if (this.ftueShownByGameIdMap[roomid] && this.ftueShownByGameIdMap[roomid][type]) return false;
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDI_IG_FTUE);
        if (variant < 2) return false;
        if (2 === variant) return this.ftueCountMap[type] < 1;
        if (3 === variant) return this.ftueCountMap[type] < 3;
        return false;
      };
      FtueModel.prototype.getCount = function(type) {
        return this.ftueCountMap[type] || 0;
      };
      return FtueModel;
    }();
    exports.FtueModel = FtueModel;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Logger": "Logger"
  } ],
  GameComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb440mkwIpH3ro7snlr0DHM", "GameComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var State_1 = require("../states/State");
    var PawnsContainerComponent_1 = require("./PawnsContainerComponent");
    var BoardComponent_1 = require("./BoardComponent");
    var Helper_1 = require("../Generic/Helper");
    var Logger_1 = require("../Generic/Logger");
    var WaitingPanelComponent_1 = require("./WaitingPanelComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var SettingsPopupComponent_1 = require("./SettingsPopupComponent");
    var ResultScreenPopupComponent_1 = require("./ResultScreenPopupComponent");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var GenericPopupComponent_1 = require("../Actions/GenericPopupComponent");
    var LocalizationRepositionComponent_1 = require("./LocalizationRepositionComponent");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var InviteWaitingPopupComponent_1 = require("./InviteWaitingPopupComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var SurveyController_1 = require("../Controllers/SurveyController");
    var SurveyPopupWrapperComponent_1 = require("./SurveyPopupWrapperComponent");
    var Constants_1 = require("../Constants");
    var ChatHistoryPopupComponent_1 = require("./ChatHistoryPopupComponent");
    var PlayerProfilePopupComponent_1 = require("./PlayerProfilePopupComponent");
    var NotEnoughCoinsPopupComponent_1 = require("./NotEnoughCoinsPopupComponent");
    var Game_1 = require("../models/Game");
    var FtueComponent_1 = require("./FtueComponent");
    var ReferralRewardPopupComponent_1 = require("./ReferralRewardPopupComponent");
    var ReferralWelcomePopupComponent_1 = require("./ReferralWelcomePopupComponent");
    var ChatPopupComponent_1 = require("./ChatPopupComponent");
    var GetEmojisPopupComponent_1 = require("./GetEmojisPopupComponent");
    var UnlockingEmojisPopupComponent_1 = require("./UnlockingEmojisPopupComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GAME_POPUP_TYPE;
    (function(GAME_POPUP_TYPE) {
      GAME_POPUP_TYPE[GAME_POPUP_TYPE["UNDEFINED"] = 0] = "UNDEFINED";
      GAME_POPUP_TYPE[GAME_POPUP_TYPE["NOT_ENOUGH_CHIPS"] = 1] = "NOT_ENOUGH_CHIPS";
      GAME_POPUP_TYPE[GAME_POPUP_TYPE["RESULT_POPUP"] = 2] = "RESULT_POPUP";
      GAME_POPUP_TYPE[GAME_POPUP_TYPE["INVITE_WAITING"] = 3] = "INVITE_WAITING";
      GAME_POPUP_TYPE[GAME_POPUP_TYPE["RECONNECTION"] = 4] = "RECONNECTION";
      GAME_POPUP_TYPE[GAME_POPUP_TYPE["SURVEY_POPUP"] = 5] = "SURVEY_POPUP";
    })(GAME_POPUP_TYPE = exports.GAME_POPUP_TYPE || (exports.GAME_POPUP_TYPE = {}));
    var GameComponent = function(_super) {
      __extends(GameComponent, _super);
      function GameComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.diceRollSound = null;
        _this.pawnMoveSound = null;
        _this.safePawnSound = null;
        _this.tickSound = null;
        _this.ftueSound = null;
        _this.killFx1 = null;
        _this.killFx2 = null;
        _this.highlightSound = null;
        _this.gameStartSound = null;
        _this.winnerSound = null;
        _this.homeSound = null;
        _this.boomSound = null;
        _this.genericPopup = null;
        _this.autoBotSpinner = null;
        _this.powerupAutoBotSpinner = null;
        _this.quickChatPopup = null;
        _this.chatHistoryPopup = null;
        _this.getEmojisPopup = null;
        _this.unlockingEmojisPopup = null;
        _this.inviteWaitingPopup = null;
        _this.oldRulesPopup = null;
        _this.newRulesPopup = null;
        _this.notEnoughCoinsPopup = null;
        _this.playerProfilePopup = null;
        _this.rulesButton = null;
        _this.powerupNode = null;
        _this.ftueComponent = null;
        _this.referralRewardPopup = null;
        _this.referralWelcomePopup = null;
        _this.mLogger = null;
        _this.mCurrentVisStatus = true;
        _this.mHeartBeatInterval = null;
        _this.isPopupDisplayed = false;
        _this.pointer = null;
        return _this;
      }
      GameComponent.prototype.onLoad = function() {
        Helper_1.Helper.sendSentryLog("GameComponent onLoad");
        this.mLogger = new Logger_1.Logger("GameComponent", true);
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mGameController = this.mPersistantComponent.GetGameController();
        this.mStateMachineController = this.mPersistantComponent.GetStateMachineController();
        this.mStatsController = this.mPersistantComponent.GetStatsController();
        this.autobotOff.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameComponent", "AutoBotOff"));
        this.powerupAutobotOff.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameComponent", "PowerupAutoBotOff"));
        clearInterval(this.mHeartBeatInterval);
        this.mHeartBeatInterval = setInterval(this.heartBeatStat.bind(this), 1e4);
        this.mVisibilityChangeCallback = this.onVisibilityChange.bind(this);
        document.addEventListener("visibilitychange", this.mVisibilityChangeCallback);
        this.mNetworkChangeCallback = this.onNetworkChange.bind(this);
        window.addEventListener("online", this.mNetworkChangeCallback);
        window.addEventListener("offline", this.mNetworkChangeCallback);
        this.confettiSpineNode1.active = false;
        this.confettiSpineNode2.active = false;
        this.confettiSpineNode3.active = false;
        this.pawnHomeSpineNode.active = false;
        this.resetReconnect();
        this.mPersistantComponent.GetActionController().SetViewComponent(this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_PROFILE_PRESSED, this.onProfilePressed, this);
        this.powerupPointer.active = false;
        this.simplePointer.active = false;
        var power_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        this.pointer = 2 == power_variant ? this.powerupPointer : this.simplePointer;
        this.mGameController.setNewGamePressed(false);
      };
      GameComponent.prototype.getFtueComponent = function() {
        return this.ftueComponent;
      };
      GameComponent.prototype.onFtueClear = function() {
        this.ftueComponent.onFtueClear();
      };
      GameComponent.prototype.onProfilePressed = function(event) {
        var player = this.mPersistantComponent.GetPlayerController().getModel();
        if (player && !player.isCustomChatEnabled()) return;
        this.playerProfilePopup.showPopup();
        if (event) {
          var userData = event.getUserData();
          if (-1 != userData.index) {
            var gameModel = this.mGameController.getModel();
            var pid = "";
            if (gameModel) {
              var playerIndexMap = gameModel.getPlayerIndexMap();
              playerIndexMap && (pid = playerIndexMap[userData.index].getId());
            }
            this.mStatsController.count("button", 1, "profile", pid);
            this.playerProfilePopup.getComponent(PlayerProfilePopupComponent_1.default).initialize(false, pid);
          }
        }
      };
      GameComponent.prototype.heartBeatStat = function() {
        this.mStatsController.count("heartbeat", 1, "game");
      };
      GameComponent.prototype.onVisibilityChange = function(status) {
        var visStatus = !document.hidden;
        if (false == this.mCurrentVisStatus && true == visStatus) {
          this.mStatsController.count("debug", 1, "foreground");
          if (!this.mGameController.wasInvitePopupOpen()) if (this.mGameController.isGameOver()) {
            this.mLogger.Log("gaurav isNewGamePressed " + this.mGameController.isNewGamePressed());
            this.mGameController.isNewGamePressed() || this.mStateMachineController.onEvent(State_1.StateEvent.EXIT_TO_LOBBY, {
              reason: "force_kick"
            });
          } else this.mGameController.triggerReconnectFlow();
          this.mGameController.setInvitePopupOpen(false);
        }
        if (!visStatus) {
          this.mStatsController.count("debug", 1, "background");
          this.mPersistantComponent.GetSoundController().stopAll();
          this.mPersistantComponent.GetSoundController().stopMusic();
        }
        this.mCurrentVisStatus = visStatus;
        this.mPersistantComponent.GetSoundController().setAppVisibiltyStatus(this.mCurrentVisStatus);
      };
      GameComponent.prototype.onNetworkChange = function(event) {
        var condition = navigator.onLine ? "online" : "offline";
        this.mStatsController.count("debug", 1, "onNetworkChange", condition);
        "offline" === condition && this.mGameController.triggerReconnectFlow();
      };
      GameComponent.prototype.start = function() {
        Helper_1.Helper.sendSentryLog("GameComponent start");
        this.addEventListeners();
        this.mStateMachineController.onEvent(State_1.StateEvent.GAME_SCENE_LOADED);
        this.mGameController.isPrivateRoom() ? this.mStatsController.count("visit", 1, "game_screen", "friends") : this.mStatsController.count("visit", 1, "game_screen", "online");
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_rules_popup");
        this.rulesButton.active = variant >= 2;
        var player = this.mPersistantComponent.GetPlayerController().getModel();
        player && (2 != variant || this.mGameController.isPrivateRoom() || 0 != player.getGamesPlayed() || this.helpPressed());
        this.checkAndEnablePowerup();
        this.mPersistantComponent.setGameSceneVisited(true);
        this.checkAndShowReferralWelcomePopup();
        this.checkAndShowReferralRewardPOpup();
      };
      GameComponent.prototype.onDisable = function() {
        this.mPersistantComponent.GetReferralController().shouldShowWelcomePopupStatus() && this.mPersistantComponent.GetReferralController().setShowWelcomePopup(false, null);
      };
      GameComponent.prototype.addEventListeners = function() {
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_POPUP_CLOSED, this.onEventPopupClosed, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_POPUP_SHOWN, this.onEventPopupShown, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_SURVEY_DATA, this.checkAndShowSurveyPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_FEEDBACK_CLICKED, this.onFeedbackClicked, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_CHAT_OFF_POPUP, this.showChatOffGenericPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.onRewardedVideoSuccess, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_CONFIRM_EXIT, this.confirmExit, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_BOOT_COLLECT, this.onBootCollect, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SETTINGS_PRESSED, this.SettingsPressed, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_GEMS_INSUFF, this.showInsuffGems, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_HELP_PRESSED, this.helpPressed, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_REWARD_POPUP, this.showReferralRewardPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_WELCOME_POPUP, this.showReferralWelcomePopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_POWERUP_SETTINGS_CHANGED, this.changeGamePowerupSettings, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_GET_EMOJIS_POPUP, this.showGetEmojisPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_UNLOCKING_EMOJIS_POPUP, this.showUnlockingEmojiPopup, this);
      };
      GameComponent.prototype.PowerupAutoBotOff = function() {
        this.AutoBotOff();
      };
      GameComponent.prototype.AutoBotOff = function() {
        this.mGameController.sendAutoPlayTurnOff();
        if (this.mGameController.getMyIndex() != this.mGameController.getCurrentIndex() && !this.mGameController.Reconnecting()) {
          this.autoBotSpinner.active = true;
          var spinner = this.autoBotSpinner.getComponent(SpinnerComponent_1.default);
          spinner && spinner.showLoader();
          this.powerupAutoBotSpinner.active = true;
          spinner = this.powerupAutoBotSpinner.getComponent(SpinnerComponent_1.default);
          spinner && spinner.showLoader();
        }
      };
      GameComponent.prototype.getPawnContainer = function() {
        return this.pawnsContainer;
      };
      GameComponent.prototype.showAutoBotButton = function(autoBotActive) {
        var power_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        this.autobotOff.node.active = autoBotActive && 2 != power_variant;
        this.powerupAutobotOff.node.active = autoBotActive && 2 == power_variant;
        if (autoBotActive) {
          this.autoBotSpinner.active = false;
          this.powerupAutoBotSpinner.active = false;
        }
      };
      GameComponent.prototype.getBoardComponent = function() {
        return this.boardComponent;
      };
      GameComponent.prototype.onDestroy = function() {
        clearInterval(this.mHeartBeatInterval);
        document.removeEventListener("visibilitychange", this.mVisibilityChangeCallback);
        window.removeEventListener("online", this.mNetworkChangeCallback);
        window.removeEventListener("offline", this.mNetworkChangeCallback);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_POPUP_SHOWN, this.onEventPopupShown, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_POPUP_CLOSED, this.onEventPopupShown, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_SURVEY_DATA, this.checkAndShowSurveyPopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_FEEDBACK_CLICKED, this.onFeedbackClicked, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_BOOT_COLLECT, this.onBootCollect, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SETTINGS_PRESSED, this.SettingsPressed, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_GEMS_INSUFF, this.showInsuffGems, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_HELP_PRESSED, this.helpPressed, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_REWARD_POPUP, this.showReferralRewardPopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_WELCOME_POPUP, this.showReferralWelcomePopup, this);
        this.mGameController.gameSceneDestoyed();
      };
      GameComponent.prototype.getConfettiSpineNodes = function() {
        var t = [ this.confettiSpineNode1, this.confettiSpineNode2, this.confettiSpineNode3 ];
        return t;
      };
      GameComponent.prototype.getHomeReachAnimNode = function() {
        return this.pawnHomeSpineNode;
      };
      GameComponent.prototype.SettingsPressed = function() {
        var settingsComponent = this.settingsPopup.node.getComponent(SettingsPopupComponent_1.default);
        this.settingsPopup.showPopup();
        this.mStatsController.count("popup", 1, "settings", "show");
        settingsComponent.initialize();
      };
      GameComponent.prototype.helpPressed = function() {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_rules_popup");
        if (variant < 2) return;
        var variantNewRule = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_newrules");
        this.mLogger.Log("tanisha variantNewRule " + variantNewRule);
        variantNewRule < 2 ? this.oldRulesPopup.showPopup() : this.newRulesPopup.showPopup();
        this.mStatsController.count("popup", 1, "rules", "show");
      };
      GameComponent.prototype.showResultsScreenPopup = function() {
        if (!this.resultScreenPopup || !this.resultScreenPopup.node) return;
        this.hidePlayerProfilePopup();
        var resultScreenComponent = this.resultScreenPopup.node.getComponent(ResultScreenPopupComponent_1.default);
        this.resultScreenPopup.showPopup();
        this.mStatsController.count("popup", 1, "result_screen_popup", "show");
        resultScreenComponent.initialize();
      };
      GameComponent.prototype.showInviteWaitingPopup = function(show, hostInit) {
        void 0 === show && (show = true);
        void 0 === hostInit && (hostInit = false);
        if (!this.inviteWaitingPopup || !this.inviteWaitingPopup.node) return;
        var inviteWaitingComp = this.inviteWaitingPopup.getComponent(InviteWaitingPopupComponent_1.default);
        if (show) {
          this.hideQuickChatPopup();
          this.hideRulesPopup();
          this.inviteWaitingPopup.node.active || this.inviteWaitingPopup.showPopup();
          hostInit && inviteWaitingComp.initializeForHost();
        } else this.inviteWaitingPopup.hidePopup();
        this.mStatsController.count("popup", 1, "open", "private_roomjoin_wait");
      };
      GameComponent.prototype.hideGenericPopup = function() {
        this.genericPopup.getComponent(PopupComponent_1.default).hidePopup();
      };
      GameComponent.prototype.BackPressed = function() {
        this.confirmExit(null);
      };
      GameComponent.prototype.confirmExit = function(event) {
        this.exitConfirmationPopup.showPopup();
        this.mStatsController.count("button", 1, "exit", "in_game", "");
        this.mStatsController.count("popup", 1, "open", "exit_popup");
      };
      GameComponent.prototype.showReconnectionPopup = function() {
        var pCallback = Helper_1.Helper.getEventHandler(this.node, "GameComponent", "resetReconnect");
        var sCallback = Helper_1.Helper.getEventHandler(this.node, "GameComponent", "gotoLobby");
        this.genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var genericComponent = this.genericPopup.getComponent(GenericPopupComponent_1.default);
        genericComponent.initialize("#ERROR_POPUP_TITLE", "#LIVESERVER_CONNECTION_ISSUE_TEXT", "#BTN_RETRY", true, pCallback, pCallback);
        var label = genericComponent.getPrimaryButtonLabel();
        var reposition = label.addComponent(LocalizationRepositionComponent_1.default);
        reposition.setValues(1, 0, 0, 35);
        label.getComponent(LocalizationComponent_1.default).onLocaleChange();
      };
      GameComponent.prototype.gotoLobby = function() {
        this.mStateMachineController.onEvent(State_1.StateEvent.EXIT_TO_LOBBY);
      };
      GameComponent.prototype.resetReconnect = function() {
        this.mStateMachineController.onEvent(State_1.StateEvent.RETRY_RECONNECT);
        this.genericPopup.getComponent(PopupComponent_1.default).hidePopup();
      };
      GameComponent.prototype.showQuickChatPopup = function() {
        if (!this.quickChatPopup || !this.chatHistoryPopup) return;
        var exp_var = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_CUSTOM_CHAT);
        var playerController = this.mPersistantComponent.GetPlayerController();
        var player = playerController.getModel();
        var customChatEnabled = true;
        player && (customChatEnabled = player.isCustomChatEnabled());
        if ((2 == exp_var || this.mGameController.isPrivateRoom()) && customChatEnabled) {
          this.chatHistoryPopup.showPopup();
          this.chatHistoryPopup.getComponent(ChatHistoryPopupComponent_1.default).initialize();
        } else {
          this.quickChatPopup.showPopup();
          this.quickChatPopup.getComponent(ChatPopupComponent_1.default).initialize();
        }
        this.mStatsController.count("button", 1, "quick_chat", "", "", "", this.mGameController.getInstanceId());
        this.mStatsController.count("popup", 1, "open", "quick_chat", "", "", this.mGameController.getInstanceId());
      };
      GameComponent.prototype.hideQuickChatPopup = function() {
        if (!this.quickChatPopup || !this.chatHistoryPopup) return;
        this.quickChatPopup.hidePopup();
        this.chatHistoryPopup.hidePopup();
        this.mStatsController.count("popup", 1, "close", "quick_chat", "", "", this.mGameController.getInstanceId());
      };
      GameComponent.prototype.getChatHistoryPopupComponent = function() {
        return this.chatHistoryPopup.getComponent(ChatHistoryPopupComponent_1.default);
      };
      GameComponent.prototype.hideRulesPopup = function() {
        if (!this.rulesPopup) return;
        this.rulesPopup.hidePopup();
        this.mStatsController.count("popup", 1, "rules", "hide");
      };
      GameComponent.prototype.showNotEnoughChipsPopup = function() {
        if (this.notEnoughCoinsPopup) {
          this.notEnoughCoinsPopup.showPopup();
          this.notEnoughCoinsPopup.getComponent(NotEnoughCoinsPopupComponent_1.default).setIsLobby(false);
        }
      };
      GameComponent.prototype.onEventPopupShown = function() {
        this.isPopupDisplayed = true;
      };
      GameComponent.prototype.onEventPopupClosed = function() {
        this.isPopupDisplayed = false;
        this.showAutoPopups();
      };
      GameComponent.prototype.showAutoPopups = function() {
        if (this.isPopupDisplayed) return false;
        if (this.checkAndShowSurveyPopup()) return true;
        return false;
      };
      GameComponent.prototype.checkAndShowSurveyPopup = function() {
        if (this.isPopupDisplayed) return false;
        var popupData = this.mPersistantComponent.GetSurveyController().getPopupData(SurveyController_1.SCENE_TYPE.GAME);
        if (!popupData) return false;
        this.node.getComponent(SurveyPopupWrapperComponent_1.default).initializeSurvey(popupData);
        return true;
      };
      GameComponent.prototype.onFeedbackClicked = function() {
        this.mPersistantComponent.GetSurveyController().showFeedBack(SurveyController_1.SCENE_TYPE.GAME);
      };
      GameComponent.prototype.showChatOffGenericPopup = function() {
        this.genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var genericComponent = this.genericPopup.getComponent(GenericPopupComponent_1.default);
        var closePopupHandler = Helper_1.Helper.getEventHandler(this.node, "GameComponent", "hideGenericPopup");
        genericComponent.initialize("#CHAT_OFF_TEXT", "#SWITCH_ON_TEXT", "#PRIVACY_OKAY", true, closePopupHandler, closePopupHandler);
        this.mStatsController.count("popup", 1, "open", "chat_off_popup", "", "", this.mGameController.getInstanceId());
      };
      GameComponent.prototype.showInsuffGems = function() {
        this.genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var genericComponent = this.genericPopup.getComponent(GenericPopupComponent_1.default);
        var closePopupHandler = Helper_1.Helper.getEventHandler(this.node, "GameComponent", "hideGenericPopup");
        genericComponent.initializeWithBlueButton("#INSUFF_GEMS_TITLE", "#INSUFF_GEMS_MSG", true, "", "#PRIVACY_OKAY", true, null, closePopupHandler, closePopupHandler);
        this.mStatsController.count("popup", 1, "open", "in_game", "insuff_gems", "premium", this.mGameController.getInstanceId());
      };
      GameComponent.prototype.showReferralWelcomePopup = function(event) {
        this.mLogger.Log("showReferralWelcomePopup game");
        var referralWelcomePopup = this.referralWelcomePopup;
        referralWelcomePopup.showPopup();
        referralWelcomePopup.getComponent(ReferralWelcomePopupComponent_1.default).initialize();
      };
      GameComponent.prototype.showReferralRewardPopup = function(event) {
        var referralRewardPopup = this.referralRewardPopup;
        referralRewardPopup.showPopup();
        referralRewardPopup.getComponent(ReferralRewardPopupComponent_1.default).initialize();
      };
      GameComponent.prototype.checkAndShowReferralWelcomePopup = function() {
        this.mPersistantComponent.GetReferralController().shouldShowWelcomePopupStatus() && this.mPersistantComponent.GetReferralController().showWelcomePopup();
      };
      GameComponent.prototype.checkAndShowReferralRewardPOpup = function() {
        this.mPersistantComponent.GetReferralController().getReferralEnabled() && this.mPersistantComponent.GetPlayerController().getModel().getFriendRefCodeData() && this.showReferralRewardPopup();
      };
      GameComponent.prototype.showGetEmojisPopup = function() {
        var androidType = true;
        if (cc.sys.os == cc.sys.OS_IOS) androidType = false; else if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.OS_LINUX) androidType = true; else if (cc.sys.isBrowser) {
          this.showUnlockingEmojiPopup(false);
          return;
        }
        var getEmojisPopup = this.getEmojisPopup;
        getEmojisPopup.showPopup();
        getEmojisPopup.getComponent(GetEmojisPopupComponent_1.default).initialize(androidType);
        this.mStatsController.count("popup", 1, "open", "getEmojisPopup");
      };
      GameComponent.prototype.showUnlockingEmojiPopup = function(event) {
        var mobileStatus = false;
        if (event) {
          var data = event.getUserData();
          data.mobile && (mobileStatus = data.mobile);
        }
        var unlockingEmojisPopup = this.unlockingEmojisPopup;
        unlockingEmojisPopup.showPopup();
        unlockingEmojisPopup.getComponent(UnlockingEmojisPopupComponent_1.default).initialize(mobileStatus);
        this.mStatsController.count("popup", 1, "open", "unlockingEmojisPopup");
      };
      GameComponent.prototype.hidePlayerProfilePopup = function() {
        this.playerProfilePopup.hidePopup();
      };
      GameComponent.prototype.onRewardedVideoSuccess = function(event) {
        if (event) {
          var data = event.getUserData();
          data.grantChips ? this.mPersistantComponent.GetAdsController().queueAdsSuccessPopup(data.grantChips, 0) : data.grantGems ? this.mPersistantComponent.GetAdsController().queueAdsSuccessPopup(0, data.grantGems) : this.mLogger.Log("eagle value of grantChips for Rewarded Video is inValid in Gamescene: " + data.grantChips);
        }
      };
      GameComponent.prototype.checkAndEnablePowerup = function() {
        var power_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        var gameState = this.mPersistantComponent.GetGameController().getModel().getRoomState();
        var myIndex = this.mPersistantComponent.GetGameController().getMyIndex();
        var isNotSpectating = this.mPersistantComponent.GetGameController().validateIndex(myIndex);
        this.powerupNode.active = 2 == power_variant && gameState == Game_1.RoomSate.STATE_ACTIVE && isNotSpectating;
      };
      GameComponent.prototype.onBootCollect = function() {
        this.checkAndEnablePowerup();
      };
      GameComponent.prototype.changeGamePowerupSettings = function() {
        this.mPersistantComponent.GetGameController().changeGamePowerupSettings();
      };
      __decorate([ property(PawnsContainerComponent_1.default) ], GameComponent.prototype, "pawnsContainer", void 0);
      __decorate([ property(BoardComponent_1.default) ], GameComponent.prototype, "boardComponent", void 0);
      __decorate([ property(cc.Button) ], GameComponent.prototype, "autobotOff", void 0);
      __decorate([ property(cc.Button) ], GameComponent.prototype, "powerupAutobotOff", void 0);
      __decorate([ property(cc.Button) ], GameComponent.prototype, "backButton", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "simplePointer", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "powerupPointer", void 0);
      __decorate([ property(WaitingPanelComponent_1.default) ], GameComponent.prototype, "waitingPanel", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "safeLocationsLayer", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "confettiSpineNode1", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "confettiSpineNode2", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "confettiSpineNode3", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "pawnHomeSpineNode", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "settingsPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "resultScreenPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "exitConfirmationPopup", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "diceRollSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "pawnMoveSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "safePawnSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "tickSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "ftueSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "killFx1", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "killFx2", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "highlightSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "gameStartSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "winnerSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "homeSound", void 0);
      __decorate([ property(cc.AudioSource) ], GameComponent.prototype, "boomSound", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "genericPopup", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "autoBotSpinner", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "powerupAutoBotSpinner", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "quickChatPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "chatHistoryPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "getEmojisPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "unlockingEmojisPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "inviteWaitingPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "oldRulesPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "newRulesPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "notEnoughCoinsPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "playerProfilePopup", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "rulesButton", void 0);
      __decorate([ property(cc.Node) ], GameComponent.prototype, "powerupNode", void 0);
      __decorate([ property(FtueComponent_1.default) ], GameComponent.prototype, "ftueComponent", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "referralRewardPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], GameComponent.prototype, "referralWelcomePopup", void 0);
      GameComponent = __decorate([ ccclass ], GameComponent);
      return GameComponent;
    }(cc.Component);
    exports.default = GameComponent;
    cc._RF.pop();
  }, {
    "../Actions/GenericPopupComponent": "GenericPopupComponent",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Controllers/SurveyController": "SurveyController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../models/Game": "Game",
    "../states/State": "State",
    "./BoardComponent": "BoardComponent",
    "./ChatHistoryPopupComponent": "ChatHistoryPopupComponent",
    "./ChatPopupComponent": "ChatPopupComponent",
    "./FtueComponent": "FtueComponent",
    "./GetEmojisPopupComponent": "GetEmojisPopupComponent",
    "./InviteWaitingPopupComponent": "InviteWaitingPopupComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./LocalizationRepositionComponent": "LocalizationRepositionComponent",
    "./NotEnoughCoinsPopupComponent": "NotEnoughCoinsPopupComponent",
    "./PawnsContainerComponent": "PawnsContainerComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PlayerProfilePopupComponent": "PlayerProfilePopupComponent",
    "./PopupComponent": "PopupComponent",
    "./ReferralRewardPopupComponent": "ReferralRewardPopupComponent",
    "./ReferralWelcomePopupComponent": "ReferralWelcomePopupComponent",
    "./ResultScreenPopupComponent": "ResultScreenPopupComponent",
    "./SettingsPopupComponent": "SettingsPopupComponent",
    "./SpinnerComponent": "SpinnerComponent",
    "./SurveyPopupWrapperComponent": "SurveyPopupWrapperComponent",
    "./UnlockingEmojisPopupComponent": "UnlockingEmojisPopupComponent",
    "./WaitingPanelComponent": "WaitingPanelComponent"
  } ],
  GameController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aacb9JXq6FNuqyc9mDSiOCg", "GameController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Game_1 = require("../models/Game");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var Config_1 = require("../Config");
    var Connection_1 = require("../Generic/Connection");
    var Message_1 = require("../Generic/Message");
    var State_1 = require("../states/State");
    var Queue_1 = require("../Generic/Queue");
    var InMessages_1 = require("../Network/InMessages");
    var OutMessages_1 = require("../Network/OutMessages");
    var MessageFactory_1 = require("../Network/MessageFactory");
    var ActionUpdateGameState_1 = require("../Actions/ActionUpdateGameState");
    var ActionUpdatePawnPosition_1 = require("../Actions/ActionUpdatePawnPosition");
    var ActionUpdateKilledPawnPosition_1 = require("../Actions/ActionUpdateKilledPawnPosition");
    var ActionUpdateTurn_1 = require("../Actions/ActionUpdateTurn");
    var ActionHideFtue_1 = require("../Actions/ActionHideFtue");
    var ActionFtueMovePawnOut_1 = require("../Actions/ActionFtueMovePawnOut");
    var ActionInitializePlayer_1 = require("../Actions/ActionInitializePlayer");
    var ActionDiceRoll_1 = require("../Actions/ActionDiceRoll");
    var ActionDoPawnHighlight_1 = require("../Actions/ActionDoPawnHighlight");
    var ActionUpdateAutoPlayButton_1 = require("../Actions/ActionUpdateAutoPlayButton");
    var ActionShowPointerAnimation_1 = require("../Actions/ActionShowPointerAnimation");
    var ActionAddSafeLocations_1 = require("../Actions/ActionAddSafeLocations");
    var ActionUpdateWaitingLayer_1 = require("../Actions/ActionUpdateWaitingLayer");
    var ActionUserLeaveUpdate_1 = require("../Actions/ActionUserLeaveUpdate");
    var ActionPlaySound_1 = require("../Actions/ActionPlaySound");
    var ActionPlayWinAnimation_1 = require("../Actions/ActionPlayWinAnimation");
    var ActionShowResultsPopup_1 = require("../Actions/ActionShowResultsPopup");
    var ActionPlayHomeReachAnim_1 = require("../Actions/ActionPlayHomeReachAnim");
    var ActionForceResetDice_1 = require("../Actions/ActionForceResetDice");
    var ActionResetOnPlayerWin_1 = require("../Actions/ActionResetOnPlayerWin");
    var ActionHideDiceForUser_1 = require("../Actions/ActionHideDiceForUser");
    var ActionPlayVibration_1 = require("../Actions/ActionPlayVibration");
    var ActionShowReconnectionPopup_1 = require("../Actions/ActionShowReconnectionPopup");
    var ActionShowInviteWaitingPopup_1 = require("../Actions/ActionShowInviteWaitingPopup");
    var ActionEnablePrivateGameStart_1 = require("../Actions/ActionEnablePrivateGameStart");
    var ActionShowExitConfirmationPopup_1 = require("../Actions/ActionShowExitConfirmationPopup");
    var ActionShowWaitingForHostPopup_1 = require("../Actions/ActionShowWaitingForHostPopup");
    var ActionRankUpdate_1 = require("../Actions/ActionRankUpdate");
    var ChatModel_1 = require("../models/ChatModel");
    var ActionShowChat_1 = require("../Actions/ActionShowChat");
    var ActionShowQuickChatPopup_1 = require("../Actions/ActionShowQuickChatPopup");
    var ExperiementController_1 = require("./ExperiementController");
    var SurveyController_1 = require("./SurveyController");
    var Constants_1 = require("../Constants");
    var LocalizationController_1 = require("./LocalizationController");
    var HEARTBEAT_INTERVAL = 7e3;
    var MAX_HEARTBEAT_MISSES = 3;
    var GameController = function() {
      function GameController() {
        this.mModeConnectingTo = 0;
        this.mConnectingTo4Player = false;
        this.mConnectingToPrivateTable = false;
        this.mGameServerConnectTime = 0;
        this.mNewGame = false;
        this.mLogger = new Logger_1.Logger("GameController", true);
        this.mPacketQueue = new Queue_1.Queue();
        this.mProcessPackets = true;
        this.mIndexShift = -1;
        this.mTurnAction = null;
        this.mCurrentIndex = -1;
        this.mShouldBoardListenToClicks = false;
        this.mHighlightedPawns = [];
        this.mNumHeartBeatsMissed = 0;
        this.mIsInvitePopupOpen = false;
        this.mRetryCount = 0;
        this.mMaxRetryCount = 3;
        this.mReconnectLayerShown = false;
        this.mReconnectPopupShown = false;
        this.mLastGameServerAddress = "";
        this.mTimeRoomJoin = null;
        this.mTimeDiceRoll = null;
        this.isReconnecting = false;
        this.mInviteFriendStartTime = 0;
        this.mNewGame = false;
      }
      GameController.prototype.setPersistantNodeComponent = function(persistComponent) {
        this.mPersistantNodeComponent = persistComponent;
        this.mStateMachineController = this.mPersistantNodeComponent.GetStateMachineController();
        this.mPlayerController = this.mPersistantNodeComponent.GetPlayerController();
        this.mActionController = this.mPersistantNodeComponent.GetActionController();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mExperimentController = this.mPersistantNodeComponent.GetExperimentController();
        this.mConfigurationController = this.mPersistantNodeComponent.GetConfigurationController();
      };
      GameController.prototype.connectToGameServer = function(isReconnect, isPrivate, is4Player, inviteServerAddress) {
        Helper_1.Helper.sendSentryLog("GameController connectToGameServer: isReconnect: " + isReconnect + " isPrivate: " + isPrivate + " is4Player: " + is4Player);
        var gameServerAddress = Config_1.Config.GAME_SERVER_ADDR;
        var mode = isPrivate ? 4 : is4Player ? 3 : 1;
        this.mModeConnectingTo = mode;
        this.mPersistantNodeComponent.getFtueController().setAutoBotStatus(false);
        var betSelectVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_BET_SELECT);
        if (betSelectVar < 1 || 4 == mode) var address = this.mPlayerController.getModel().getLiveServerAddress(mode); else {
          var betAmount = this.mPersistantNodeComponent.GetPlayerController().getBetAmountForBetSelect();
          var address = this.mPlayerController.getModel().getLiveServerAddressFromList(mode, betAmount);
          null != address ? this.mPlayerController.getModel().setLastUsedLiveServerAddress(address) : address = this.mPlayerController.getModel().getLastUsedLiveServerAddress();
        }
        this.mPlayerController.savePowerupSettingsOnServer();
        gameServerAddress = inviteServerAddress && "" != inviteServerAddress ? inviteServerAddress : address || Config_1.Config.GAME_SERVER_ADDR;
        if (isReconnect) {
          this.isReconnecting = true;
          gameServerAddress = this.mLastGameServerAddress;
        }
        if (this.mConnection) {
          this.closeSocket();
          this.mConnection = null;
        }
        gameServerAddress = "wss://igludo-dev-03.moonfroglabs.in";
        this.mLastGameServerAddress = gameServerAddress;
        this.mConnection = new Connection_1.Connection(gameServerAddress);
        this.mConnection.setListener(this.onMessage.bind(this));
        this.mGameServerConnectTime = Date.now();
        this.mConnection.connectWs();
      };
      GameController.prototype.onMessage = function(message) {
        if (message instanceof Message_1.ConnectionReady) {
          this.mStateMachineController.onEvent(State_1.StateEvent.CONNECTION_READY);
          this.mStatsController.count("perf", Date.now() - this.mGameServerConnectTime, "ws_create_time", this.mModeConnectingTo + "");
          return;
        }
        message instanceof Message_1.ConnectionFailed && this.mStateMachineController.onEvent(State_1.StateEvent.CONNECTION_FAIL);
        this.mPacketQueue.push(message);
        this.mProcessPackets && this.processQueue();
      };
      GameController.prototype.processQueue = function() {
        var msg = this.mPacketQueue.pop();
        while (null != msg) {
          this.processMessage(msg);
          msg = this.mPacketQueue.pop();
        }
      };
      GameController.prototype.processMessage = function(message) {
        this.mLogger.Log("tanisha processMessage" + JSON.stringify(message));
        message = MessageFactory_1.MessageFactory.decode(message);
        this.mNumHeartBeatsMissed = 0;
        if (message) {
          Helper_1.Helper.sendSentryLog("GameController processMessage: " + message.getMI());
          this.mLogger.Log("Got message.getMI()" + message.getMI());
        }
        message instanceof InMessages_1.ReconnectAck ? this.processReconnect(message) : message instanceof InMessages_1.RoomJoinAck ? this.processRoomJoin(message) : message instanceof InMessages_1.DiceRollAck ? this.processDiceRollAck(message) : message instanceof InMessages_1.PawnMovementAck ? this.processPawnMovementAck(message) : message instanceof InMessages_1.RoomJoinUpdate ? this.processNewUserJoin(message) : message instanceof InMessages_1.JoinTableUpdate ? this.setIndexOfNewPlayer(message) : message instanceof InMessages_1.AutoPlayUpdate ? this.processAutoPlayUpdate(message) : message instanceof InMessages_1.BootCollect ? this.processBootCollect(message) : message instanceof InMessages_1.CountDownStart ? this.processCountDownStart(message) : message instanceof InMessages_1.CloseAck ? this.processClose(message) : message instanceof InMessages_1.ForceKick ? this.processForceKick(message) : message instanceof InMessages_1.UserLeave ? this.processLeave(message) : message instanceof InMessages_1.HeartBeat ? this.processHeartBeat(message) : message instanceof InMessages_1.GameEnd ? this.processGameOver(message) : message instanceof InMessages_1.SocialInPacket ? this.processChat(message) : message instanceof InMessages_1.SurveyPopupPacket ? this.processSurveyPacket(message) : message instanceof InMessages_1.RejoinPacket ? this.processRejoinPacket(message) : message instanceof InMessages_1.PlayerInfoUpdate && this.updatePlayerInfo(message);
        message && this.mLogger.Log("Got " + message.getMI());
      };
      GameController.prototype.processRejoinPacket = function(message) {
        this.mStateMachineController.onEvent(State_1.StateEvent.REJOIN);
      };
      GameController.prototype.startProcessingMessages = function() {
        this.setReconnectInterval();
        this.mProcessPackets = true;
        this.processQueue();
      };
      GameController.prototype.stopProcessingMessages = function() {
        this.clearReconnectInterval();
        this.mProcessPackets = false;
      };
      GameController.prototype.getPlayerModel = function() {
        return this.mPlayerController.getModel();
      };
      GameController.prototype.getModel = function() {
        return this.mGameModel;
      };
      GameController.prototype.doRoomJoin = function(is4Player) {
        Helper_1.Helper.sendSentryLog("GameController doRoomJoin: " + is4Player);
        this.mTimeRoomJoin = Date.now();
        var playerId = this.getPlayerModel().getId();
        var name = this.mPlayerController.getPlayerName();
        var reciept = this.getPlayerModel().getReceipt();
        var betAmount = this.mPersistantNodeComponent.GetPlayerController().getBetAmountForBetSelect();
        var skipRoomId = this.getPlayerModel().getSkipRoomId();
        var outMessage = new OutMessages_1.RoomJoin(playerId, name, reciept, is4Player, skipRoomId, betAmount);
        this.sendMessage(outMessage);
      };
      GameController.prototype.doTableJoin = function(roomId, mode, betAmount, skipRoomId) {
        Helper_1.Helper.sendSentryLog("GameController doTableJoin: " + roomId);
        this.mTimeRoomJoin = Date.now();
        var playerId = this.getPlayerModel().getId();
        var name = this.mPlayerController.getPlayerName();
        var reciept = this.getPlayerModel().getReceipt();
        var outMessage = new OutMessages_1.RoomJoin(playerId, name, reciept, 3 == mode, null, betAmount, 4 == mode, roomId);
        this.sendMessage(outMessage);
      };
      GameController.prototype.doPrivateTableJoin = function(privateRoomId) {
        Helper_1.Helper.sendSentryLog("GameController doPrivateTableJoin: " + privateRoomId);
        this.mTimeRoomJoin = Date.now();
        var playerId = this.getPlayerModel().getId();
        var name = this.mPlayerController.getPlayerName();
        var reciept = this.getPlayerModel().getReceipt();
        var outMessage = new OutMessages_1.PrivateRoomJoin(playerId, name, reciept, privateRoomId);
        this.sendMessage(outMessage);
      };
      GameController.prototype.doPrivateRoomJoin = function() {
        Helper_1.Helper.sendSentryLog("GameController doPrivateRoomJoin ");
        this.mTimeRoomJoin = Date.now();
        var playerId = this.getPlayerModel().getId();
        var name = this.mPlayerController.getPlayerName();
        var reciept = this.getPlayerModel().getReceipt();
        var outMessage = new OutMessages_1.PrivateRoomCreate(playerId, name, reciept, false);
        this.sendMessage(outMessage);
      };
      GameController.prototype.doDiceRoll = function(powerup_id) {
        void 0 === powerup_id && (powerup_id = 0);
        this.mTimeDiceRoll = Date.now();
        var outMessage = new OutMessages_1.RollDice(powerup_id);
        this.sendMessage(outMessage);
        this.mStatsController.count("dice", 1, "dice_click", this.getRoomId());
      };
      GameController.prototype.sendMessage = function(message) {
        message && Helper_1.Helper.sendSentryLog("GameController sendMessage: " + message.getMI());
        this.mConnection.sendMessage(message);
      };
      GameController.prototype.sendAutoPlayTurnOff = function() {
        if (this.getMyIndex() != this.mGameModel.getCurrentIndex()) {
          var outMessage = new OutMessages_1.AutoPlayOff();
          this.mConnection.sendMessage(outMessage);
        }
      };
      GameController.prototype.sendLeaveGame = function() {
        if (!this.mGameModel) return;
        Helper_1.Helper.sendSentryLog("GameController sendLeaveGame: ");
        var roomId = this.mGameModel.getRoomId();
        var playerId = this.mPlayerController.getModel().getId();
        var sessionKey = this.getModel().getSessionKey();
        this.mConnection.sendMessage(new OutMessages_1.LeaveGame(playerId, roomId, sessionKey));
      };
      GameController.prototype.sendGameStart = function() {
        this.mConnection.sendMessage(new OutMessages_1.GameStart());
      };
      GameController.prototype.sendResetPrivateTimer = function() {
        this.mConnection.sendMessage(new OutMessages_1.ResetTimer());
      };
      GameController.prototype.sendDebugDiceRequest = function(dice) {
        var roomId = this.mGameModel.getRoomId();
        var instanceId = this.mGameModel.getInstanceId();
        var outMessage = new OutMessages_1.DebugDiceRequest(dice, roomId, instanceId);
        this.mConnection.sendMessage(outMessage);
      };
      GameController.prototype.initializeBoard = function() {
        this.calculateDelta();
        this.mActionController.runAction(ActionUpdateGameState_1.ActionUpdateGameState.Create());
        this.mActionController.runAction(ActionAddSafeLocations_1.ActionAddSafeLocations.Create(this.mGameModel.getSafeLocations()));
        this.isAutoPlay() && this.mActionController.runAction(ActionUpdateAutoPlayButton_1.ActionUpdateAutoPlayButton.Create(true));
        if (this.mGameModel && this.mGameModel.getPlayerIndexMap()) {
          var player = this.mGameModel.getPlayerIndexMap()[this.mGameModel.getCurrentIndex()];
          player && player.getPawnHighlightMeta() && this.handlePawnHighlight(player.getPawnHighlightMeta());
        }
        this.startTurn();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_BOARD_INITIALIZED);
      };
      GameController.prototype.calculateDelta = function() {
        var myPlayerId = this.getPlayerModel().getId();
        var pidPlayerMap = this.mGameModel.getPlayerPidMap();
        var selfPlayer = pidPlayerMap[myPlayerId];
        if (!selfPlayer) return;
        this.mIndexShift = selfPlayer.getIndex();
        this.mLogger.Log("Shift Index :" + this.mIndexShift + ", rotation : " + this.getBoardRotationDegrees());
      };
      GameController.prototype.getShiftIndex = function() {
        return this.mIndexShift;
      };
      GameController.prototype.getBoardRotationDegrees = function() {
        return -90 * this.mIndexShift;
      };
      GameController.prototype.getSeatIndex = function(playerIndex) {
        return (playerIndex - this.mIndexShift + 4) % 4;
      };
      GameController.prototype.clearQueues = function() {
        this.mActionController.clearQueue();
        this.mPacketQueue.clear();
      };
      GameController.prototype.closeSocket = function() {
        this.mConnection.closeWs();
      };
      GameController.prototype.triggerReconnectFlow = function() {
        Helper_1.Helper.sendSentryLog("GameController triggerReconnectFlow: ");
        this.mStateMachineController.onEvent(State_1.StateEvent.RECONNECT);
      };
      GameController.prototype.processRoomJoin = function(message) {
        this.isReconnecting = false;
        this.mTimeDiceRoll = null;
        this.mGameModel = new Game_1.Game(message);
        if (this.mTimeRoomJoin) {
          var deltaJoinTime = Date.now() - this.mTimeRoomJoin;
          this.mStatsController.count("perf", deltaJoinTime, "join_ack_time", this.getModel().getTableType() + "");
        }
        var data = {};
        this.mGameModel.isPrivateTable() && (data["roomId"] = this.mGameModel.getPrivateRoomId());
        this.matchPowerupSettings(message.powerupEnabled);
        this.mStateMachineController.onEvent(State_1.StateEvent.ROOM_JOIN, data);
      };
      GameController.prototype.processReconnect = function(message) {
        if (message.success) {
          var chatHistory = this.mGameModel.getChatHistory();
          this.mGameModel = new Game_1.Game(message);
          this.mGameModel.setChatHistoryForReconnect(chatHistory);
          var data = {};
          this.mGameModel.isPrivateTable() && (data["roomId"] = this.mGameModel.getPrivateRoomId());
          this.isReconnecting = false;
          this.mTimeDiceRoll = null;
          if (this.mGameModel.getRoomState() >= Game_1.RoomSate.STATE_WAITING_FOR_REMATCH) this.mStateMachineController.onEvent(State_1.StateEvent.EXIT_TO_LOBBY, {
            reason: "force_kick"
          }); else {
            var interstitialAdPreloadVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_INTERSTITIAL_PRELOAD);
            2 == interstitialAdPreloadVar && (this.mPersistantNodeComponent.GetInterstitialAdController().isVideoPreloaded() || this.mPersistantNodeComponent.GetInterstitialAdController().startPreloadInterstitialVideo());
            this.mStateMachineController.onEvent(State_1.StateEvent.RECONNECT_SUCCESS, data);
          }
          this.matchPowerupSettings(message.powerupEnabled);
        } else this.mStateMachineController.onEvent(State_1.StateEvent.RECONNECT_FAILED, data);
      };
      GameController.prototype.checkAndSendGameStartPacket = function() {
        this.mGameModel && this.mGameModel.isPrivateTable() && this.mStateMachineController.onEvent(State_1.StateEvent.ROOM_UPDATE);
      };
      GameController.prototype.processDiceRollAck = function(message) {
        if (this.mTimeDiceRoll && message.index == this.getMyIndex()) {
          var deltaDiceRoll = Date.now() - this.mTimeDiceRoll;
          this.mStatsController.count("perf", deltaDiceRoll, "dice_roll", this.mGameModel.getTableType() + "");
          this.mTimeDiceRoll = null;
        }
        if (this.notInSameRoom(message.roomId)) return;
        this.mGameModel.processDiceRollAck(message);
        this.checkAndUpdateRewardsMeta();
        this.stopTurn();
        if (message.powerupUsed) {
          this.updatePlayerGems();
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_POWERUP_USED);
        }
        this.canShowDiceRoll(message.powerupUsed) && this.mActionController.runAction(ActionDiceRoll_1.ActionDiceRoll.Create(this.mCurrentIndex, message.diceRoll, !!message.pawnMovementObj.pawnProgressMeta.length, message.isWasteTurn));
        message.pawnMovementObj.pawnProgressMeta.length && this.handlePawnMovement(message.pawnMovementObj);
        if (message.pawnHighlight && this.canShowDiceRoll(message.powerupUsed)) {
          this.handlePawnHighlight(message.pawnHighlight);
          message.index == this.getMyIndex() && 6 === message.diceRoll && 1 === this.getSixCount() && this.mActionController.runAction(ActionFtueMovePawnOut_1.ActionFtueMovePawnOut.Create(1));
        }
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_DICE_ROLLED, message.powerupCount > 0 ? "PowerupAvailable" : "");
        message.powerupCount && !message.pawnMovementObj.pawnProgressMeta.length || this.startTurn();
        if (!message.playerWon && message.pawnMovementObj) this.checkAndShowPawnHomeReachAnimation(message.pawnMovementObj); else if (message.playerWon) {
          var rank = this.getRankForPid(message.pid);
          this.mActionController.runAction(ActionRankUpdate_1.ActionRankUpdate.Create(message.pid, message.index, rank));
          this.handlePlayerWon(this.mCurrentIndex);
          this.updateReceiptFetch(message.forceFetchReceipt);
          if (message.index == this.getMyIndex()) {
            this.mPlayerController.incrementPlayerTrophies(this.getPlayerTrophies(rank));
            1 != rank || this.isPrivateRoom() || this.mPersistantNodeComponent.GetLeaderBoardController().incrementGamesWonScore(1);
            var player = this.mPlayerController.getModel();
            if (player) {
              var coins = player.getCoins() + message.winMeta.rewards;
              this.mPersistantNodeComponent.getLeagueController().addLeaguePoints(message.winMeta.rewards);
              this.mPersistantNodeComponent.GetLeaderBoardController().incrementCoinsWonScore(message.winMeta.rewards);
              player.setCoins(coins);
              1 == message.winMeta.rank && player.incrementGameWon(this.isPrivateRoom(), this.getModel().getTableType());
              player.updateWinRate();
            }
          }
        }
        var prevIndex = this.getLastIndex();
        if (-1 != prevIndex && prevIndex != this.mCurrentIndex) {
          var delay = 300;
          message.isWasteTurn && (delay = 1e3);
          this.mActionController.runAction(ActionHideDiceForUser_1.ActionHideDiceForUser.Create(prevIndex, delay));
        }
        this.mGameModel.setIfWaitingForPowerup();
      };
      GameController.prototype.canShowDiceRoll = function(powerupUsed) {
        return !this.mGameModel.wasWaitingForPowerup() || powerupUsed;
      };
      GameController.prototype.processPawnMovementAck = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        this.mGameModel.processPawnProgress(message);
        this.checkAndUpdateRewardsMeta();
        this.stopTurn();
        if (this.mPawnHighlightAction) {
          this.mPawnHighlightAction.runResetPawnAction();
          this.mPawnHighlightAction = null;
        }
        message.pawnMovementObject && this.handlePawnMovement(message.pawnMovementObject);
        if (!message.playerWon && message.pawnMovementObject) this.checkAndShowPawnHomeReachAnimation(message.pawnMovementObject); else if (message.playerWon) {
          var rank = this.getRankForPid(message.pid);
          this.mActionController.runAction(ActionRankUpdate_1.ActionRankUpdate.Create(message.pid, message.index, rank));
          this.handlePlayerWon(message.index);
          this.updateReceiptFetch(message.forceFetchReceipt);
          if (message.index == this.getMyIndex()) {
            this.mPlayerController.incrementPlayerTrophies(this.getPlayerTrophies(rank));
            1 != rank || this.isPrivateRoom() || this.mPersistantNodeComponent.GetLeaderBoardController().incrementGamesWonScore(1);
            var player = this.mPlayerController.getModel();
            if (player) {
              var coins = player.getCoins() + message.winMeta.rewards;
              this.mPersistantNodeComponent.getLeagueController().addLeaguePoints(message.winMeta.rewards);
              this.mPersistantNodeComponent.GetLeaderBoardController().incrementCoinsWonScore(message.winMeta.rewards);
              player.setCoins(coins);
              1 == message.winMeta.rank && player.incrementGameWon(this.isPrivateRoom(), this.getModel().getTableType());
              player.updateWinRate();
            }
          }
        }
        this.startTurn();
        var prevIndex = this.getLastIndex();
        if (-1 != prevIndex && prevIndex != this.mCurrentIndex) {
          var delay = 300;
          this.mActionController.runAction(ActionHideDiceForUser_1.ActionHideDiceForUser.Create(prevIndex, delay));
        }
      };
      GameController.prototype.processNewUserJoin = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        this.mGameModel.processNewUserJoin(message);
      };
      GameController.prototype.setIndexOfNewPlayer = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        this.mGameModel.setIndexOfNewPlayer(message);
        this.mActionController.runAction(ActionInitializePlayer_1.ActionInitializePlayer.Create(message.index));
        this.mStateMachineController.onEvent(State_1.StateEvent.ROOM_UPDATE);
      };
      GameController.prototype.updatePlayerInfo = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        this.updatePlayerPic(message.index, message.snPhotoUrl);
        this.mActionController.runAction(ActionInitializePlayer_1.ActionInitializePlayer.Create(message.index));
      };
      GameController.prototype.processAutoPlayUpdate = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        this.mGameModel.processAutoPlayUpdate(message);
        var myPlayerId = this.getPlayerModel().getId();
        message.pid == myPlayerId && this.mActionController.runAction(ActionUpdateAutoPlayButton_1.ActionUpdateAutoPlayButton.Create(message.autoplay));
      };
      GameController.prototype.processBootCollect = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        this.mGameModel.processBootCollect(message);
        this.mPersistantNodeComponent.getFtueController().setAutoBotStatus(false);
        this.mGameModel.getTableType() == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_4P ? Helper_1.Helper.sendFBAnalytics("4p_game_start") : this.mGameModel.getTableType() == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_1V1 ? Helper_1.Helper.sendFBAnalytics("1v1_game_start") : this.mGameModel.getTableType() == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_PRIVATE && Helper_1.Helper.sendFBAnalytics("pvt_game_start");
        if (this.validateIndex(this.getMyIndex())) {
          var betAmount = this.mGameModel.getBetAmount();
          var player = this.mPlayerController.getModel();
          if (player) {
            var coins = 0;
            betAmount <= player.getCoins() && (coins = player.getCoins() - betAmount);
            player.setCoins(coins);
          }
        }
        this.isPrivateRoom() && (this.isPrivateRoomHost() ? this.mActionController.runAction(ActionShowInviteWaitingPopup_1.ActionShowInviteWaitingPopup.Create(false)) : this.mActionController.runAction(ActionShowWaitingForHostPopup_1.ActionShowWaitingForHostPopup.Create(false)));
        this.mActionController.runAction(ActionUpdateWaitingLayer_1.ActionUpdateWaitingLayer.Create(false, this.isPrivateRoom(), "", this.mGameModel.getPrivateRoomId()));
        this.startTurn();
        var leagueController = this.mPersistantNodeComponent.getLeagueController();
        var player = this.mPlayerController.getModel();
        if (player) {
          player.incrementGamesPlayed(this.isPrivateRoom());
          player.updateWinRate();
          if (!this.isPrivateRoom() && leagueController.isLeagueEnabled() && !leagueController.isInCooldown() && !player.canJoinLeagues()) {
            player.setCanJoinLeagues();
            leagueController.setLeagueUnlockForFirstTime();
          }
        }
        this.mPersistantNodeComponent.getLeagueController().retryAfterTimeOut(10);
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_BOOT_COLLECT);
      };
      GameController.prototype.processCountDownStart = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        this.mStateMachineController.onEvent(State_1.StateEvent.COUNTDOWN_START);
        this.mActionController.runAction(ActionPlayVibration_1.ActionPlayVibration.Create());
        this.mActionController.runAction(ActionUpdateWaitingLayer_1.ActionUpdateWaitingLayer.Create(true, false, "#GAME_STARTING_GAME"));
        this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.GAMESTART));
        var myPlayerId = this.getPlayerModel().getId();
        this.isPrivateRoom() && (this.isPrivateRoomHost() ? this.mActionController.runAction(ActionShowInviteWaitingPopup_1.ActionShowInviteWaitingPopup.Create(false)) : this.mActionController.runAction(ActionShowWaitingForHostPopup_1.ActionShowWaitingForHostPopup.Create(false)));
      };
      GameController.prototype.processClose = function(message) {
        this.mStateMachineController.onEvent(State_1.StateEvent.LEAVE_GAME_ACK);
        this.updateCoinsAndRewardsMeta(message.coins, message.currentBetAmount, message.currentTwoPlayerRewardsMeta, message.currentFourPlayerRewardsMeta);
        this.closeSocket();
      };
      GameController.prototype.processForceKick = function(message) {
        this.mStateMachineController.onEvent(State_1.StateEvent.FORCE_KICK, message.reason);
        this.updateCoinsAndRewardsMeta(message.coins, message.currentBetAmount, message.currentTwoPlayerRewardsMeta, message.currentFourPlayerRewardsMeta);
        this.closeSocket();
      };
      GameController.prototype.updateCoinsAndRewardsMeta = function(coins, betAmt, twoPlayerRewardMeta, fourPlayerRewardMeta) {
        var player = this.mPlayerController.getModel();
        if (player) {
          var mCoins = coins;
          player.isDailyBonusGranted() && (mCoins -= player.getDailyBonusAmount());
          player.setCoins(mCoins);
          player.setBetAndRewardInfo(betAmt, twoPlayerRewardMeta, fourPlayerRewardMeta);
          this.mPersistantNodeComponent.node.emit("updateLobbyCoinsHud", "dontAnimate");
        }
      };
      GameController.prototype.processLeave = function(message) {
        if (!this.mGameModel) return;
        if (this.mGameModel.getRoomState() != Game_1.RoomSate.STATE_ACTIVE) if (this.mGameModel.getRoomState() != Game_1.RoomSate.STATE_WAITING_FOR_PLAYERS) {
          var text = "#WAITING_FOR_PLAYERS";
          this.isPrivateRoom() && (text = "#WAITING_ROOM_ID_IG");
          var numberOfPlayers = this.mGameModel.getNumPlayers();
          var myPlayerId = this.getPlayerModel().getId();
          var socialVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_invitesend");
          if ((2 == socialVar || 3 == socialVar) && !this.getPlayerModel().getIsInviteTimerComplete() && numberOfPlayers <= 2 && this.isPrivateRoom() && myPlayerId == this.mGameModel.getPrivateRoomHostPid()) {
            this.mActionController.runAction(ActionShowInviteWaitingPopup_1.ActionShowInviteWaitingPopup.Create(true, true));
            this.mActionController.runAction(ActionEnablePrivateGameStart_1.ActionEnablePrivateGameStart.Create(false));
          }
          this.mActionController.runAction(ActionUpdateWaitingLayer_1.ActionUpdateWaitingLayer.Create(true, this.isPrivateRoom(), text, this.mGameModel.getPrivateRoomId()));
        } else this.mGameModel.getRoomState() != Game_1.RoomSate.STATE_COUNTDOWN && this.mActionController.runAction(ActionUpdateWaitingLayer_1.ActionUpdateWaitingLayer.Create(true, false, "#GAME_STARTING_GAME"));
        var player = this.mGameModel.getPlayerPidMap()[message.playerId];
        var index = player.getIndex();
        var rank = player.getRank();
        if (player) {
          var messageString = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#PLAYER_LEFT_THE_GAME_TEXT", {
            PLAYER_NAME: player.getName()
          });
          var chatMessage = new ChatModel_1.ChatModel(messageString, message.playerId, player.getName());
          chatMessage.mIsUserLeaveMessage = true;
          var index = this.mGameModel.getIndexOfPid(chatMessage.mPid);
          chatMessage.mIndex = index;
          var chatBlockCtrl = this.mPersistantNodeComponent.getChatBlockController();
          if (this.validateIndex(index) && !chatBlockCtrl.isChatBlocked() && !chatBlockCtrl.isPidBlocked(chatMessage.mPid)) {
            this.mGameModel.addChatMessageForHistory(chatMessage);
            this.mActionController.runAction(ActionShowChat_1.ActionShowChat.Create(chatMessage.mPid, index, chatMessage));
          }
        }
        this.mCurrentIndex == index && this.stopTurn();
        this.mGameModel.processUserLeave(message);
        if (!rank || rank <= 0) {
          this.mActionController.runAction(ActionUserLeaveUpdate_1.ActionUserLeaveUpdate.Create(message.playerId, index));
          this.mActionController.runAction(ActionResetOnPlayerWin_1.ActionResetOnPlayerWin.Create(index));
        }
        this.isGameOver() || this.startTurn(index);
      };
      GameController.prototype.processGameOver = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        var myPlayerId = this.getPlayerModel().getId();
        var player = this.mGameModel.getPlayerPidMap()[myPlayerId];
        var isMyGameOver = false;
        player && (isMyGameOver = player.getCurrentState() == Game_1.UserGameState.INACTIVE);
        this.mGameModel.processGameOver(message);
        this.checkAndUpdateRewardsMeta();
        this.stopTurn();
        if (message.powerupUsed) {
          this.updatePlayerGems();
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_POWERUP_USED);
        }
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_DICE_ROLLED, message.powerupCount > 0 ? "PowerupAvailable" : "");
        if (this.mPawnHighlightAction) {
          this.mPawnHighlightAction.runResetPawnAction();
          this.mPawnHighlightAction = null;
        }
        (!this.mGameModel.wasWaitingForPowerup() || message.powerupUsed) && message.index >= 0 && message.index < 4 && message.isInDiceRoll && this.mActionController.runAction(ActionDiceRoll_1.ActionDiceRoll.Create(message.index, message.rollValue));
        message.pawnMovementObj && this.handlePawnMovement(message.pawnMovementObj);
        this.checkAndShowRankLayers();
        this.handlePlayerWon(message.index);
        this.updateReceiptFetch(message.forceFetchReceipt);
        var rank = -1;
        if (player) {
          rank = player.getRank();
          if (!isMyGameOver) {
            1 != rank || this.isPrivateRoom() || this.mPersistantNodeComponent.GetLeaderBoardController().incrementGamesWonScore(1);
            this.mPlayerController.incrementPlayerTrophies(this.getPlayerTrophies(rank));
            var playerModel = this.mPlayerController.getModel();
            var rewardMeta = this.getRewardMeta();
            if (-1 != rank && playerModel && rewardMeta && rewardMeta[rank - 1]) {
              var coins = playerModel.getCoins() + rewardMeta[rank - 1];
              playerModel.setCoins(coins);
              this.mPersistantNodeComponent.getLeagueController().addLeaguePoints(rewardMeta[rank - 1]);
              this.mPersistantNodeComponent.GetLeaderBoardController().incrementCoinsWonScore(rewardMeta[rank - 1]);
            }
            1 == rank && playerModel.incrementGameWon(this.isPrivateRoom(), this.getModel().getTableType());
            playerModel.updateWinRate();
          }
        }
        this.mStatsController.count("popup", 1, "game_over", rank + "");
      };
      GameController.prototype.notInSameRoom = function(roomId) {
        if (null == this.getModel()) {
          this.mLogger.Log("Model does not exist");
          return true;
        }
        if (this.getModel().getRoomId() == roomId) return false;
        this.mLogger.Log("Room id mismatch " + this.getModel().getRoomId() + "  " + roomId);
        return true;
      };
      GameController.prototype.processChat = function(message) {
        if (this.notInSameRoom(message.roomId)) return;
        for (var i in message.messages) {
          var chatMessage = message.messages[i];
          var index = this.mGameModel.getIndexOfPid(chatMessage.mPid);
          chatMessage.mIndex = index;
          var chatBlockCtrl = this.mPersistantNodeComponent.getChatBlockController();
          if (this.validateIndex(index) && !chatBlockCtrl.isChatBlocked() && !chatBlockCtrl.isPidBlocked(chatMessage.mPid)) {
            this.mGameModel.addChatMessageForHistory(chatMessage);
            this.mActionController.runAction(ActionShowChat_1.ActionShowChat.Create(chatMessage.mPid, index, chatMessage));
          }
        }
      };
      GameController.prototype.handlePawnMovement = function(pawnMovementObject) {
        if (this.mPawnHighlightAction) {
          this.mPawnHighlightAction.runResetPawnAction();
          this.mPawnHighlightAction = null;
        }
        if (pawnMovementObject.pawnProgressMeta && pawnMovementObject.pawnProgressMeta.length > 0) {
          var progress = pawnMovementObject.pawnProgressMeta[0];
          var movementAction = ActionUpdatePawnPosition_1.ActionUpdatePawnPosition.Create(progress.userIndex, progress.pawnId, progress.movementArray, progress.finalPos);
          this.mActionController.runAction(movementAction);
        }
        if (pawnMovementObject.captureMeta && pawnMovementObject.captureMeta.length > 0) {
          var capture = pawnMovementObject.captureMeta[0];
          var killAnimation = ActionUpdateKilledPawnPosition_1.ActionUpdateKilledPawnPosition.Create(capture.userIndex, capture.pawnId, capture.movementArray, -1);
          this.mActionController.runAction(killAnimation);
        }
      };
      GameController.prototype.getPawnIndexes = function(pawnHighlight) {
        var pawnIndexes = [];
        for (var key in pawnHighlight) if (pawnHighlight.hasOwnProperty(key)) {
          pawnIndexes = pawnHighlight[key];
          break;
        }
        return pawnIndexes;
      };
      GameController.prototype.handlePawnHighlight = function(pawnHighlight) {
        if (this.mPawnHighlightAction) {
          this.mPawnHighlightAction.runResetPawnAction();
          this.mPawnHighlightAction = null;
        }
        var myPlayerId = this.getPlayerModel().getId();
        var player = this.mGameModel.getPlayerPidMap()[myPlayerId];
        if (!player) return;
        if (this.mCurrentIndex == this.mIndexShift && player.getIsLastDiceRoll()) {
          var pawnIndexes = this.getPawnIndexes(pawnHighlight);
          this.mHighlightedPawns = pawnIndexes;
          this.mPawnHighlightAction = ActionDoPawnHighlight_1.ActionDoPawnHighlight.Create(this.mCurrentIndex, pawnIndexes);
          this.mActionController.runAction(this.mPawnHighlightAction);
        }
      };
      GameController.prototype.stopTurn = function() {
        if (this.mTurnAction) {
          this.mTurnAction.stopAction();
          this.mTurnAction = null;
        }
        this.mCurrentIndex == this.getMyIndex() && this.mActionController.runAction(ActionShowPointerAnimation_1.ActionShowPointerAnimation.Create(true));
      };
      GameController.prototype.startTurn = function(index) {
        void 0 === index && (index = -1);
        if (this.isGameOver() || -1 != index && index != this.mCurrentIndex) return;
        var prevIndex = this.mCurrentIndex;
        this.mCurrentIndex = this.mGameModel.getCurrentIndex();
        var isRepeatTurn = prevIndex == this.mCurrentIndex;
        var myPlayerId = this.getPlayerModel().getId();
        var player = this.mGameModel.getPlayerPidMap()[myPlayerId];
        if (-1 === this.mCurrentIndex) return;
        if (this.mCurrentIndex != this.getMyIndex() || this.isAutoPlay()) {
          this.mTurnAction = ActionUpdateTurn_1.ActionUpdateTurn.Create(isRepeatTurn);
          this.mActionController.runAction(this.mTurnAction);
        } else if (player && !player.getIsLastDiceRoll()) {
          this.mTurnAction = ActionUpdateTurn_1.ActionUpdateTurn.Create(isRepeatTurn);
          this.mActionController.runAction(this.mTurnAction);
          this.mActionController.runAction(ActionShowPointerAnimation_1.ActionShowPointerAnimation.Create());
          this.mActionController.runAction(ActionPlayVibration_1.ActionPlayVibration.Create(true));
        } else {
          this.mTurnAction = ActionUpdateTurn_1.ActionUpdateTurn.Create(isRepeatTurn, true);
          this.mActionController.runAction(this.mTurnAction);
        }
      };
      GameController.prototype.getMyIndex = function() {
        return this.mIndexShift;
      };
      GameController.prototype.getHighlightedPawns = function() {
        return this.mHighlightedPawns;
      };
      GameController.prototype.shouldListenClicks = function() {
        return this.mShouldBoardListenToClicks;
      };
      GameController.prototype.setListenBoardClicks = function(ShouldBoardListenToClicks) {
        this.mShouldBoardListenToClicks = ShouldBoardListenToClicks;
      };
      GameController.prototype.isAutoPlay = function() {
        var myPlayerId = this.getPlayerModel().getId();
        var player = this.mGameModel.getPlayerPidMap()[myPlayerId];
        if (player && player.getAutoPlay()) return true;
        return false;
      };
      GameController.prototype.progressPawn = function(index) {
        if (-1 != index) {
          var roomId = this.mGameModel.getRoomId();
          var instanceId = this.mGameModel.getInstanceId();
          var pawnIndex = index;
          var userIndex = this.getMyIndex();
          var outMessage = new OutMessages_1.PawnPress(roomId, instanceId, userIndex, pawnIndex);
          this.sendMessage(outMessage);
          this.mHighlightedPawns = [];
          this.mShouldBoardListenToClicks = false;
          if (this.mPawnHighlightAction) {
            this.mPawnHighlightAction.runResetPawnAction();
            this.mPawnHighlightAction = null;
          }
        }
      };
      GameController.prototype.sendProfileUpdate = function(sn_photo) {
        var roomId = this.mGameModel.getRoomId();
        var instanceId = this.mGameModel.getInstanceId();
        var outMessage = new OutMessages_1.PlayerInfoUpdatePacket(roomId, instanceId, sn_photo);
        this.sendMessage(outMessage);
      };
      GameController.prototype.sendReconnectPacket = function() {
        this.mLogger.Log("Sending reconnect packet");
        var playerId = this.getPlayerModel().getId();
        var sessionKey = this.getModel().getSessionKey();
        var roomId = this.getModel().getRoomId();
        var instanceId = this.getModel().getInstanceId();
        var outMessage = new OutMessages_1.Reconnect(playerId, sessionKey, roomId, instanceId);
        this.sendMessage(outMessage);
      };
      GameController.prototype.showReconnecting = function() {
        this.mActionController.runAction(ActionUpdateWaitingLayer_1.ActionUpdateWaitingLayer.Create(true, false, "#RECONNECTING"));
        this.mActionController.runAction(ActionShowQuickChatPopup_1.ActionShowQuickChatPopup.Create(true));
        this.mActionController.runAction(ActionForceResetDice_1.ActionForceResetDice.Create());
        this.mActionController.runAction(ActionShowPointerAnimation_1.ActionShowPointerAnimation.Create(true));
        this.isPrivateRoom() && (this.isPrivateRoomHost() ? this.mActionController.runAction(ActionShowInviteWaitingPopup_1.ActionShowInviteWaitingPopup.Create(false)) : this.mActionController.runAction(ActionShowWaitingForHostPopup_1.ActionShowWaitingForHostPopup.Create(false)));
      };
      GameController.prototype.processHeartBeat = function(message) {
        if (this.mGameModel.getRoomId() != message.roomId) return;
      };
      GameController.prototype.clearReconnectInterval = function() {
        if (this.mReconnectInterval) {
          clearInterval(this.mReconnectInterval);
          this.mReconnectInterval = null;
        }
      };
      GameController.prototype.checkHeartBeat = function() {
        this.mNumHeartBeatsMissed++;
        if (this.mNumHeartBeatsMissed >= MAX_HEARTBEAT_MISSES) {
          this.clearReconnectInterval();
          this.triggerReconnectFlow();
        }
      };
      GameController.prototype.gameSceneDestoyed = function() {
        this.getPlayerModel().setPreviousGamesPlayedCount();
        this.clearReconnectInterval();
        this.mPlayerController.getModel().resetSkipRoomId();
      };
      GameController.prototype.setReconnectInterval = function() {
        this.clearReconnectInterval();
        this.mReconnectInterval = setInterval(this.checkHeartBeat.bind(this), HEARTBEAT_INTERVAL);
      };
      GameController.prototype.getGameEndMeta = function() {
        var model = this.getModel();
        if (model) return model.getGameEndMeta();
        return null;
      };
      GameController.prototype.getPlayerTrophies = function(rank) {
        var trophiesMeta = this.getTrophiesMeta();
        if (rank < 1) return 0;
        return trophiesMeta[rank];
      };
      GameController.prototype.getTrophiesMeta = function() {
        var model = this.getModel();
        if (model) return model.getTrophiesMeta();
        return null;
      };
      GameController.prototype.getParticipatedPlayers = function() {
        var model = this.getModel();
        if (model) return model.getParticipatedUsers();
        return null;
      };
      GameController.prototype.getGamePlayerModel = function(pid) {
        var model = this.getModel();
        if (model) {
          var playerMap = model.getPlayerPidMap();
          if (playerMap) return playerMap[pid];
        }
        return null;
      };
      GameController.prototype.isPrivateRoom = function() {
        var model = this.getModel();
        if (model) return model.isPrivateTable();
        return false;
      };
      GameController.prototype.isGameOver = function() {
        var model = this.getModel();
        if (model) return model.isGameOver();
        return false;
      };
      GameController.prototype.is4Player = function() {
        var model = this.getModel();
        if (model) return model.is4Player();
        return false;
      };
      GameController.prototype.getRoomId = function() {
        var model = this.getModel();
        if (model) return model.getRoomId();
        return "";
      };
      GameController.prototype.checkAndShowPawnHomeReachAnimation = function(pawnMovementObj) {
        var showAnim = false;
        if (pawnMovementObj) for (var i = 0; i < pawnMovementObj.pawnProgressMeta.length; i++) if (-2 == pawnMovementObj.pawnProgressMeta[i].finalPos) {
          showAnim = true;
          break;
        }
        showAnim && this.mActionController.runAction(ActionPlayHomeReachAnim_1.ActionPlayHomeReachAnim.Create());
      };
      GameController.prototype.setInvitePopupOpen = function(isOpen) {
        this.mIsInvitePopupOpen = isOpen;
      };
      GameController.prototype.wasInvitePopupOpen = function() {
        return this.mIsInvitePopupOpen;
      };
      GameController.prototype.getLastIndex = function() {
        if (this.mGameModel) return this.mGameModel.getLastIndex();
        return -1;
      };
      GameController.prototype.handlePlayerWon = function(index) {
        var myPlayerId = this.getPlayerModel().getId();
        var player = this.mGameModel.getPlayerPidMap()[myPlayerId];
        this.mActionController.runAction(ActionPlayWinAnimation_1.ActionPlayWinAnimation.Create());
        this.mActionController.runAction(ActionShowResultsPopup_1.ActionShowResultsPopup.Create(1e3));
      };
      GameController.prototype.isMyGameOver = function() {
        if (this.mGameModel) {
          var playerId = this.getPlayerModel().getId();
          var player = this.mGameModel.getPlayerPidMap()[playerId];
          if (player && player.getRank()) return -1 != player.getRank();
        }
        return false;
      };
      GameController.prototype.isPrivateRoomHost = function() {
        if (!this.isPrivateRoom()) return false;
        var playerModel = this.getPlayerModel();
        if (!playerModel) return false;
        var myPlayerId = playerModel.getId();
        return myPlayerId == this.mGameModel.getPrivateRoomHostPid();
      };
      GameController.prototype.getCurrentIndex = function() {
        return this.mCurrentIndex;
      };
      GameController.prototype.retryReconnect = function() {
        this.mRetryCount++;
        var self = this;
        if (this.mConnection.isConnectingWs()) return;
        this.showReconnecting();
        if (this.mRetryCount >= this.mMaxRetryCount && !this.mReconnectPopupShown) {
          this.mReconnectPopupShown = true;
          this.mActionController.runAction(ActionShowReconnectionPopup_1.ActionShowReconnectionPopup.Create(0));
        }
        setTimeout(function() {
          self.connectToGameServer(true);
        }, 7e3);
      };
      GameController.prototype.resetReconnectTries = function() {
        this.mRetryCount = 0;
        this.mReconnectPopupShown = false;
      };
      GameController.prototype.hideChatPopup = function() {
        this.mActionController.runAction(ActionShowQuickChatPopup_1.ActionShowQuickChatPopup.Create(true));
      };
      GameController.prototype.showInviteWaitingPopup = function() {
        this.mActionController.runAction(ActionShowInviteWaitingPopup_1.ActionShowInviteWaitingPopup.Create());
      };
      GameController.prototype.enablePrivateGameStart = function(enable) {
        this.mActionController.runAction(ActionEnablePrivateGameStart_1.ActionEnablePrivateGameStart.Create(enable));
      };
      GameController.prototype.showExitConfirmationPopup = function() {
        this.mActionController.runAction(ActionShowExitConfirmationPopup_1.ActionShowExitConfirmationPopup.Create());
      };
      GameController.prototype.showWaitingForHostPopup = function() {
        this.mActionController.runAction(ActionShowWaitingForHostPopup_1.ActionShowWaitingForHostPopup.Create(true));
      };
      GameController.prototype.Reconnecting = function() {
        return this.isReconnecting;
      };
      GameController.prototype.getRankForPid = function(pid) {
        var player = this.mGameModel.getPlayerPidMap()[pid];
        if (player) return player.getRank();
        return -1;
      };
      GameController.prototype.OnInviteComplete = function(data) {
        this.mStateMachineController.onEvent(State_1.StateEvent.CLOSED_INVITE_POPUP);
        var contextId = FBInstant.context.getID();
        var socialVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_invitesend");
        var playerId = this.mStateMachineController.getPlayerController().getFbId();
        var timeTaken = Math.round(Date.now() / 1e3) - this.mInviteFriendStartTime;
        this.mStatsController.count("chatbot", timeTaken, "friend_invite", "send", playerId, contextId, this.mGameModel.getPrivateRoomId());
        var playerName = this.mPlayerController.getPlayerName();
        var playerPic = this.mPlayerController.getPhotoUrl();
        var playerReferralCode = this.mPlayerController.getModel().getPlayerReferralCode();
        Helper_1.Helper.sendInviteToPlayer(playerName, playerPic, this.mGameModel.getPrivateRoomId(), this.mPlayerController.getPlayerId(), "", playerReferralCode, this.OnInviteSendSuccess.bind(this), this.OnInviteSendError.bind(this));
        2 != socialVar && 3 != socialVar || this.mGameModel && this.mGameModel.getRoomState() < Game_1.RoomSate.STATE_COUNTDOWN && this.showInviteWaitingPopup();
        this.sendInviteMessage(contextId);
      };
      GameController.prototype.sendInviteMessage = function(contextId) {
        var roomId = this.mGameModel.getRoomId();
        var myPlayerId = this.getPlayerModel().getId();
        var outMessage = new OutMessages_1.InvitePacket(myPlayerId, roomId, contextId);
        this.sendMessage(outMessage);
      };
      GameController.prototype.OnInviteSendSuccess = function(roomId) {
        Helper_1.Helper.sendFBAnalytics("friend_invite");
        this.mStatsController.count("chatbot", 1, "friend_invite", "send_success", roomId);
      };
      GameController.prototype.OnInviteSendError = function(roomId) {
        this.mStatsController.count("chatbot", 1, "friend_invite", "send_fail", roomId);
      };
      GameController.prototype.OnInviteError = function(reason) {
        this.mStatsController.count("chatbot", 1, "friend_invite", "fail", reason);
      };
      GameController.prototype.OnInviteClosed = function() {
        this.mStateMachineController.onEvent(State_1.StateEvent.CLOSED_INVITE_POPUP);
        var socialVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_invitesend");
        2 != socialVar && 3 != socialVar || this.mGameModel && this.mGameModel.getRoomState() < Game_1.RoomSate.STATE_COUNTDOWN && this.showInviteWaitingPopup();
      };
      GameController.prototype.checkAndShowRankLayers = function() {
        if (this.getGameEndMeta()) {
          var gameEndMeta = this.getGameEndMeta();
          for (var i in gameEndMeta) {
            var meta = gameEndMeta[i];
            if (meta) {
              var player = this.mGameModel.getPlayerPidMap()[meta.p];
              if (player) {
                var rank = this.getRankForPid(meta.p);
                -1 != player.getIndex() && this.mActionController.runAction(ActionRankUpdate_1.ActionRankUpdate.Create(meta.p, player.getIndex(), rank));
              }
            }
          }
        }
      };
      GameController.prototype.sendSocialMessage = function(message) {
        if (!this.mGameModel) return;
        var roomId = this.mGameModel.getRoomId();
        var messages = [];
        messages.push(message);
        var outMessage = new OutMessages_1.SocialOutPacket(roomId, messages);
        this.sendMessage(outMessage);
      };
      GameController.prototype.sendSpecialMessage = function(index, isEmoji) {
        var message = "";
        message = isEmoji ? "em:" : "tt:";
        message += index;
        this.sendSocialMessage(message);
        this.mStatsController.count("chat", 1, "preset", message, "", "", this.getInstanceId());
      };
      GameController.prototype.sendCustomMessage = function(text) {
        var message = text;
        this.sendSocialMessage(message);
        this.mStatsController.count("chat", 1, "custom", "", "", "", this.getInstanceId());
      };
      GameController.prototype.validateIndex = function(index) {
        if (index >= 0 && index < 4) return true;
        return false;
      };
      GameController.prototype.getInstanceId = function() {
        var instaneId = "";
        this.mGameModel && (instaneId = this.mGameModel.getInstanceId());
        return instaneId;
      };
      GameController.prototype.getRewardMeta = function() {
        if (this.mGameModel) {
          var meta = this.mGameModel.getRewardMeta();
          if (meta) return meta;
        }
        return [];
      };
      GameController.prototype.checkAndUpdateRewardsMeta = function() {
        if (this.mGameModel) {
          var gameEndMeta = this.mGameModel.getGameEndMeta();
          if (gameEndMeta) {
            var player = this.getPlayerModel();
            if (player) {
              var myPlayerId = player.getId();
              for (var i in gameEndMeta) {
                var meta = gameEndMeta[i];
                if (meta.p == myPlayerId) {
                  var rewardMeta = meta.rwm;
                  rewardMeta && this.mGameModel.updateRewardsMeta(rewardMeta);
                  player.setBetAndRewardInfo(meta.nba, meta.ntprm, meta.nfprm);
                }
              }
            }
          }
        }
      };
      GameController.prototype.processSurveyPacket = function(message) {
        this.mPersistantNodeComponent.GetSurveyController().setPopupData(message, SurveyController_1.SCENE_TYPE.GAME);
      };
      GameController.prototype.initFriendInviteStartTime = function() {
        this.mInviteFriendStartTime = Math.round(Date.now() / 1e3);
      };
      GameController.prototype.updateReceiptFetch = function(fetchObj) {
        this.getModel().setReceiptStatus(fetchObj && fetchObj[this.getPlayerModel().getId()]);
      };
      GameController.prototype.updatePlayerGems = function() {
        var index = this.getMyIndex();
        var gameplayer = this.getModel().getPlayerIndexMap()[index];
        if (!gameplayer) return;
        this.mPlayerController.getModel().setGems(gameplayer.getGemsAvailable());
        this.mPersistantNodeComponent.node.emit("updateGameGemsHud", {
          timer: .8
        });
      };
      GameController.prototype.updatePlayerPic = function(index, snProfilePic) {
        var gameplayer = this.getModel().getPlayerIndexMap()[index];
        if (!gameplayer) return;
        gameplayer.setPhotoUrl(snProfilePic);
      };
      GameController.prototype.setNewGamePressed = function(value) {
        this.mNewGame = value;
      };
      GameController.prototype.isNewGamePressed = function() {
        return this.mNewGame;
      };
      GameController.prototype.updateSixCount = function() {
        this.mGameModel.updateSixCount();
      };
      GameController.prototype.getSixCount = function() {
        return this.mGameModel.getSixCount();
      };
      GameController.prototype.hideFtue = function() {
        this.mActionController.runAction(ActionHideFtue_1.ActionHideFtue.Create());
      };
      GameController.prototype.changeGamePowerupSettings = function() {
        var playerId = this.getPlayerModel().getId();
        var outMessage = new OutMessages_1.UpdateDetails(playerId, this.mPersistantNodeComponent.GetPlayerController().getModel().getPowerupSettings());
        this.sendMessage(outMessage);
      };
      GameController.prototype.matchPowerupSettings = function(powerupEnabled) {
        this.mPlayerController.getModel().getPowerupSettings() != powerupEnabled && this.changeGamePowerupSettings();
      };
      GameController.prototype.isWSConnected = function() {
        return null != this.mConnection && !this.mConnection.isConnectingWs() && this.mConnection.isReadyWs();
      };
      return GameController;
    }();
    exports.GameController = GameController;
    cc._RF.pop();
  }, {
    "../Actions/ActionAddSafeLocations": "ActionAddSafeLocations",
    "../Actions/ActionDiceRoll": "ActionDiceRoll",
    "../Actions/ActionDoPawnHighlight": "ActionDoPawnHighlight",
    "../Actions/ActionEnablePrivateGameStart": "ActionEnablePrivateGameStart",
    "../Actions/ActionForceResetDice": "ActionForceResetDice",
    "../Actions/ActionFtueMovePawnOut": "ActionFtueMovePawnOut",
    "../Actions/ActionHideDiceForUser": "ActionHideDiceForUser",
    "../Actions/ActionHideFtue": "ActionHideFtue",
    "../Actions/ActionInitializePlayer": "ActionInitializePlayer",
    "../Actions/ActionPlayHomeReachAnim": "ActionPlayHomeReachAnim",
    "../Actions/ActionPlaySound": "ActionPlaySound",
    "../Actions/ActionPlayVibration": "ActionPlayVibration",
    "../Actions/ActionPlayWinAnimation": "ActionPlayWinAnimation",
    "../Actions/ActionRankUpdate": "ActionRankUpdate",
    "../Actions/ActionResetOnPlayerWin": "ActionResetOnPlayerWin",
    "../Actions/ActionShowChat": "ActionShowChat",
    "../Actions/ActionShowExitConfirmationPopup": "ActionShowExitConfirmationPopup",
    "../Actions/ActionShowInviteWaitingPopup": "ActionShowInviteWaitingPopup",
    "../Actions/ActionShowPointerAnimation": "ActionShowPointerAnimation",
    "../Actions/ActionShowQuickChatPopup": "ActionShowQuickChatPopup",
    "../Actions/ActionShowReconnectionPopup": "ActionShowReconnectionPopup",
    "../Actions/ActionShowResultsPopup": "ActionShowResultsPopup",
    "../Actions/ActionShowWaitingForHostPopup": "ActionShowWaitingForHostPopup",
    "../Actions/ActionUpdateAutoPlayButton": "ActionUpdateAutoPlayButton",
    "../Actions/ActionUpdateGameState": "ActionUpdateGameState",
    "../Actions/ActionUpdateKilledPawnPosition": "ActionUpdateKilledPawnPosition",
    "../Actions/ActionUpdatePawnPosition": "ActionUpdatePawnPosition",
    "../Actions/ActionUpdateTurn": "ActionUpdateTurn",
    "../Actions/ActionUpdateWaitingLayer": "ActionUpdateWaitingLayer",
    "../Actions/ActionUserLeaveUpdate": "ActionUserLeaveUpdate",
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../Generic/Message": "Message",
    "../Generic/Queue": "Queue",
    "../Network/InMessages": "InMessages",
    "../Network/MessageFactory": "MessageFactory",
    "../Network/OutMessages": "OutMessages",
    "../models/ChatModel": "ChatModel",
    "../models/Game": "Game",
    "../states/State": "State",
    "./ExperiementController": "ExperiementController",
    "./LocalizationController": "LocalizationController",
    "./SurveyController": "SurveyController"
  } ],
  GamePlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec4b1PObDtMT7RoDWfYJAGn", "GamePlayer");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Game_1 = require("./Game");
    var Constants_1 = require("../Constants");
    var GamePlayer = function() {
      function GamePlayer() {
        this.mLeague = -1;
      }
      GamePlayer.prototype.initWithPlayerInfo = function(data) {
        void 0 != data.pid && (this.mPid = data.pid);
        void 0 != data.snuid && (this.mSnuid = data.snuid);
        void 0 != data.snid && (this.mSnid = data.snid);
        void 0 != data.index && (this.mIndex = data.index);
        void 0 != data.name && (this.mName = data.name);
        void 0 != data.avt && (this.mAvatar = data.avt);
        void 0 != data.level && (this.mLevel = data.level);
        void 0 != data.pawnHighLightMap && (this.mHighlight = data.pawnHighLightMap);
        void 0 != data.pawnIndexes && (this.mPawnIndex = data.pawnIndexes);
        void 0 != data.dice && (this.mDiceDealt = data.dice);
        void 0 != data.clr && (this.mColor = data.clr);
        void 0 != data.rolling && (this.mIsLastDiceRoll = !data.rolling);
        void 0 != data.amountBet && (this.mAamountBet = data.amountBet);
        void 0 != data.pawnAvatarId && (this.mPawnAvatarId = data.pawnAvatarId);
        void 0 != data.boardId && (this.mBoardId = data.boardId);
        void 0 != data.autoplay && (this.mAutoplay = data.autoplay);
        void 0 != data.queuedTurns && (this.mQueuedTurns = data.queuedTurns);
        void 0 != data.ctr && (this.mCountry = data.ctr);
        void 0 != data.snavt && (this.mSnAvatarId = data.snavt);
        void 0 != data.sdp && (this.mSimulateDisablePerc = data.sdp);
        void 0 != data.sixRolledInTurn && (this.mSixRolledInTurn = data.sixRolledInTurn);
        void 0 != data.state && (this.mState = data.state);
        void 0 != data.gems && (this.mGems = data.gems);
        void 0 != data.fbPhotoUrl && (this.mProfilePicUrl = data.fbPhotoUrl);
        void 0 != data.cashInHand && (this.mCashInHand = data.cashInHand);
        void 0 != data.trophies && (this.mTrophies = data.trophies);
        void 0 != data.profileInfo && (this.mProfileInfo = data.profileInfo);
        void 0 != data.powerupCount && (this.mPowerupCount = data.powerupCount);
        void 0 != data.powerupPrice && (this.mPowerupPrice = data.powerupPrice);
        void 0 != data.league && (this.mLeague = data.league);
      };
      GamePlayer.prototype.initWithRoomJoin = function(message) {
        this.mPid = message.pid;
        this.mSnuid = message.snuid;
        this.mSnid = message.snid;
        this.mIndex = -1;
        this.mName = message.name;
        this.mAvatar = message.avt;
        this.mLevel = message.level;
        this.mHighlight = {};
        this.mPawnIndex = message.progress;
        this.mDiceDealt = [];
        this.mColor = message.color;
        this.mIsLastDiceRoll = false;
        this.mAamountBet = 0;
        this.mPawnAvatarId = message.pawnAvatarId;
        this.mAutoplay = false;
        this.mQueuedTurns = -1;
        this.mCountry = message.country;
        this.mSnAvatarId = message.snAvt;
        this.mGems = message.gems;
        this.mProfilePicUrl = message.snPhotoUrl;
        this.mRank = -1;
        this.mTrophies = message.trophies;
        this.mProfileInfo = message.profileInfo;
        this.mPowerupCount = 0;
        this.mPowerupPrice = 0;
        this.mLeague = message.league;
      };
      GamePlayer.prototype.getPlayerTrophies = function() {
        return this.mTrophies;
      };
      GamePlayer.prototype.updateDiceRoll = function(diceRoll, isLastRoll, rollIndex, pawnHighlight, pawnMovementObject, powerupCount, powerupPrice, gemsAvail, powerupTime, powerupUsed) {
        this.mIsLastDiceRoll = isLastRoll;
        this.lastDiceRollValue = diceRoll;
        this.mDiceRollIndex = rollIndex;
        this.mPawnMovementObject = pawnMovementObject;
        this.mHighlight = pawnHighlight;
        this.mPowerupPrice = powerupPrice;
        this.mGems = gemsAvail;
        this.mPowerupTime = powerupTime;
        powerupCount > 0 && (this.mPowerupCount = powerupCount);
        powerupUsed && this.mPowerupCount--;
        this.mPowerupCount < 0 && (this.mPowerupCount = 0);
      };
      GamePlayer.prototype.updatePlayerWon = function(winMeta, tableType) {
        if (winMeta.rank) {
          1 == winMeta.rank && this.updateGamesWonForProfile(tableType);
          this.mRank = winMeta.rank;
        }
        this.mReward = winMeta.rewards;
        this.mCashInHand += winMeta.rewards;
        this.mState = Game_1.UserGameState.INACTIVE;
      };
      GamePlayer.prototype.updatePawnProgress = function(pawnMovementObject) {
        this.mPawnMovementObject = pawnMovementObject;
      };
      GamePlayer.prototype.updateGamesWonForProfile = function(tableType) {
        if (tableType == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_PRIVATE) return;
        this.mProfileInfo.mGamesWon++;
        (tableType = Constants_1.constants.TABLE_TYPE.TABLE_TYPE_1V1) ? this.mProfileInfo.mTwoPlayerGamesWon++ : (tableType = Constants_1.constants.TABLE_TYPE.TABLE_TYPE_4P) && this.mProfileInfo.mFourPlayerGamesWon++;
        this.mProfileInfo.mWinRate = this.mProfileInfo.mGamesWon / this.mProfileInfo.mGamesPlayed;
      };
      GamePlayer.prototype.updateLeave = function() {
        this.mIndex = -1;
      };
      GamePlayer.prototype.getId = function() {
        return this.mPid;
      };
      GamePlayer.prototype.getIndex = function() {
        return this.mIndex;
      };
      GamePlayer.prototype.getPawnPositions = function() {
        return this.mPawnIndex;
      };
      GamePlayer.prototype.getPhotoUrl = function() {
        return this.mProfilePicUrl;
      };
      GamePlayer.prototype.getName = function() {
        return this.mName;
      };
      GamePlayer.prototype.getIsLastDiceRoll = function() {
        return this.mIsLastDiceRoll;
      };
      GamePlayer.prototype.getLastDiceRollValue = function() {
        return this.lastDiceRollValue;
      };
      GamePlayer.prototype.getDiceRollIndex = function() {
        return this.mDiceRollIndex;
      };
      GamePlayer.prototype.getRank = function() {
        if (this.mRank) return this.mRank;
        return -1;
      };
      GamePlayer.prototype.setDiceDealt = function(diceDealt) {
        this.mDiceDealt = diceDealt;
      };
      GamePlayer.prototype.setDiceRollIndex = function(index) {
        this.mDiceRollIndex = index;
      };
      GamePlayer.prototype.setLastDiceRoll = function(lastDiceRoll) {
        this.mIsLastDiceRoll = lastDiceRoll;
      };
      GamePlayer.prototype.setIndex = function(index) {
        this.mIndex = index;
      };
      GamePlayer.prototype.setAutoPlay = function(autoPlay) {
        this.mAutoplay = autoPlay;
      };
      GamePlayer.prototype.getAutoPlay = function() {
        return this.mAutoplay;
      };
      GamePlayer.prototype.hasParticipated = function() {
        return this.mState == Game_1.UserGameState.ACTIVE;
      };
      GamePlayer.prototype.updateBootCollect = function(tableType) {
        this.mState = Game_1.UserGameState.ACTIVE;
        if (tableType != Constants_1.constants.TABLE_TYPE.TABLE_TYPE_PRIVATE) {
          this.mProfileInfo.mGamesPlayed++;
          this.mProfileInfo.mWinRate = this.mProfileInfo.mGamesWon / this.mProfileInfo.mGamesPlayed;
        }
      };
      GamePlayer.prototype.setRank = function(rank, tableType) {
        1 != this.mRank && 1 == rank && this.updateGamesWonForProfile(tableType);
        this.mRank = rank;
      };
      GamePlayer.prototype.getPawnHighlightMeta = function() {
        return this.mHighlight;
      };
      GamePlayer.prototype.getCurrentState = function() {
        return this.mState;
      };
      GamePlayer.prototype.getCountry = function() {
        return this.mCountry;
      };
      GamePlayer.prototype.getProfileInfo = function() {
        this.mProfileInfo && (this.mProfileInfo.mLeague = this.mLeague);
        return this.mProfileInfo;
      };
      GamePlayer.prototype.getPowerupPrice = function() {
        return this.mPowerupPrice;
      };
      GamePlayer.prototype.getPowerupCount = function() {
        return this.mPowerupCount;
      };
      GamePlayer.prototype.getGemsAvailable = function() {
        return this.mGems;
      };
      GamePlayer.prototype.getPowerupTime = function() {
        return this.mPowerupTime;
      };
      GamePlayer.prototype.getLeague = function() {
        return this.mLeague;
      };
      GamePlayer.prototype.setPhotoUrl = function(profilePicUrl) {
        this.mProfilePicUrl = profilePicUrl;
      };
      return GamePlayer;
    }();
    exports.GamePlayer = GamePlayer;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./Game": "Game"
  } ],
  GameRepositionComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aef0ezqvpRIRIJFRaaJ/ekc", "GameRepositionComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameRepositionComponent = function(_super) {
      __extends(GameRepositionComponent, _super);
      function GameRepositionComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.gameBoard = null;
        _this.WaitingPanelNode = null;
        _this.pawnsContainer = null;
        _this.topHudNode = null;
        _this.profilesContainerNode = null;
        _this.myPlayerNode = null;
        _this.chatPopup = null;
        _this.gameContentsNode = null;
        _this.mPersistantComponent = null;
        _this.mLogger = null;
        return _this;
      }
      GameRepositionComponent.prototype.onLoad = function() {
        this.mLogger = new Logger_1.Logger("GameComponent", true);
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        var isIpad = (cc.sys.isIpad || cc.sys.ipadRes) && cc.sys.isMobile;
        var deltaY = cc.director.getVisibleSize().height - 960;
        var deltaX = cc.director.getVisibleSize().width - 640;
        var chatOffset = 50;
        if (deltaX > 0 || isIpad) {
          var scale = (1.05 * cc.director.getVisibleSize().width + deltaX) / cc.director.getVisibleSize().width;
          this.topHudNode.setScale(scale);
        }
        isIpad && (chatOffset = Math.max(0, chatOffset - .5 * deltaY));
        var yoffset = this.topHudNode.getContentSize().height * this.topHudNode.getScale() * .5 - chatOffset;
        this.gameBoard.setPositionY(-yoffset);
        this.WaitingPanelNode.setPositionY(-yoffset);
        this.pawnsContainer.setPositionY(-yoffset);
        this.profilesContainerNode.setPositionY(-yoffset);
        this.myPlayerNode.setPositionY(-yoffset);
        this.chatPopup.setPositionY(this.chatPopup.getPositionY() - yoffset);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_KEYBOARD_OPEN, this.onKeyboardOpen, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_FEEDBACK_CLOSE, this.onKeyboardClose, this);
      };
      GameRepositionComponent.prototype.start = function() {};
      GameRepositionComponent.prototype.onKeyboardOpen = function() {
        var isIos = cc.sys.os == cc.sys.OS_IOS && cc.sys.isMobile;
        isIos && this.gameContentsNode.setPositionY(this.gameContentsNode.getPositionY() - cc.director.getVisibleSize().height / 2);
      };
      GameRepositionComponent.prototype.onKeyboardClose = function() {
        var isIos = cc.sys.os == cc.sys.OS_IOS && cc.sys.isMobile;
        isIos && this.gameContentsNode.setPositionY(this.gameContentsNode.getPositionY() + cc.director.getVisibleSize().height / 2);
      };
      __decorate([ property(cc.Node) ], GameRepositionComponent.prototype, "gameBoard", void 0);
      __decorate([ property(cc.Node) ], GameRepositionComponent.prototype, "WaitingPanelNode", void 0);
      __decorate([ property(cc.Node) ], GameRepositionComponent.prototype, "pawnsContainer", void 0);
      __decorate([ property(cc.Node) ], GameRepositionComponent.prototype, "topHudNode", void 0);
      __decorate([ property(cc.Node) ], GameRepositionComponent.prototype, "profilesContainerNode", void 0);
      __decorate([ property(cc.Node) ], GameRepositionComponent.prototype, "myPlayerNode", void 0);
      __decorate([ property(cc.Node) ], GameRepositionComponent.prototype, "chatPopup", void 0);
      __decorate([ property(cc.Node) ], GameRepositionComponent.prototype, "gameContentsNode", void 0);
      GameRepositionComponent = __decorate([ ccclass ], GameRepositionComponent);
      return GameRepositionComponent;
    }(cc.Component);
    exports.default = GameRepositionComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  GameTopHudComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3300E6GtVOgYVUP1v2inJG", "GameTopHudComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Helper_1 = require("../Generic/Helper");
    var ButtonSoundComponent_1 = require("./ButtonSoundComponent");
    var ScrollingNumberActionComponent_1 = require("../Actions/ScrollingNumberActionComponent");
    var Game_1 = require("../models/Game");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameTopHudComponent = function(_super) {
      __extends(GameTopHudComponent, _super);
      function GameTopHudComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.rewardsNode = null;
        _this.closedRewardNode = null;
        _this.openRewardNode = null;
        _this.rewardLabel = null;
        _this.twoPlayerRewardLabel = null;
        _this.rank1RewardLabel = null;
        _this.rank2RewardLabel = null;
        _this.rank3RewardLabel = null;
        _this.rewardbutton = null;
        _this.rewardOpenbutton = null;
        _this.rewardbuttonNode = null;
        _this.debugButton = null;
        _this.twoPlayerRewardNode = null;
        _this.simpleSettingImage = null;
        _this.powerupUpImage = null;
        _this.powerupBackImage = null;
        _this.gemsNode = null;
        _this.powerupRewardNode = null;
        _this.helpNode = null;
        _this.settingsNode = null;
        _this.burgerMenu = null;
        _this.burgerSettings = null;
        _this.burgerHelp = null;
        _this.gemsLabel = null;
        _this.burgerMenuNode = null;
        _this.backButton = null;
        _this.burgerBgButton = null;
        _this.mLogger = null;
        _this.mPersistantComponent = null;
        _this.mGameController = null;
        _this.mIsRewardsNodeOpen = false;
        _this.mIsDebugVisible = false;
        _this.mStatsController = null;
        _this.mIsAnimating = false;
        _this.mCurrentGems = 0;
        _this.mIsBurgerMenuAnimating = false;
        _this.mIsBurgerNodeOpen = false;
        return _this;
      }
      GameTopHudComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mGameController = this.mPersistantComponent.GetGameController();
        this.mStatsController = this.mPersistantComponent.GetStatsController();
        this.mLogger = new Logger_1.Logger("GameTopHudComponent", true);
      };
      GameTopHudComponent.prototype.start = function() {
        this.rewardsNode.active = false;
        this.mIsDebugVisible = false;
        this.debugLayer.active = false;
        this.burgerMenu.active = false;
        this.simpleSettingImage.active = true;
        this.initialize();
        this.rewardbutton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "onRewardButtonPressed"));
        this.rewardOpenbutton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "onRewardButtonPressed"));
        this.debugButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "onDebugPressed"));
        this.settingsNode.getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "onBurgerButtonPressed", false));
        this.burgerBgButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "onBurgerButtonPressed", false));
        this.helpNode.getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "onRuleButtonPressed", false));
        this.burgerHelp.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "onRuleButtonPressed", true));
        this.burgerSettings.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "onBurgerButtonPressed", true));
        for (var i = 1; i <= 6; i++) this.debugLayer.getChildByName("dice" + i).getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GameTopHudComponent", "debugPawnPressed", {
          dice: i
        }));
        this.mPersistantComponent.node.on("updateGameGemsHud", this.updateGemsHud, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_BACK_PRESSED, this.onBackPressed, this);
        this.initiateGems();
      };
      GameTopHudComponent.prototype.onBackPressed = function() {};
      GameTopHudComponent.prototype.onDestroy = function() {
        this.mPersistantComponent.node.off("updateGameGemsHud", this.updateGemsHud, this);
      };
      GameTopHudComponent.prototype.initiateGems = function() {
        var index = this.mPersistantComponent.GetGameController().getMyIndex();
        var gameplayer = this.mPersistantComponent.GetGameController().getModel().getPlayerIndexMap()[index];
        if (gameplayer) {
          this.gemsLabel.string = Helper_1.Helper.getLocaleNumber(gameplayer.getGemsAvailable());
          this.mCurrentGems = gameplayer.getGemsAvailable();
        }
      };
      GameTopHudComponent.prototype.updateGemsHud = function(event) {
        if (!this.mPersistantComponent.GetPlayerController().getModel() || this.mCurrentGems == this.mPersistantComponent.GetPlayerController().getModel().getGems()) return;
        if (event && "dontAnimate" == event.getUserData()) {
          this.gemsLabel.string = Helper_1.Helper.getLocaleNumber(this.mPersistantComponent.GetPlayerController().getModel().getGems());
          this.mCurrentGems = this.mPersistantComponent.GetPlayerController().getModel().getGems();
          return;
        }
        var data = event.getUserData();
        this.gemsLabel.getComponent(ScrollingNumberActionComponent_1.default).scrollTo(this.mCurrentGems, this.mPersistantComponent.GetPlayerController().getModel().getGems(), data.timer);
        this.mCurrentGems = this.mPersistantComponent.GetPlayerController().getModel().getGems();
      };
      GameTopHudComponent.prototype.initialize = function() {
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        this.rewardsNode.active = 2 == eco_variant && !this.mGameController.isPrivateRoom();
        var rewardsMeta = this.mGameController.getRewardMeta();
        if (rewardsMeta[0]) {
          this.twoPlayerRewardLabel.string = Helper_1.Helper.getLocaleNumber(rewardsMeta[0]);
          this.rewardLabel.string = Helper_1.Helper.getLocaleNumber(rewardsMeta[0]);
        }
        rewardsMeta[0] && (this.rank1RewardLabel.string = Helper_1.Helper.getLocaleNumber(rewardsMeta[0]));
        rewardsMeta[1] && (this.rank2RewardLabel.string = Helper_1.Helper.getLocaleNumber(rewardsMeta[1]));
        rewardsMeta[2] && (this.rank3RewardLabel.string = Helper_1.Helper.getLocaleNumber(rewardsMeta[2]));
        this.mIsRewardsNodeOpen = false;
        this.mIsAnimating = false;
        this.initRewardsButton();
        this.initRewardsNode();
        this.rewardbuttonNode.active = this.mGameController.is4Player();
        this.rewardbutton.getComponent(ButtonSoundComponent_1.default).setEnabled(this.mGameController.is4Player());
        if (this.mGameController.is4Player()) {
          this.mIsAnimating = false;
          this.onRewardButtonPressed();
        }
        this.checkAndInitializePowerupHud();
      };
      GameTopHudComponent.prototype.checkAndInitializePowerupHud = function() {
        var power_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        var myIndex = this.mPersistantComponent.GetGameController().getMyIndex();
        var isNotSpectating = this.mPersistantComponent.GetGameController().validateIndex(myIndex);
        if (2 == power_variant) {
          this.powerupBackImage.active = true;
          this.simpleSettingImage.active = false;
          this.powerupRewardNode.active = false;
          this.gemsNode.active = isNotSpectating;
          this.helpNode.active = false;
          this.mGameController.isPrivateRoom() && this.gemsNode.setPosition(this.rewardsNode.getPosition());
          this.rewardsNode.setPosition(this.powerupRewardNode.getPosition());
          this.rewardsNode.getChildByName("twoPlayer").setPosition(this.powerupRewardNode.getChildByName("twoPlayer").getPosition());
          this.rewardsNode.getChildByName("UpState").setPosition(this.powerupRewardNode.getChildByName("UpState").getPosition());
          this.rewardsNode.getChildByName("downState").setPosition(this.powerupRewardNode.getChildByName("downState").getPosition());
          this.rewardsNode.getChildByName("twoPlayer").setScale(this.powerupRewardNode.getChildByName("twoPlayer").getScale());
          this.rewardsNode.getChildByName("UpState").setScale(this.powerupRewardNode.getChildByName("UpState").getScale());
          this.rewardsNode.getChildByName("downState").setScale(this.powerupRewardNode.getChildByName("downState").getScale());
        } else {
          this.powerupBackImage.active = false;
          this.simpleSettingImage.active = true;
          this.helpNode.active = true;
          this.powerupRewardNode.active = false;
          this.gemsNode.active = false;
        }
      };
      GameTopHudComponent.prototype.initRewardsNode = function() {
        this.twoPlayerRewardNode.active = !this.mGameController.is4Player();
        if (this.mGameController.is4Player()) {
          var animation = this.openRewardNode.getComponent(cc.Animation);
          animation.off("stop", this.initRewardsButton, this);
          this.mIsAnimating = true;
          if (this.mIsRewardsNodeOpen) {
            this.initRewardsButton();
            animation.stop("rewardUpState");
            animation.play("rewardDropBounce");
          } else {
            animation.stop("rewardDropBounce");
            animation.play("rewardUpState");
            animation.once("stop", this.initRewardsButton, this);
          }
          animation.once("stop", this.animateCompleteCallback, this);
        }
      };
      GameTopHudComponent.prototype.initRewardsButton = function() {
        this.openRewardNode.active = this.mIsRewardsNodeOpen && this.mGameController.is4Player();
        this.closedRewardNode.active = !this.mIsRewardsNodeOpen && this.mGameController.is4Player();
        this.twoPlayerRewardNode.active = !this.mGameController.is4Player();
      };
      GameTopHudComponent.prototype.animateCompleteCallback = function() {
        this.mIsAnimating = false;
      };
      GameTopHudComponent.prototype.onRewardButtonPressed = function() {
        if (this.mGameController.is4Player() && !this.mIsAnimating) {
          this.mIsRewardsNodeOpen = !this.mIsRewardsNodeOpen;
          var statString = this.mIsRewardsNodeOpen ? "open" : "close";
          this.mStatsController.count("popup", 1, statString, "hud_rewards");
          this.initRewardsNode();
        }
      };
      GameTopHudComponent.prototype.initBurgerNode = function() {
        var animation = this.burgerMenuNode.getComponent(cc.Animation);
        animation.off("stop", this.initBurgerMenuButton, this);
        this.mIsBurgerMenuAnimating = true;
        if (this.mIsBurgerNodeOpen) {
          this.initBurgerMenuButton();
          animation.stop("BurgerMenuSlideUp");
          animation.play("burgerMenuDropBounce");
        } else {
          animation.stop("burgerMenuDropBounce");
          animation.play("BurgerMenuSlideUp");
          animation.once("stop", this.initBurgerMenuButton, this);
        }
        animation.once("stop", this.burgerAnimateCompleteCallback, this);
      };
      GameTopHudComponent.prototype.initBurgerMenuButton = function() {};
      GameTopHudComponent.prototype.burgerAnimateCompleteCallback = function() {
        if (!this.burgerMenuNode) return;
        this.burgerMenuNode.active = this.mIsBurgerNodeOpen;
        this.mStatsController.count("popup", 1, this.burgerMenuNode.active ? "open" : "close", "burger");
        this.mIsBurgerMenuAnimating = false;
      };
      GameTopHudComponent.prototype.onBurgerButtonPressed = function(event, customData) {
        var power_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        var gameModel = this.mPersistantComponent.GetGameController().getModel();
        var isWaitingForPlayers = gameModel.isPrivateTable() && gameModel.getRoomState() != Game_1.RoomSate.STATE_ACTIVE;
        if (customData || 2 != power_variant || isWaitingForPlayers) {
          this.mStatsController.count("button", 1, "settings", "in_game", customData ? "burger" : "");
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_SETTINGS_PRESSED);
          customData && this.toggleBurgerMenu();
        } else {
          this.mStatsController.count("button", 1, "burger", "in_game");
          this.toggleBurgerMenu();
        }
      };
      GameTopHudComponent.prototype.toggleBurgerMenu = function() {
        if (!this.mIsBurgerMenuAnimating) {
          var burgerMenuActive = this.mIsBurgerNodeOpen;
          this.mIsBurgerNodeOpen = !this.mIsBurgerNodeOpen;
          this.powerupBackImage.active = burgerMenuActive;
          this.powerupUpImage.active = !burgerMenuActive;
          this.burgerMenuNode.active = true;
          this.initBurgerNode();
        }
      };
      GameTopHudComponent.prototype.onDebugPressed = function() {
        this.mIsDebugVisible = !this.mIsDebugVisible;
        this.debugLayer.active = this.mIsDebugVisible;
      };
      GameTopHudComponent.prototype.debugPawnPressed = function(event, data) {
        this.mGameController.sendDebugDiceRequest(data["dice"]);
        this.onDebugPressed();
      };
      GameTopHudComponent.prototype.onDisable = function() {
        if (this.openRewardNode) {
          var animation = this.openRewardNode.getComponent(cc.Animation);
          animation && animation.off("stop", this.initRewardsButton, this);
        }
      };
      GameTopHudComponent.prototype.getFinalCoinPosition = function() {
        return this.rewardsNode.parent.convertToWorldSpaceAR(this.rewardsNode.getPosition());
      };
      GameTopHudComponent.prototype.getFinalGemsPosition = function() {
        return this.rewardsNode.parent.convertToWorldSpaceAR(this.rewardsNode.getPosition());
      };
      GameTopHudComponent.prototype.onRuleButtonPressed = function(event, customData) {
        this.mStatsController.count("button", 1, "rules", "in_game", customData ? "burger" : "");
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_HELP_PRESSED);
        customData && this.toggleBurgerMenu();
      };
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "rewardsNode", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "closedRewardNode", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "openRewardNode", void 0);
      __decorate([ property(cc.Label) ], GameTopHudComponent.prototype, "rewardLabel", void 0);
      __decorate([ property(cc.Label) ], GameTopHudComponent.prototype, "twoPlayerRewardLabel", void 0);
      __decorate([ property(cc.Label) ], GameTopHudComponent.prototype, "rank1RewardLabel", void 0);
      __decorate([ property(cc.Label) ], GameTopHudComponent.prototype, "rank2RewardLabel", void 0);
      __decorate([ property(cc.Label) ], GameTopHudComponent.prototype, "rank3RewardLabel", void 0);
      __decorate([ property(cc.Button) ], GameTopHudComponent.prototype, "rewardbutton", void 0);
      __decorate([ property(cc.Button) ], GameTopHudComponent.prototype, "rewardOpenbutton", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "rewardbuttonNode", void 0);
      __decorate([ property(cc.Button) ], GameTopHudComponent.prototype, "debugButton", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "debugLayer", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "twoPlayerRewardNode", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "simpleSettingImage", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "powerupUpImage", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "powerupBackImage", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "gemsNode", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "powerupRewardNode", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "helpNode", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "settingsNode", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "burgerMenu", void 0);
      __decorate([ property(cc.Button) ], GameTopHudComponent.prototype, "burgerSettings", void 0);
      __decorate([ property(cc.Button) ], GameTopHudComponent.prototype, "burgerHelp", void 0);
      __decorate([ property(cc.Label) ], GameTopHudComponent.prototype, "gemsLabel", void 0);
      __decorate([ property(cc.Node) ], GameTopHudComponent.prototype, "burgerMenuNode", void 0);
      __decorate([ property(cc.Button) ], GameTopHudComponent.prototype, "backButton", void 0);
      __decorate([ property(cc.Button) ], GameTopHudComponent.prototype, "burgerBgButton", void 0);
      GameTopHudComponent = __decorate([ ccclass ], GameTopHudComponent);
      return GameTopHudComponent;
    }(cc.Component);
    exports.default = GameTopHudComponent;
    cc._RF.pop();
  }, {
    "../Actions/ScrollingNumberActionComponent": "ScrollingNumberActionComponent",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../models/Game": "Game",
    "./ButtonSoundComponent": "ButtonSoundComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  Game: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5fe65bNUDlFx5HXv8uMl/E1", "Game");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var GamePlayer_1 = require("./GamePlayer");
    var ProfileCustomizationController_1 = require("../Controllers/ProfileCustomizationController");
    var RoomSate;
    (function(RoomSate) {
      RoomSate[RoomSate["STATE_INACTIVE"] = 0] = "STATE_INACTIVE";
      RoomSate[RoomSate["STATE_WAITING_FOR_PLAYERS"] = 1] = "STATE_WAITING_FOR_PLAYERS";
      RoomSate[RoomSate["STATE_COUNTDOWN"] = 2] = "STATE_COUNTDOWN";
      RoomSate[RoomSate["STATE_ACTIVE"] = 3] = "STATE_ACTIVE";
      RoomSate[RoomSate["STATE_WAITING_FOR_REMATCH"] = 4] = "STATE_WAITING_FOR_REMATCH";
      RoomSate[RoomSate["STATE_DESTROYED"] = 5] = "STATE_DESTROYED";
    })(RoomSate = exports.RoomSate || (exports.RoomSate = {}));
    var DiceRollType;
    (function(DiceRollType) {
      DiceRollType[DiceRollType["STACKING"] = 1] = "STACKING";
      DiceRollType[DiceRollType["ALTERNATE"] = 2] = "ALTERNATE";
    })(DiceRollType = exports.DiceRollType || (exports.DiceRollType = {}));
    var UserGameState;
    (function(UserGameState) {
      UserGameState[UserGameState["BLIND"] = 0] = "BLIND";
      UserGameState[UserGameState["SEEN"] = 1] = "SEEN";
      UserGameState[UserGameState["PACK"] = 2] = "PACK";
      UserGameState[UserGameState["INACTIVE"] = 3] = "INACTIVE";
      UserGameState[UserGameState["ACTIVE"] = 4] = "ACTIVE";
      UserGameState[UserGameState["SEEN_ALL_IN"] = 5] = "SEEN_ALL_IN";
      UserGameState[UserGameState["SMALL_BLIND"] = 6] = "SMALL_BLIND";
      UserGameState[UserGameState["BIG_BLIND"] = 7] = "BIG_BLIND";
      UserGameState[UserGameState["CALL"] = 8] = "CALL";
      UserGameState[UserGameState["CHECK"] = 9] = "CHECK";
      UserGameState[UserGameState["RAISE"] = 10] = "RAISE";
    })(UserGameState = exports.UserGameState || (exports.UserGameState = {}));
    var PawnColor;
    (function(PawnColor) {
      PawnColor[PawnColor["GREEN"] = 0] = "GREEN";
      PawnColor[PawnColor["RED"] = 1] = "RED";
      PawnColor[PawnColor["YELLOW"] = 2] = "YELLOW";
      PawnColor[PawnColor["BLUE"] = 3] = "BLUE";
    })(PawnColor = exports.PawnColor || (exports.PawnColor = {}));
    var PawnProgressMeta = function() {
      function PawnProgressMeta(data) {
        this.userIndex = data.userIdx;
        this.pawnId = data.pawnId;
        this.finalPos = data.finalPos;
        this.movementArray = data.movementArray;
        this.xp = data.xp;
      }
      return PawnProgressMeta;
    }();
    exports.PawnProgressMeta = PawnProgressMeta;
    var CaptureMeta = function() {
      function CaptureMeta(data) {
        this.userIndex = data.userIdx;
        this.pawnId = data.pawnId;
        this.movementArray = data.movementArray;
      }
      return CaptureMeta;
    }();
    exports.CaptureMeta = CaptureMeta;
    var WinMeta = function() {
      function WinMeta(data) {
        this.userId = data[Constants_1.constants.FID.USER_ID];
        this.index = data[Constants_1.constants.FID.INDEX];
        this.rank = data[Constants_1.constants.FID.LUDO.USER_RANK];
        this.rewards = data[Constants_1.constants.FID.REWARDS];
        this.rewardsMeta = data[Constants_1.constants.FID.REWARDS_META];
        this.nextIndex = data[Constants_1.constants.FID.NEXT_INDEX];
        this.winTrophies = data[Constants_1.constants.FID.TROPHIES];
      }
      return WinMeta;
    }();
    exports.WinMeta = WinMeta;
    var PawnMovementObject = function() {
      function PawnMovementObject(data) {
        this.pawnProgressMeta = [];
        this.captureMeta = [];
        if (data.PRM) for (var index = 0; index < data.PRM.length; index++) this.pawnProgressMeta.push(new PawnProgressMeta(data.PRM[index]));
        if (data.CM) for (var index = 0; index < data.CM.length; index++) this.captureMeta.push(new CaptureMeta(data.CM[index]));
      }
      return PawnMovementObject;
    }();
    exports.PawnMovementObject = PawnMovementObject;
    var Game = function() {
      function Game(message) {
        this.mPlayerInfoMap = {};
        this.mIndexPlayerInfoMap = {};
        this.mChatHistory = [];
        this.mTurnCount = 0;
        this.mSixCount = 0;
        this.mRoomState = void 0 != message.state ? message.state : 0;
        this.mCurrentIndex = void 0 != message.curIndex ? message.curIndex : -1;
        this.mLastIndex = this.mCurrentIndex;
        this.mRoomId = void 0 != message.roomId ? message.roomId : "";
        this.mInstanceId = void 0 != message.instanceId ? message.instanceId : "";
        this.mBetAmount = void 0 != message.betAmount ? message.betAmount : 0;
        this.mCurrentTimer = void 0 != message.timer ? message.timer : 0;
        this.mRoomInfo = message.roomInfo;
        this.mIsPrivateRoom = void 0 != message.isPrivate && message.isPrivate;
        this.mTableType = void 0 != message.tableId ? message.tableId : 1;
        this.mRuleType = void 0 != message.ruleId ? message.ruleId : 1;
        this.mSafeLocations = void 0 != message.safeLocations ? message.safeLocations : [];
        this.mDiceRollType = void 0 != message.diceRollType ? message.diceRollType : Constants_1.constants.DICE_ROLL_TYPE.ALTERNATE;
        this.mPrivateRoomKey = void 0 != message.privateKey ? message.privateKey : "";
        this.mPrivateRoomHostPid = void 0 != message.hostPid ? message.hostPid : "";
        this.mRewards = void 0 != message.rewards ? message.rewards : {};
        this.mSessionKey = message.sessionKey;
        this.mIsGameOver = false;
        this.mInviteWaitDuration = message.inviteWaitDuration;
        this.mInviteWaitTimeRem = message.inviteWaitTimeRem;
        this.mRewardsMeta = message.myRewardMeta;
        this.mDidBucketChanged = false;
        this.mWaitingForPowerup = false;
        this.mPowerupAvailableForCurrTurn = false;
        this.mPlayerInfoMap = {};
        this.mIndexPlayerInfoMap = {};
        for (var i in message.playersInfo) {
          var playerInfo = message.playersInfo[i];
          var playerModel = new GamePlayer_1.GamePlayer();
          playerModel.initWithPlayerInfo(playerInfo);
          this.mPlayerInfoMap[playerModel.getId()] = playerModel;
          var idx = playerModel.getIndex();
          idx >= 0 && idx <= 4 && (this.mIndexPlayerInfoMap[idx] = playerModel);
          ProfileCustomizationController_1.ProfileCustomizationController.getInstance().addPlayerCountry(playerModel.getId(), message.playersInfo[i].customCountryCode);
          ProfileCustomizationController_1.ProfileCustomizationController.getInstance().addPlayerCustomName(playerModel.getId(), message.playersInfo[i].customName);
        }
        ProfileCustomizationController_1.ProfileCustomizationController.getInstance().addPlayerCountry(playerModel.getId(), message.customCountryCode);
        ProfileCustomizationController_1.ProfileCustomizationController.getInstance().addPlayerCustomName(playerModel.getId(), message.customName);
        this.mResultsShownForMe = false;
        this.mGamesToUnlockPowerup = message.gamesToUnlockPowerup;
        this.mTotalGamesToUnlockPowerup = message.totalGamesToUnlockPowerup;
      }
      Game.prototype.processDiceRollAck = function(message) {
        var index = message.index;
        var pid = message.pid;
        var diceRoll = message.diceRoll;
        var rollIndex = message.rollIndex;
        var isWasteTurn = message.isWasteTurn;
        var nextIndex = message.nextIndex;
        var pawnMovementObj = message.pawnMovementObj;
        var timer = message.timer;
        var queuedTurns = message.queuedTurns;
        var pawnHighlight = message.pawnHighlight;
        var playerWon = message.playerWon;
        var winMeta = message.winMeta;
        var isLastRoll = message.isLastRoll;
        playerWon && this.updatePlayerWon(winMeta);
        var gamePlayer = this.mPlayerInfoMap[pid];
        gamePlayer.updateDiceRoll(diceRoll, isLastRoll, rollIndex, pawnHighlight, pawnMovementObj, message.powerupCount, message.powerupPrice, message.gemsAvailable, message.rerollTime, message.powerupUsed);
        void 0 != nextIndex && -1 != nextIndex && this.setCurrentIndex(nextIndex);
        void 0 != timer && -1 != timer && (this.mCurrentTimer = timer);
        this.mPowerupAvailableForCurrTurn = message.powerupCount > 0;
      };
      Game.prototype.wasWaitingForPowerup = function() {
        return this.mWaitingForPowerup;
      };
      Game.prototype.setIfWaitingForPowerup = function() {
        this.mWaitingForPowerup = this.mPowerupAvailableForCurrTurn;
      };
      Game.prototype.getIndexOfPid = function(pid) {
        if (!this.mPlayerInfoMap[pid]) return -1;
        return this.mPlayerInfoMap[pid].getIndex();
      };
      Game.prototype.processUserLeave = function(message) {
        this.setCurrentIndex(message.nextIndex);
        var gamePlayer = this.mPlayerInfoMap[message.playerId];
        gamePlayer && gamePlayer.updateLeave();
      };
      Game.prototype.processBootCollect = function(message) {
        this.setCurrentIndex(message.index);
        this.mCurrentTimer = message.timer;
        this.mRoomState = RoomSate.STATE_ACTIVE;
        this.mInstanceId = message.instanceId;
        for (var playerId in this.mPlayerInfoMap) {
          var gamePlayer = this.mPlayerInfoMap[playerId];
          gamePlayer && -1 !== gamePlayer.getIndex() && gamePlayer.updateBootCollect(this.getTableType());
        }
      };
      Game.prototype.processPawnProgress = function(message) {
        var gamePlayer = this.mPlayerInfoMap[message.pid];
        gamePlayer && gamePlayer.updatePawnProgress(message.pawnMovementObject);
        message.playerWon && this.updatePlayerWon(message.winMeta);
        var nextIndex = message.nextPlayerIndex;
        void 0 != nextIndex && -1 != nextIndex && this.setCurrentIndex(nextIndex);
        var timer = message.timer;
        void 0 != timer && -1 != timer && (this.mCurrentTimer = timer);
      };
      Game.prototype.processNewUserJoin = function(message) {
        var playerModel = new GamePlayer_1.GamePlayer();
        playerModel.initWithRoomJoin(message);
        this.mPlayerInfoMap[playerModel.getId()] = playerModel;
        ProfileCustomizationController_1.ProfileCustomizationController.getInstance().addPlayerCountry(playerModel.getId(), message.customCountryCode);
        ProfileCustomizationController_1.ProfileCustomizationController.getInstance().addPlayerCustomName(playerModel.getId(), message.customName);
      };
      Game.prototype.setIndexOfNewPlayer = function(message) {
        var gamePlayer = this.mPlayerInfoMap[message.userId];
        if (gamePlayer) {
          gamePlayer.setIndex(message.index);
          this.mIndexPlayerInfoMap[message.index] = gamePlayer;
        }
      };
      Game.prototype.processAutoPlayUpdate = function(message) {
        var gamePlayer = this.mPlayerInfoMap[message.pid];
        gamePlayer && gamePlayer.setAutoPlay(message.autoplay);
      };
      Game.prototype.processGameOver = function(message) {
        if (message.isInDiceRoll) {
          var gamePlayer = this.mPlayerInfoMap[message.pid];
          gamePlayer && gamePlayer.updateDiceRoll(message.rollValue, true, message.rollIndex, [], message.pawnMovementObj, message.powerupCount, message.powerupPrice, message.gemsAvailable, 0, message.powerupUsed);
        } else if (message.pawnMovementObj.pawnProgressMeta.length > 0) {
          var gamePlayer = this.mPlayerInfoMap[message.pid];
          gamePlayer && gamePlayer.updatePawnProgress(message.pawnMovementObj);
        }
        this.updatePlayerWon(message.winMeta);
        this.mIsGameOver = true;
      };
      Game.prototype.updatePlayerWon = function(winMeta) {
        var gamePlayer = this.mPlayerInfoMap[winMeta.userId];
        gamePlayer && gamePlayer.updatePlayerWon(winMeta, this.getTableType());
        this.mGameEndMeta = winMeta.rewardsMeta;
        this.mTrophiesMeta = winMeta.winTrophies;
        this.updateRanks();
      };
      Game.prototype.updateRanks = function() {
        if (this.mGameEndMeta) for (var i in this.mGameEndMeta) {
          var meta = this.mGameEndMeta[i];
          var player = this.mPlayerInfoMap[meta.p];
          player && meta.r && player.setRank(meta.r, this.getTableType());
        }
      };
      Game.prototype.updateRewardsMeta = function(rewardMeta) {
        this.mRewardsMeta = rewardMeta;
      };
      Game.prototype.getNumPlayers = function() {
        var countPlayers = 0;
        for (var key in this.mPlayerInfoMap) if (this.mPlayerInfoMap.hasOwnProperty(key)) {
          var player = this.mPlayerInfoMap[key];
          -1 != player.getIndex() && countPlayers++;
        }
        return countPlayers;
      };
      Game.prototype.getPlayerPidMap = function() {
        return this.mPlayerInfoMap;
      };
      Game.prototype.getPlayerIndexMap = function() {
        return this.mIndexPlayerInfoMap;
      };
      Game.prototype.getCurrentIndex = function() {
        return this.mCurrentIndex;
      };
      Game.prototype.getLastIndex = function() {
        return this.mLastIndex;
      };
      Game.prototype.getCurrentTimer = function() {
        return this.mCurrentTimer;
      };
      Game.prototype.getPawnTimer = function() {
        return this.mRoomInfo.pawnTimer;
      };
      Game.prototype.getDiceTimer = function() {
        return this.mRoomInfo.diceRollTimer;
      };
      Game.prototype.getRoomId = function() {
        return this.mRoomId;
      };
      Game.prototype.getInstanceId = function() {
        return this.mInstanceId;
      };
      Game.prototype.getSafeLocations = function() {
        return this.mSafeLocations;
      };
      Game.prototype.getRoomState = function() {
        return this.mRoomState;
      };
      Game.prototype.isPrivateTable = function() {
        return this.mIsPrivateRoom;
      };
      Game.prototype.getPrivateRoomId = function() {
        return this.mPrivateRoomKey;
      };
      Game.prototype.getSessionKey = function() {
        return this.mSessionKey;
      };
      Game.prototype.getTrophiesMeta = function() {
        return this.mTrophiesMeta;
      };
      Game.prototype.getGameEndMeta = function() {
        return this.mGameEndMeta;
      };
      Game.prototype.getInviteWaitDuration = function() {
        return this.mInviteWaitDuration;
      };
      Game.prototype.getInviteWaitTimeRem = function() {
        return this.mInviteWaitTimeRem;
      };
      Game.prototype.setCurrentIndex = function(index) {
        if (-1 != index) {
          this.resetCardDealt(this.mCurrentIndex);
          if (this.mCurrentIndex != index) {
            this.mLastIndex = this.mCurrentIndex;
            this.mCurrentIndex = index;
            this.resetLastDiceRoll(this.mCurrentIndex);
          }
        }
      };
      Game.prototype.isSafeCell = function(cellIndex) {
        if (this.mSafeLocations.indexOf(cellIndex) > -1) return true;
        return false;
      };
      Game.prototype.resetCardDealt = function(index) {
        if (-1 != index) {
          var gamePlayer = this.mIndexPlayerInfoMap[index];
          if (gamePlayer) {
            gamePlayer.setDiceDealt([]);
            gamePlayer.setDiceRollIndex(0);
            gamePlayer.setLastDiceRoll(false);
          }
        }
      };
      Game.prototype.resetLastDiceRoll = function(index) {
        if (-1 != index) {
          var gamePlayer = this.mIndexPlayerInfoMap[index];
          gamePlayer && gamePlayer.setLastDiceRoll(false);
        }
      };
      Game.prototype.getSeatedPlayers = function() {
        var seatedPlayers = {};
        for (var playerId in this.mPlayerInfoMap) this.mPlayerInfoMap[playerId].getIndex() >= 0 && this.mPlayerInfoMap[playerId].getIndex() < 4 && (seatedPlayers[playerId] = this.mPlayerInfoMap[playerId]);
        return seatedPlayers;
      };
      Game.prototype.getParticipatedUsers = function() {
        var participatedPlayers = this.getSeatedPlayers();
        for (var playerId in this.mPlayerInfoMap) -1 == this.mPlayerInfoMap[playerId].getIndex() && this.mPlayerInfoMap[playerId].hasParticipated() && (participatedPlayers[playerId] = this.mPlayerInfoMap[playerId]);
        return participatedPlayers;
      };
      Game.prototype.isGameOver = function() {
        return this.mIsGameOver;
      };
      Game.prototype.is4Player = function() {
        return this.mTableType == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_4P;
      };
      Game.prototype.getTableType = function() {
        return this.mTableType;
      };
      Game.prototype.getPrivateRoomHostPid = function() {
        return this.mPrivateRoomHostPid;
      };
      Game.prototype.getBetAmount = function() {
        return this.mBetAmount;
      };
      Game.prototype.getRewardMeta = function() {
        return this.mRewardsMeta;
      };
      Game.prototype.isResultShownForMe = function() {
        return this.mResultsShownForMe;
      };
      Game.prototype.setResultShownForMe = function() {
        this.mResultsShownForMe = true;
      };
      Game.prototype.addChatMessageForHistory = function(chat) {
        this.mChatHistory.push(chat);
      };
      Game.prototype.getChatHistory = function() {
        return this.mChatHistory;
      };
      Game.prototype.setChatHistoryForReconnect = function(history) {
        this.mChatHistory = history;
      };
      Game.prototype.getPlayerNameForIndex = function(index) {
        if (-1 != index) {
          var gamePlayer = this.mIndexPlayerInfoMap[index];
          if (gamePlayer) return gamePlayer.getName();
        }
        return "";
      };
      Game.prototype.removeChatHistoryForPid = function(pid) {
        for (var i = this.mChatHistory.length - 1; i >= 0; i--) {
          var chat = this.mChatHistory[i];
          chat.mPid == pid && this.mChatHistory.splice(i, 1);
        }
      };
      Game.prototype.setReceiptStatus = function(forceFetch) {
        this.mDidBucketChanged = forceFetch;
      };
      Game.prototype.shouldFetchReciept = function() {
        return this.mDidBucketChanged;
      };
      Game.prototype.getGamesToUnlockPowerup = function() {
        return this.mGamesToUnlockPowerup;
      };
      Game.prototype.getTotalGamesToUnlockPowerup = function() {
        return this.mTotalGamesToUnlockPowerup;
      };
      Game.prototype.updateSixCount = function() {
        this.mSixCount++;
      };
      Game.prototype.getSixCount = function() {
        return this.mSixCount;
      };
      return Game;
    }();
    exports.Game = Game;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ProfileCustomizationController": "ProfileCustomizationController",
    "./GamePlayer": "GamePlayer"
  } ],
  GemsAnimatorComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "29081GA9sNM+6GzeZAVMCfx", "GemsAnimatorComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var LobbyTopHudComponent_1 = require("./LobbyTopHudComponent");
    var CoinAnimationComponent_1 = require("./CoinAnimationComponent");
    var GameTopHudComponent_1 = require("./GameTopHudComponent");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GemsAnimatorComponent = function(_super) {
      __extends(GemsAnimatorComponent, _super);
      function GemsAnimatorComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mTopHudComponent = null;
        _this.gemsNode = null;
        return _this;
      }
      GemsAnimatorComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
      };
      GemsAnimatorComponent.prototype.start = function() {
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ON_GEMS_COLLECT, this.onGemsCollect, this);
      };
      GemsAnimatorComponent.prototype.onGemsCollect = function(event) {
        this.onDisable();
        if (event) {
          var data = event.getUserData();
          var hudComponent;
          hudComponent = this.mTopHudComponent.getComponent(LobbyTopHudComponent_1.default) ? this.mTopHudComponent.getComponent(LobbyTopHudComponent_1.default) : this.mTopHudComponent.getComponent(GameTopHudComponent_1.default);
          this.gemsNode.addComponent(CoinAnimationComponent_1.default);
          this.gemsNode.getComponent(CoinAnimationComponent_1.default).initializeDefaults(data.comp, data.firstHitEvent);
          this.gemsNode.getComponent(CoinAnimationComponent_1.default).initialize(data.position, hudComponent.getFinalGemsPosition());
        }
      };
      GemsAnimatorComponent.prototype.onDisable = function() {
        var comp = this.gemsNode.getComponent(CoinAnimationComponent_1.default);
        comp && comp.onDisable();
      };
      GemsAnimatorComponent.prototype.onDestroy = function() {
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_ON_GEMS_COLLECT, this.onGemsCollect, this);
      };
      __decorate([ property(cc.Node) ], GemsAnimatorComponent.prototype, "mTopHudComponent", void 0);
      __decorate([ property(cc.Node) ], GemsAnimatorComponent.prototype, "gemsNode", void 0);
      GemsAnimatorComponent = __decorate([ ccclass ], GemsAnimatorComponent);
      return GemsAnimatorComponent;
    }(cc.Component);
    exports.default = GemsAnimatorComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./CoinAnimationComponent": "CoinAnimationComponent",
    "./GameTopHudComponent": "GameTopHudComponent",
    "./LobbyTopHudComponent": "LobbyTopHudComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  GenericPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2b485t8aLRD9ISlax9y9DmD", "GenericPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LocalizationComponent_1 = require("../Components/LocalizationComponent");
    var OverlayComponent_1 = require("../Components/OverlayComponent");
    var ButtonSoundComponent_1 = require("../Components/ButtonSoundComponent");
    var SpinnerComponent_1 = require("../Components/SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GenericPopupComponent = function(_super) {
      __extends(GenericPopupComponent, _super);
      function GenericPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.primaryButton = null;
        _this.crossButton = null;
        _this.titleLabel = null;
        _this.messageLabel = null;
        _this.primaryBtnLabel = null;
        _this.blueButton = null;
        _this.blueBtnLabel = null;
        _this.blueBtnSpinner = null;
        _this.primaryBtnSpinner = null;
        _this.greenButton = null;
        _this.greenBtnLabel = null;
        _this.greenBtnSpinner = null;
        _this.primaryButtonTextSize = 0;
        _this.blueButtonTextSize = 0;
        _this.greenButtonTextSize = 0;
        _this.titleTextSize = 0;
        _this.messageTextSize = 0;
        return _this;
      }
      GenericPopupComponent.prototype.onLoad = function() {
        this.primaryButtonTextSize = this.primaryBtnLabel.fontSize;
        this.blueButtonTextSize = this.blueBtnLabel.fontSize;
        this.greenButtonTextSize = this.greenBtnLabel.fontSize;
        this.titleTextSize = this.titleLabel.fontSize;
        this.messageTextSize = this.messageLabel.fontSize;
      };
      GenericPopupComponent.prototype.initialize = function(title, message, primaryBtnText, showCloseButton, primaryBtnCallback, closeBtnCallBack) {
        this.blueButton.node.active = false;
        this.greenButton.node.active = false;
        this.primaryButton.node.active = true;
        this.setLocalizedString(this.titleLabel, title);
        this.setLocalizedString(this.messageLabel, message);
        this.setLocalizedString(this.primaryBtnLabel, primaryBtnText);
        this.crossButton.node.active = showCloseButton;
        this.resetButtons();
        this.primaryButton.clickEvents.push(primaryBtnCallback);
        this.initializeButtonSound(this.primaryButton);
        closeBtnCallBack && this.crossButton.clickEvents.push(closeBtnCallBack);
        this.initializeButtonSound(this.crossButton);
        this.resetFontSize();
        this.deactivateSpinner();
      };
      GenericPopupComponent.prototype.initializeWithBlueButton = function(title, message, disablePrimaryButton, primaryBtnText, blueBtnText, showCloseButton, primaryBtnCallback, blueBtnCallback, closeBtnCallBack) {
        this.greenButton.node.active = false;
        this.blueButton.node.active = true;
        this.primaryButton.node.active = true;
        disablePrimaryButton && (this.primaryButton.node.active = false);
        this.setLocalizedString(this.titleLabel, title);
        this.setLocalizedString(this.messageLabel, message);
        this.setLocalizedString(this.blueBtnLabel, blueBtnText);
        this.crossButton.node.active = showCloseButton;
        this.resetButtons();
        this.blueButton.clickEvents.push(blueBtnCallback);
        primaryBtnCallback && this.primaryButton.clickEvents.push(primaryBtnCallback);
        closeBtnCallBack && this.crossButton.clickEvents.push(closeBtnCallBack);
        this.initializeButtonSound(this.primaryButton);
        this.initializeButtonSound(this.blueButton);
        this.initializeButtonSound(this.crossButton);
        this.resetFontSize();
        this.deactivateSpinner();
      };
      GenericPopupComponent.prototype.initializeWithGreenButton = function(title, message, disablePrimaryButton, primaryBtnText, greenBtnText, showCloseButton, primaryBtnCallback, greenBtnCallback, closeBtnCallBack) {
        this.blueButton.node.active = false;
        this.greenButton.node.active = true;
        this.primaryButton.node.active = true;
        disablePrimaryButton && (this.primaryButton.node.active = false);
        this.setLocalizedString(this.titleLabel, title);
        this.setLocalizedString(this.messageLabel, message);
        this.setLocalizedString(this.greenBtnLabel, greenBtnText);
        this.crossButton.node.active = showCloseButton;
        this.resetButtons();
        this.greenButton.clickEvents.push(greenBtnCallback);
        primaryBtnCallback && this.primaryButton.clickEvents.push(primaryBtnCallback);
        closeBtnCallBack && this.crossButton.clickEvents.push(closeBtnCallBack);
        this.initializeButtonSound(this.primaryButton);
        this.initializeButtonSound(this.greenButton);
        this.initializeButtonSound(this.crossButton);
        this.resetFontSize();
        this.deactivateSpinner();
      };
      GenericPopupComponent.prototype.activateSpinner = function() {
        if (this.blueBtnSpinner) {
          this.blueBtnSpinner.active = true;
          this.blueBtnSpinner.getComponent(SpinnerComponent_1.default).showLoader();
        }
        if (this.primaryBtnSpinner) {
          this.primaryBtnSpinner.active = true;
          this.primaryBtnSpinner.getComponent(SpinnerComponent_1.default).showLoader();
        }
        if (this.greenBtnSpinner) {
          this.greenBtnSpinner.active = true;
          this.greenBtnSpinner.getComponent(SpinnerComponent_1.default).showLoader();
        }
      };
      GenericPopupComponent.prototype.deactivateSpinner = function() {
        if (this.blueBtnSpinner && this.blueBtnSpinner.active) {
          this.blueBtnSpinner.active = false;
          this.blueBtnSpinner.getComponent(SpinnerComponent_1.default).hideLoader();
        }
        if (this.primaryBtnSpinner && this.primaryBtnSpinner.active) {
          this.primaryBtnSpinner.active = false;
          this.primaryBtnSpinner.getComponent(SpinnerComponent_1.default).hideLoader();
        }
        if (this.greenBtnSpinner && this.greenBtnSpinner.active) {
          this.greenBtnSpinner.active = false;
          this.greenBtnSpinner.getComponent(SpinnerComponent_1.default).hideLoader();
        }
      };
      GenericPopupComponent.prototype.setFontSizes = function(primaryBtnTxtSize, blueBtnTxtSize, titleTxtSize, messageTxtSize) {
        messageTxtSize > 0 && (this.messageLabel.fontSize = messageTxtSize);
      };
      GenericPopupComponent.prototype.resetButtons = function() {
        this.clearCallbacks(this.primaryButton);
        this.clearCallbacks(this.crossButton);
        this.clearCallbacks(this.blueButton);
        this.clearCallbacks(this.greenButton);
      };
      GenericPopupComponent.prototype.initializeButtonSound = function(button) {
        if (button) {
          var soundComponent = button.node.getComponent(ButtonSoundComponent_1.default);
          soundComponent && soundComponent.initializeCallback();
        }
      };
      GenericPopupComponent.prototype.setLocalizedString = function(label, token) {
        var localizationComponent = label.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues(token);
        localizationComponent.applyReposition();
      };
      GenericPopupComponent.prototype.clearCallbacks = function(button) {
        if (button && button.clickEvents && button.clickEvents.length > 0) for (var i = 0; i < button.clickEvents.length; i++) button.clickEvents.pop();
      };
      GenericPopupComponent.prototype.getPrimaryButtonLabel = function() {
        return this.primaryBtnLabel;
      };
      GenericPopupComponent.prototype.setOverlayCloseOnTap = function(val) {
        var overlayComp = this.node.getComponent(OverlayComponent_1.default);
        overlayComp && overlayComp.setCloseOnTap(val);
      };
      GenericPopupComponent.prototype.resetFontSize = function() {
        this.messageLabel.fontSize = this.messageTextSize;
      };
      __decorate([ property(cc.Button) ], GenericPopupComponent.prototype, "primaryButton", void 0);
      __decorate([ property(cc.Button) ], GenericPopupComponent.prototype, "crossButton", void 0);
      __decorate([ property(cc.Label) ], GenericPopupComponent.prototype, "titleLabel", void 0);
      __decorate([ property(cc.Label) ], GenericPopupComponent.prototype, "messageLabel", void 0);
      __decorate([ property(cc.Label) ], GenericPopupComponent.prototype, "primaryBtnLabel", void 0);
      __decorate([ property(cc.Button) ], GenericPopupComponent.prototype, "blueButton", void 0);
      __decorate([ property(cc.Label) ], GenericPopupComponent.prototype, "blueBtnLabel", void 0);
      __decorate([ property(cc.Node) ], GenericPopupComponent.prototype, "blueBtnSpinner", void 0);
      __decorate([ property(cc.Node) ], GenericPopupComponent.prototype, "primaryBtnSpinner", void 0);
      __decorate([ property(cc.Button) ], GenericPopupComponent.prototype, "greenButton", void 0);
      __decorate([ property(cc.Label) ], GenericPopupComponent.prototype, "greenBtnLabel", void 0);
      __decorate([ property(cc.Node) ], GenericPopupComponent.prototype, "greenBtnSpinner", void 0);
      GenericPopupComponent = __decorate([ ccclass ], GenericPopupComponent);
      return GenericPopupComponent;
    }(cc.Component);
    exports.default = GenericPopupComponent;
    cc._RF.pop();
  }, {
    "../Components/ButtonSoundComponent": "ButtonSoundComponent",
    "../Components/LocalizationComponent": "LocalizationComponent",
    "../Components/OverlayComponent": "OverlayComponent",
    "../Components/SpinnerComponent": "SpinnerComponent"
  } ],
  GetEmojisPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50581fqPolPGa/P/5ZNVXbD", "GetEmojisPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GetEmojisPopupComponent = function(_super) {
      __extends(GetEmojisPopupComponent, _super);
      function GetEmojisPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.androidNode = null;
        _this.iosNode = null;
        _this.doneButton = null;
        _this.closeButton = null;
        _this.mPlayer = null;
        _this.mValueToGrant = 0;
        _this.mStatsController = null;
        return _this;
      }
      GetEmojisPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mPlayer = this.mPersistantNodeComponent.GetPlayerController().getModel();
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GetEmojisPopupComponent", "closePopup", false));
        this.doneButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GetEmojisPopupComponent", "onOkayClicked", false));
      };
      GetEmojisPopupComponent.prototype.initialize = function(androidType) {
        this.androidNode.active = androidType;
        this.iosNode.active = !androidType;
      };
      GetEmojisPopupComponent.prototype.onOkayClicked = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_UNLOCKING_EMOJIS_POPUP, {
          mobile: true
        });
        this.closePopup();
      };
      GetEmojisPopupComponent.prototype.closePopup = function() {
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Node) ], GetEmojisPopupComponent.prototype, "androidNode", void 0);
      __decorate([ property(cc.Node) ], GetEmojisPopupComponent.prototype, "iosNode", void 0);
      __decorate([ property(cc.Button) ], GetEmojisPopupComponent.prototype, "doneButton", void 0);
      __decorate([ property(cc.Button) ], GetEmojisPopupComponent.prototype, "closeButton", void 0);
      GetEmojisPopupComponent = __decorate([ ccclass ], GetEmojisPopupComponent);
      return GetEmojisPopupComponent;
    }(cc.Component);
    exports.default = GetEmojisPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  GrantSuccessPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd6ddQkqiBDS7sztx9x/fgg", "GrantSuccessPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var CoinAnimationMetaComponent_1 = require("./CoinAnimationMetaComponent");
    var OverlayComponent_1 = require("./OverlayComponent");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GrantSuccessPopupComponent = function(_super) {
      __extends(GrantSuccessPopupComponent, _super);
      function GrantSuccessPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.rewardLabel = null;
        _this.okayButton = null;
        _this.okayButtonLabel = null;
        _this.closeButton = null;
        _this.coinAnimationNode = null;
        _this.gemsAnimationNode = null;
        _this.coinNode = null;
        _this.gemsNode = null;
        _this.headerLabel = null;
        _this.mLogger = null;
        _this.mPersistantComponent = null;
        _this.mPlayerController = null;
        _this.mValueToGrant = 0;
        _this.mGrantGems = false;
        _this.mActiveImageName = "";
        return _this;
      }
      GrantSuccessPopupComponent.prototype.onLoad = function() {
        this.mLogger = new Logger_1.Logger("GrantSuccessPopupComponent", true);
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayerController = this.mPersistantComponent.GetPlayerController();
        this.mStatsController = this.mPersistantComponent.GetStatsController();
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GrantSuccessPopupComponent", "closePopup"));
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "GrantSuccessPopupComponent", "closePopup"));
      };
      GrantSuccessPopupComponent.prototype.initialize = function(grantValue, headerText, buttonText, image_type, isItGems) {
        this.okayButton.interactable = true;
        this.closeButton.interactable = true;
        this.mValueToGrant = grantValue;
        this.mGrantGems = isItGems;
        this.mLogger.Log("grantValue to be granted " + this.mValueToGrant);
        var localizationComponent = this.rewardLabel.node.getComponent(LocalizationComponent_1.default);
        if (image_type) {
          this.setActiveImageName(image_type, isItGems);
          this.setCurrencyImageForGrantSuccessPopup(true);
          var localText = isItGems ? "#COLLECT_TEXT_GEMS" : "#YOU_GOT_COINS_TEXT";
          isItGems ? localizationComponent.setValues(localText, {
            gem_num: Helper_1.Helper.getLocaleNumber(grantValue)
          }) : localizationComponent.setValues(localText, {
            coin_num: Helper_1.Helper.getLocaleNumber(grantValue)
          });
        } else {
          this.setActiveImageName(8, false);
          this.setCurrencyImageForGrantSuccessPopup(true);
          localizationComponent.setValues("#VIDEO_COMPLETE_TEXT", {
            coin_num: Helper_1.Helper.getLocaleNumber(grantValue)
          });
        }
        this.mLogger.Log("successpopup --- " + this.mActiveImageName);
        localizationComponent = this.headerLabel.node.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues(headerText);
        localizationComponent = this.okayButtonLabel.node.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues(buttonText);
        var overlayComp = this.node.getComponent(OverlayComponent_1.default);
        overlayComp && overlayComp.setCloseOnTap(false);
      };
      GrantSuccessPopupComponent.prototype.setActiveImageName = function(imageNum, isItGems) {
        this.mActiveImageName = (isItGems ? "gemStack" : "coinStack") + imageNum;
      };
      GrantSuccessPopupComponent.prototype.setCurrencyImageForGrantSuccessPopup = function(activeState) {
        var currencyNode = this.mActiveImageName.indexOf("gem") > -1 ? this.gemsNode : this.coinNode;
        if (currencyNode && "" != this.mActiveImageName) {
          var currencyStackNode = currencyNode.getChildByName(this.mActiveImageName);
          currencyStackNode && (currencyStackNode.active = activeState);
        }
      };
      GrantSuccessPopupComponent.prototype.closePopup = function() {
        this.okayButton.interactable = false;
        this.closeButton.interactable = false;
        var player = this.mPlayerController.getModel();
        if (player) if (this.mGrantGems) {
          player.setGems(player.getGems() + this.mValueToGrant);
          this.mLogger.Log("gems granted closePopup" + this.mValueToGrant);
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ON_GEMS_COLLECT, {
            position: this.okayButton.node.parent.convertToWorldSpaceAR(this.okayButton.node.getPosition()),
            comp: this.gemsAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
            firstHitEvent: {
              eventName: "updateLobbyGemsHud",
              value: this.mValueToGrant
            }
          });
        } else {
          player.setCoins(player.getCoins() + this.mValueToGrant);
          this.mLogger.Log("coins granted closePopup" + this.mValueToGrant);
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, {
            position: this.okayButton.node.parent.convertToWorldSpaceAR(this.okayButton.node.getPosition()),
            comp: this.coinAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
            firstHitEvent: {
              eventName: "updateLobbyCoinsHud",
              value: this.mValueToGrant
            }
          });
        }
        this.hidePopup();
      };
      GrantSuccessPopupComponent.prototype.hidePopup = function() {
        "" != this.mActiveImageName && this.setCurrencyImageForGrantSuccessPopup(false);
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Label) ], GrantSuccessPopupComponent.prototype, "rewardLabel", void 0);
      __decorate([ property(cc.Button) ], GrantSuccessPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Label) ], GrantSuccessPopupComponent.prototype, "okayButtonLabel", void 0);
      __decorate([ property(cc.Button) ], GrantSuccessPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Node) ], GrantSuccessPopupComponent.prototype, "coinAnimationNode", void 0);
      __decorate([ property(cc.Node) ], GrantSuccessPopupComponent.prototype, "gemsAnimationNode", void 0);
      __decorate([ property(cc.Node) ], GrantSuccessPopupComponent.prototype, "coinNode", void 0);
      __decorate([ property(cc.Node) ], GrantSuccessPopupComponent.prototype, "gemsNode", void 0);
      __decorate([ property(cc.Label) ], GrantSuccessPopupComponent.prototype, "headerLabel", void 0);
      GrantSuccessPopupComponent = __decorate([ ccclass ], GrantSuccessPopupComponent);
      return GrantSuccessPopupComponent;
    }(cc.Component);
    exports.default = GrantSuccessPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./CoinAnimationMetaComponent": "CoinAnimationMetaComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./OverlayComponent": "OverlayComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  HashMap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9886afK88pMQo1ZMeCZfteU", "HashMap");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var HashMap = function() {
      function HashMap() {
        this._data = {};
        this._size = 0;
      }
      HashMap.prototype.isEmpty = function() {
        return 0 == this._size;
      };
      HashMap.prototype.size = function() {
        return this._size;
      };
      HashMap.prototype.clear = function() {
        this._data = {}, this._size = 0;
      };
      HashMap.prototype.containsKey = function(key) {
        return null != this._data[key];
      };
      HashMap.prototype.get = function(key) {
        var b = this._data[key];
        return b;
      };
      HashMap.prototype.put = function(key, value) {
        var c = this._data[key];
        return this._data[key] = value, null == c && this._size++, c;
      };
      HashMap.prototype.remove = function(key) {
        var b = this._data[key];
        return null != b && (delete this._data[key], this._size--), b;
      };
      HashMap.prototype.removeValues = function(value) {
        var b = [];
        for (var c in this._data) {
          var d = this._data[c];
          null != d && d == value && b.push(c);
        }
        for (var e = 0; e < b.length; e++) this.remove(b[e]);
      };
      HashMap.prototype.keys = function() {
        var a = [];
        for (var b in this._data) a.push(b);
        return a;
      };
      HashMap.prototype.values = function() {
        var a = [];
        for (var b in this._data) {
          var c = this._data[b];
          null != c && a.push(c);
        }
        return a;
      };
      HashMap.prototype.forEach = function(callback, thisArg) {
        for (var c in this._data) {
          var d = this._data[c];
          if (null != d) {
            var e = callback.call(thisArg, c, d);
            if (!1 === e) break;
          }
        }
      };
      HashMap.prototype.computeIfAbsent = function(key, mappingFunction) {
        var c = this.get(key);
        if (null != c) return c;
        var d = mappingFunction(key);
        return this.put(key, d), d;
      };
      return HashMap;
    }();
    exports.HashMap = HashMap;
    cc._RF.pop();
  }, {} ],
  Hash: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d65d2G7cPRHzoCmmpVnpSX/", "Hash");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function utf8Encode(str) {
      var x, y, output = "", i = -1, l;
      if (str && str.length) {
        l = str.length;
        while ((i += 1) < l) {
          x = str.charCodeAt(i);
          y = i + 1 < l ? str.charCodeAt(i + 1) : 0;
          if (55296 <= x && x <= 56319 && 56320 <= y && y <= 57343) {
            x = 65536 + ((1023 & x) << 10) + (1023 & y);
            i += 1;
          }
          x <= 127 ? output += String.fromCharCode(x) : x <= 2047 ? output += String.fromCharCode(192 | x >>> 6 & 31, 128 | 63 & x) : x <= 65535 ? output += String.fromCharCode(224 | x >>> 12 & 15, 128 | x >>> 6 & 63, 128 | 63 & x) : x <= 2097151 && (output += String.fromCharCode(240 | x >>> 18 & 7, 128 | x >>> 12 & 63, 128 | x >>> 6 & 63, 128 | 63 & x));
        }
      }
      return output;
    }
    function safe_add(x, y) {
      var lsw = (65535 & x) + (65535 & y), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | 65535 & lsw;
    }
    function bit_rol(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function rstr2hex(input, hexcase) {
      var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef", output = "", x, i = 0, l = input.length;
      for (;i < l; i += 1) {
        x = input.charCodeAt(i);
        output += hex_tab.charAt(x >>> 4 & 15) + hex_tab.charAt(15 & x);
      }
      return output;
    }
    function binb2rstr(input) {
      var i, l = 32 * input.length, output = "";
      for (i = 0; i < l; i += 8) output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 255);
      return output;
    }
    function rstr2binb(input) {
      var i, l = 8 * input.length, output = Array(input.length >> 2), lo = output.length;
      for (i = 0; i < lo; i += 1) output[i] = 0;
      for (i = 0; i < l; i += 8) output[i >> 5] |= (255 & input.charCodeAt(i / 8)) << 24 - i % 32;
      return output;
    }
    function rstr2any(input, encoding) {
      var divisor = encoding.length, remainders = Array(), i, q, x, ld, quotient, dividend, output, full_length;
      dividend = Array(Math.ceil(input.length / 2));
      ld = dividend.length;
      for (i = 0; i < ld; i += 1) dividend[i] = input.charCodeAt(2 * i) << 8 | input.charCodeAt(2 * i + 1);
      while (dividend.length > 0) {
        quotient = Array();
        x = 0;
        for (i = 0; i < dividend.length; i += 1) {
          x = (x << 16) + dividend[i];
          q = Math.floor(x / divisor);
          x -= q * divisor;
          (quotient.length > 0 || q > 0) && (quotient[quotient.length] = q);
        }
        remainders[remainders.length] = x;
        dividend = quotient;
      }
      output = "";
      for (i = remainders.length - 1; i >= 0; i--) output += encoding.charAt(remainders[i]);
      full_length = Math.ceil(8 * input.length / (Math.log(encoding.length) / Math.log(2)));
      for (i = output.length; i < full_length; i += 1) output = encoding[0] + output;
      return output;
    }
    function rstr2b64(input, b64pad) {
      var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", output = "", len = input.length, i, j, triplet;
      b64pad = b64pad || "=";
      for (i = 0; i < len; i += 3) {
        triplet = input.charCodeAt(i) << 16 | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
        for (j = 0; j < 4; j += 1) 8 * i + 6 * j > 8 * input.length ? output += b64pad : output += tab.charAt(triplet >>> 6 * (3 - j) & 63);
      }
      return output;
    }
    exports.Hashes = {
      SHA1: function(options) {
        var hexcase = !(!options || "boolean" !== typeof options.uppercase) && options.uppercase, b64pad = options && "string" === typeof options.pad ? options.pad : "=", utf8 = !options || "boolean" !== typeof options.utf8 || options.utf8;
        this.hex = function(s) {
          return rstr2hex(rstr(s, utf8), hexcase);
        };
        this.b64 = function(s) {
          return rstr2b64(rstr(s, utf8), b64pad);
        };
        this.any = function(s, e) {
          return rstr2any(rstr(s, utf8), e);
        };
        this.raw = function(s) {
          return rstr(s, utf8);
        };
        this.hex_hmac = function(k, d) {
          return rstr2hex(rstr_hmac(k, d));
        };
        this.b64_hmac = function(k, d) {
          return rstr2b64(rstr_hmac(k, d), b64pad);
        };
        this.any_hmac = function(k, d, e) {
          return rstr2any(rstr_hmac(k, d), e);
        };
        this.vm_test = function() {
          return "900150983cd24fb0d6963f7d28e17f72" === this.hex("abc").toLowerCase();
        };
        this.setUpperCase = function(a) {
          "boolean" === typeof a && (hexcase = a);
          return this;
        };
        this.setPad = function(a) {
          b64pad = a || b64pad;
          return this;
        };
        this.setUTF8 = function(a) {
          "boolean" === typeof a && (utf8 = a);
          return this;
        };
        function rstr(s, utf8) {
          s = utf8 ? utf8Encode(s) : s;
          return binb2rstr(binb(rstr2binb(s), 8 * s.length));
        }
        function rstr_hmac(key, data) {
          var bkey, ipad, opad, i, hash;
          key = utf8 ? utf8Encode(key) : key;
          data = utf8 ? utf8Encode(data) : data;
          bkey = rstr2binb(key);
          bkey.length > 16 && (bkey = binb(bkey, 8 * key.length));
          ipad = Array(16), opad = Array(16);
          for (i = 0; i < 16; i += 1) {
            ipad[i] = 909522486 ^ bkey[i];
            opad[i] = 1549556828 ^ bkey[i];
          }
          hash = binb(ipad.concat(rstr2binb(data)), 512 + 8 * data.length);
          return binb2rstr(binb(opad.concat(hash), 672));
        }
        function binb(x, len) {
          var i, j, t, olda, oldb, oldc, oldd, olde, w = Array(80), a = 1732584193, b = -271733879, c = -1732584194, d = 271733878, e = -1009589776;
          x[len >> 5] |= 128 << 24 - len % 32;
          x[15 + (len + 64 >> 9 << 4)] = len;
          for (i = 0; i < x.length; i += 16) {
            olda = a, oldb = b;
            oldc = c;
            oldd = d;
            olde = e;
            for (j = 0; j < 80; j += 1) {
              w[j] = j < 16 ? x[i + j] : bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
              t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
              e = d;
              d = c;
              c = bit_rol(b, 30);
              b = a;
              a = t;
            }
            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
            e = safe_add(e, olde);
          }
          return Array(a, b, c, d, e);
        }
        function sha1_ft(t, b, c, d) {
          if (t < 20) return b & c | ~b & d;
          if (t < 40) return b ^ c ^ d;
          if (t < 60) return b & c | b & d | c & d;
          return b ^ c ^ d;
        }
        function sha1_kt(t) {
          return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
        }
      }
    };
    cc._RF.pop();
  }, {} ],
  Helper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15beaD3valK+ZDrTBG+XkdZ", "Helper");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("./Logger");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Config_1 = require("../Config");
    var Constants_1 = require("../Constants");
    var Helper = function() {
      function Helper() {}
      Helper.safeJson = function(data, defaultValue) {
        void 0 === defaultValue && (defaultValue = null);
        if (null == data || 0 == data.length) return defaultValue;
        try {
          var jso = JSON.parse(data);
          return jso;
        } catch (e) {
          Helper.logger.Log("Failed to parse " + data + ", " + e);
        }
        return defaultValue;
      };
      Helper.generateUUID = function() {
        var d = Date.now();
        "undefined" !== typeof performance && "function" === typeof performance.now && (d += performance.now());
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
          var r = (d + 16 * Math.random()) % 16 | 0;
          d = Math.floor(d / 16);
          return ("x" === c ? r : 3 & r | 8).toString(16);
        });
      };
      Helper.isEmpty = function(obj) {
        for (var key in obj) if (obj.hasOwnProperty(key)) return false;
        return true;
      };
      Helper.getEventHandler = function(node, component, functionName, data) {
        var eHandler = new cc.Component.EventHandler();
        eHandler.target = node;
        eHandler.component = component;
        eHandler.handler = functionName;
        eHandler.customEventData = data;
        return eHandler;
      };
      Helper.getUniqueId = function() {
        return (Helper.S4() + Helper.S4() + "-" + Helper.S4() + "-4" + Helper.S4().substr(0, 3) + "-" + Helper.S4() + "-" + Helper.S4() + Helper.S4() + Helper.S4()).toLowerCase();
      };
      Helper.S4 = function() {
        return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
      };
      Helper.padString = function(num, padLeftDigits) {
        var str = num.toString();
        while (str.length < padLeftDigits) str = "0" + str;
        return str;
      };
      Helper.getRandom = function(min, max) {
        return Math.floor(Math.random() * (max - min) + min);
      };
      Helper.FbInvite = function(callback, closeCallback, errorCallback) {
        FBInstant.context.chooseAsync().then(function() {
          var ctxId = FBInstant.context.getID();
          var ctxType = FBInstant.context.getType();
          var data = {
            id: ctxId,
            type: ctxType
          };
          callback && callback(data);
        }, function(reason) {
          "SAME_CONTEXT" === reason.code ? callback() : "USER_INPUT" == reason.code ? closeCallback && closeCallback() : errorCallback && errorCallback(reason.code);
        });
      };
      Helper.sendInviteToPlayer = function(name, photoUrl, roomId, senderId, message, referralCode, successCallback, errorCallback) {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludo_invite_image");
        var image = "messenger_invite.png";
        2 == variant && photoUrl && (image = photoUrl);
        message = "" != message ? message : FBInstant.player.getName() + " has invited you to play ludo with them";
        Helper.convertImageToBase64(image).then(function(base64image) {
          FBInstant.updateAsync({
            action: "CUSTOM",
            cta: "Play",
            template: "play_turn",
            image: base64image,
            notification: "PUSH",
            text: message,
            data: {
              privateTableId: roomId,
              clientVersion: Config_1.Config.CLIENT_VERSION,
              senderId: senderId,
              referralCode: referralCode
            },
            strategy: "IMMEDIATE"
          }).then(function() {
            Helper.logger.Log("Invite sent");
            successCallback && successCallback(roomId);
          }, function() {
            Helper.logger.Log("Invite sent failed");
            errorCallback && errorCallback(roomId);
          });
        });
      };
      Helper.shareScreenshot = function(successCallback, errorCallback) {
        Helper.captureScreen(cc.director.getRunningScene(), cc.winSize.width, cc.winSize.height, function(e, t) {
          var date = Date.now();
          FBInstant.shareAsync({
            intent: "REQUEST",
            image: e,
            text: "",
            data: {
              clientVersion: Config_1.Config.CLIENT_VERSION,
              senderId: FBInstant.player.getID()
            }
          }).then(function() {
            successCallback && successCallback();
          }, function() {
            errorCallback && errorCallback();
          });
        });
      };
      Helper.getScreenshotImage = function() {
        return new Promise(function(resolve, reject) {
          var croppedURL = cropPlusExport(cc.game.canvas, 0, 0, cc.game.canvas.width, cc.game.canvas.height);
          resolve(croppedURL);
          function cropPlusExport(img, cropX, cropY, cropWidth, cropHeight) {
            var canvas1 = document.createElement("canvas");
            var ctx1 = canvas1.getContext("2d");
            canvas1.width = cropWidth;
            canvas1.height = cropHeight;
            ctx1.drawImage(img, cropX, cropY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);
            return canvas1.toDataURL();
          }
        });
      };
      Helper.getPrivateTableId = function() {
        var privateTableId = "";
        var entryPointData = FBInstant.getEntryPointData();
        entryPointData && entryPointData["privateTableId"] && (privateTableId = entryPointData["privateTableId"]);
        return privateTableId;
      };
      Helper.getSenderId = function() {
        var senderId = "";
        var entryPointData = FBInstant.getEntryPointData();
        entryPointData && entryPointData["senderId"] && (senderId = entryPointData["senderId"]);
        return senderId;
      };
      Helper.getSenderReferralCode = function() {
        var senderReferralCode = "";
        var entryPointData = FBInstant.getEntryPointData();
        entryPointData && entryPointData["referralCode"] && (senderReferralCode = entryPointData["referralCode"]);
        return senderReferralCode;
      };
      Helper.get4PlayerTag = function() {
        var fourPlayerTag = false;
        var entryPointData = FBInstant.getEntryPointData();
        entryPointData && (fourPlayerTag = entryPointData["is4PlayerTag"]);
        return fourPlayerTag;
      };
      Helper.isPrivatUrlSupportedClient = function() {
        var clientVersion = "";
        var entryPointData = FBInstant.getEntryPointData();
        entryPointData && (clientVersion = entryPointData["clientVersion"]);
        return null != clientVersion;
      };
      Helper.isLapserOpen = function() {
        var entryPointData = FBInstant.getEntryPointData();
        if (entryPointData && entryPointData["lapserType"]) return true;
        return false;
      };
      Helper.isShareRankOpen = function() {
        var entryPointData = FBInstant.getEntryPointData();
        if (entryPointData && entryPointData["shareNewBadge"]) return true;
        return false;
      };
      Helper.getLapserTypeDays = function() {
        var entryPointData = FBInstant.getEntryPointData();
        if (entryPointData && entryPointData["lapserType"]) {
          var lapserType = entryPointData["lapserType"];
          var days = parseInt(lapserType.split("_")[1]);
          return days;
        }
        return -1;
      };
      Helper.convertImageToBase64 = function(imageSrc) {
        return new Promise(function(resolve, reject) {
          var img = new Image();
          img.crossOrigin = "anonymous";
          img.onload = function() {
            var croppedURL = null;
            croppedURL = "messenger_invite.png" != imageSrc ? img.naturalWidth < img.naturalHeight ? cropPlusExport(img, 0, 0, img.naturalWidth, img.naturalWidth) : cropPlusExport(img, 0, 0, img.naturalHeight, img.naturalHeight) : cropPlusExport(img, 0, 0, img.naturalWidth, img.naturalHeight);
            resolve(croppedURL);
          };
          img.src = imageSrc;
          function cropPlusExport(img, cropX, cropY, cropWidth, cropHeight) {
            var canvas1 = document.createElement("canvas");
            var ctx1 = canvas1.getContext("2d");
            canvas1.width = cropWidth;
            canvas1.height = cropHeight;
            ctx1.drawImage(img, cropX, cropY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);
            return canvas1.toDataURL();
          }
        });
      };
      Helper.getTruncatedString = function(str, length, appendWithDots) {
        if (str) {
          var tempString = str;
          if (tempString.length > length) {
            tempString = tempString.substr(0, length);
            appendWithDots && (tempString += "...");
          }
          return tempString;
        }
        return "";
      };
      Helper.shareNewBadge = function(textPng, shareNewBadge, name, bgImageUrl, photoUrl, badge, badgeText) {
        Helper.getImageForRankShare(textPng, bgImageUrl, photoUrl, badge, badgeText).then(function(base64image) {
          FBInstant.shareAsync({
            intent: "REQUEST",
            image: base64image,
            text: "I have achieved " + shareNewBadge + " Rank! Beat that!",
            data: {
              clientVersion: Config_1.Config.CLIENT_VERSION,
              shareNewBadge: true,
              senderId: FBInstant.player.getID()
            }
          }).then(function() {});
        });
      };
      Helper.isOpenFromShare = function() {
        var openFromShare = false;
        var entryPointData = FBInstant.getEntryPointData();
        if (entryPointData && entryPointData["shareNewBadge"]) {
          openFromShare = entryPointData["shareNewBadge"];
          if (entryPointData["senderId"]) return entryPointData["senderId"];
        }
        return "";
      };
      Helper.getImageForRankShare = function(textPng, bgImageUrl, imageSrc, badgeSrc, badgeText) {
        return new Promise(function(resolve, reject) {
          var textImage = new Image();
          textImage.crossOrigin = "anonymous";
          var loadedTextImage = false;
          var bgImage = new Image();
          bgImage.crossOrigin = "anonymous";
          var loadedBgImage = false;
          var profilePic = new Image();
          profilePic.crossOrigin = "anonymous";
          var loadedProfilePic = false;
          var badge = new Image();
          badge.crossOrigin = "anonymous";
          var loadedBadge = false;
          textImage.onload = function() {
            loadedTextImage = true;
            loadedProfilePic && loadedBadge && loadedBgImage && loadedTextImage && resolve(onImagesLoaded());
          };
          bgImage.onload = function() {
            loadedBgImage = true;
            loadedProfilePic && loadedBadge && loadedBgImage && loadedTextImage && resolve(onImagesLoaded());
          };
          profilePic.onload = function() {
            loadedProfilePic = true;
            loadedProfilePic && loadedBadge && loadedBgImage && loadedTextImage && resolve(onImagesLoaded());
          };
          badge.onload = function() {
            loadedBadge = true;
            loadedProfilePic && loadedBadge && loadedBgImage && loadedTextImage && resolve(onImagesLoaded());
          };
          bgImage.src = bgImageUrl;
          badge.src = badgeSrc;
          profilePic.src = imageSrc;
          textImage.src = textPng;
          function onImagesLoaded() {
            var canvasSizeX = bgImage.naturalWidth;
            var canvasSizeY = bgImage.naturalHeight;
            return Helper.addImagesForShare(bgImage, textImage, profilePic, badge, canvasSizeX, canvasSizeY, badgeText);
          }
        });
      };
      Helper.addImagesForShare = function(bgImage, textImage, profilePic, badge, canvasSizeX, canvasSizeY, badgeText) {
        var canvas = document.createElement("canvas");
        var ctx1 = canvas.getContext("2d");
        canvas.width = canvasSizeX;
        canvas.height = canvasSizeY;
        var canvasSize = canvasSizeX < canvasSizeY ? canvasSizeX : canvasSizeY;
        var scaleProfile = .28 * canvasSize / profilePic.width;
        var scaleBadge = .5 * canvasSize / badge.width;
        ctx1.fillStyle = "#0000FF";
        ctx1.drawImage(bgImage, 0, 0, canvasSizeX, canvasSizeY, 0, 0, canvasSizeX, canvasSizeY);
        ctx1.fillStyle = "#FFFFFF";
        Helper.drawCircular(ctx1, profilePic, profilePic.width * scaleProfile * .2, canvasSizeY - profilePic.height * scaleProfile * 1.2, profilePic.width * scaleProfile, profilePic.height * scaleProfile);
        ctx1.drawImage(badge, 0, 0, badge.width, badge.height, (canvasSizeX - badge.width * scaleBadge) / 2, (canvasSizeY - badge.height * scaleBadge) / 2, badge.width * scaleBadge, badge.height * scaleBadge);
        ctx1.drawImage(textImage, 0, 0, textImage.width, textImage.height, (canvasSizeX - textImage.width) / 2, (canvasSizeY - badge.height * scaleBadge - 2 * textImage.height) / 2, textImage.width, textImage.height);
        return canvas.toDataURL();
      };
      Helper.drawCircular = function(ctx, img, destx, desty, finalSizeX, finalSizeY) {
        var radius = finalSizeX > finalSizeY ? finalSizeY / 2 : finalSizeX / 2;
        ctx.save();
        ctx.beginPath();
        ctx.arc(destx + finalSizeX / 2, desty + finalSizeY / 2, radius, 0, 6.28, false);
        ctx.clip();
        ctx.stroke();
        ctx.closePath();
        ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight, destx, desty, finalSizeX, finalSizeY);
        ctx.restore();
      };
      Helper.drawRotated = function(context_var, image, degrees, srcx, srcy, width, height, destx, desty, finalwidth, finalheight) {
        context_var.save();
        context_var.translate(destx, desty);
        context_var.rotate(3.14 * degrees / 180);
        context_var.drawImage(image, srcx, srcy, width, height, -finalwidth / 2, -finalheight / 2, finalwidth / 2, finalheight / 2);
        context_var.restore();
      };
      Helper.getOsRaw = function() {
        var clientStrings, cs, id, nAgt, osVersion;
        var os = "";
        nAgt = window.navigator.userAgent;
        clientStrings = [ {
          s: "Windows 3.11",
          r: /Win16/
        }, {
          s: "Windows 95",
          r: /(Windows 95|Win95|Windows_95)/
        }, {
          s: "Windows ME",
          r: /(Win 9x 4.90|Windows ME)/
        }, {
          s: "Windows 98",
          r: /(Windows 98|Win98)/
        }, {
          s: "Windows CE",
          r: /Windows CE/
        }, {
          s: "Windows 2000",
          r: /(Windows NT 5.0|Windows 2000)/
        }, {
          s: "Windows XP",
          r: /(Windows NT 5.1|Windows XP)/
        }, {
          s: "Windows Server 2003",
          r: /Windows NT 5.2/
        }, {
          s: "Windows Vista",
          r: /Windows NT 6.0/
        }, {
          s: "Windows 7",
          r: /(Windows 7|Windows NT 6.1)/
        }, {
          s: "Windows 8.1",
          r: /(Windows 8.1|Windows NT 6.3)/
        }, {
          s: "Windows 8",
          r: /(Windows 8|Windows NT 6.2)/
        }, {
          s: "Windows NT 4.0",
          r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/
        }, {
          s: "Windows ME",
          r: /Windows ME/
        }, {
          s: "Android",
          r: /Android/
        }, {
          s: "Open BSD",
          r: /OpenBSD/
        }, {
          s: "Sun OS",
          r: /SunOS/
        }, {
          s: "Linux",
          r: /(Linux|X11)/
        }, {
          s: "iOS",
          r: /(iPhone|iPad|iPod)/
        }, {
          s: "Mac OS X",
          r: /Mac OS X/
        }, {
          s: "Mac OS",
          r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/
        }, {
          s: "QNX",
          r: /QNX/
        }, {
          s: "UNIX",
          r: /UNIX/
        }, {
          s: "BeOS",
          r: /BeOS/
        }, {
          s: "OS/2",
          r: /OS\/2/
        }, {
          s: "Search Bot",
          r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/
        } ];
        for (id in clientStrings) {
          cs = clientStrings[id];
          if (cs.r.test(nAgt)) {
            os = cs.s;
            break;
          }
        }
        return os;
      };
      Helper.getCountryCodeForFeedback = function(code) {
        if ("IN" == code || "PK" == code || "BD" == code || "ID" == code || "BR" == code || "DZ" == code || "NP" == code || "PE" == code || "TN" == code || "US" == code) return code;
        return "others";
      };
      Helper.getOs = function() {
        var os = Helper.getOsRaw();
        var nAgt = window.navigator.userAgent;
        var osVersion = Helper.checkAndGetWindowsVersion(os);
        if ("unknown" !== osVersion) return "Windows";
        if (/Mac OS/.test(os)) return "Mac OS";
        if (/Android/.test(os)) return "Android";
        if (/iOS/.test(os)) return "iOS";
        return "others";
      };
      Helper.checkAndGetWindowsVersion = function(os) {
        var osVersion = "unknown";
        /Windows/.test(os) && (osVersion = /Windows (.*)/.exec(os)[1]);
        return osVersion;
      };
      Helper.getOsVersion = function() {
        var clientStrings, cs, id, nAgt, os, osVersion;
        nAgt = window.navigator.userAgent;
        os = Helper.getOsRaw();
        osVersion = Helper.checkAndGetWindowsVersion(os);
        "unknown" != osVersion && (os = "Windows");
        switch (os) {
         case "Mac OS X":
          osVersion = /Mac OS X (10[\.\_\d]+)/.exec(nAgt)[1];
          break;

         case "Android":
          osVersion = /Android ([\.\_\d]+)/.exec(nAgt)[1];
          break;

         case "iOS":
          osVersion = /OS (\d+)_(\d+)_?(\d+)?/.exec(nAgt);
          osVersion = osVersion[1] + "." + osVersion[2] + "." + (0 | osVersion[3]);
        }
        return os + " " + osVersion;
      };
      Helper.getModelInfo = function() {
        var M, tem, ua;
        ua = window.navigator.userAgent;
        tem = void 0;
        M = ua.match(/(opera|chrome|safari|firefox|mobile|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if (/trident/i.test(M[1])) {
          tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
          if (tem) return "IE " + (tem[1] || "");
        }
        if ("Chrome" === M[1]) {
          tem = ua.match(/\bOPR\/(\d+)/);
          if (null !== tem) return "Opera " + tem[1];
        }
        M = M[2] ? [ M[1], M[2] ] : [ navigator.appName, navigator.appVersion, "-?" ];
        tem = ua.match(/version\/(\d+)/i);
        null !== tem && M.splice(1, 1, tem[1]);
        return M;
      };
      Helper.getModel = function() {
        var M = Helper.getModelInfo();
        if ("string" === typeof M) return M;
        return M.join(" ");
      };
      Helper.getModelName = function() {
        var os = Helper.getOsRaw();
        if (/Android/.test(os)) return "Android";
        if (/iOS/.test(os)) return "iOS";
        var M, tem, ua;
        ua = window.navigator.userAgent;
        tem = void 0;
        M = ua.match(/(opera|chrome|safari|firefox|mobile|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if (/trident/i.test(M[1])) {
          tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
          if (null != tem) return "IE web";
        }
        if ("Chrome" === M[1]) {
          tem = ua.match(/Edge\/(\d+)/i);
          if (null != tem) return "Edge web";
        }
        var M = Helper.getModelInfo();
        var browser = "";
        "string" === typeof M && (browser = M);
        browser = M[0];
        if (/Safari/i.test(browser)) return "Safari web";
        if (/Chrome/i.test(browser)) return "Chrome web";
        if (/Firefox/i.test(browser)) return "Firefox web";
        if (/MSIE/i.test(browser)) return "IE web";
        return "others";
      };
      Helper.getIpAddress = function() {
        return "";
      };
      Helper.isRendererCanvas = function() {
        return cc.renderer == cc.rendererCanvas;
      };
      Helper.showCreateShortCut = function(showSuccessCallback, errorCallback, cannotShowCallback) {
        FBInstant.canCreateShortcutAsync().then(function(canCreateShortcut) {
          canCreateShortcut ? FBInstant.createShortcutAsync().then(function() {
            cc.sys.localStorage.setItem(Constants_1.constants.SHORTCUT_POPUP_KEY, true);
            showSuccessCallback && showSuccessCallback();
          }).catch(function(reason) {
            errorCallback && errorCallback(reason.code, "error");
          }) : cannotShowCallback && cannotShowCallback();
        }).catch(function(reason) {
          errorCallback && errorCallback(reason.code, "catch");
        });
      };
      Helper.getLocaleNumber = function(num, compressToL, compress, currencySymbol, dontStripDecimals, compressToK, fullEng, stripTrailingZeroes) {
        void 0 === compressToL && (compressToL = true);
        void 0 === compress && (compress = true);
        void 0 === currencySymbol && (currencySymbol = true);
        void 0 === dontStripDecimals && (dontStripDecimals = false);
        void 0 === compressToK && (compressToK = true);
        void 0 === fullEng && (fullEng = false);
        void 0 === stripTrailingZeroes && (stripTrailingZeroes = false);
        var formatted = "";
        var n = "" + num;
        var len = n.length;
        var decimal = 1;
        var suffix = "";
        var ending = "";
        num > 1e5 && (compress = true);
        if (compress) if (num >= 1e9) {
          num < 1e11 && (decimal = 2);
          num % 1e9 != 0 && (dontStripDecimals = true);
          ending = fullEng ? " Billion" : " B";
          if (dontStripDecimals) {
            suffix = "." + n.substr(len - 9, decimal);
            stripTrailingZeroes && "0" == suffix[suffix.length - 1] && (suffix = suffix.substr(0, suffix.length - 1));
            "." == suffix[suffix.length - 1] && (suffix += "0");
          }
          suffix += ending;
          n = n.substr(0, len - 9);
          len = n.length;
        } else if (num >= 1e6) {
          num < 1e8 && (decimal = 2);
          num % 1e6 != 0 && (dontStripDecimals = true);
          ending = fullEng ? " Million" : " M";
          if (dontStripDecimals) {
            suffix = "." + n.substr(len - 6, decimal);
            stripTrailingZeroes && "0" == suffix[suffix.length - 1] && (suffix = suffix.substr(0, suffix.length - 1));
            "." == suffix[suffix.length - 1] && (suffix += "0");
          }
          suffix += ending;
          n = n.substr(0, len - 6);
          len = n.length;
        } else if (num >= 1e4 && compressToK) {
          decimal = 0;
          ending = fullEng ? " Thousands" : " K";
          if (dontStripDecimals) {
            suffix = "." + n.substr(len - 3, decimal);
            stripTrailingZeroes && "0" == suffix[suffix.length - 1] && (suffix = suffix.substr(0, suffix.length - 1));
            "." == suffix[suffix.length - 1] && (suffix += "0");
          }
          suffix += ending;
          n = n.substr(0, len - 3);
          len = n.length;
        }
        var chip = this.formatWithCommas(parseInt(n));
        formatted = currencySymbol ? chip + suffix : n + suffix;
        return formatted;
      };
      Helper.formatWithCommas = function(n, currencySymbol) {
        void 0 === currencySymbol && (currencySymbol = true);
        var num = "" + n;
        var len = num.length;
        if (len <= 3) {
          if (currencySymbol) return num;
          return num;
        }
        var i = len - 3;
        var formatted = num.substr(i, 3);
        for (i = len - 5; i >= 0; i -= 2) formatted = (i > 0, num.substring(i, i + 2) + "," + formatted);
        -1 == i && (formatted = num.substring(0, 2 + i) + "," + formatted);
        if (currencySymbol) return formatted;
        return formatted;
      };
      Helper.sendSentryLog = function(log) {
        Raven && Raven.captureBreadcrumb({
          message: log,
          level: "logger",
          category: "console"
        });
      };
      Helper.sendFBAnalytics = function(log) {
        log && "none" != log && FBInstant.logEvent(log);
      };
      Helper.getTimerString = function(timeLeft) {
        if (timeLeft < 0) return "00m 00s";
        var timeString = "";
        if (timeLeft > 24 * Constants_1.constants.TIME_S.HOUR) {
          var days = Math.floor(timeLeft / (24 * Constants_1.constants.TIME_S.HOUR));
          timeString = days < 10 ? "0" + days + "d " : days + "d ";
          timeLeft -= 24 * days * Constants_1.constants.TIME_S.HOUR;
          var hour = Math.floor(timeLeft / Constants_1.constants.TIME_S.HOUR);
          hour < 10 ? timeString = timeString + "0" + hour : timeString += hour;
          timeString += "h";
        } else if (timeLeft > Constants_1.constants.TIME_S.HOUR) {
          var hour = Math.floor(timeLeft / Constants_1.constants.TIME_S.HOUR);
          timeString = hour < 10 ? "0" + hour + "h " : hour + "h ";
          timeLeft -= hour * Constants_1.constants.TIME_S.HOUR;
          var min = Math.floor(timeLeft / Constants_1.constants.TIME_S.MINUTE);
          min < 10 ? timeString = timeString + "0" + min : timeString += min;
          timeString += "m";
        } else {
          var min = Math.floor(timeLeft / Constants_1.constants.TIME_S.MINUTE);
          timeString = min < 10 ? timeString + "0" + min + "m " : timeString + min + "m ";
          var secs = Math.floor(timeLeft % Constants_1.constants.TIME_S.MINUTE);
          secs < 10 ? timeString = timeString + "0" + secs : timeString += secs;
          timeString += "s";
        }
        return timeString;
      };
      Helper.logger = new Logger_1.Logger("IG_LUDO", true);
      Helper.captureScreen = function(scene, captureWidth, captureHeight, callback) {
        var rootNode = scene._sgNode || scene;
        var renderContext = cc._renderContext;
        captureWidth = Math.floor(captureWidth);
        captureHeight = Math.floor(captureHeight);
        var screenshotTexture = cc.RenderTexture.create(captureWidth, captureHeight, cc.Texture2D.PIXEL_FORMAT_RGBA8888, cc.sys.isBrowser ? renderContext.DEPTH_STENCIL : renderContext.DEPTH24_STENCIL8_OES);
        cc.sys.isBrowser && screenshotTexture.setAutoDraw(!0);
        var tempHeight = scene.y;
        cc._renderType !== cc.game.RENDER_TYPE_CANVAS && (scene.scaleY = -scene.scaleY);
        scene.y = captureHeight;
        var tempCulling = cc.macro.ENABLE_CULLING;
        cc.macro.ENABLE_CULLING = !1;
        screenshotTexture.beginWithClear(0, 0, 0, 255, 0, 0);
        rootNode.visit();
        screenshotTexture.end();
        cc.macro.ENABLE_CULLING = tempCulling;
        cc._renderType !== cc.game.RENDER_TYPE_CANVAS && (scene.scaleY = -scene.scaleY);
        scene.y = tempHeight;
        cc.sys.isBrowser && (screenshotTexture.scaleY = -1);
        var imagedata = "";
        cc.sys.isBrowser ? setTimeout(function() {
          try {
            var t = null, i = null;
            if (cc._renderType === cc.game.RENDER_TYPE_CANVAS) imagedata = screenshotTexture.sprite.getTexture().getHtmlElementObj().toDataURL("image/png"); else {
              var e = screenshotTexture.sprite.getTexture()._glID;
              var tempHeight = captureHeight;
              t = renderContext.getParameter(renderContext.FRAMEBUFFER_BINDING);
              var frameBuffer = renderContext.createFramebuffer();
              i = frameBuffer;
              renderContext.bindFramebuffer(renderContext.FRAMEBUFFER, frameBuffer);
              renderContext.framebufferTexture2D(renderContext.FRAMEBUFFER, renderContext.COLOR_ATTACHMENT0, renderContext.TEXTURE_2D, e, 0);
              var a = new Uint8Array(captureWidth * tempHeight * 4);
              renderContext.readPixels(0, 0, captureWidth, tempHeight, renderContext.RGBA, renderContext.UNSIGNED_BYTE, a);
              renderContext.deleteFramebuffer(frameBuffer);
              i = null;
              var s = document.createElement("canvas");
              s.id = "captureCanvas";
              s.width = captureWidth;
              s.height = tempHeight;
              s.getContext("2d").putImageData(new ImageData(Uint8ClampedArray.from(a), captureWidth, tempHeight), 0, 0);
              imagedata = s.toDataURL("image/png");
            }
            callback(imagedata, screenshotTexture);
          } catch (err) {
            Helper.logger.Log(err);
            if (i) {
              renderContext.deleteFramebuffer(i);
              i = null;
            }
            if (t) {
              renderContext.bindFramebuffer(renderContext.FRAMEBUFFER, t);
              t = null;
            }
            callback(imagedata, screenshotTexture);
          }
        }, 0) : callback(imagedata, screenshotTexture);
      };
      return Helper;
    }();
    exports.Helper = Helper;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "./Logger": "Logger"
  } ],
  HistoryChatBubbleComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c65b2worbZFBY4TPQweR0pj", "HistoryChatBubbleComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ChatBubbleViewComponent_1 = require("./ChatBubbleViewComponent");
    var Constants_1 = require("../Constants");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var ChatBubbleType;
    (function(ChatBubbleType) {
      ChatBubbleType[ChatBubbleType["MY_MESSAGE_BUBBLE"] = 0] = "MY_MESSAGE_BUBBLE";
      ChatBubbleType[ChatBubbleType["OPPONENT_MESSAGE_BUBBLE"] = 1] = "OPPONENT_MESSAGE_BUBBLE";
      ChatBubbleType[ChatBubbleType["USER_LEAVE_BUBBLE"] = 2] = "USER_LEAVE_BUBBLE";
      ChatBubbleType[ChatBubbleType["MY_TURN_INDICATOR_BUBBLE"] = 3] = "MY_TURN_INDICATOR_BUBBLE";
      ChatBubbleType[ChatBubbleType["MY_EMOJI_BUBBLE"] = 4] = "MY_EMOJI_BUBBLE";
      ChatBubbleType[ChatBubbleType["OPPONENT_EMOJI_BUBBLE"] = 5] = "OPPONENT_EMOJI_BUBBLE";
    })(ChatBubbleType = exports.ChatBubbleType || (exports.ChatBubbleType = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HistoryChatBubbleComponent = function(_super) {
      __extends(HistoryChatBubbleComponent, _super);
      function HistoryChatBubbleComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.myChatBubbleNode = null;
        _this.opponentChatBubbleNode = null;
        _this.myTurnIndicatorNode = null;
        _this.userLeftMessagerNode = null;
        _this.myEmojiBubbleNode = null;
        _this.opponentEmojiBubbleNode = null;
        _this.mPersistantComponent = null;
        return _this;
      }
      HistoryChatBubbleComponent.prototype.onLoad = function() {
        this.node.on(Constants_1.constants.Events.EVENT_BUBBLE_RESIZED, this.onBubbleResize, this);
      };
      HistoryChatBubbleComponent.prototype.start = function() {};
      HistoryChatBubbleComponent.prototype.initializeMyMessage = function(name, message, colorIndex) {
        this.mType = ChatBubbleType.MY_MESSAGE_BUBBLE;
        this.refreshBubbleType();
        this.node.setContentSize(this.node.getContentSize().width, this.myChatBubbleNode.getContentSize().height);
        var bubbleView = this.myChatBubbleNode.getComponent(ChatBubbleViewComponent_1.default);
        bubbleView.initializeNameAndMessage(name, message, colorIndex, ChatBubbleViewComponent_1.ChatBubbleAlignment.RIGHT);
      };
      HistoryChatBubbleComponent.prototype.initializeMyEmoji = function(name, emojiId, colorIndex) {
        this.mType = ChatBubbleType.MY_EMOJI_BUBBLE;
        this.refreshBubbleType();
        this.node.setContentSize(this.node.getContentSize().width, this.myEmojiBubbleNode.getContentSize().height);
        var bubbleView = this.myEmojiBubbleNode.getComponent(ChatBubbleViewComponent_1.default);
        bubbleView.initializeEmoji(name, emojiId, colorIndex, ChatBubbleViewComponent_1.ChatBubbleAlignment.RIGHT);
      };
      HistoryChatBubbleComponent.prototype.initializeOpponentMessage = function(name, message, colorIndex) {
        this.mType = ChatBubbleType.OPPONENT_MESSAGE_BUBBLE;
        this.refreshBubbleType();
        this.node.setContentSize(this.node.getContentSize().width, this.opponentChatBubbleNode.getContentSize().height);
        var bubbleView = this.opponentChatBubbleNode.getComponent(ChatBubbleViewComponent_1.default);
        bubbleView.initializeNameAndMessage(name, message, colorIndex, ChatBubbleViewComponent_1.ChatBubbleAlignment.LEFT);
      };
      HistoryChatBubbleComponent.prototype.initializeOpponentEmoji = function(name, emojiId, colorIndex) {
        this.mType = ChatBubbleType.OPPONENT_EMOJI_BUBBLE;
        this.refreshBubbleType();
        this.node.setContentSize(this.node.getContentSize().width, this.opponentEmojiBubbleNode.getContentSize().height);
        var bubbleView = this.opponentEmojiBubbleNode.getComponent(ChatBubbleViewComponent_1.default);
        bubbleView.initializeEmoji(name, emojiId, colorIndex, ChatBubbleViewComponent_1.ChatBubbleAlignment.LEFT);
      };
      HistoryChatBubbleComponent.prototype.initializeUserLeaveMessage = function(message) {
        this.mType = ChatBubbleType.USER_LEAVE_BUBBLE;
        this.refreshBubbleType();
        this.node.setContentSize(this.node.getContentSize().width, this.userLeftMessagerNode.getContentSize().height);
        var bubbleView = this.userLeftMessagerNode.getComponent(ChatBubbleViewComponent_1.default);
        bubbleView.initializeMessage(message, ChatBubbleViewComponent_1.ChatBubbleAlignment.CENTER);
      };
      HistoryChatBubbleComponent.prototype.initializeTurnIndicatorMessage = function(message) {
        this.mType = ChatBubbleType.MY_TURN_INDICATOR_BUBBLE;
        this.refreshBubbleType();
        this.node.setContentSize(this.node.getContentSize().width, this.myTurnIndicatorNode.getContentSize().height);
      };
      HistoryChatBubbleComponent.prototype.refreshBubbleType = function() {
        this.myChatBubbleNode.active = this.mType == ChatBubbleType.MY_MESSAGE_BUBBLE;
        this.opponentChatBubbleNode.active = this.mType == ChatBubbleType.OPPONENT_MESSAGE_BUBBLE;
        this.userLeftMessagerNode.active = this.mType == ChatBubbleType.USER_LEAVE_BUBBLE;
        this.myTurnIndicatorNode.active = this.mType == ChatBubbleType.MY_TURN_INDICATOR_BUBBLE;
        this.opponentEmojiBubbleNode.active = this.mType == ChatBubbleType.OPPONENT_EMOJI_BUBBLE;
        this.myEmojiBubbleNode.active = this.mType == ChatBubbleType.MY_EMOJI_BUBBLE;
      };
      HistoryChatBubbleComponent.prototype.onBubbleResize = function() {
        var size = this.node.getContentSize();
        this.mType == ChatBubbleType.MY_MESSAGE_BUBBLE ? this.node.setContentSize(this.node.getContentSize().width, this.myChatBubbleNode.getContentSize().height) : this.mType == ChatBubbleType.MY_EMOJI_BUBBLE ? this.node.setContentSize(this.node.getContentSize().width, this.myEmojiBubbleNode.getContentSize().height) : this.mType == ChatBubbleType.OPPONENT_MESSAGE_BUBBLE ? this.node.setContentSize(this.node.getContentSize().width, this.opponentChatBubbleNode.getContentSize().height) : this.mType == ChatBubbleType.OPPONENT_EMOJI_BUBBLE ? this.node.setContentSize(this.node.getContentSize().width, this.opponentEmojiBubbleNode.getContentSize().height) : this.mType == ChatBubbleType.USER_LEAVE_BUBBLE ? this.node.setContentSize(this.node.getContentSize().width, this.userLeftMessagerNode.getContentSize().height) : this.mType == ChatBubbleType.MY_TURN_INDICATOR_BUBBLE && this.node.setContentSize(this.node.getContentSize().width, this.myTurnIndicatorNode.getContentSize().height);
        size.height = this.node.getContentSize().height - size.height;
        size.width = this.node.getContentSize().width - size.width;
        if (!this.mPersistantComponent) {
          var persistantNode = cc.find("PersistantNode");
          var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
          this.mPersistantComponent = persistantController;
        }
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_BUBBLE_RESIZED, size);
      };
      __decorate([ property(cc.Node) ], HistoryChatBubbleComponent.prototype, "myChatBubbleNode", void 0);
      __decorate([ property(cc.Node) ], HistoryChatBubbleComponent.prototype, "opponentChatBubbleNode", void 0);
      __decorate([ property(cc.Node) ], HistoryChatBubbleComponent.prototype, "myTurnIndicatorNode", void 0);
      __decorate([ property(cc.Node) ], HistoryChatBubbleComponent.prototype, "userLeftMessagerNode", void 0);
      __decorate([ property(cc.Node) ], HistoryChatBubbleComponent.prototype, "myEmojiBubbleNode", void 0);
      __decorate([ property(cc.Node) ], HistoryChatBubbleComponent.prototype, "opponentEmojiBubbleNode", void 0);
      HistoryChatBubbleComponent = __decorate([ ccclass ], HistoryChatBubbleComponent);
      return HistoryChatBubbleComponent;
    }(cc.Component);
    exports.default = HistoryChatBubbleComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./ChatBubbleViewComponent": "ChatBubbleViewComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  HttpRequestImpl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f7d5efl2AZOOZigykfYcDxO", "HttpRequestImpl");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("./Logger");
    var HTTPRequestImpl = function() {
      function HTTPRequestImpl() {
        this.logger = new Logger_1.Logger("HTTPRequestImpl", true);
      }
      HTTPRequestImpl.prototype.init = function() {
        return this;
      };
      HTTPRequestImpl.prototype.initHTTPRequest = function() {
        window.XMLHttpRequest ? this.xhr_object = new XMLHttpRequest() : window.ActiveXObject ? this.xhr_object = new ActiveXObject("Microsoft.XMLHTTP") : this.logger && this.logger.Log("Not Supported");
      };
      HTTPRequestImpl.prototype.get = function(id, url, onData, onFail) {
        var self = this;
        this.id = id;
        this.initHTTPRequest();
        if (this.xhr_object) {
          self.xhr_object.open("GET", url, true);
          self.xhr_object.onreadystatechange = function() {
            if (4 == self.xhr_object.readyState) if (200 == self.xhr_object.status) {
              onData(self.xhr_object.responseText);
              self.xhr_object.onreadystatechange = null;
            } else {
              onFail("invalid status: " + self.xhr_object.status + " text=" + self.xhr_object.responseText + " statusText: " + self.xhr_object.statusText);
              self.xhr_object.onreadystatechange = null;
            }
            if (self.xhr_object.readyState <= 0) {
              self.logger && self.logger.Log("invalid ready state: " + self.xhr_object.readyState);
              self.xhr_object.onreadystatechange = null;
            }
          };
          this.xhr_object.onerror = function(a) {
            self.logger && self.logger.Log("XHR onerror statusText: " + self.xhr_object.statusText);
          };
          this.xhr_object.send(null);
        }
      };
      HTTPRequestImpl.prototype.post = function(id, url, data, onData, onFail) {
        var self = this;
        this.id = id;
        this.initHTTPRequest();
        if (this.xhr_object) {
          self.xhr_object.open("POST", url, true);
          self.xhr_object.onreadystatechange = function() {
            if (4 == self.xhr_object.readyState) if (200 == self.xhr_object.status) {
              onData(self.xhr_object.responseText);
              self.xhr_object.onreadystatechange = null;
            } else onFail("invalid status: " + self.xhr_object.status);
            if (self.xhr_object.readyState <= 0) {
              self.logger && self.logger.Log("invalid ready state: " + self.xhr_object.readyState);
              self.xhr_object.onreadystatechange = null;
            }
          };
          this.xhr_object.setRequestHeader("Content-type", "application/json");
          this.xhr_object.send(data);
        }
      };
      return HTTPRequestImpl;
    }();
    exports.HTTPRequestImpl = HTTPRequestImpl;
    cc._RF.pop();
  }, {
    "./Logger": "Logger"
  } ],
  IAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4ad63e9jUZCWI9/tU4jUP8L", "IAction");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  InMessages: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "40b0frQpFVJ55jvq4iWnWyQ", "InMessages");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LeagueModels_1 = require("./../models/LeagueModels");
    var Message_1 = require("../Generic/Message");
    var Constants_1 = require("../Constants");
    var Game_1 = require("../models/Game");
    var ChatModel_1 = require("../models/ChatModel");
    var PlayerProfileModel_1 = require("../models/PlayerProfileModel");
    var FtueModel_1 = require("../models/FtueModel");
    var Helper_1 = require("../Generic/Helper");
    var UserGetMessage = function(_super) {
      __extends(UserGetMessage, _super);
      function UserGetMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.rewardedVideoAvailableCount = 0;
        _this.rewardedInterstitialVideoAvailableCount = 0;
        _this.adsGrantChips = 0;
        _this.leagueInfo = {};
        _this.leagueEnabled = false;
        _this.leagueEnabledGames = 0;
        _this.leagueConfig = null;
        _this.canJoinLeagues = false;
        _this.routerConnectGamesWon = 10;
        _this.coolDownExpiry = 0;
        _this.isInCooldown = false;
        _this.seasonEndTime = 0;
        _this.shouldShowLeagueUnlockedPopup = false;
        _this.wasUserInactive = false;
        _this.showComingSoonPopup = false;
        _this.progressionEnded = false;
        _this.trophyRewards = {};
        _this.fistLeagueAssigned = -1;
        _this.showProgressionEndPopup = false;
        _this.locale = 0;
        _this.customName = "";
        _this.customCountryCode = "";
        _this.botSubscribeType = 0;
        _this.rankingFlagEnable = false;
        _this.rankingFlagDel = 1;
        _this.friendListDirty = [];
        _this.referralObj = null;
        _this.powerupEnabled = true;
        _this.powerupDebugUnlockCount = 0;
        _this.showDailyBonusVideo = false;
        _this.dbAdsMultiplier = 2;
        _this.oldGamesPlayed = -1;
        _this.subscribedToBot = false;
        _this.showAdsPopup = false;
        _this.id = data.user.pid;
        _this.receipt = data.user.rcpt;
        _this.gems = data.user.gems;
        _this.chipsFree = data.user.chips_free;
        _this.chipsPaid = data.user.chips_paid;
        _this.accessToken = data.user.access_token;
        _this.friendsList = data.user.sn_friend_list_obj;
        _this.name = data.user.sn_name;
        _this.photoUrl = data.user.sn_photo_url;
        _this.leaderboardExpiry = data.user.leaderboard_expires_in;
        _this.experiments = data.user.experiments;
        _this.snuid = data.user.snuid;
        _this.countryCode = data.user.countryCode;
        _this.isNewUser = data.is_new_user;
        _this.sslGameServerAddress = data.user.gameServerAddress;
        _this.gameServerListBetSelect = data.user.gameServerListBetSelect;
        _this.trophies = data.user.trophies;
        _this.gamesPlayed = data.user.games_played;
        _this.privateGamesPlayed = data.user.private_games_played;
        _this.dailyBonusValue = data.user.daily_bonus_value;
        _this.dailyBonusGemsValue = data.user.daily_bonus_gems_value;
        _this.dailyBonusGranted = data.user.daily_bonus_granted;
        _this.timeRemainingForDailyBonus = data.user.time_remaining_in_next_collect;
        _this.timeRemainingForAdReset = data.user.time_remaining_in_next_db_collect;
        _this.currentBetAmount = data.user.currentBetAmount;
        _this.twoPlayerWinMeta = data.user.twoPlayerWinMeta;
        _this.fourPlayerWinMeta = data.user.fourPlayerWinMeta;
        _this.currentBetAmountList = data.user.currentBetAmountList;
        _this.twoPlayerWinMetaList = data.user.twoPlayerWinMetaList;
        _this.fourPlayerWinMetaList = data.user.fourPlayerWinMetaList;
        _this.defaultBetSelectAmount = data.user.defaultBetSelectAmount;
        _this.statusServerAddress = data.user.statusServerAdd;
        _this.routerAddress = data.user.routerAdd;
        _this.privateRoomInfo = data.roomInfoV2;
        _this.leagueInfo = data.user.leagues;
        _this.playerWithinDThree = data.user.user_btw_dthree;
        _this.leagueEnabledGames = data.user.league_enable_games;
        _this.fbAnalyticsLoginEvent = data.user.user_fb_analytics_event;
        _this.rewardedAdsPlacementId = data.user.user_rewarded_id;
        _this.interstitialAdsPlacementId = data.user.user_interstitial_id;
        _this.interstitialAdsPriceSettingDefaultId = data.user.user_default_interstitial_id;
        _this.interstitialAdsPriceSettingVariantId = data.user.user_pricesetting_interstitial_id;
        _this.progAdConfig = data.user.user_prog_ad_config;
        _this.progAdMaxCount = data.user.user_prog_ad_max_count;
        _this.onlineRoomInfo = data.oldRoomInfo;
        _this.customName = data.user.custom_name;
        _this.customCountryCode = data.user.custom_country_code;
        _this.rankingFlagEnable = data.user.ranking_flag_enable || false;
        _this.rankingFlagDel = data.user.ranking_flag_del || 1;
        _this.rankingFlagEnableForSeason = data.user.ranking_flag_enable_for_season || [];
        _this.referralObj = {
          referralCode: data.user.user_referral_code || "",
          friendRefCodeData: data.friendRefCodeData,
          canUseReferralCode: data.user.can_use_referral_code,
          referralRewardAmount: data.user.referral_reward_amount || 0,
          referralFriendPhotoUrl: data.friendUserPhoto,
          referralRewardsGrantedCount: data.referralRewardsGrantedCount,
          referralEnabled: data.user.referralEnabled
        };
        _this.subscribedToBot = data.user.user_subscribed_to_bot;
        _this.emojisStatusList = data.user.user_list_for_locked_unlocked_emoji;
        _this.showAdsPopup = data.user.showAdsPopup;
        Helper_1.Helper.sendFBAnalytics(_this.fbAnalyticsLoginEvent);
        Helper_1.Helper.isEmpty(data.roomInfoV2) && !Helper_1.Helper.isEmpty(data.roomInfo) && (_this.privateRoomInfo = data.roomInfo);
        if (_this.dailyBonusGranted) {
          _this.chipsFree = _this.chipsFree - _this.dailyBonusValue;
          _this.dailyBonusGemsValue && (_this.gems = _this.gems - _this.dailyBonusGemsValue);
        }
        _this.referralObj.referralRewardsGrantedCount && (_this.chipsFree = _this.chipsFree - _this.referralObj.referralRewardAmount * _this.referralObj.referralRewardsGrantedCount);
        _this.surveyPopupData = data.user.surveyData;
        _this.custom_chat_enabled = data.custom_chat_enabled;
        _this.store_enabled = data.store_enabled;
        _this.gamesWon = data.user.games_won;
        _this.profileData = new PlayerProfileModel_1.PlayerProfileModel(data.user.profileInfo);
        _this.leagueEnabled = data.league_enabled;
        _this.ftue = new FtueModel_1.FtueModel(data.user.ftueCounts, data.user.isFtueEnabled);
        if (data.user.leagueDefs) {
          _this.leagueConfig = new LeagueModels_1.LeagueConfig();
          for (var i in data.user.leagueDefs) {
            var leagueInfo = new LeagueModels_1.LeagueInfo();
            leagueInfo.name = data.user.leagueDefs[i].name;
            leagueInfo.icon = data.user.leagueDefs[i].icon;
            leagueInfo.promotionIndex = data.user.leagueDefs[i].promotionIndex;
            leagueInfo.demotionIndex = data.user.leagueDefs[i].demotionIndex;
            leagueInfo.rewards = data.user.leagueDefs[i].rewards;
            leagueInfo.topRewards = data.user.leagueDefs[i].topRewards;
            _this.leagueConfig.leagueDefs.push(leagueInfo);
          }
        }
        data.user.rewardedVideoAvailableCount && (_this.rewardedVideoAvailableCount = data.user.rewardedVideoAvailableCount);
        data.user.rewardedInterstitialVideoAvailableCount && (_this.rewardedInterstitialVideoAvailableCount = data.user.rewardedInterstitialVideoAvailableCount);
        data.user.adsGrantChips && (_this.adsGrantChips = data.user.adsGrantChips);
        void 0 != data.router_connect_games_won && (_this.routerConnectGamesWon = data.router_connect_games_won);
        _this.canJoinLeagues = data.user.canJoinLeagues;
        data.user.league_cooldown_timer && (_this.coolDownExpiry = data.user.league_cooldown_timer);
        data.user.league_season_timer && (_this.seasonEndTime = data.user.league_season_timer);
        data.user.league_in_cooldown && (_this.isInCooldown = data.user.league_in_cooldown);
        data.user.shouldShowLeaguesUnlockedPopup && (_this.shouldShowLeagueUnlockedPopup = data.user.shouldShowLeaguesUnlockedPopup);
        data.user.wasUserInactive && (_this.wasUserInactive = data.user.wasUserInactive);
        data.user.showComingSoonPopup && (_this.showComingSoonPopup = data.user.showComingSoonPopup);
        data.user.showProgressionEnded && (_this.showProgressionEndPopup = data.user.showProgressionEnded);
        data.user.progressionEnded && (_this.progressionEnded = data.user.progressionEnded);
        data.user.trophyRewards && (_this.trophyRewards = data.user.trophyRewards);
        data.user.firstLeague && (_this.fistLeagueAssigned = data.user.firstLeague);
        data.user.trophyRewards && (_this.trophyRewards = data.user.trophyRewards);
        data.user.locale && (_this.locale = data.user.locale);
        data.user.botSubscribeType && (_this.botSubscribeType = data.user.botSubscribeType);
        data.user.sn_friend_list_dirty && (_this.friendListDirty = data.user.sn_friend_list_dirty);
        null != data.user.powerupEnabled && (_this.powerupEnabled = data.user.powerupEnabled);
        data.user.powerupDebugUnlockCount && (_this.powerupDebugUnlockCount = data.user.powerupDebugUnlockCount);
        data.user.show_daily_bonus_video && (_this.showDailyBonusVideo = data.user.show_daily_bonus_video);
        data.user.dbAdsMultiplier && (_this.dbAdsMultiplier = data.user.dbAdsMultiplier);
        data.user.old_games_played && (_this.oldGamesPlayed = data.user.old_games_played);
        return _this;
      }
      UserGetMessage.prototype.toString = function() {
        return "PlayerBootInfo: " + JSON.stringify(this.raw);
      };
      return UserGetMessage;
    }(Message_1.Message);
    exports.UserGetMessage = UserGetMessage;
    var RoomInfo = function() {
      function RoomInfo(data) {
        if (!data) return;
        this.winAmount = data.wa;
        this.diceRollTimer = data.dr;
        this.pawnTimer = data.pt;
        this.pawnXp = data.px;
        this.homeXp = data.hx;
        this.winXp = data.wx;
      }
      return RoomInfo;
    }();
    exports.RoomInfo = RoomInfo;
    var PlayerInfo = function() {
      function PlayerInfo(data) {
        this.customCountryCode = "";
        this.customName = "";
        this.pid = data.pid;
        this.snid = data.snid;
        this.snuid = data.snuid;
        this.name = data.name;
        this.cashInHand = data.cashInHand;
        this.gems = data.gems;
        this.gameChips = data.gameChips;
        this.state = data.state;
        this.queue = data.queue;
        this.chaal = data.chaal;
        this.index = data.index;
        this.avt = data.avt;
        this.snavt = data.snavt;
        this.star = data.star;
        this.level = data.level;
        this.amountBet = data.amountBet;
        this.pawnIndexes = data.pawns;
        this.clr = data.clr;
        this.dice = data.dice;
        this.rolling = data.rolling;
        this.move = data.move;
        this.pawnAvatarId = data.pawnAvatarId;
        this.boardId = data.boardId;
        this.autoplay = data.autoplay;
        this.ctr = data.ctr;
        this.sdp = data.sdp;
        this.fbPhotoUrl = data.fbPhotoUrl;
        this.pawnHighLightMap = data.highlight;
        this.queuedTurns = data.queuedTurns;
        this.sixRolledInTurn = data.sixRolledInTurn;
        this.trophies = data.trophies;
        this.powerupCount = data.powerupCount;
        this.powerupPrice = data.powerupPrice;
        this.profileInfo = new PlayerProfileModel_1.PlayerProfileModel(data.profileInfo);
        this.league = data.league;
        this.customCountryCode = data.customCountryCode;
        this.customName = data.customName;
      }
      return PlayerInfo;
    }();
    exports.PlayerInfo = PlayerInfo;
    var RoomJoinAck = function(_super) {
      __extends(RoomJoinAck, _super);
      function RoomJoinAck(data) {
        var _this = _super.call(this, data) || this;
        _this.playersInfo = {};
        _this.gamesToUnlockPowerup = 0;
        _this.totalGamesToUnlockPowerup = 0;
        _this.powerupEnabled = true;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.instanceId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INSTANCE_ID];
        _this.state = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_STATE];
        var playersInfo = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.PLAYER_INFO];
        for (var key in playersInfo) if (playersInfo.hasOwnProperty(key)) {
          var element = playersInfo[key];
          _this.playersInfo[key] = new PlayerInfo(element);
        }
        _this.curIndex = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INDEX];
        _this.timer = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.TIMER];
        _this.roomInfo = new RoomInfo(data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_INFO]);
        _this.sessionKey = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SESSION_KEY];
        _this.isPrivate = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.IS_PRIVATE];
        _this.tableId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.TABLE_TYPE];
        _this.ruleId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.RULE_TYPE];
        _this.betAmount = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_BET_AMT];
        _this.safeLocations = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.SAFE_LOCATIONS];
        _this.diceRollType = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.NEW_DICE_ROLL];
        _this.nextDiceNumber = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.NEXT_DICE_NUMBER];
        _this.privateKey = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PRIVATE_KEY];
        _this.hostPid = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.CREATOR_ID];
        _this.rewards = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.REWARDS_INFO];
        _this.inviteWaitDuration = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.INVITE_WAITING_DURATION];
        _this.inviteWaitTimeRem = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.INVITE_WAITING_TIME_REM];
        _this.myRewardMeta = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_WIN_META];
        _this.customCountryCode = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.CUSTOM_COUNTRY_CODE];
        _this.customName = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.CUSTOM_USER_NAME];
        _this.gamesToUnlockPowerup = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.GAMES_UNLOCK_COUNT_FOR_POWERUP];
        _this.totalGamesToUnlockPowerup = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.TOTAL_GAMES_UNLOCK_COUNT_FOR_POWERUP];
        _this.powerupEnabled = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.POWERUP_ENABLED];
        return _this;
      }
      RoomJoinAck.prototype.toString = function() {
        return "RoomJoinAck: " + JSON.stringify(this.raw);
      };
      return RoomJoinAck;
    }(Message_1.Message);
    exports.RoomJoinAck = RoomJoinAck;
    var ReconnectAck = function(_super) {
      __extends(ReconnectAck, _super);
      function ReconnectAck(data) {
        var _this = _super.call(this, data) || this;
        _this.success = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.RESULT];
        return _this;
      }
      return ReconnectAck;
    }(RoomJoinAck);
    exports.ReconnectAck = ReconnectAck;
    var RoomJoinUpdate = function(_super) {
      __extends(RoomJoinUpdate, _super);
      function RoomJoinUpdate(data) {
        var _this = _super.call(this, data) || this;
        _this.league = -1;
        _this.customCountryCode = "";
        _this.customName = "";
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.pid = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.USER_ID];
        _this.snid = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SNID];
        _this.snuid = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SNUID];
        _this.chips = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.CASH_IN_HAND];
        _this.gameChips = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.CASH_IN_GAME];
        _this.gems = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.GEMS];
        _this.name = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.FIRST_NAME];
        _this.avt = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.AVATAR];
        _this.star = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.STAR];
        _this.level = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LEVEL];
        _this.color = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.COLOR];
        _this.progress = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.PROGRESS];
        _this.pawnAvatarId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PAWN_AVATAR_ID];
        _this.country = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.COUNTRY];
        _this.snAvt = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SN_AVATAR_ID];
        _this.snPhotoUrl = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SN_PHOTO_URL];
        _this.trophies = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.TROPHIES];
        _this.myRewardMeta = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_WIN_META];
        _this.profileInfo = new PlayerProfileModel_1.PlayerProfileModel(data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_PROFILE_INFO]);
        _this.league = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LEAGUES.LEAGUE];
        _this.customCountryCode = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.CUSTOM_COUNTRY_CODE];
        _this.customName = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.CUSTOM_USER_NAME];
        _this.name = _this.customName || _this.name;
        return _this;
      }
      return RoomJoinUpdate;
    }(Message_1.Message);
    exports.RoomJoinUpdate = RoomJoinUpdate;
    var CloseAck = function(_super) {
      __extends(CloseAck, _super);
      function CloseAck(data) {
        var _this = _super.call(this, data) || this;
        _this.coins = 0;
        _this.currentBetAmount = 0;
        _this.currentTwoPlayerRewardsMeta = [];
        _this.currentFourPlayerRewardsMeta = [];
        _this.coins = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.CASH_IN_HAND];
        _this.currentBetAmount = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_NEXT_BET_AMT];
        _this.currentTwoPlayerRewardsMeta = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_NEXT_TWOPLAYER_REWARD_META];
        _this.currentFourPlayerRewardsMeta = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_NEXT_FOURPLAYER_REWARD_META];
        return _this;
      }
      return CloseAck;
    }(Message_1.Message);
    exports.CloseAck = CloseAck;
    var ForceKick = function(_super) {
      __extends(ForceKick, _super);
      function ForceKick(data) {
        var _this = _super.call(this, data) || this;
        _this.coins = 0;
        _this.currentBetAmount = 0;
        _this.currentTwoPlayerRewardsMeta = [];
        _this.currentFourPlayerRewardsMeta = [];
        _this.reason = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.FORCE_KICK_REASON];
        _this.coins = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.CASH_IN_HAND];
        _this.currentBetAmount = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_NEXT_BET_AMT];
        _this.currentTwoPlayerRewardsMeta = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_NEXT_TWOPLAYER_REWARD_META];
        _this.currentFourPlayerRewardsMeta = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IG_NEXT_FOURPLAYER_REWARD_META];
        return _this;
      }
      return ForceKick;
    }(Message_1.Message);
    exports.ForceKick = ForceKick;
    var JoinTableUpdate = function(_super) {
      __extends(JoinTableUpdate, _super);
      function JoinTableUpdate(data) {
        var _this = _super.call(this, data) || this;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.index = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INDEX];
        _this.userId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.USER_ID];
        _this.amountInHand = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.CASH_IN_HAND];
        _this.amountInGame = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.CASH_IN_GAME];
        return _this;
      }
      return JoinTableUpdate;
    }(Message_1.Message);
    exports.JoinTableUpdate = JoinTableUpdate;
    var PlayerInfoUpdate = function(_super) {
      __extends(PlayerInfoUpdate, _super);
      function PlayerInfoUpdate(data) {
        var _this = _super.call(this, data) || this;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.index = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INDEX];
        _this.userId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.USER_ID];
        _this.snPhotoUrl = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SN_PHOTO_URL];
        return _this;
      }
      return PlayerInfoUpdate;
    }(Message_1.Message);
    exports.PlayerInfoUpdate = PlayerInfoUpdate;
    var DiceRollAck = function(_super) {
      __extends(DiceRollAck, _super);
      function DiceRollAck(data) {
        var _this = _super.call(this, data) || this;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.index = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INDEX];
        _this.pid = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.USER_ID];
        _this.diceRoll = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.DICE_ROLLS];
        _this.rollIndex = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.ROLL_INDEX];
        _this.isWasteTurn = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.WASTE_TURN];
        _this.nextIndex = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.NEXT_INDEX];
        _this.pawnMovementObj = new Game_1.PawnMovementObject(data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PAWN_MOVEMENT]);
        _this.timer = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.TIMER];
        _this.isLastRoll = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IS_LAST_ROLL];
        _this.queuedTurns = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.QUEUED_TURNS];
        _this.pawnHighlight = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PAWN_HIGHLIGHT];
        _this.playerWon = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PLAYER_WON];
        data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PLAYER_WIN_META] && (_this.winMeta = new Game_1.WinMeta(data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PLAYER_WIN_META]));
        _this.forceFetchReceipt = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.FORCE_FETCH_RECEIPT];
        _this.powerupCount = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.POWERUP_COUNT];
        _this.powerupPrice = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.POWERUP_PRICE];
        _this.nextPowerupPrice = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.NEXT_POWERUP_PRICE];
        _this.gemsAvailable = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.GEMS];
        _this.powerupUsed = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.POWER_USED];
        _this.rerollTime = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.REROLL_TIME];
        return _this;
      }
      DiceRollAck.prototype.toString = function() {
        return "DiceRollAck: " + JSON.stringify(this.raw);
      };
      return DiceRollAck;
    }(Message_1.Message);
    exports.DiceRollAck = DiceRollAck;
    var BootCollect = function(_super) {
      __extends(BootCollect, _super);
      function BootCollect(data) {
        var _this = _super.call(this, data) || this;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.index = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INDEX];
        _this.instanceId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INSTANCE_ID];
        _this.timer = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.TIMER];
        return _this;
      }
      return BootCollect;
    }(Message_1.Message);
    exports.BootCollect = BootCollect;
    var UserLeave = function(_super) {
      __extends(UserLeave, _super);
      function UserLeave(data) {
        var _this = _super.call(this, data) || this;
        _this.playerId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.USER_ID];
        _this.nextIndex = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.NEXT_INDEX];
        return _this;
      }
      return UserLeave;
    }(Message_1.Message);
    exports.UserLeave = UserLeave;
    var HeartBeat = function(_super) {
      __extends(HeartBeat, _super);
      function HeartBeat(data) {
        var _this = _super.call(this, data) || this;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        return _this;
      }
      return HeartBeat;
    }(Message_1.Message);
    exports.HeartBeat = HeartBeat;
    var CountDownStart = function(_super) {
      __extends(CountDownStart, _super);
      function CountDownStart(data) {
        var _this = _super.call(this, data) || this;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        return _this;
      }
      return CountDownStart;
    }(Message_1.Message);
    exports.CountDownStart = CountDownStart;
    var AutoPlayUpdate = function(_super) {
      __extends(AutoPlayUpdate, _super);
      function AutoPlayUpdate(data) {
        var _this = _super.call(this, data) || this;
        _this.pid = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.USER_ID];
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.index = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INDEX];
        _this.autoplay = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.AUTOPLAY];
        return _this;
      }
      AutoPlayUpdate.prototype.toString = function() {
        return "AutoPlayUpdate: " + JSON.stringify(this.raw);
      };
      return AutoPlayUpdate;
    }(Message_1.Message);
    exports.AutoPlayUpdate = AutoPlayUpdate;
    var PawnMovementAck = function(_super) {
      __extends(PawnMovementAck, _super);
      function PawnMovementAck(data) {
        var _this = _super.call(this, data) || this;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.index = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INDEX];
        _this.pid = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.USER_ID];
        var progressArray = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PROGRESS_META];
        var captureArray = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.CAPTURE_META];
        var data1 = {
          PRM: progressArray,
          CM: captureArray
        };
        _this.pawnMovementObject = new Game_1.PawnMovementObject(data1);
        _this.playerWon = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PLAYER_WON];
        _this.nextPlayerIndex = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.NEXT_INDEX];
        _this.timer = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.TIMER];
        _this.queuedTurns = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.QUEUED_TURNS];
        _this.pawnHighlight = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PAWN_HIGHLIGHT];
        data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PLAYER_WIN_META] && (_this.winMeta = new Game_1.WinMeta(data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PLAYER_WIN_META]));
        _this.forceFetchReceipt = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.FORCE_FETCH_RECEIPT];
        return _this;
      }
      return PawnMovementAck;
    }(Message_1.Message);
    exports.PawnMovementAck = PawnMovementAck;
    var GameEnd = function(_super) {
      __extends(GameEnd, _super);
      function GameEnd(data) {
        var _this = _super.call(this, data) || this;
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.instanceId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INSTANCE_ID];
        _this.index = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.INDEX];
        _this.pid = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.USER_ID];
        _this.isInDiceRoll = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.IS_IN_DICE_ROLL];
        data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PLAYER_WIN_META] && (_this.winMeta = new Game_1.WinMeta(data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PLAYER_WIN_META]));
        _this.pawnMovementObj = new Game_1.PawnMovementObject(data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.PAWN_MOVEMENT]);
        _this.rollValue = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.DICE_ROLLS];
        _this.rollIndex = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.ROLL_INDEX];
        _this.forceFetchReceipt = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.FORCE_FETCH_RECEIPT];
        _this.powerupCount = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.POWERUP_COUNT];
        _this.powerupPrice = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.POWERUP_PRICE];
        _this.gemsAvailable = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.GEMS];
        _this.powerupUsed = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.LUDO.POWER_USED];
        return _this;
      }
      GameEnd.prototype.toString = function() {
        return "GameEndPacket: " + JSON.stringify(this.raw);
      };
      return GameEnd;
    }(Message_1.Message);
    exports.GameEnd = GameEnd;
    var LeaderBoardMessage = function(_super) {
      __extends(LeaderBoardMessage, _super);
      function LeaderBoardMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.leaderboardData = [];
        for (var id in data) {
          var idsList = id.split("_");
          if (idsList[0]) {
            var valueList = data[id].split(";");
            var values = {};
            if (valueList.length >= 3) {
              values.coins_won = parseInt(valueList[0]);
              values.games_won = parseInt(valueList[1]);
              values.pawns_captured = parseInt(valueList[2]);
              values.pid = idsList[0];
              values.snuid = idsList[2];
              _this.leaderboardData.push(values);
            }
          }
        }
        return _this;
      }
      return LeaderBoardMessage;
    }(Message_1.Message);
    exports.LeaderBoardMessage = LeaderBoardMessage;
    var SocialInPacket = function(_super) {
      __extends(SocialInPacket, _super);
      function SocialInPacket(data) {
        var _this = _super.call(this, data) || this;
        _this.rawMessages = [];
        _this.messages = [];
        _this.roomId = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.ROOM_ID];
        _this.rawMessages = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SOCIAL_MESSAGES];
        for (var i in _this.rawMessages) {
          var message = _this.rawMessages[i];
          var pid = message.substr(0, message.indexOf("_"));
          var name = message.substr(pid.length + 1, message.indexOf("|") - (pid.length + 1));
          var mes = message.substr(message.indexOf("|") + 1, message.length - (name.length + 1));
          var chatModel = new ChatModel_1.ChatModel(mes, pid, name);
          _this.messages.push(chatModel);
        }
        return _this;
      }
      SocialInPacket.prototype.toString = function() {
        return "SocialInPacket: " + JSON.stringify(this.raw);
      };
      return SocialInPacket;
    }(Message_1.Message);
    exports.SocialInPacket = SocialInPacket;
    var SurveyPopupPacket = function(_super) {
      __extends(SurveyPopupPacket, _super);
      function SurveyPopupPacket(data) {
        var _this = _super.call(this, data) || this;
        _this.id = -1;
        _this.cancel = true;
        _this.native = false;
        _this.heading = "";
        _this.question = "";
        _this.type = 1;
        _this.opt1 = "";
        _this.opt2 = "";
        _this.id = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SURVEY_POPUP.ID];
        _this.cancel = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SURVEY_POPUP.CANCEL];
        _this.native = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SURVEY_POPUP.NATIVE];
        _this.heading = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SURVEY_POPUP.HEADING];
        _this.question = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SURVEY_POPUP.QUESTION];
        _this.type = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SURVEY_POPUP.TYPE];
        _this.opt1 = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SURVEY_POPUP.OPTION1];
        _this.opt2 = data[Constants_1.constants.FID.MESSAGE_PARAMS][Constants_1.constants.FID.SURVEY_POPUP.OPTION2];
        return _this;
      }
      SurveyPopupPacket.prototype.toString = function() {
        return "SurveyPopupPacket: " + JSON.stringify(this.raw);
      };
      return SurveyPopupPacket;
    }(Message_1.Message);
    exports.SurveyPopupPacket = SurveyPopupPacket;
    var RejoinPacket = function(_super) {
      __extends(RejoinPacket, _super);
      function RejoinPacket(data) {
        return _super.call(this, data) || this;
      }
      RejoinPacket.prototype.toString = function() {
        return "Rejoin: " + JSON.stringify(this.raw);
      };
      return RejoinPacket;
    }(Message_1.Message);
    exports.RejoinPacket = RejoinPacket;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Message": "Message",
    "../models/ChatModel": "ChatModel",
    "../models/FtueModel": "FtueModel",
    "../models/Game": "Game",
    "../models/PlayerProfileModel": "PlayerProfileModel",
    "./../models/LeagueModels": "LeagueModels"
  } ],
  InterstitialAdController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de2eeLcCoFLHpgHl7/sZnDC", "InterstitialAdController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var Constants_1 = require("../Constants");
    var ExperiementController_1 = require("./ExperiementController");
    var Helper_1 = require("../Generic/Helper");
    var InterstitialAdController = function() {
      function InterstitialAdController(persistantNodeComponent) {
        this.mPreloadedRewardedVideo = null;
        this.mPreloadedRewardedVideoLoaded = false;
        this.mShowingRewardedVideo = false;
        this.mPreloadingVideo = false;
        this.mRewardedVideoAvailableCount = 0;
        this.mPreloadVideoTryCount = 0;
        this.mPreloadErrorCode = "";
        this.mInitialized = false;
        this.mQueuedChips = 0;
        this.mFirstTimeVideoPreload = false;
        this.countPreloadedVideo = 0;
        this.mAdInstanceTryCount = 0;
        this.mIsInterstitialAdSupported = false;
        this.mInterstitialAdPlacementId = "1072612402873309_1340095722791641";
        this.mInterstitialAdDefaultPlacementId = "1072612402873309_1340095722791641";
        this.mIsLobby = true;
        this.mLogger = new Logger_1.Logger("InterstitialAdsController", true);
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mFirstTimeVideoPreload = true;
        this.mAdInstanceTryCount = 0;
        document.addEventListener("visibilitychange", this.onVisibilityChange.bind(this));
      }
      InterstitialAdController.prototype.setInterstitialAdPlacementId = function(id) {
        this.mLogger.Log("tanisha setInterstitialAdPlacementId from " + this.mInterstitialAdPlacementId + " to " + id);
        this.mInterstitialAdPlacementId = id;
      };
      InterstitialAdController.prototype.getInterstitialAdPlacementId = function() {
        return this.mInterstitialAdPlacementId;
      };
      InterstitialAdController.prototype.setInterstitialVideoAvailableCount = function(count) {
        this.mRewardedVideoAvailableCount = count;
        this.mLogger.Log("tanisha setInterstitialVideoAvailableCount enter " + this.mRewardedVideoAvailableCount);
        this.mInitialized && this.checkPreloadConditionForNextAdLoad();
      };
      InterstitialAdController.prototype.checkPreloadConditionForNextAdLoad = function() {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_INTERSTITIAL_PRELOAD);
        variant < 2 && this.startPreloadInterstitialVideo();
      };
      InterstitialAdController.prototype.startPreloadInterstitialVideo = function() {
        this.mLogger.Log("tanisha startPreloadInterstitial_Video_fnc enter");
        var self = this;
        this.preloadInterstitialVideo(function(val) {
          self.mLogger.Log("tanisha startPreloadInterstitial_Video_fnc val returned " + val);
          if (val == Constants_1.constants.AD_ERROR_CODE.DONT_TRY_PRELOAD) return;
          if (val == Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOADED) {
            self.mLogger.Log("tanisha startPreloadInterstitial_Video_fnc loadInterstitialVideo  match ");
            self.mPreloadVideoTryCount = 0;
            self.loadInterstitialVideo();
          } else val == Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOAD_FAIL && self.mAdInstanceTryCount <= 3 && setTimeout(self.preloadInterstitialVideo.bind(self), 3e4);
        });
      };
      InterstitialAdController.prototype.getVideoAvailableCount = function() {
        return this.mRewardedVideoAvailableCount;
      };
      InterstitialAdController.prototype.canShowAdBetweenGame = function() {
        var interstitialNextBtnVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_INTERSTITIAL_NEXT_BTN);
        if (2 == interstitialNextBtnVar && this.isVideoPreloaded() && this.mRewardedVideoAvailableCount > 0) return true;
        return false;
      };
      InterstitialAdController.prototype.setIsLobby = function(isLobby) {
        this.mIsLobby = isLobby;
      };
      InterstitialAdController.prototype.getIsLobby = function() {
        return this.mIsLobby;
      };
      InterstitialAdController.prototype.checkBetweenGameCheckAdCondition = function() {
        if (!this.getIsLobby()) {
          this.mLogger.Log("checkBetweenGameCheckAdCondition isGame");
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_START_GAME_FROM_RESULT_POPUP);
        }
      };
      InterstitialAdController.prototype.initiateInterstitialVideoAds = function(source) {
        this.mLogger.Log("initiateInterstitialVideoAds enter this.mShowingRewardedVideo " + this.mShowingRewardedVideo + "this.mPreloadingVideo " + this.mPreloadingVideo);
        "next_game" == source ? this.setIsLobby(false) : this.setIsLobby(true);
        if (this.mShowingRewardedVideo || this.mPreloadingVideo || this.mRewardedVideoAvailableCount <= 0 || !this.mPreloadedRewardedVideo) {
          this.checkBetweenGameCheckAdCondition();
          return;
        }
        this.mShowingRewardedVideo = true;
        this.mLogger.Log("initiateInterstitialVideoAds enter source " + source);
        this.mPersistantNodeComponent.GetStatsController().count("ads", 1, "initiate", source, this.getVideoAvailableCount() + "", "interstitial", this.getInterstitialAdPlacementId());
        var self = this;
        var videoToShow = this.mPreloadedRewardedVideo;
        this.mLogger.Log("tanisha initiateVideoAds enter");
        videoToShow.showAsync().then(function() {
          self.mPersistantNodeComponent.GetStatsController().count("ads", 1, "end_client", "success", self.getVideoAvailableCount() + "", "interstitial", self.getInterstitialAdPlacementId());
          Helper_1.Helper.sendFBAnalytics("interstitial_watched");
          self.mLogger.Log("tanisha initiateInterstitialVideoAds success");
          self.cleanupOnInterstitialVideShown();
          self.verifyInterstitialAdsGrant();
        }).catch(function(e) {
          self.mLogger.Log("initiateInterstitialVideoAds show error " + JSON.stringify(e));
          self.mPersistantNodeComponent.GetStatsController().count("ads", 1, "end_client", "error", self.getVideoAvailableCount() + "", "interstitial", self.getInterstitialAdPlacementId());
          self.cleanupOnInterstitialVideShown();
          self.cleanupOnVerifyInterstitialAdsGrantComplete();
        });
      };
      InterstitialAdController.prototype.preloadInterstitialVideo = function(successCallback) {
        this.mLogger.Log("tanisha preloadInterstitialVideo enter mPreloadingVideo" + this.mPreloadingVideo + " --mRewardedVideoAvailableCount " + this.mRewardedVideoAvailableCount + "this.mPreloadedRewardedVideo " + JSON.stringify(this.mPreloadedRewardedVideo) + " session_function_cnt " + this.countPreloadedVideo++);
        if (!this.isRewardedVideoSupported() || this.mRewardedVideoAvailableCount <= 0 || this.isVideoPreloaded()) {
          this.mLogger.Log("tanisha preloadInterstitialVideo return dont try further");
          return Constants_1.constants.AD_ERROR_CODE.DONT_TRY_PRELOAD;
        }
        if (this.mPreloadedRewardedVideo && this.mPreloadingVideo) {
          this.mLogger.Log("tanisha preloadInterstitialVideo return proceed for loading");
          successCallback && successCallback(Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOADED);
          return;
        }
        this.mLogger.Log("tanisha preloading rewarded video");
        this.mFirstTimeVideoPreload = false;
        var self = this;
        this.mPreloadingVideo = true;
        this.mPreloadErrorCode = "";
        this.mLogger.Log("tanisha preloading video for id " + this.getInterstitialAdPlacementId());
        FBInstant.getInterstitialAdAsync(self.getInterstitialAdPlacementId()).then(function(rewarded) {
          self.mPreloadedRewardedVideo = rewarded;
          self.mPreloadedRewardedVideoLoaded = false;
          self.mLogger.Log("getInterstitialAdAsync return value" + JSON.stringify(rewarded));
          self.mAdInstanceTryCount = 0;
          successCallback && successCallback(Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOADED);
        }, function(err) {
          self.mLogger.Log("getInterstitialAdAsync error" + err.code);
          self.mAdInstanceTryCount++;
          successCallback && successCallback(Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOAD_FAIL);
        }).catch(function(err) {
          self.mLogger.Log("catchhhh getInterstitialAdAsync Error: " + err);
          self.mAdInstanceTryCount++;
          successCallback && successCallback(Constants_1.constants.AD_ERROR_CODE.ADS_INSTANCE_DOWNLOAD_FAIL);
        });
      };
      InterstitialAdController.prototype.loadInterstitialVideo = function() {
        var self = this;
        this.mLogger.Log("tanisha loadInterstitialVideo enter " + JSON.stringify(this.mPreloadedRewardedVideo));
        if (this.mPreloadedRewardedVideo) {
          this.mLogger.Log("tanisha loadAsync fb call before");
          this.mPreloadedRewardedVideo.loadAsync().then(function() {
            self.mLogger.Log("loadInterstitialVideo successfull");
            self.mPreloadedRewardedVideoLoaded = true;
            self.mPreloadingVideo = false;
            self.mPersistantNodeComponent.GetStatsController().count("ads", 1, "loaded", "", self.getVideoAvailableCount() + "", "interstitial", self.getInterstitialAdPlacementId());
          }, function(err) {
            self.mLogger.Log("LoadAsync Rewarded video preload Error: " + err.code);
            self.preloadCheckAndTry(err.code);
          }).catch(function(err) {
            self.mLogger.Log("catchhhh LoadAsync Rewarded video preload Error: " + err);
            self.preloadCheckAndTry(err.code);
          });
        }
        this.mLogger.Log("tanisha loadInterstitialVideo exit");
      };
      InterstitialAdController.prototype.preloadCheckAndTry = function(errorMsg) {
        if (this.getInterstitialAdPlacementId() == this.mInterstitialAdDefaultPlacementId) this.onVideoPreloadError(errorMsg); else {
          this.mPersistantNodeComponent.GetStatsController().count("ads", 1, "failed", null != errorMsg ? errorMsg : "", this.getVideoAvailableCount() + "", "interstitial", this.getInterstitialAdPlacementId());
          this.setInterstitialAdPlacementId(this.mInterstitialAdDefaultPlacementId);
          this.mPreloadedRewardedVideo = null;
          this.mPreloadedRewardedVideoLoaded = false;
          this.mPreloadingVideo = false;
          this.mFirstTimeVideoPreload = true;
          this.startPreloadInterstitialVideo();
        }
      };
      InterstitialAdController.prototype.onVideoPreloadError = function(errorMsg) {
        this.mLogger.Log("tanisha preloading rewarded video error " + errorMsg);
        this.mPersistantNodeComponent.GetStatsController().count("ads", 1, "failed", null != errorMsg ? errorMsg : "", this.getVideoAvailableCount() + "", "interstitial", this.getInterstitialAdPlacementId());
        this.mPreloadingVideo = false;
        this.mPreloadErrorCode = errorMsg;
        if ("ADS_TOO_MANY_INSTANCES" != errorMsg) {
          this.mPreloadVideoTryCount++;
          if (!document.hidden && this.mPreloadVideoTryCount < 5) {
            this.mPersistantNodeComponent.GetStatsController().count("ads", 1, "retry", "", this.getVideoAvailableCount() + "", "interstitial", this.getInterstitialAdPlacementId());
            this.mLogger.Log("tanisha preloading rewarded video setting to retry");
            setTimeout(this.loadInterstitialVideo.bind(this), 5e4);
          }
        }
      };
      InterstitialAdController.prototype.cleanupOnInterstitialVideShown = function() {
        this.mPreloadedRewardedVideo = null;
        this.mPreloadedRewardedVideoLoaded = false;
        this.checkBetweenGameCheckAdCondition();
        this.checkPreloadConditionForNextAdLoad();
      };
      InterstitialAdController.prototype.onVisibilityChange = function() {
        if (!document.hidden && !this.mPreloadedRewardedVideoLoaded && this.mPreloadVideoTryCount > 0) {
          this.mLogger.Log("tanisha retry preload on visibilitychange");
          this.loadInterstitialVideo();
        }
      };
      InterstitialAdController.prototype.isVideoPreloaded = function() {
        return !this.mPreloadingVideo && null != this.mPreloadedRewardedVideo && this.mPreloadedRewardedVideoLoaded;
      };
      InterstitialAdController.prototype.verifyInterstitialAdsGrant = function() {
        var playerController = this.mPersistantNodeComponent.GetPlayerController();
        this.mLogger.Log("tanisha verifyInterstitialAdsGrant enter");
        var params = {
          pid: playerController.getModel().getId(),
          access_token: playerController.getModel().getAccessToken(),
          duid: playerController.getModel().getSnuid()
        };
        var self = this;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/user/verifyRewardedInterstitialAds", params, function(d) {
          self.setInterstitialVideoAvailableCount(d.availableVideos);
          self.cleanupOnVerifyInterstitialAdsGrantComplete();
          self.mLogger.Log("tanisha verifyInterstitialAdsGrant success... EVENT_REWARDED_VIDEO_VERIFY_SUCCESS enter");
        }, function() {
          self.cleanupOnVerifyInterstitialAdsGrantComplete();
          self.mLogger.Log("eagle: payment verification error. Retrying again");
        });
      };
      InterstitialAdController.prototype.cleanupOnVerifyInterstitialAdsGrantComplete = function() {
        this.mShowingRewardedVideo = false;
      };
      InterstitialAdController.prototype.isRewardedVideoSupported = function() {
        return this.mIsInterstitialAdSupported;
      };
      InterstitialAdController.prototype.setStateForInterstitialSupport = function() {
        var supportedAPIs = FBInstant.getSupportedAPIs();
        var interstitialAdsVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_INTERSTITIAL);
        var dthree = this.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerWithinDThree();
        this.mLogger.Log("dthreee " + dthree);
        this.mLogger.Log("interstitialAdsVariant val " + interstitialAdsVariant);
        if (!(null != supportedAPIs && supportedAPIs.indexOf("getInterstitialAdAsync") > -1) || 0 == interstitialAdsVariant || 1 == interstitialAdsVariant || 3 == interstitialAdsVariant && dthree) {
          this.mIsInterstitialAdSupported = false;
          return;
        }
        this.mIsInterstitialAdSupported = true;
      };
      InterstitialAdController.prototype.initInterstitialVideoAds = function() {
        this.setStateForInterstitialSupport();
        if (!this.isRewardedVideoSupported()) return;
        var placementId = this.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerInterstitalAdsPriceSettingVariantId();
        placementId && this.setInterstitialAdPlacementId(placementId);
        var preloadAdVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_INTERSTITIAL_PRELOAD);
        2 == preloadAdVar && this.setInterstitialAdPlacementId(this.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerInterstitialAdDefaultPlacementId());
        this.mInterstitialAdDefaultPlacementId = this.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerInterstitialAdDefaultPlacementId();
        this.mInitialized = true;
        this.checkPreloadConditionForNextAdLoad();
      };
      return InterstitialAdController;
    }();
    exports.InterstitialAdController = InterstitialAdController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./ExperiementController": "ExperiementController"
  } ],
  InviteWaitingPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "99b3fKXZRxD8KorUR/zLGFU", "InviteWaitingPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var InviteWaitingPopupComponent = function(_super) {
      __extends(InviteWaitingPopupComponent, _super);
      function InviteWaitingPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mPersistantNodeComponent = null;
        _this.mStateMachineController = null;
        _this.mGameController = null;
        _this.mLogger = null;
        _this.mStatsController = null;
        _this.mExperimentController = null;
        _this.progressBar = null;
        _this.timeLabel = null;
        _this.startButton = null;
        _this.dotsAnim = null;
        _this.timerNode = null;
        _this.hostNode = null;
        _this.friendNode = null;
        _this.friendEconomyNode = null;
        _this.friendRegularNode = null;
        _this.hostContentNode = null;
        _this.regularNodePosition = null;
        _this.friendNoteNode = null;
        return _this;
      }
      InviteWaitingPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStateMachineController = this.mPersistantNodeComponent.GetStateMachineController();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mGameController = this.mPersistantNodeComponent.GetGameController();
        this.mExperimentController = this.mPersistantNodeComponent.GetExperimentController();
        if (this.mGameController.isPrivateRoomHost()) {
          this.mTimeRemaining = this.mGameController.getModel().getInviteWaitTimeRem() / 1e3;
          this.initializeForHost();
        } else this.initializeForFriend();
      };
      InviteWaitingPopupComponent.prototype.start = function() {};
      InviteWaitingPopupComponent.prototype.initializeForHost = function() {
        var model = this.mGameController.getModel();
        var enableStart = false;
        if (model) {
          var num = model.getNumPlayers();
          num > 1 && (enableStart = true);
        }
        this.startButton.interactable = enableStart;
        this.friendNode.active = false;
        this.hostNode.active = true;
        this.mExptVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_invitesend");
        this.mTotalTime = this.mGameController.getModel().getInviteWaitDuration() / 1e3;
        this.mEndTime = Date.now() / 1e3 + this.mTimeRemaining;
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        2 != eco_variant && this.hostContentNode.setPosition(this.regularNodePosition.getPosition());
        this.friendNoteNode.active = 2 == eco_variant;
        if (2 == this.mExptVariant) {
          this.timerNode.active = true;
          this.dotsAnim.active = false;
        } else if (3 == this.mExptVariant) {
          this.timerNode.active = false;
          this.dotsAnim.active = true;
        }
        this.startTimer();
      };
      InviteWaitingPopupComponent.prototype.initializeForFriend = function() {
        this.hostNode.active = false;
        this.friendNode.active = true;
        this.mTimerRunning = false;
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        this.friendEconomyNode.active = 2 == eco_variant;
        this.friendRegularNode.active = 2 != eco_variant;
      };
      InviteWaitingPopupComponent.prototype.enableStartButton = function(enable) {
        this.startButton.interactable = enable;
      };
      InviteWaitingPopupComponent.prototype.startTimer = function() {
        this.mTimerRunning = true;
      };
      InviteWaitingPopupComponent.prototype.stopTimer = function() {
        this.mTimerRunning = false;
        var game = this.mGameController.getModel();
        var numberOfPlayers = game.getNumPlayers();
        numberOfPlayers > 1 ? this.mGameController.sendGameStart() : this.mGameController.getPlayerModel().setIsInviteTimerComplete(true);
      };
      InviteWaitingPopupComponent.prototype.update = function(dt) {
        if (!this.mTimerRunning) return;
        this.mTimeRemaining = this.mEndTime - Date.now() / 1e3;
        if (this.mTimeRemaining < 0) {
          this.mTimeRemaining = 0;
          this.stopTimer();
        }
        this.progressBar.progress = this.mTimeRemaining / this.mTotalTime;
        this.timeLabel.string = Math.floor(this.mTimeRemaining) + "s";
      };
      InviteWaitingPopupComponent.prototype.onInvitePressed = function() {
        this.mGameController.setInvitePopupOpen(true);
        this.mGameController.initFriendInviteStartTime();
        Helper_1.Helper.FbInvite(this.mGameController.OnInviteComplete.bind(this.mGameController), this.mGameController.OnInviteClosed.bind(this.mGameController), this.mGameController.OnInviteError.bind(this.mGameController));
        this.mStatsController.count("button", 1, "private_roomjoin_wait", "invite");
      };
      InviteWaitingPopupComponent.prototype.onStartPressed = function() {
        this.mGameController.sendGameStart();
        this.mStatsController.count("button", 1, "private_roomjoin_wait", "start");
      };
      InviteWaitingPopupComponent.prototype.onClosePressed = function() {
        this.mGameController.showExitConfirmationPopup();
        this.mStatsController.count("button", 1, "private_roomjoin_wait", "exit");
      };
      __decorate([ property(cc.ProgressBar) ], InviteWaitingPopupComponent.prototype, "progressBar", void 0);
      __decorate([ property(cc.Label) ], InviteWaitingPopupComponent.prototype, "timeLabel", void 0);
      __decorate([ property(cc.Button) ], InviteWaitingPopupComponent.prototype, "startButton", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "dotsAnim", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "timerNode", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "hostNode", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "friendNode", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "friendEconomyNode", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "friendRegularNode", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "hostContentNode", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "regularNodePosition", void 0);
      __decorate([ property(cc.Node) ], InviteWaitingPopupComponent.prototype, "friendNoteNode", void 0);
      InviteWaitingPopupComponent = __decorate([ ccclass ], InviteWaitingPopupComponent);
      return InviteWaitingPopupComponent;
    }(cc.Component);
    exports.default = InviteWaitingPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  LanguagePopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00d45VT9EBJ14+2IoOfe0Nq", "LanguagePopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LanguagePopupComponent = function(_super) {
      __extends(LanguagePopupComponent, _super);
      function LanguagePopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.selectedLanguages = [];
        _this.paddingY = 0;
        _this.TICK_NODE_NAME = "tickNode";
        return _this;
      }
      LanguagePopupComponent.prototype.onLoad = function() {
        var _this = this;
        this.mLanguageNodes = [];
        this.mAllButtonRefs = [];
        this.mAllTickNodeRefs = [];
        var startPosition = this.startPosition;
        this.selectedLanguages.forEach(function(element) {
          var item = cc.instantiate(_this.languageBtnPrefab);
          _this.mLanguageNodes[element] = item;
          _this.mAllButtonRefs[element] = item.getComponent(cc.Button);
          _this.mAllTickNodeRefs[element] = item.getChildByName(_this.TICK_NODE_NAME);
          _this.mAllButtonRefs[element].clickEvents.push(Helper_1.Helper.getEventHandler(_this.node, "LanguagePopupComponent", "onLanguageButtonPressed", element));
          var textComp = item.getComponentInChildren(cc.Label);
          textComp.string = LocalizationController_1.LocalizationController.getInstance().getLocaleByIndex(element);
          _this.scrollViewContentNode.content.addChild(item, 1, element);
          item.setPosition(startPosition);
          startPosition.y -= item.height + _this.paddingY;
        });
        this.scrollViewContentNode.content.height = Math.abs(startPosition.y);
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStatsController = persistantController.GetStatsController();
        this.mCanvas = cc.find("Canvas");
      };
      LanguagePopupComponent.prototype.initialize = function() {
        this.resetSelection();
        var locale = LocalizationController_1.LocalizationController.getInstance().getLocaleInteger();
        this.mAllButtonRefs[locale].interactable = false;
        this.mAllTickNodeRefs[locale].active = true;
        this.mCurrentlySelectedLangIndex = locale;
      };
      LanguagePopupComponent.prototype.resetSelection = function() {
        this.mAllButtonRefs.forEach(function(element) {
          element.interactable = true;
        });
        this.mAllTickNodeRefs.forEach(function(element) {
          element.active = false;
        });
      };
      LanguagePopupComponent.prototype.onLanguageButtonPressed = function(event, customData) {
        this.resetSelection();
        this.mCurrentlySelectedLangIndex = customData;
        this.mAllTickNodeRefs[customData].active = true;
        this.mAllButtonRefs[customData].interactable = false;
      };
      LanguagePopupComponent.prototype.onConfirmPressed = function() {
        if (LocalizationController_1.LocalizationController.getInstance().getLocaleInteger() != this.mCurrentlySelectedLangIndex) {
          LocalizationController_1.LocalizationController.getInstance().changeLocale(this.mCurrentlySelectedLangIndex);
          this.mStatsController.count("button", 1, "game_lang", LocalizationController_1.LocalizationController.getInstance().getLocaleString());
          this.refreshCanvas();
        }
      };
      LanguagePopupComponent.prototype.refreshCanvas = function() {
        if (!this.mCanvas) return;
        this.mCanvas.active = false;
        this.mCanvas.active = true;
      };
      __decorate([ property({
        type: cc.Enum(LocalizationController_1.LanguageTypes)
      }) ], LanguagePopupComponent.prototype, "selectedLanguages", void 0);
      __decorate([ property(cc.Prefab) ], LanguagePopupComponent.prototype, "languageBtnPrefab", void 0);
      __decorate([ property(cc.ScrollView) ], LanguagePopupComponent.prototype, "scrollViewContentNode", void 0);
      __decorate([ property(cc.Vec2) ], LanguagePopupComponent.prototype, "startPosition", void 0);
      __decorate([ property ], LanguagePopupComponent.prototype, "paddingY", void 0);
      LanguagePopupComponent = __decorate([ ccclass ], LanguagePopupComponent);
      return LanguagePopupComponent;
    }(cc.Component);
    exports.default = LanguagePopupComponent;
    cc._RF.pop();
  }, {
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  LeaderBoardCardComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ac18P2EtlJeLk2ygP59xTs", "LeaderBoardCardComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfileImageComponent_1 = require("./ProfileImageComponent");
    var Helper_1 = require("../Generic/Helper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeaderBoardCardComponent = function(_super) {
      __extends(LeaderBoardCardComponent, _super);
      function LeaderBoardCardComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nameLabel = null;
        _this.gamesWonLabel = null;
        _this.positionLabel = null;
        _this.positionSprite = null;
        _this.rank1Sprite = null;
        _this.rank2Sprite = null;
        _this.rank3Sprite = null;
        _this.displayPicture = null;
        _this.playerHighlight = null;
        _this.bottomLine = null;
        _this.coinsIcon = null;
        return _this;
      }
      LeaderBoardCardComponent.prototype.onLoad = function() {};
      LeaderBoardCardComponent.prototype.start = function() {};
      LeaderBoardCardComponent.prototype.initialize = function(position, name, imageUrl, score, isCurrentPlayer, getLeaderBoardType) {
        this.nameLabel.string = Helper_1.Helper.getTruncatedString(name, 12, true);
        this.gamesWonLabel.string = Helper_1.Helper.getLocaleNumber(score);
        this.displayPicture.getComponent(ProfileImageComponent_1.default).initialize(imageUrl);
        this.initializePositionAsset(position);
        this.playerHighlight.getComponent(cc.Sprite).enabled = isCurrentPlayer;
        this.coinsIcon.active = true;
        this.coinsIcon.getComponent(cc.Sprite).enabled = 2 == getLeaderBoardType;
      };
      LeaderBoardCardComponent.prototype.initializePositionAsset = function(position) {
        this.positionLabel.getComponent(cc.Label).enabled = false;
        this.positionSprite.getComponent(cc.Sprite).enabled = false;
        if (position >= 1 && position <= 3) {
          var rankSpriteFrame = null;
          1 == position ? rankSpriteFrame = this.rank1Sprite : 2 == position ? rankSpriteFrame = this.rank2Sprite : 3 == position && (rankSpriteFrame = this.rank3Sprite);
          var spriteComponent = this.positionSprite.getComponent(cc.Sprite);
          this.positionSprite.spriteFrame = rankSpriteFrame;
          spriteComponent.enabled = true;
        } else {
          this.positionLabel.string = String(position);
          this.positionLabel.getComponent(cc.Label).enabled = true;
        }
      };
      LeaderBoardCardComponent.prototype.getName = function() {
        return this.nameLabel.string;
      };
      LeaderBoardCardComponent.prototype.hideCard = function() {};
      LeaderBoardCardComponent.prototype.showCard = function() {};
      __decorate([ property(cc.Label) ], LeaderBoardCardComponent.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Label) ], LeaderBoardCardComponent.prototype, "gamesWonLabel", void 0);
      __decorate([ property(cc.Label) ], LeaderBoardCardComponent.prototype, "positionLabel", void 0);
      __decorate([ property(cc.Sprite) ], LeaderBoardCardComponent.prototype, "positionSprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], LeaderBoardCardComponent.prototype, "rank1Sprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], LeaderBoardCardComponent.prototype, "rank2Sprite", void 0);
      __decorate([ property(cc.SpriteFrame) ], LeaderBoardCardComponent.prototype, "rank3Sprite", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], LeaderBoardCardComponent.prototype, "displayPicture", void 0);
      __decorate([ property(cc.Sprite) ], LeaderBoardCardComponent.prototype, "playerHighlight", void 0);
      __decorate([ property(cc.Sprite) ], LeaderBoardCardComponent.prototype, "bottomLine", void 0);
      __decorate([ property(cc.Node) ], LeaderBoardCardComponent.prototype, "coinsIcon", void 0);
      LeaderBoardCardComponent = __decorate([ ccclass ], LeaderBoardCardComponent);
      return LeaderBoardCardComponent;
    }(cc.Component);
    exports.default = LeaderBoardCardComponent;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper",
    "./ProfileImageComponent": "ProfileImageComponent"
  } ],
  LeaderBoardController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0dfb26bUn9OJpyLL2Ovr1SJ", "LeaderBoardController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var InMessages_1 = require("../Network/InMessages");
    var ExperiementController_1 = require("./ExperiementController");
    var ActionShowLeaderBoardPopup_1 = require("../Actions/ActionShowLeaderBoardPopup");
    var LeaderBoardModels_1 = require("../models/LeaderBoardModels");
    var Constants_1 = require("../Constants");
    var LeaderBoardController = function() {
      function LeaderBoardController(persistantNodeComponent) {
        this.fetchLbTimer = null;
        this.mPersistantNodeComponent = null;
        this.mLogger = new Logger_1.Logger("LeaderBoardController", true);
        this.initialized = false;
        this.initialize_in_progress = false;
        this.leaderboardPidList = {};
        this.leaderboardSnuidList = {};
        this.first_time = "1";
        this.refresh = "1";
        this.leaderboard_expire_time = 0;
        this.mPlayerController = persistantNodeComponent.GetPlayerController();
        this.mActionController = persistantNodeComponent.GetActionController();
        this.mExperimentController = persistantNodeComponent.GetExperimentController();
        this.mPersistantNodeComponent = persistantNodeComponent;
      }
      LeaderBoardController.prototype.initialize = function() {
        var lbVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEADERBOARD_COINS);
        this.mLogger.Log("leaderboard " + lbVariant);
        this.mlbVariant = lbVariant;
        if (0 == lbVariant || 1 == lbVariant || 2 == lbVariant) {
          if (this.initialize_in_progress) return;
          if (this.initialized) {
            this.showLeaderBoardPopup();
            return;
          }
          this.getLeaderBoardData();
        }
      };
      LeaderBoardController.prototype.getLeaderBoardType = function() {
        return this.mlbVariant;
      };
      LeaderBoardController.prototype.getLeaderBoardData = function() {
        var theUrl = "statusServerAdd/lleaderboard/g";
        var myPlayerId = this.mPlayerController.getPlayerId();
        var params = {
          pid: myPlayerId,
          first_time: this.first_time,
          refresh: this.refresh,
          frs: true
        };
        var self = this;
        var address = Config_1.Config.STATUS_SERVER_ADDR;
        var player = this.mPlayerController.getModel();
        player && player.getStatusServerAddress() && "" != player.getStatusServerAddress() && (address = player.getStatusServerAddress());
        var connection = new Connection_1.Connection(address);
        this.initialize_in_progress = true;
        connection.doPost("/lleaderboard/g", params, function(data) {
          self.mLogger.Log("shreyas leaderBoardData " + JSON.stringify(data));
          self.refresh = "0";
          self.initialize_in_progress = false;
          if (data && data.list) if ("NR" == data.list) self.scheduleRefresh(); else {
            var leaderBoardData = new InMessages_1.LeaderBoardMessage(data.list).leaderboardData;
            self.parseAndStoreLeaderBoardData(leaderBoardData);
          }
        }, function() {
          self.mLogger.Log("shreyas getLeaderBoardData error! ");
          self.initialize_in_progress = false;
          setTimeout(function() {
            self.initialize();
          }, 3e3);
        });
      };
      LeaderBoardController.prototype.parseAndStoreLeaderBoardData = function(leaderBoardData) {
        var myPlayerId = this.mPlayerController.getPlayerId();
        var myFbId = this.mPlayerController.getFbId();
        for (var i in leaderBoardData) {
          var lbData = new LeaderBoardModels_1.LeaderBoardData(leaderBoardData[i]);
          if (lbData.mPid == myPlayerId) {
            this.leaderboardPidList[myPlayerId] = lbData;
            this.leaderboardSnuidList[myFbId] = lbData;
            this.mLogger.Log("Tanisha player info " + JSON.stringify(leaderBoardData[i]) + "--" + leaderBoardData[i]);
          } else if (lbData.mPid && lbData.mSnuid) {
            this.leaderboardPidList[lbData.mPid] = lbData;
            this.leaderboardSnuidList[lbData.mSnuid] = lbData;
          }
        }
        this.initialized = true;
        this.showLeaderBoardPopup();
      };
      LeaderBoardController.prototype.scheduleRefresh = function() {
        this.fetchLbTimer && clearTimeout(this.fetchLbTimer);
        var self = this;
        this.fetchLbTimer = setTimeout(function() {
          self.initialize();
        }, 500);
      };
      LeaderBoardController.prototype.getGameWonLeaderBoardData = function() {
        if (!this.initialized) return;
        var lbData = [];
        var myPlayerModel = this.mPlayerController.getModel();
        if (!myPlayerModel) return;
        var friends = myPlayerModel.getFriendsInfo();
        for (var i in friends) {
          var id = friends[i].id;
          var data = new LeaderBoardModels_1.LeaderBoardCardData(friends[i]);
          2 != this.getLeaderBoardType() ? data.mScore = void 0 != this.leaderboardSnuidList[id] ? this.leaderboardSnuidList[id].mGamesWon : 0 : data.mScore = void 0 != this.leaderboardSnuidList[id] ? this.leaderboardSnuidList[id].mCoinsWon : 0;
          lbData.push(data);
        }
        var myId = this.mPlayerController.getFbId();
        var ldata = new LeaderBoardModels_1.LeaderBoardCardData({
          id: myId,
          name: this.mPlayerController.getPlayerName(),
          photo: myPlayerModel.getPhotoUrl()
        });
        2 != this.getLeaderBoardType() ? ldata.mScore = void 0 != this.leaderboardSnuidList[myId] ? this.leaderboardSnuidList[myId].mGamesWon : 0 : ldata.mScore = void 0 != this.leaderboardSnuidList[myId] ? this.leaderboardSnuidList[myId].mCoinsWon : 0;
        lbData.push(ldata);
        var sortedData = [];
        for (var key in lbData) {
          var data = lbData[key];
          var added = false;
          for (var j = 0; j < sortedData.length; j++) {
            if (data.mScore > sortedData[j].mScore) {
              sortedData.splice(j, 0, data);
              added = true;
              break;
            }
            if (data.mScore == sortedData[j].mScore && data.mName < sortedData[j].mName) {
              sortedData.splice(j, 0, data);
              added = true;
              break;
            }
          }
          added || sortedData.push(data);
        }
        for (var j = 0; j < sortedData.length; j++) sortedData[j].mPosition = j + 1;
        return sortedData;
      };
      LeaderBoardController.prototype.showLeaderBoardPopup = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEADERBOARD_LOADED);
        2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI) && this.mActionController.runAction(ActionShowLeaderBoardPopup_1.ActionShowLeaderBoardPopup.Create());
      };
      LeaderBoardController.prototype.setLeaderboardExpireTimer = function(expire_time) {
        if (this.leaderboard_expire_time > 0 && Math.round(Date.now() / 1e3) > this.leaderboard_expire_time) {
          this.refresh = "1";
          this.initialized = false;
          this.initialize_in_progress = false;
          this.leaderboardPidList = {};
          this.leaderboardSnuidList = {};
          this.initialize();
        }
        this.leaderboard_expire_time = Date.now() / 1e3 + expire_time;
      };
      LeaderBoardController.prototype.getLeaderboardExpireTimer = function() {
        return this.leaderboard_expire_time;
      };
      LeaderBoardController.prototype.incrementGamesWonScore = function(value) {
        if (!this.initialized) return;
        var myPlayerModel = this.mPlayerController.getModel();
        if (!myPlayerModel) return;
        var myId = this.mPlayerController.getFbId();
        var myPlayerId = this.mPlayerController.getPlayerId();
        if (void 0 === this.leaderboardPidList[myPlayerId]) {
          var lbData = new LeaderBoardModels_1.LeaderBoardData(null);
          this.leaderboardPidList[myPlayerId] = lbData;
          this.leaderboardSnuidList[myId] = lbData;
        }
        void 0 !== this.leaderboardPidList[myPlayerId] && (this.leaderboardPidList[myPlayerId].mGamesWon += value);
      };
      LeaderBoardController.prototype.incrementCoinsWonScore = function(value) {
        if (!this.initialized) return;
        var myPlayerModel = this.mPlayerController.getModel();
        if (!myPlayerModel) return;
        var myId = this.mPlayerController.getFbId();
        var myPlayerId = this.mPlayerController.getPlayerId();
        if (void 0 === this.leaderboardPidList[myPlayerId]) {
          var lbData = new LeaderBoardModels_1.LeaderBoardData(null);
          this.leaderboardPidList[myPlayerId] = lbData;
          this.leaderboardSnuidList[myId] = lbData;
        }
        void 0 !== this.leaderboardPidList[myPlayerId] && (this.leaderboardPidList[myPlayerId].mCoinsWon += value);
      };
      LeaderBoardController.prototype.getMyRank = function() {
        var myPlayerModel = this.mPlayerController.getModel();
        var friends = myPlayerModel.getFriendsInfo();
        if (friends) {
          var lData = [];
          for (var i in friends) {
            var id = friends[i].id;
            var data = {
              id: friends[i].id,
              name: friends[i].name
            };
            2 != this.getLeaderBoardType() ? data["mScore"] = void 0 != this.leaderboardSnuidList[id] ? this.leaderboardSnuidList[id].mGamesWon : 0 : data["mScore"] = void 0 != this.leaderboardSnuidList[id] ? this.leaderboardSnuidList[id].mCoinsWon : 0;
            lData.push(data);
          }
          var myData = {
            id: this.mPlayerController.getFbId(),
            name: this.mPlayerController.getPlayerName()
          };
          2 != this.getLeaderBoardType() ? myData["mScore"] = void 0 != this.leaderboardSnuidList[this.mPlayerController.getFbId()] ? this.leaderboardSnuidList[this.mPlayerController.getFbId()].mGamesWon : 0 : myData["mScore"] = void 0 != this.leaderboardSnuidList[this.mPlayerController.getFbId()] ? this.leaderboardSnuidList[this.mPlayerController.getFbId()].mCoinsWon : 0;
          lData.push(myData);
          lData.sort(function comparator(a, b) {
            if (a.mScore > b.mScore) return -1;
            if (a.mScore < b.mScore) return 1;
            if (a.name < b.name) return -1;
            if (a.name > b.name) return 1;
            return 0;
          });
          for (var i in lData) if (lData[i].id == this.mPlayerController.getFbId()) return parseInt(i) + 1;
        }
        return -1;
      };
      LeaderBoardController.prototype.getTotalFriendsLength = function() {
        var myPlayerModel = this.mPlayerController.getModel();
        var friends = myPlayerModel.getFriendsInfo();
        if (friends) return Object.keys(friends).length + 1;
        return -1;
      };
      return LeaderBoardController;
    }();
    exports.LeaderBoardController = LeaderBoardController;
    cc._RF.pop();
  }, {
    "../Actions/ActionShowLeaderBoardPopup": "ActionShowLeaderBoardPopup",
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Logger": "Logger",
    "../Network/InMessages": "InMessages",
    "../models/LeaderBoardModels": "LeaderBoardModels",
    "./ExperiementController": "ExperiementController"
  } ],
  LeaderBoardModels: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "adc3fTGoqdMT5FawOrCmq4E", "LeaderBoardModels");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LeaderBoardCardData = function() {
      function LeaderBoardCardData(data) {
        this.mName = "";
        this.mPhoto = "";
        this.mPosition = 0;
        this.mScore = 0;
        this.mSnuid = "";
        if (!data) return;
        data["id"] && (this.mSnuid = data["id"]);
        data["name"] && (this.mName = data["name"]);
        data["photo"] && (this.mPhoto = data["photo"]);
        data["value"] && (this.mScore = data["value"]);
      }
      return LeaderBoardCardData;
    }();
    exports.LeaderBoardCardData = LeaderBoardCardData;
    var LeaderBoardData = function() {
      function LeaderBoardData(data) {
        this.mCoinsWon = 0;
        this.mGamesWon = 0;
        this.mPawnsCaptured = 0;
        this.mPid = "";
        this.mSnuid = "";
        if (!data) return;
        data["coins_won"] && (this.mCoinsWon = data["coins_won"]);
        data["games_won"] && (this.mGamesWon = data["games_won"]);
        data["pawns_captured"] && (this.mPawnsCaptured = data["pawns_captured"]);
        data["pid"] && (this.mPid = data["pid"]);
        data["snuid"] && (this.mSnuid = data["snuid"]);
      }
      return LeaderBoardData;
    }();
    exports.LeaderBoardData = LeaderBoardData;
    cc._RF.pop();
  }, {} ],
  LeaderBoardPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d8ab57TGotFr42o7QW4APcK", "LeaderBoardPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExperiementController_1 = require("./../Controllers/ExperiementController");
    var LeaderBoardCardComponent_1 = require("./LeaderBoardCardComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var PinScrollViewCardComponent_1 = require("./PinScrollViewCardComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var SmartScrollViewComponent_1 = require("./SmartScrollViewComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeaderBoardPopupComponent = function(_super) {
      __extends(LeaderBoardPopupComponent, _super);
      function LeaderBoardPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.leaderBoardCardPrefab = null;
        _this.oldLeaderBoardCardPrefab = null;
        _this.leaderBoardLayout = null;
        _this.scrollViewContentNode = null;
        _this.timerNumberLabel = null;
        _this.timerTextLabel = null;
        _this.scrollViewMask = null;
        _this.leaderBoardPosition = null;
        _this.scrollViewNode = null;
        _this.headerSizeNode = null;
        _this.closeButton = null;
        _this.gamesWonHeader = null;
        _this.rankLabel = null;
        _this.loadingNode = null;
        _this.mLeaderBoardController = null;
        _this.mStatsController = null;
        _this.mUpdateTimer = false;
        _this.mEventListener = null;
        _this.mTimeout = null;
        _this.mAnimationStartPosition = null;
        _this.mAnimatingLeaderboard = false;
        _this.mPersistantNodeComponent = null;
        _this.mPlayerController = null;
        _this.mPopupShown = false;
        _this.mLeaderboardData = [];
        return _this;
      }
      LeaderBoardPopupComponent.prototype.onLoad = function() {
        this.initLogger();
        this.node.on(Constants_1.constants.Events.EVENT_POPUP_SHOW_COMPLETE, this.onPopupOpen, this);
      };
      LeaderBoardPopupComponent.prototype.start = function() {
        this.closeButton && this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeaderBoardPopupComponent", "hidePopup"));
        this.getLeaderBoardController();
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_LEADERBOARD_LOADED, this.initialize, this);
        2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI) && this.resizeScrollView();
      };
      LeaderBoardPopupComponent.prototype.initialize = function() {
        this.getLeaderBoardController();
        this.initLogger();
        if (!this.node) return;
        this.mLogger.Log("shreyas lbpopup initialize");
        this.mAnimationStartPosition || (this.mAnimationStartPosition = this.node.getPosition());
        var persistantController = this.mPersistantNodeComponent;
        var playerController = persistantController.GetPlayerController();
        var localizationComponent = this.gamesWonHeader.getComponent(LocalizationComponent_1.default);
        var getLeaderBoardType = persistantController.GetLeaderBoardController().getLeaderBoardType();
        2 != getLeaderBoardType ? localizationComponent.setValues("#GAMES_WON_IG") : localizationComponent.setValues("#COINS_WON_IG");
        var leaderBoardData = this.getLeaderBoardController().getGameWonLeaderBoardData();
        this.mLeaderboardData = leaderBoardData;
        if (!leaderBoardData || this.mLeaderBoardController.getMyRank() < 0) {
          this.loadingNode && (this.loadingNode.active = true);
          var timerTextMap = this.getLeaderBoardTimerText(this.getLeaderBoardController().getLeaderboardExpireTimer());
          this.timerNumberLabel.string = String(timerTextMap.t);
          this.timerTextLabel.string = LocalizationController_1.LocalizationController.getInstance().getLocalizationString(timerTextMap.v);
          return;
        }
        this.loadingNode && (this.loadingNode.active = false);
        var cardHeight = 100;
        if (2 == ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI)) {
          var node = cc.instantiate(this.leaderBoardCardPrefab);
          var size = node.getContentSize();
          cardHeight = size.height;
          size.height = size.height + 5;
          var index = this.mLeaderBoardController.getMyRank();
          var lbData = this.mLeaderboardData[index - 1];
          var name = playerController.getPlayerName();
          node.getComponent("LeaderBoardCardComponent").initialize(lbData.mPosition, name, FBInstant.player.getPhoto(), lbData.mScore, true, getLeaderBoardType);
          this.scrollViewNode.getComponent(SmartScrollViewComponent_1.default) && this.scrollViewNode.getComponent(SmartScrollViewComponent_1.default).initialize(size, this.mLeaderboardData.length, this.leaderBoardCardPrefab, this.initCard.bind(this));
          this.scrollViewNode.getComponent(PinScrollViewCardComponent_1.default) && this.scrollViewNode.getComponent(PinScrollViewCardComponent_1.default).initializeWithCallback(node, this.isMyCardVisibleCallback.bind(this), index);
        } else for (var i = 0; i < leaderBoardData.length; i++) {
          var prefab = this.leaderBoardCardPrefab;
          2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI) && (prefab = this.oldLeaderBoardCardPrefab);
          var lbCard = null;
          i < this.leaderBoardLayout.node.childrenCount && (lbCard = this.leaderBoardLayout.node.children[i]);
          if (!lbCard) {
            lbCard = cc.instantiate(prefab);
            this.leaderBoardLayout.node.addChild(lbCard);
          }
          cardHeight = lbCard.getContentSize().height;
          var lbData = leaderBoardData[i];
          var isMyCard = lbData.mSnuid == playerController.getFbId();
          var photo = lbData.mPhoto;
          isMyCard && (photo = FBInstant.player.getPhoto());
          var name = isMyCard ? playerController.getPlayerName() : lbData.mName;
          lbCard.getComponent("LeaderBoardCardComponent").initialize(lbData.mPosition, name, photo, lbData.mScore, isMyCard, getLeaderBoardType);
          if (isMyCard && 2 == ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI)) {
            var lbCloneCard = cc.instantiate(this.leaderBoardCardPrefab);
            lbCloneCard.getComponent("LeaderBoardCardComponent").initialize(lbData.mPosition, name, lbData.mPhoto, lbData.mScore, isMyCard, getLeaderBoardType);
            this.scrollViewNode.getComponent(PinScrollViewCardComponent_1.default).initializeCardToBePinned(lbCard, lbCloneCard, i);
          }
        }
        this.scrollViewNode.getComponent(cc.ScrollView).scrollToTop();
        this.mStatsController.count("popup", 1, "show", "leaderBoardPopup", leaderBoardData.length + "");
        this.mUpdateTimer = true;
        this.scrollViewContentNode.setContentSize(new cc.Size(this.scrollViewContentNode.getContentSize().width, cardHeight * leaderBoardData.length + this.leaderBoardLayout.paddingTop + this.leaderBoardLayout.spacingY * leaderBoardData.length));
        this.rankLabel && (this.rankLabel.string = this.mLeaderBoardController.getMyRank() + "/" + this.mLeaderBoardController.getTotalFriendsLength());
        2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI) && this.animateLeaderBoardPopup(true);
      };
      LeaderBoardPopupComponent.prototype.isMyCardVisibleCallback = function() {
        var index = this.mLeaderBoardController.getMyRank();
        return this.scrollViewNode.getComponent(SmartScrollViewComponent_1.default).isCardAtIndexVisible(index - 1);
      };
      LeaderBoardPopupComponent.prototype.initCard = function(card, index) {
        var lbCard = card.getComponent(LeaderBoardCardComponent_1.default);
        card.active = index < this.mLeaderboardData.length;
        if (index < this.mLeaderboardData.length) {
          var lbData = this.mLeaderboardData[index];
          var isMyCard = lbData.mSnuid == this.mPlayerController.getFbId();
          var photo = lbData.mPhoto;
          isMyCard && (photo = FBInstant.player.getPhoto());
          var name = isMyCard ? this.mPlayerController.getPlayerName() : lbData.mName;
          var leaderBoardType = this.mLeaderBoardController.getLeaderBoardType();
          lbCard.getComponent("LeaderBoardCardComponent").initialize(lbData.mPosition, name, photo, lbData.mScore, isMyCard, leaderBoardType);
        }
      };
      LeaderBoardPopupComponent.prototype.getLeaderBoardController = function() {
        if (!this.mLeaderBoardController) {
          var persistantNode = cc.find("PersistantNode");
          this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
          this.mLeaderBoardController = this.mPersistantNodeComponent.GetLeaderBoardController();
          this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
          this.mPlayerController = this.mPersistantNodeComponent.GetPlayerController();
        }
        return this.mLeaderBoardController;
      };
      LeaderBoardPopupComponent.prototype.getLeaderBoardTimerText = function(exprire_time) {
        var time_left_secs = exprire_time - Math.round(Date.now() / 1e3);
        return time_left_secs > 86400 ? {
          t: Math.round(time_left_secs / 86400),
          v: "#DAYS_IG"
        } : time_left_secs > 3600 ? {
          t: Math.round(time_left_secs / 3600),
          v: "#HOURS_IG"
        } : time_left_secs > 60 ? {
          t: Math.round(time_left_secs / 60),
          v: "#MIN_IG"
        } : time_left_secs > 0 ? {
          t: Math.round(time_left_secs),
          v: "#SEC_IG"
        } : {
          t: 0,
          v: "#SEC_IG"
        };
      };
      LeaderBoardPopupComponent.prototype.update = function(dt) {
        if (true == this.mUpdateTimer) {
          var timerTextMap = this.getLeaderBoardTimerText(this.getLeaderBoardController().getLeaderboardExpireTimer());
          this.timerNumberLabel.string = String(timerTextMap.t);
          this.timerTextLabel.string = LocalizationController_1.LocalizationController.getInstance().getLocalizationString(timerTextMap.v);
        }
      };
      LeaderBoardPopupComponent.prototype.onDestroy = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        removeEventListener("show_leaderboard_popup", this.mEventListener);
      };
      LeaderBoardPopupComponent.prototype.initLogger = function() {
        this.mLogger || (this.mLogger = new Logger_1.Logger("LeaderBoardPopupComponent", true));
      };
      LeaderBoardPopupComponent.prototype.resizeScrollView = function() {
        if (!this.leaderBoardPosition) return;
        var visibleSize = cc.director.getVisibleSize();
        var scrollViewPosition = this.leaderBoardPosition.getPosition();
        scrollViewPosition.y = scrollViewPosition.y;
        var worldPos = this.node.parent.convertToWorldSpaceAR(scrollViewPosition);
        this.scrollViewMask.setContentSize(this.scrollViewMask.getContentSize().width, worldPos.y - this.headerSizeNode.getContentSize().height);
        this.scrollViewNode.setContentSize(this.scrollViewNode.getContentSize().width, worldPos.y - this.headerSizeNode.getContentSize().height);
        this.mLogger.Log("LeaderBoardPopup visible Size - height " + visibleSize.height + " width " + visibleSize.width);
      };
      LeaderBoardPopupComponent.prototype.isCardVisible = function(card, position) {
        var scrollViewPosition = this.scrollViewNode.parent.convertToWorldSpaceAR(this.scrollViewNode.getPosition());
        var scrollViewHeight = this.scrollViewNode.getContentSize().height;
        if (card) {
          var cardPosition = card.parent.convertToWorldSpaceAR(card.getPosition());
          var cardHeight = card.getContentSize().height;
          if (cardPosition.y - cardHeight / 2 > scrollViewPosition.y) return false;
          if (cardPosition.y + cardHeight / 2 < scrollViewPosition.y - scrollViewHeight) return false;
        }
        return true;
      };
      LeaderBoardPopupComponent.prototype.onLeaderBoardScroll = function(scrollView, eventType, customEventData) {
        if (eventType == cc.ScrollView.EventType.SCROLLING) for (var i = 0; i < this.leaderBoardLayout.node.children.length; i++) this.isCardVisible(this.leaderBoardLayout.node.children[i], i) ? this.leaderBoardLayout.node.children[i].getComponent(LeaderBoardCardComponent_1.default).showCard() : this.leaderBoardLayout.node.children[i].getComponent(LeaderBoardCardComponent_1.default).hideCard();
      };
      LeaderBoardPopupComponent.prototype.animateLeaderBoardPopup = function(show) {
        this.mAnimatingLeaderboard = true;
        this.node.position = this.mAnimationStartPosition;
        var targetPosition = this.leaderBoardPosition.getPosition();
        if (!show) {
          this.node.position = this.leaderBoardPosition.getPosition();
          targetPosition = this.mAnimationStartPosition;
        }
        var size = this.node.getContentSize();
        var duration = .5;
        var move = cc.moveTo(duration, targetPosition);
        var func = cc.callFunc(this.animationComplete, this);
        var seq = cc.sequence([ move, func ]);
        this.node.stopAllActions();
        this.node.runAction(seq);
      };
      LeaderBoardPopupComponent.prototype.showPopup = function() {
        this.initialize();
        this.getComponent(PopupComponent_1.default).showPopup();
        this.mStatsController.count("popup", 1, "show", "friend_leaderboard");
      };
      LeaderBoardPopupComponent.prototype.hidePopup = function() {
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      LeaderBoardPopupComponent.prototype.animationComplete = function() {
        this.mAnimatingLeaderboard = false;
      };
      LeaderBoardPopupComponent.prototype.onPopupOpen = function() {
        this.scrollViewNode.getComponent(PinScrollViewCardComponent_1.default).onScroll(null);
      };
      __decorate([ property(cc.Prefab) ], LeaderBoardPopupComponent.prototype, "leaderBoardCardPrefab", void 0);
      __decorate([ property(cc.Prefab) ], LeaderBoardPopupComponent.prototype, "oldLeaderBoardCardPrefab", void 0);
      __decorate([ property(cc.Layout) ], LeaderBoardPopupComponent.prototype, "leaderBoardLayout", void 0);
      __decorate([ property(cc.Node) ], LeaderBoardPopupComponent.prototype, "scrollViewContentNode", void 0);
      __decorate([ property(cc.Label) ], LeaderBoardPopupComponent.prototype, "timerNumberLabel", void 0);
      __decorate([ property(cc.Label) ], LeaderBoardPopupComponent.prototype, "timerTextLabel", void 0);
      __decorate([ property(cc.Node) ], LeaderBoardPopupComponent.prototype, "scrollViewMask", void 0);
      __decorate([ property(cc.Node) ], LeaderBoardPopupComponent.prototype, "leaderBoardPosition", void 0);
      __decorate([ property(cc.Node) ], LeaderBoardPopupComponent.prototype, "scrollViewNode", void 0);
      __decorate([ property(cc.Node) ], LeaderBoardPopupComponent.prototype, "headerSizeNode", void 0);
      __decorate([ property(cc.Button) ], LeaderBoardPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Label) ], LeaderBoardPopupComponent.prototype, "gamesWonHeader", void 0);
      __decorate([ property(cc.Label) ], LeaderBoardPopupComponent.prototype, "rankLabel", void 0);
      __decorate([ property(cc.Node) ], LeaderBoardPopupComponent.prototype, "loadingNode", void 0);
      LeaderBoardPopupComponent = __decorate([ ccclass ], LeaderBoardPopupComponent);
      return LeaderBoardPopupComponent;
    }(cc.Component);
    exports.default = LeaderBoardPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./../Controllers/ExperiementController": "ExperiementController",
    "./LeaderBoardCardComponent": "LeaderBoardCardComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PinScrollViewCardComponent": "PinScrollViewCardComponent",
    "./PopupComponent": "PopupComponent",
    "./SmartScrollViewComponent": "SmartScrollViewComponent"
  } ],
  LeagueBadgeComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5939dhrrvRP9Yq8JF0lNZ34", "LeagueBadgeComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeagueBadgeComponent = function(_super) {
      __extends(LeagueBadgeComponent, _super);
      function LeagueBadgeComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.leagueBadgesNode = null;
        _this.noLeagueBadgeNode = null;
        _this.glowNode = null;
        _this.mPersistantNodeComponent = null;
        _this.mLeagueController = null;
        return _this;
      }
      LeagueBadgeComponent.prototype.start = function() {};
      LeagueBadgeComponent.prototype.initialize = function(league) {
        this.noLeagueBadgeNode && (this.noLeagueBadgeNode.active = league <= 0);
        this.glowNode && (this.glowNode.active = !(league <= 0));
        for (var i = 0; i < this.leagueBadgesNode.childrenCount; i++) this.leagueBadgesNode.children[i].active = i == league - 1;
      };
      __decorate([ property(cc.Node) ], LeagueBadgeComponent.prototype, "leagueBadgesNode", void 0);
      __decorate([ property(cc.Node) ], LeagueBadgeComponent.prototype, "noLeagueBadgeNode", void 0);
      __decorate([ property(cc.Node) ], LeagueBadgeComponent.prototype, "glowNode", void 0);
      LeagueBadgeComponent = __decorate([ ccclass ], LeagueBadgeComponent);
      return LeagueBadgeComponent;
    }(cc.Component);
    exports.default = LeagueBadgeComponent;
    cc._RF.pop();
  }, {} ],
  LeagueController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ca6ebhTMLZD1oKvWvBKAdyU", "LeagueController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RouterInPackets_1 = require("./../Packets/RouterInPackets");
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var LeagueModels_1 = require("../models/LeagueModels");
    var RouterOutPackets_1 = require("../Packets/RouterOutPackets");
    var RouterINPackets_1 = require("../Packets/RouterINPackets");
    var Constants_1 = require("../Constants");
    var ExperiementController_1 = require("./ExperiementController");
    var LeagueController = function() {
      function LeagueController(persistantNodeComponent) {
        this.mPlayerController = null;
        this.mLeagueConfig = null;
        this.mLeaguePlayersInfo = {};
        this.mIsLeagueConfigInitialized = false;
        this.mCanShowResults = false;
        this.mSortedPidList = [];
        this.mMaxInfoUpdated = 0;
        this.mLeagueId = "";
        this.mLeague = 0;
        this.mLeagueExpiry = 0;
        this.mResults = null;
        this.mIsLeagueEnabled = false;
        this.mRetryCount = 0;
        this.mIsLeagueEnableGames = 0;
        this.mTimeout = null;
        this.mStatsController = null;
        this.mLeagueExpiryTimeout = null;
        this.mGrantedResultLeagueId = "";
        this.mIsInCoolDown = false;
        this.mCoolDownExpiry = 0;
        this.mSeasonEndTimer = null;
        this.mCooldownTimer = null;
        this.mShowLeagueUnlocked = false;
        this.mFirstUnlockOfLeagues = false;
        this.mResultsList = [];
        this.mWasUserInactive = false;
        this.mSortedPlayerListDirty = false;
        this.mSortedPlayerList = [];
        this.mPrevPlayerRank = -1;
        this.mPlayerPointsLoaded = false;
        this.mLogger = new Logger_1.Logger("LeagueController", true);
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mPlayerController = this.mPersistantNodeComponent.GetPlayerController();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mRetryCount = 0;
      }
      LeagueController.prototype.resetRetryCount = function() {
        this.mRetryCount = 0;
      };
      LeagueController.prototype.getLeagueId = function() {
        return this.mLeagueId;
      };
      LeagueController.prototype.isLeagueEnabled = function() {
        if (this.mPlayerController.getModel().getPublicGamesWonCount() < this.mIsLeagueEnableGames) return false;
        if (2 == ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES)) return true;
        if (2 == ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI)) return true;
        return false;
      };
      LeagueController.prototype.getLeaguesLeaderBoardData = function() {
        return this.getSortedPlayerInfoList();
      };
      LeagueController.prototype.getLeagueConfig = function() {
        return this.mLeagueConfig;
      };
      LeagueController.prototype.getLeagueExpiry = function() {
        return this.mLeagueExpiry;
      };
      LeagueController.prototype.getCoolDownExpiry = function() {
        return this.mCoolDownExpiry;
      };
      LeagueController.prototype.getLeague = function() {
        return this.mLeague;
      };
      LeagueController.prototype.getNextLeague = function() {
        if (this.mLeague <= 0) return 2;
        return Math.min(this.mLeague + 1, this.mLeagueConfig.leagueDefs.length);
      };
      LeagueController.prototype.getDefaultLeagueName = function() {
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs || !this.mLeagueConfig.leagueDefs[0]) return "";
        return this.mLeagueConfig.leagueDefs[0].name;
      };
      LeagueController.prototype.getLeagueName = function() {
        if (this.mLeague <= 0) return "";
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs || !this.mLeagueConfig.leagueDefs[this.mLeague - 1]) return "";
        return this.mLeagueConfig.leagueDefs[this.mLeague - 1].name;
      };
      LeagueController.prototype.getNextLeagueName = function() {
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs) return "";
        var nextLeague = this.getNextLeague() - 1;
        if (!this.mLeagueConfig.leagueDefs[nextLeague] || !this.mLeagueConfig.leagueDefs[nextLeague].topRewards) return "";
        return this.mLeagueConfig.leagueDefs[nextLeague].name;
      };
      LeagueController.prototype.getLeagueNameForLeague = function(league) {
        if (league <= 0) return "";
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs || !this.mLeagueConfig.leagueDefs[league - 1]) return "";
        return this.mLeagueConfig.leagueDefs[league - 1].name;
      };
      LeagueController.prototype.getLeagueReward = function() {
        if (this.mLeague <= 0) return 0;
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs || !this.mLeagueConfig.leagueDefs[this.mLeague - 1] || !this.mLeagueConfig.leagueDefs[this.mLeague - 1].topRewards) return 0;
        return this.mLeagueConfig.leagueDefs[this.mLeague - 1].topRewards[0];
      };
      LeagueController.prototype.getNextLeagueReward = function() {
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs) return 0;
        var nextLeague = this.getNextLeague() - 1;
        if (!this.mLeagueConfig.leagueDefs[nextLeague] || !this.mLeagueConfig.leagueDefs[nextLeague].topRewards) return 0;
        return this.mLeagueConfig.leagueDefs[nextLeague].topRewards[0];
      };
      LeagueController.prototype.getLeagueRewardForLeagueAndRank = function(league, rank) {
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs) return 0;
        if (!this.mLeagueConfig.leagueDefs[league] || !this.mLeagueConfig.leagueDefs[league].topRewards || !this.mLeagueConfig.leagueDefs[league].topRewards[rank - 1]) return 0;
        return this.mLeagueConfig.leagueDefs[league].topRewards[rank - 1];
      };
      LeagueController.prototype.getPromotionIndex = function() {
        if (this.mLeague <= 0) return 0;
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs || !this.mLeagueConfig.leagueDefs[this.mLeague - 1] || !this.mLeagueConfig.leagueDefs[this.mLeague - 1].topRewards) return 0;
        if (6 == this.mLeague) return this.mLeagueConfig.promotionIndex;
        return this.mLeagueConfig.leagueDefs[this.mLeague - 1].promotionIndex;
      };
      LeagueController.prototype.getDemotionIndex = function() {
        if (this.mLeague <= 0) return 0;
        if (!this.mLeagueConfig || !this.mLeagueConfig.leagueDefs || !this.mLeagueConfig.leagueDefs[this.mLeague - 1] || !this.mLeagueConfig.leagueDefs[this.mLeague - 1].topRewards) return 0;
        if (1 == this.mLeague) return this.mLeagueConfig.demotionIndex;
        return this.mLeagueConfig.leagueDefs[this.mLeague - 1].demotionIndex;
      };
      LeagueController.prototype.getLeagueInitialized = function() {
        return this.mIsLeagueConfigInitialized;
      };
      LeagueController.prototype.getMyLeagueInfo = function() {
        return this.mLeaguePlayersInfo[this.mPlayerController.getPlayerId()];
      };
      LeagueController.prototype.getRelativeRankChangeForPlayer = function() {
        this.initializeMyRank();
        var myInfo = this.getMyLeagueInfo();
        if (myInfo) return this.mPrevPlayerRank > 0 ? this.mPrevPlayerRank - myInfo.rank : 0;
        return Constants_1.constants.LEAGUE_RANK_CHANGE_UNDEFINED;
      };
      LeagueController.prototype.getLeaguePointsLoaded = function() {
        return this.mPlayerPointsLoaded;
      };
      LeagueController.prototype.shouldShowLeagueUnlockedPopup = function() {
        var pid = this.mPlayerController.getPlayerId();
        if (!this.mFirstUnlockOfLeagues && "true" == cc.sys.localStorage.getItem("FirstUnlockOfLeagues:" + pid)) {
          this.mFirstUnlockOfLeagues = true;
          this.mShowLeagueUnlocked = true;
        }
        if (this.mShowLeagueUnlocked && this.mFirstUnlockOfLeagues) {
          this.mShowLeagueUnlocked = false;
          this.mFirstUnlockOfLeagues = false;
          cc.sys.localStorage.removeItem("FirstUnlockOfLeagues:" + pid);
          return true;
        }
        return false;
      };
      LeagueController.prototype.isInCooldown = function() {
        return this.mIsInCoolDown;
      };
      LeagueController.prototype.canAssignLeagues = function() {
        var model = this.mPlayerController.getModel();
        if (model) return model.canJoinLeagues();
        return false;
      };
      LeagueController.prototype.wasUserInactive = function() {
        return this.mWasUserInactive;
      };
      LeagueController.prototype.setLeagueEnabled = function(enable) {};
      LeagueController.prototype.setLeagueEnableGames = function(games) {
        this.mIsLeagueEnableGames = games;
      };
      LeagueController.prototype.getLeagueEnableGames = function() {
        return this.mIsLeagueEnableGames;
      };
      LeagueController.prototype.setShowLeagueUnlockedPopup = function(show) {
        this.mShowLeagueUnlocked = show;
      };
      LeagueController.prototype.setLeagueUnlockForFirstTime = function() {
        if (this.mShowLeagueUnlocked) {
          this.mFirstUnlockOfLeagues = true;
          var pid = this.mPlayerController.getPlayerId();
          cc.sys.localStorage.setItem("FirstUnlockOfLeagues:" + pid, "true");
        }
      };
      LeagueController.prototype.sendServiceConnect = function() {
        if (!this.isLeagueEnabled()) return;
        var model = this.mPlayerController.getModel();
        if (!model.canJoinLeagues()) return;
        if (this.mSeasonEndTimer) {
          clearTimeout(this.mSeasonEndTimer);
          this.mSeasonEndTimer = null;
        }
        if (this.mCooldownTimer) {
          clearTimeout(this.mCooldownTimer);
          this.mCooldownTimer = null;
        }
        this.mStatsController.count("championship", 1, "league_fetch", "service_connect_initiate");
        var playerCount = 0;
        var infoLastUpdated = 0;
        this.mLeaguePlayersInfo && (playerCount = Object.keys(this.mLeaguePlayersInfo).length);
        this.mLeagueConfig && (infoLastUpdated = this.mLeagueConfig.lastUpdated);
        this.mPersistantNodeComponent.getRouterController().sendMessage(new RouterOutPackets_1.ServiceConnectMessage(this.mPlayerController.getPlayerId(), this.mLeagueId, playerCount, infoLastUpdated, this.mMaxInfoUpdated));
      };
      LeagueController.prototype.onMessage = function(message) {
        if (message instanceof RouterINPackets_1.ServiceConnectAckMessage) {
          this.mStatsController.count("championship", 1, "league_fetch", "service_connect_ack");
          this.handleServiceConnectAck(message);
        } else if (message instanceof RouterINPackets_1.LeagueInfoMessage) {
          this.mStatsController.count("championship", 1, "league_fetch", "info");
          this.handlePlayerInfoPacket(message);
        } else if (message instanceof RouterINPackets_1.LeagueUpdateMessage) {
          this.mStatsController.count("championship", 1, "league_fetch", "update");
          this.handleLeagueUpdatePacket(message);
        } else if (message instanceof RouterINPackets_1.LeagueRetryMessage) {
          this.mStatsController.count("championship", 1, "league_fetch", "retry");
          this.handleRetryPacket(message);
        } else if (message instanceof RouterINPackets_1.LeagueChangeMessage) {
          this.mStatsController.count("championship", 1, "league_fetch", "change");
          this.handleLeagueChangePacket(message);
        } else if (message instanceof RouterInPackets_1.LeagueCooldownMessage) {
          this.mStatsController.count("championship", 1, "league_fetch", "cooldown");
          this.handleLeagueCooldownPacket(message);
        } else if (message instanceof RouterInPackets_1.LeagueDetailsMessage) {
          this.mStatsController.count("championship", 1, "league_fetch", "details");
          this.handlePreviousLeaguePacket(message);
        }
      };
      LeagueController.prototype.handleServiceConnectAck = function(message) {
        message.leagueConfig && (this.mLeagueConfig = message.leagueConfig);
        this.mIsLeagueConfigInitialized = true;
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
        this.mIsInCoolDown = false;
      };
      LeagueController.prototype.handlePlayerInfoPacket = function(message) {
        this.mLeaguePlayersInfo = {};
        for (var i in message.playerInfoMap) this.mLeaguePlayersInfo[i] = message.playerInfoMap[i];
        this.mMaxInfoUpdated = message.infoLastUpdated;
        this.mCanShowResults = true;
        this.buildSortedPidList();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED);
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_CHECK_FOR_AUTO_POPUPS);
        this.mSortedPlayerListDirty = true;
      };
      LeagueController.prototype.handleLeagueUpdatePacket = function(message) {
        var sortedPointsList = message.leaguePointsList;
        sortedPointsList || this.mLogger.Log("shreyas LeagueUpdateMessage: " + JSON.stringify(message));
        for (var i = 0; i < this.mSortedPidList.length; i++) {
          var pid = this.mSortedPidList[i];
          if (!this.mLeaguePlayersInfo[pid]) {
            this.mLogger.Log("pid not found in info - do reconnect and fetch fresh info");
            this.reconnect();
            return;
          }
          this.mLeaguePlayersInfo[pid].points = sortedPointsList[i];
        }
        this.mPlayerPointsLoaded = true;
        this.mSortedPlayerListDirty = true;
        this.calculatePreviousRank();
        this.cachePlayerInfoMap();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED);
      };
      LeagueController.prototype.handleLeagueCooldownPacket = function(message) {
        this.mIsInCoolDown = true;
        if (void 0 != message.timeout) {
          this.mCoolDownExpiry = Math.round(Date.now() / 1e3) + message.timeout;
          this.retryAfterTimeOut(1e3 * message.timeout + 2e3);
        }
        this.initializeMyRank();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED);
      };
      LeagueController.prototype.addLeaguePoints = function(points) {
        return;
      };
      LeagueController.prototype.handleRetryPacket = function(message) {
        this.retryAfterTimeOut(1e3 * message.timeout);
      };
      LeagueController.prototype.handleLeagueChangePacket = function(message) {
        if (message.league > 0) {
          this.mLeaguePlayersInfo = {};
          this.mSortedPlayerListDirty = true;
          this.mLeagueId = message.leagueId;
          this.mLeague = message.league;
          this.mLeagueExpiry = Math.round(Date.now() / 1e3) + message.leagueExpiry;
          this.setLeagueExpiryTimeout();
          this.mPlayerPointsLoaded = false;
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED);
        }
        if (message.result && this.mGrantedResultLeagueId != message.result.leagueId) if (this.mWasUserInactive) {
          this.mGrantedResultLeagueId = message.result.leagueId;
          this.mWasUserInactive = false;
          this.claimReward();
        } else {
          this.handleResults(message.result);
          this.mCanShowResults = true;
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_CHECK_FOR_AUTO_POPUPS);
          var resultString = 0 == this.mResults.change ? "stay" : this.mResults.change > 0 ? "promotion" : "demotion";
          this.mStatsController.count("championship", 1, "league_fetch", resultString);
        }
        message.timeout >= 0 && this.retryAfterTimeOut(1e3 * message.timeout);
      };
      LeagueController.prototype.handlePreviousLeaguePacket = function(message) {
        this.mLeaguePlayersInfo = message.playerInfoMap;
        this.mLeague = message.league;
        this.mSortedPlayerListDirty = true;
        this.initializeMyRank();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED);
      };
      LeagueController.prototype.initializeMyRank = function() {
        var sortedPlayerList = this.getSortedPlayerInfoList();
        for (var i in sortedPlayerList) this.mPlayerController.getPlayerId() == sortedPlayerList[i].pid && this.mLeaguePlayersInfo[this.mPlayerController.getPlayerId()] && (this.mLeaguePlayersInfo[this.mPlayerController.getPlayerId()].rank = parseInt(i) + 1);
      };
      LeagueController.prototype.buildSortedPidList = function() {
        var pidList = Object.keys(this.mLeaguePlayersInfo);
        pidList.sort();
        this.mSortedPidList = pidList;
      };
      LeagueController.prototype.getSortedPlayerInfoList = function() {
        if (!this.mSortedPlayerListDirty) return this.mSortedPlayerList;
        this.mSortedPlayerListDirty = false;
        var data = [];
        for (var i in this.mLeaguePlayersInfo) data.push(this.mLeaguePlayersInfo[i]);
        data.sort(this.comparator);
        this.mSortedPlayerList = data;
        return data;
      };
      LeagueController.prototype.comparator = function(a, b) {
        if (a.points < b.points) return 1;
        if (a.points > b.points) return -1;
        if (a.pid < b.pid) return -1;
        if (a.pid > b.pid) return 1;
        return 0;
      };
      LeagueController.prototype.setLeagueInfo = function(leagueInfo, wasUserInactive, firstLeagueAssigned) {
        firstLeagueAssigned > 0 && (this.mLeague = firstLeagueAssigned);
        if (!leagueInfo) return;
        leagueInfo.id && (this.mLeagueId = leagueInfo.id);
        leagueInfo.league && (this.mLeague = leagueInfo.league);
        void 0 != leagueInfo.expiry && (this.mLeagueExpiry = Math.round(Date.now() / 1e3) + leagueInfo.expiry);
        this.setLeagueExpiryTimeout();
        leagueInfo.result && this.mGrantedResultLeagueId != leagueInfo.result.leagueId && this.handleResults(new LeagueModels_1.LeagueResults(leagueInfo.result));
        this.mWasUserInactive = wasUserInactive;
      };
      LeagueController.prototype.handleResults = function(results) {
        this.mResults ? this.mResults.leagueId != results.leagueId && this.mResultsList.push(results) : this.mResults = results;
      };
      LeagueController.prototype.setLeagueCooldownInfo = function(isInCooldown, cooldownTimer, seasonEndTimer) {
        if (isInCooldown) this.setCooldownForUnassigned(cooldownTimer); else {
          var self = this;
          this.mSeasonEndTimer = setTimeout(function() {
            self.setCooldownForUnassigned(cooldownTimer);
          }, 1e3 * seasonEndTimer);
        }
      };
      LeagueController.prototype.setCooldownForUnassigned = function(cooldownTimer) {
        this.mIsInCoolDown = true;
        this.mCoolDownExpiry = Math.round(Date.now() / 1e3) + cooldownTimer;
        var self = this;
        if (this.mCooldownTimer) {
          clearTimeout(this.mCooldownTimer);
          this.mCooldownTimer = null;
        }
        this.mCooldownTimer = setTimeout(function() {
          if (self.mPlayerController.getModel().canJoinLeagues() && !this.mWasUserInactive) self.retryAfterTimeOut(2e3); else {
            self.mIsInCoolDown = false;
            self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED);
            self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_CHECK_FOR_AUTO_POPUPS);
          }
        }, 1e3 * cooldownTimer);
      };
      LeagueController.prototype.reset = function() {
        this.mLeagueConfig = null;
        this.mLeaguePlayersInfo = {};
        this.mIsLeagueConfigInitialized = false;
        this.mSortedPidList = [];
        this.mMaxInfoUpdated = 0;
        this.mLeagueId = "";
      };
      LeagueController.prototype.reconnect = function() {
        this.retryAfterTimeOut(0);
      };
      LeagueController.prototype.retryAfterTimeOut = function(timeout) {
        this.mIsLeagueConfigInitialized = false;
        var self = this;
        if (this.mRetryCount >= 7) return;
        this.mRetryCount++;
        0 == timeout && (timeout = 5e3);
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = setTimeout(function() {
          self.sendServiceConnect();
        }, timeout);
      };
      LeagueController.prototype.claimReward = function() {
        var self = this;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        var params = {
          pid: this.mPlayerController.getPlayerId(),
          installOS: "instant"
        };
        this.mStatsController.count("championship", 1, "user_reward", "initiate");
        connection.doPost("/league/reward", params, function(data) {
          self.mStatsController.count("championship", 1, "user_reward", "success");
          self.mLogger.Log("shreyas claimReward " + JSON.stringify(data));
          var player = self.mPlayerController.getModel();
          data.rcpt && "" != data.rcpt && player.setReceipt(data.rcpt);
          data.chips && player.setCoins(player.getCoins() + data.chips);
          void 0 != data.currentBetAmount && void 0 != data.twoPlayerWinMeta && void 0 != data.fourPlayerWinMeta && player.setBetAndRewardInfo(data.currentBetAmount, data.twoPlayerWinMeta, data.fourPlayerWinMeta);
          void 0 != data.currentBetAmountList && void 0 != data.twoPlayerWinMetaList && void 0 != data.fourPlayerWinMetaList && void 0 != data.defaultBetSelectAmount && player.setBetAndRewardListInfo(data.currentBetAmountList, data.twoPlayerWinMetaList, data.fourPlayerWinMetaList, data.defaultBetSelectAmount);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEAGUE_CLAIM_COMPLETE, {
            chips: data.chips
          });
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_UPDATE_LOBBY_COINS_HUD, {
            timer: .5
          });
        }, function() {
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LEAGUE_CLAIM_COMPLETE, false);
          self.mStatsController.count("championship", 1, "user_reward", "fail");
          self.mLogger.Log("shreyas claimReward error");
        });
      };
      LeagueController.prototype.getResults = function() {
        if (!this.isInCooldown()) return this.mResults;
        return null;
      };
      LeagueController.prototype.clearResults = function() {
        if (this.mResults) {
          this.mGrantedResultLeagueId = this.mResults.leagueId;
          this.mResults = null;
          if (this.mResultsList.length > 0) {
            this.mResults = this.mResultsList[0];
            this.mResultsList = this.mResultsList.splice(1);
          }
        }
      };
      LeagueController.prototype.clearExpriryTimeout = function() {
        this.mLeagueExpiryTimeout && clearTimeout(this.mLeagueExpiryTimeout);
        this.mLeagueExpiryTimeout = null;
      };
      LeagueController.prototype.setLeagueExpiryTimeout = function() {
        this.clearExpriryTimeout();
        var timeout = this.mLeagueExpiry - Math.round(Date.now() / 1e3);
        if (this.mLeagueExpiry && timeout > 0) {
          var self = this;
          this.mLeagueExpiryTimeout = setTimeout(function() {
            self.retryAfterTimeOut(0);
          }, 1e3 * timeout);
        }
      };
      LeagueController.prototype.setLeagueConfig = function(leagueConfig) {
        this.mLeagueConfig || (this.mLeagueConfig = leagueConfig);
      };
      LeagueController.prototype.cachePlayerInfoMap = function() {
        cc.sys.localStorage.setItem("league_" + this.mLeagueId, JSON.stringify(this.mSortedPlayerList));
      };
      LeagueController.prototype.calculatePreviousRank = function() {
        this.getSortedPlayerInfoList();
        this.mPrevPlayerRank = -1;
        var prevPlayerInfo = cc.sys.localStorage.getItem("league_" + this.mLeagueId);
        if (prevPlayerInfo) {
          prevPlayerInfo = JSON.parse(prevPlayerInfo);
          for (var i in prevPlayerInfo) this.mPlayerController.getPlayerId() == prevPlayerInfo[i].pid && (this.mPrevPlayerRank = parseInt(i) + 1);
        }
      };
      LeagueController.prototype.canShowNextLeagueInfo = function() {
        return 6 != this.getLeague();
      };
      return LeagueController;
    }();
    exports.LeagueController = LeagueController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Logger": "Logger",
    "../Packets/RouterINPackets": "RouterInPackets",
    "../Packets/RouterOutPackets": "RouterOutPackets",
    "../models/LeagueModels": "LeagueModels",
    "./../Packets/RouterInPackets": "RouterInPackets",
    "./ExperiementController": "ExperiementController"
  } ],
  LeagueEndPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "846f7r7d/dAqqGqIyUeGO9o", "LeagueEndPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("./../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var Constants_1 = require("../Constants");
    var LeagueBadgeComponent_1 = require("./LeagueBadgeComponent");
    var CoinAnimationMetaComponent_1 = require("./CoinAnimationMetaComponent");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeagueEndPopupComponent = function(_super) {
      __extends(LeagueEndPopupComponent, _super);
      function LeagueEndPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.promotionNode = null;
        _this.demotionNode = null;
        _this.coinsEarnedLabel = null;
        _this.demoteRankLabel = null;
        _this.promoteRankLabel = null;
        _this.retainedRankLabel = null;
        _this.rankNameLabel = null;
        _this.promotionNodeRankNameLabel = null;
        _this.retainedNodeRankNameLabel = null;
        _this.demotedNodeRankNameLabel = null;
        _this.rewardLabel = null;
        _this.okayButton = null;
        _this.shareButton = null;
        _this.claimButton = null;
        _this.closeButton = null;
        _this.leagueBadgeNode = null;
        _this.coinAnimationNode = null;
        _this.retainedNode = null;
        _this.RewardNode = null;
        _this.shareSpinner = null;
        _this.mClaimInProogress = false;
        _this.mPersistantComponent = null;
        _this.mRankingType = "";
        return _this;
      }
      LeagueEndPopupComponent.prototype.onLoad = function() {
        this.claimButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueEndPopupComponent", "onClaimPressed"));
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueEndPopupComponent", "onOkayPressed"));
        this.shareButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueEndPopupComponent", "onSharePressed"));
        this.initialize();
      };
      LeagueEndPopupComponent.prototype.initialize = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.mLeagueController = this.mPersistantComponent.getLeagueController();
        var results = this.mLeagueController.getResults();
        if (results) {
          var changeString = 1 == results.change ? "promote" : -1 == results.change ? "demote" : "stay";
          this.mRankingType = changeString;
          this.mPersistantComponent.GetStatsController().count("popup", results.rank, "show", changeString, results.leagueId);
          this.promotionNode.active = results.change > 0;
          this.demotionNode.active = results.change < 0;
          this.retainedNode.active = 0 == results.change;
          this.demoteRankLabel.string = results.rank.toString();
          this.promoteRankLabel.string = results.rank.toString();
          this.retainedRankLabel.string = results.rank.toString();
          this.coinsEarnedLabel.string = Helper_1.Helper.getLocaleNumber(results.points);
          this.rewardLabel.string = Helper_1.Helper.getLocaleNumber(results.chips);
          var count = this.closeButton.clickEvents.length;
          for (var i = 0; i < count; i++) this.closeButton.clickEvents.pop();
          results.chips && results.chips > 0 ? this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueEndPopupComponent", "onClaimPressed")) : this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueEndPopupComponent", "onOkayPressed"));
          this.leagueBadgeNode.initialize(results.newLeague);
          this.rankNameLabel.string = this.mLeagueController.getLeagueNameForLeague(results.newLeague);
          this.promotionNodeRankNameLabel.string = this.mLeagueController.getLeagueNameForLeague(results.newLeague);
          this.retainedNodeRankNameLabel.string = this.mLeagueController.getLeagueNameForLeague(results.newLeague);
          this.RewardNode.active = results.chips && results.chips > 0;
          this.claimButton.node.active = results.chips && results.chips > 0;
          this.okayButton.node.active = !results.chips || results.chips <= 0;
          cc._renderType === cc.game.RENDER_TYPE_CANVAS && (this.shareButton.node.active = false);
          this.demotedNodeRankNameLabel.getComponent(LocalizationComponent_1.default).setValues("#YOU_MOVED_BADGE_NAME_TEXT", {
            badge_name: this.mLeagueController.getLeagueNameForLeague(results.newLeague)
          });
        }
      };
      LeagueEndPopupComponent.prototype.onClaimPressed = function() {
        this.claimReward();
      };
      LeagueEndPopupComponent.prototype.onOkayPressed = function() {
        this.claimReward();
      };
      LeagueEndPopupComponent.prototype.claimReward = function() {
        if (this.mClaimInProogress) return;
        this.mLeagueController.claimReward();
        this.mClaimInProogress = true;
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_LEAGUE_CLAIM_COMPLETE, this.onCLaimResponse, this);
        this.mPersistantComponent.GetStatsController().count("button", 1, "leagues_result", "claim");
      };
      LeagueEndPopupComponent.prototype.onCLaimResponse = function(event) {
        this.mClaimInProogress = false;
        if (event && event.getUserData()) {
          var data = event.getUserData();
          if (data.chips) {
            var leagueId = this.mLeagueController.getResults() ? this.mLeagueController.getResults().leagueId : "";
            this.mPersistantComponent.GetStatsController().count("popup", data.chips, "rewards", "", leagueId);
            this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, {
              position: this.okayButton.node.parent.convertToWorldSpaceAR(this.okayButton.node.getPosition()),
              comp: this.coinAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
              firstHitEvent: {
                eventName: "updateLobbyCoinsHud",
                value: data.chips
              }
            });
          }
        }
        this.mLeagueController.clearResults();
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      LeagueEndPopupComponent.prototype.onSharePressed = function() {
        this.mPersistantComponent.GetStatsController().count("button", 1, "league_rank", "share", this.mRankingType);
        Helper_1.Helper.shareScreenshot(this.onShareSuccess.bind(this), this.onShareError.bind(this));
      };
      LeagueEndPopupComponent.prototype.onShareError = function() {
        this.shareSpinner.getComponent(SpinnerComponent_1.default).hideLoader();
      };
      LeagueEndPopupComponent.prototype.onShareSuccess = function() {
        this.mPersistantComponent.GetStatsController().count("popup", 1, "open", "fb_share_native", "league_rank");
        this.shareSpinner.getComponent(SpinnerComponent_1.default).hideLoader();
      };
      __decorate([ property(cc.Node) ], LeagueEndPopupComponent.prototype, "promotionNode", void 0);
      __decorate([ property(cc.Node) ], LeagueEndPopupComponent.prototype, "demotionNode", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "coinsEarnedLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "demoteRankLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "promoteRankLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "retainedRankLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "rankNameLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "promotionNodeRankNameLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "retainedNodeRankNameLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "demotedNodeRankNameLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueEndPopupComponent.prototype, "rewardLabel", void 0);
      __decorate([ property(cc.Button) ], LeagueEndPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Button) ], LeagueEndPopupComponent.prototype, "shareButton", void 0);
      __decorate([ property(cc.Button) ], LeagueEndPopupComponent.prototype, "claimButton", void 0);
      __decorate([ property(cc.Button) ], LeagueEndPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LeagueEndPopupComponent.prototype, "leagueBadgeNode", void 0);
      __decorate([ property(cc.Node) ], LeagueEndPopupComponent.prototype, "coinAnimationNode", void 0);
      __decorate([ property(cc.Node) ], LeagueEndPopupComponent.prototype, "retainedNode", void 0);
      __decorate([ property(cc.Node) ], LeagueEndPopupComponent.prototype, "RewardNode", void 0);
      __decorate([ property(cc.Node) ], LeagueEndPopupComponent.prototype, "shareSpinner", void 0);
      LeagueEndPopupComponent = __decorate([ ccclass ], LeagueEndPopupComponent);
      return LeagueEndPopupComponent;
    }(cc.Component);
    exports.default = LeagueEndPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./../Generic/Helper": "Helper",
    "./CoinAnimationMetaComponent": "CoinAnimationMetaComponent",
    "./LeagueBadgeComponent": "LeagueBadgeComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  LeagueInfoPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80d6cMt9G5G2Lhs+yS61iaD", "LeagueInfoPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeagueInfoPopupComponent = function(_super) {
      __extends(LeagueInfoPopupComponent, _super);
      function LeagueInfoPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nextButton = null;
        _this.backButton = null;
        _this.pagesNode = null;
        _this.maxPageNumber = 3;
        _this.firstTopRewardkNode = null;
        _this.secondTopRewardkNode = null;
        _this.thirdTopRewardkNode = null;
        _this.mPageNumber = 0;
        _this.mPersistantNodeComponent = null;
        return _this;
      }
      LeagueInfoPopupComponent.prototype.start = function() {
        var leagueController = this.mPersistantNodeComponent.getLeagueController();
        this.nextButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueInfoPopupComponent", "onNextButtonPressed"));
        this.backButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueInfoPopupComponent", "onBackButtonPressed"));
        for (var i = 0; i < this.firstTopRewardkNode.childrenCount; i++) {
          var child = this.firstTopRewardkNode.children[i];
          if (child) {
            var label = child.getChildByName("AmountLabel");
            label && (label.getComponent(cc.Label).string = Helper_1.Helper.getLocaleNumber(leagueController.getLeagueRewardForLeagueAndRank(this.firstTopRewardkNode.childrenCount - 1 - i, 1)));
          }
        }
        for (var i = 0; i < this.secondTopRewardkNode.childrenCount; i++) {
          var child = this.secondTopRewardkNode.children[i];
          if (child) {
            var label = child.getChildByName("AmountLabel");
            label && (label.getComponent(cc.Label).string = Helper_1.Helper.getLocaleNumber(leagueController.getLeagueRewardForLeagueAndRank(this.firstTopRewardkNode.childrenCount - 1 - i, 2)));
          }
        }
        for (var i = 0; i < this.thirdTopRewardkNode.childrenCount; i++) {
          var child = this.thirdTopRewardkNode.children[i];
          if (child) {
            var label = child.getChildByName("AmountLabel");
            label && (label.getComponent(cc.Label).string = Helper_1.Helper.getLocaleNumber(leagueController.getLeagueRewardForLeagueAndRank(this.firstTopRewardkNode.childrenCount - 1 - i, 6)));
          }
        }
      };
      LeagueInfoPopupComponent.prototype.initialize = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPageNumber = 0;
        this.initializebuttonsAndPage();
      };
      LeagueInfoPopupComponent.prototype.onNextButtonPressed = function() {
        this.mPageNumber = (this.mPageNumber + 1) % this.maxPageNumber;
        this.initializebuttonsAndPage();
      };
      LeagueInfoPopupComponent.prototype.onBackButtonPressed = function() {
        this.mPageNumber = (this.mPageNumber - 1) % this.maxPageNumber;
        this.initializebuttonsAndPage();
      };
      LeagueInfoPopupComponent.prototype.initializebuttonsAndPage = function() {
        this.nextButton.interactable = this.mPageNumber + 1 < this.maxPageNumber;
        this.backButton.interactable = this.mPageNumber > 0;
        var name = "Page" + (this.mPageNumber + 1);
        for (var i = 0; i < this.pagesNode.childrenCount; i++) this.pagesNode.children[i].active = this.pagesNode.children[i].name == name;
        this.mPersistantNodeComponent.GetStatsController().count("popup", this.mPageNumber + 1, "show", "rules_popup");
      };
      __decorate([ property(cc.Button) ], LeagueInfoPopupComponent.prototype, "nextButton", void 0);
      __decorate([ property(cc.Button) ], LeagueInfoPopupComponent.prototype, "backButton", void 0);
      __decorate([ property(cc.Node) ], LeagueInfoPopupComponent.prototype, "pagesNode", void 0);
      __decorate([ property(Number) ], LeagueInfoPopupComponent.prototype, "maxPageNumber", void 0);
      __decorate([ property(cc.Node) ], LeagueInfoPopupComponent.prototype, "firstTopRewardkNode", void 0);
      __decorate([ property(cc.Node) ], LeagueInfoPopupComponent.prototype, "secondTopRewardkNode", void 0);
      __decorate([ property(cc.Node) ], LeagueInfoPopupComponent.prototype, "thirdTopRewardkNode", void 0);
      LeagueInfoPopupComponent = __decorate([ ccclass ], LeagueInfoPopupComponent);
      return LeagueInfoPopupComponent;
    }(cc.Component);
    exports.default = LeagueInfoPopupComponent;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  LeagueLeaderBoardPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b5436GnWgJHf6afwqoCKC2b", "LeagueLeaderBoardPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var PinScrollViewCardComponent_1 = require("./PinScrollViewCardComponent");
    var LeaguePopupCardComponent_1 = require("./LeaguePopupCardComponent");
    var Constants_1 = require("../Constants");
    var LeagueBadgeComponent_1 = require("./LeagueBadgeComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var SmartScrollViewComponent_1 = require("./SmartScrollViewComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeagueLeaderBoardPopupComponent = function(_super) {
      __extends(LeagueLeaderBoardPopupComponent, _super);
      function LeagueLeaderBoardPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.leaderBoardPosition = null;
        _this.leaguePopupCardPrefab = null;
        _this.closeButton = null;
        _this.scrollViewContentNode = null;
        _this.scrollViewVerticalLayout = null;
        _this.scrollViewNode = null;
        _this.leagueNameLabel = null;
        _this.nextLeagueNameLabel = null;
        _this.leagueRewardLabel = null;
        _this.seasonEndTimerLabel = null;
        _this.nextLeagueRewardLabel = null;
        _this.infoButton = null;
        _this.unlockedNode = null;
        _this.unassignedNode = null;
        _this.leagueBadgeNode = null;
        _this.nextLeagueBadgeNode = null;
        _this.loadingNode = null;
        _this.lockedInfoButton = null;
        _this.promotionBannerNode = null;
        _this.demotionBannerNode = null;
        _this.promotionBannerSprite = null;
        _this.demotionBannerSprite = null;
        _this.demotionHeaderNode = null;
        _this.leagueCoolDownNode = null;
        _this.leaguePlayerInfoNode = null;
        _this.previousLeagueInfoNode = null;
        _this.coolDownBadgeComponent = null;
        _this.myRankLeagueCardForCooldown = null;
        _this.badgeHeaderNode = null;
        _this.noBadgeHeaderNode = null;
        _this.coolDownTimerLabel = null;
        _this.inactiveCoolDownTimerLabel = null;
        _this.playOnlineButton = null;
        _this.seasonEndTimerNode = null;
        _this.zoneLabel = null;
        _this.noLeagueCooldownInfoNode = null;
        _this.cooldownPromoteZoneNode = null;
        _this.cooldownDemoteZoneNode = null;
        _this.cooldownSafeZoneNode = null;
        _this.coolDownBadgeNameNode = null;
        _this.inactiveLeagueBadgeCompoent = null;
        _this.oldBadgeTextNode = null;
        _this.nextRankInfoNode = null;
        _this.nextRankComingSoonNode = null;
        _this.mTimeout = null;
        _this.mPopupShown = false;
        _this.mAnimationStartPosition = null;
        _this.mAnimatingLeaderboard = false;
        _this.mPersistantNodeComponent = null;
        _this.mRefreshInterval = null;
        _this.mPlayersInfo = [];
        _this.mIsPopupOpen = false;
        _this.mRankForStats = -1;
        return _this;
      }
      LeagueLeaderBoardPopupComponent.prototype.onLoad = function() {
        this.initializePersistantNode();
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueLeaderBoardPopupComponent", "hidePopup"));
        this.infoButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueLeaderBoardPopupComponent", "onInfoPressed"));
        this.lockedInfoButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueLeaderBoardPopupComponent", "onInfoPressed"));
        this.playOnlineButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueLeaderBoardPopupComponent", "onPlayOnlinePressed"));
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED, this.onLeagueDataFetched, this);
        this.node.on(Constants_1.constants.Events.EVENT_POPUP_SHOW_COMPLETE, this.onPopupOpen, this);
      };
      LeagueLeaderBoardPopupComponent.prototype.onLeagueDataFetched = function() {
        this.initialize();
      };
      LeagueLeaderBoardPopupComponent.prototype.initializePersistantNode = function() {
        if (!this.mPersistantNodeComponent) {
          var persistantNode = cc.find("PersistantNode");
          var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
          this.mPersistantNodeComponent = persistantController;
          this.mLeagueController = this.mPersistantNodeComponent.getLeagueController();
          this.mAnimationStartPosition = this.node.getPosition();
        }
      };
      LeagueLeaderBoardPopupComponent.prototype.initialize = function() {
        this.initializePersistantNode();
        var gamesRemaining = this.mLeagueController.getLeagueEnableGames() - this.mPersistantNodeComponent.GetPlayerController().getModel().getPublicGamesWonCount();
        var isLeagueUnlocked = true;
        var isInCoolDown = this.mLeagueController.isInCooldown();
        var isLeaguesAssignable = this.mLeagueController.canAssignLeagues();
        this.unlockedNode.active = isLeaguesAssignable || isInCoolDown;
        this.unassignedNode.active = !isLeaguesAssignable && !isInCoolDown;
        this.leagueCoolDownNode.active = isInCoolDown;
        this.leaguePlayerInfoNode.active = isLeaguesAssignable && !isInCoolDown;
        this.badgeHeaderNode.active = true;
        this.noBadgeHeaderNode.active = false;
        this.promotionBannerNode.active = false;
        this.demotionBannerNode.active = false;
        this.demotionHeaderNode.active = false;
        this.previousLeagueInfoNode.active = false;
        this.noLeagueCooldownInfoNode.active = true;
        this.seasonEndTimerNode.active = !isInCoolDown;
        var playerInfo = this.mLeagueController.getMyLeagueInfo();
        var myRank = 0;
        playerInfo && (myRank = playerInfo.rank);
        if (myRank != this.mRankForStats) {
          this.mRankForStats = myRank;
          this.mPersistantNodeComponent.GetStatsController().count("debug", 1, "leagueRank", "" + myRank);
        }
        if (this.mLeagueController.wasUserInactive()) {
          this.inactiveLeagueBadgeCompoent.initialize(this.mLeagueController.getLeague());
          this.oldBadgeTextNode.active = true;
        } else {
          this.inactiveLeagueBadgeCompoent.initialize(-1);
          this.oldBadgeTextNode.active = false;
        }
        if (isLeaguesAssignable) {
          this.leagueNameLabel.string = this.mLeagueController.getLeagueName();
          this.leagueRewardLabel.string = Helper_1.Helper.getLocaleNumber(this.mLeagueController.getLeagueReward());
          this.nextLeagueNameLabel.string = this.mLeagueController.getNextLeagueName();
          this.nextLeagueRewardLabel.string = Helper_1.Helper.getLocaleNumber(this.mLeagueController.getNextLeagueReward());
          var playersInfo = this.mLeagueController.getLeaguesLeaderBoardData();
          this.leagueBadgeNode.getComponent(LeagueBadgeComponent_1.default).initialize(this.mLeagueController.getLeague());
          this.nextLeagueBadgeNode.getComponent(LeagueBadgeComponent_1.default).initialize(this.mLeagueController.getNextLeague());
          var canShowNextLeagueInfo = this.mLeagueController.canShowNextLeagueInfo();
          this.nextRankInfoNode.active = canShowNextLeagueInfo;
          this.nextRankComingSoonNode.active = !canShowNextLeagueInfo;
        }
        if (isInCoolDown) {
          if (playerInfo) {
            this.noLeagueCooldownInfoNode.active = false;
            this.previousLeagueInfoNode.active = true;
            this.coolDownBadgeComponent.initialize(this.mLeagueController.getLeague());
            this.cooldownPromoteZoneNode.active = false;
            this.cooldownDemoteZoneNode.active = false;
            this.cooldownSafeZoneNode.active = false;
            playerInfo.rank <= this.mLeagueController.getPromotionIndex() ? this.cooldownPromoteZoneNode.active = true : playerInfo.rank >= this.mLeagueController.getDemotionIndex() ? this.cooldownDemoteZoneNode.active = true : this.cooldownSafeZoneNode.active = true;
            this.coolDownBadgeNameNode.string = this.mLeagueController.getLeagueName();
            this.myRankLeagueCardForCooldown.initialize(this.mPersistantNodeComponent.GetPlayerController().getPlayerName(), playerInfo.rank, playerInfo.avatar, playerInfo.points, true, false, false, this.mPersistantNodeComponent.GetPlayerController().getPlayerCountry());
          }
          this.loadingNode.active = false;
          return;
        }
        if (!isLeagueUnlocked || !isLeaguesAssignable) {
          this.loadingNode.active = false;
          return;
        }
        if (!playersInfo || !playersInfo.length) {
          this.loadingNode.active = true;
          this.unlockedNode.active = false;
          return;
        }
        this.mPlayersInfo = playersInfo;
        this.loadingNode.active = false;
        this.clearRefreshInterval();
        var cardHeight = 100;
        var emptyNodeAdded = false;
        if (this.mPlayersInfo.length >= this.mLeagueController.getDemotionIndex()) {
          this.demotionBannerNode.active = true;
          this.demotionHeaderNode.active = true;
          emptyNodeAdded = true;
        }
        var leagueCard = cc.instantiate(this.leaguePopupCardPrefab);
        var size = leagueCard.getContentSize();
        cardHeight = size.height;
        var totalCards = this.mPlayersInfo.length;
        totalCards > this.mLeagueController.getDemotionIndex() && (totalCards += 1);
        this.mLeagueController.initializeMyRank();
        var index = 0;
        this.mLeagueController.getMyLeagueInfo() && (index = this.mLeagueController.getMyLeagueInfo().rank - 1);
        var isInPromote = false;
        var isInDemote = false;
        if (this.mLeagueController.getMyLeagueInfo()) {
          isInPromote = this.mLeagueController.getMyLeagueInfo().rank <= this.mLeagueController.getPromotionIndex();
          isInDemote = this.mLeagueController.getMyLeagueInfo().rank >= this.mLeagueController.getDemotionIndex();
        }
        leagueCard.getComponent(LeaguePopupCardComponent_1.default).initialize(this.mPersistantNodeComponent.GetPlayerController().getPlayerName(), index + 1, this.mPlayersInfo[index].avatar, this.mPlayersInfo[index].points, true, isInPromote, isInDemote, this.mPersistantNodeComponent.GetPlayerController().getPlayerCountry());
        this.scrollViewNode.getComponent(SmartScrollViewComponent_1.default).initialize(size, totalCards, this.leaguePopupCardPrefab, this.initCard.bind(this), {
          spacingY: 5,
          paddingTop: 60
        });
        this.scrollViewNode.getComponent(PinScrollViewCardComponent_1.default).initializeWithCallback(leagueCard, this.isMyCardVisibleCallback.bind(this), index);
        var promotionBgOffset = .2;
        var demotionBgOffset = 1.5;
        var demotionHeaderOffset = 5;
        this.promotionBannerNode.active = true;
        var scrollViewHeight = cardHeight * playersInfo.length + this.scrollViewVerticalLayout.getComponent(cc.Layout).paddingTop + this.scrollViewVerticalLayout.getComponent(cc.Layout).paddingBottom + this.scrollViewVerticalLayout.getComponent(cc.Layout).spacingY * (playersInfo.length + 3);
        emptyNodeAdded && (scrollViewHeight += cardHeight);
        this.scrollViewContentNode.setContentSize(new cc.Size(this.scrollViewContentNode.getContentSize().width, scrollViewHeight));
        this.promotionBannerNode.setPosition(new cc.Vec2(this.promotionBannerNode.getPositionX(), 0));
        this.demotionBannerNode.setPosition(new cc.Vec2(this.demotionBannerNode.getPositionX(), -this.scrollViewContentNode.getContentSize().height));
        this.promotionBannerSprite.setContentSize(this.promotionBannerSprite.getContentSize().width, (cardHeight + this.scrollViewVerticalLayout.getComponent(cc.Layout).spacingY) * (Math.min(this.mLeagueController.getPromotionIndex(), playersInfo.length) + promotionBgOffset));
        this.demotionBannerSprite.setContentSize(this.demotionBannerSprite.getContentSize().width, (cardHeight + this.scrollViewVerticalLayout.getComponent(cc.Layout).spacingY) * (playersInfo.length - this.mLeagueController.getDemotionIndex() + demotionBgOffset));
        this.demotionHeaderNode.setPositionY(-((cardHeight + this.scrollViewVerticalLayout.getComponent(cc.Layout).spacingY) * (this.mLeagueController.getDemotionIndex() - 1) + this.scrollViewVerticalLayout.getComponent(cc.Layout).paddingTop) - demotionHeaderOffset);
        this.scrollViewNode.getComponent(cc.ScrollView).scrollToTop();
        this.mIsPopupOpen && this.scrollViewNode.getComponent(PinScrollViewCardComponent_1.default).onScroll(null);
      };
      LeagueLeaderBoardPopupComponent.prototype.initCard = function(card, index) {
        var totalCards = this.mPlayersInfo.length;
        totalCards > this.mLeagueController.getDemotionIndex() && (totalCards += 1);
        if (index < totalCards) {
          if (index == this.mLeagueController.getDemotionIndex() - 1) {
            card.active = false;
            return;
          }
          var rank = index + 1;
          index >= this.mLeagueController.getDemotionIndex() && (rank = index);
          card.active = true;
          var isMyCard = this.mPlayersInfo[rank - 1].pid == this.mPersistantNodeComponent.GetPlayerController().getPlayerId();
          var isInPromote = rank <= this.mLeagueController.getPromotionIndex();
          var isInDemote = rank >= this.mLeagueController.getDemotionIndex();
          var name = isMyCard ? this.mPersistantNodeComponent.GetPlayerController().getPlayerName() : this.mPlayersInfo[rank - 1].lname || this.mPlayersInfo[rank - 1].name;
          var flag = isMyCard ? this.mPersistantNodeComponent.GetPlayerController().getPlayerCountry() : this.mPlayersInfo[rank - 1].flag;
          card.getComponent(LeaguePopupCardComponent_1.default).initialize(name, rank, this.mPlayersInfo[rank - 1].avatar, this.mPlayersInfo[rank - 1].points, isMyCard, isInPromote, isInDemote, flag);
        } else card.active = false;
      };
      LeagueLeaderBoardPopupComponent.prototype.isMyCardVisibleCallback = function() {
        this.mLeagueController.initializeMyRank();
        var index = 0;
        if (this.mLeagueController.getMyLeagueInfo()) {
          index = this.mLeagueController.getMyLeagueInfo().rank;
          this.mLeagueController.getMyLeagueInfo().rank >= this.mLeagueController.getDemotionIndex() && (index += 1);
        }
        return this.scrollViewNode.getComponent(SmartScrollViewComponent_1.default).isCardAtIndexVisible(index - 1);
      };
      LeagueLeaderBoardPopupComponent.prototype.showPopup = function() {
        this.getComponent(PopupComponent_1.default).showPopup();
        this.initialize();
        var leagueName = this.mLeagueController.getLeague() > 0 ? this.mLeagueController.getLeagueName() : "";
        var isInCoolDown = this.mLeagueController.isInCooldown();
        var isLeaguesAssignable = this.mLeagueController.canAssignLeagues();
        var type = isLeaguesAssignable ? isInCoolDown ? "cooldown" : "normal" : "unlocked";
        this.mPersistantNodeComponent.GetStatsController().count("popup", 1, "show", "league_leaderboard", type, leagueName);
      };
      LeagueLeaderBoardPopupComponent.prototype.hidePopup = function() {
        this.mIsPopupOpen = false;
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      LeagueLeaderBoardPopupComponent.prototype.animationComplete = function() {
        this.mAnimatingLeaderboard = false;
      };
      LeagueLeaderBoardPopupComponent.prototype.onInfoPressed = function() {
        var isInCoolDown = this.mLeagueController.isInCooldown();
        var isLeaguesAssignable = this.mLeagueController.canAssignLeagues();
        var type = isLeaguesAssignable ? isInCoolDown ? "cooldown" : "normal" : "unlocked";
        this.mPersistantNodeComponent.GetStatsController().count("button", 1, "leagues", "help", type);
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_LEAGUE_INFO_POPUP);
      };
      LeagueLeaderBoardPopupComponent.prototype.update = function(dt) {
        if (this.mLeagueController) {
          this.seasonEndTimerLabel.string = Helper_1.Helper.getTimerString(Math.round(this.mLeagueController.getLeagueExpiry() - Date.now() / 1e3));
          this.coolDownTimerLabel.string = Helper_1.Helper.getTimerString(Math.round(this.mLeagueController.getCoolDownExpiry() - Date.now() / 1e3));
          this.inactiveCoolDownTimerLabel.string = Helper_1.Helper.getTimerString(Math.round(this.mLeagueController.getCoolDownExpiry() - Date.now() / 1e3));
        }
      };
      LeagueLeaderBoardPopupComponent.prototype.clearRefreshInterval = function() {
        this.mRefreshInterval && clearInterval(this.mRefreshInterval);
        this.mRefreshInterval = null;
      };
      LeagueLeaderBoardPopupComponent.prototype.onPlayOnlinePressed = function() {
        this.hidePopup();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_PLAY_ONLINE_POPUP);
        this.mPersistantNodeComponent.GetStatsController().count("button", 1, "leagues", "play_online");
      };
      LeagueLeaderBoardPopupComponent.prototype.onPopupOpen = function() {
        this.mIsPopupOpen = true;
        this.scrollViewNode.getComponent(PinScrollViewCardComponent_1.default).onScroll(null);
      };
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "leaderBoardPosition", void 0);
      __decorate([ property(cc.Prefab) ], LeagueLeaderBoardPopupComponent.prototype, "leaguePopupCardPrefab", void 0);
      __decorate([ property(cc.Button) ], LeagueLeaderBoardPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "scrollViewContentNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "scrollViewVerticalLayout", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "scrollViewNode", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "leagueNameLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "nextLeagueNameLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "leagueRewardLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "seasonEndTimerLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "nextLeagueRewardLabel", void 0);
      __decorate([ property(cc.Button) ], LeagueLeaderBoardPopupComponent.prototype, "infoButton", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "unlockedNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "unassignedNode", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LeagueLeaderBoardPopupComponent.prototype, "leagueBadgeNode", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LeagueLeaderBoardPopupComponent.prototype, "nextLeagueBadgeNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "loadingNode", void 0);
      __decorate([ property(cc.Button) ], LeagueLeaderBoardPopupComponent.prototype, "lockedInfoButton", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "promotionBannerNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "demotionBannerNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "promotionBannerSprite", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "demotionBannerSprite", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "demotionHeaderNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "leagueCoolDownNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "leaguePlayerInfoNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "previousLeagueInfoNode", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LeagueLeaderBoardPopupComponent.prototype, "coolDownBadgeComponent", void 0);
      __decorate([ property(LeaguePopupCardComponent_1.default) ], LeagueLeaderBoardPopupComponent.prototype, "myRankLeagueCardForCooldown", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "badgeHeaderNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "noBadgeHeaderNode", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "coolDownTimerLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "inactiveCoolDownTimerLabel", void 0);
      __decorate([ property(cc.Button) ], LeagueLeaderBoardPopupComponent.prototype, "playOnlineButton", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "seasonEndTimerNode", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "zoneLabel", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "noLeagueCooldownInfoNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "cooldownPromoteZoneNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "cooldownDemoteZoneNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "cooldownSafeZoneNode", void 0);
      __decorate([ property(cc.Label) ], LeagueLeaderBoardPopupComponent.prototype, "coolDownBadgeNameNode", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LeagueLeaderBoardPopupComponent.prototype, "inactiveLeagueBadgeCompoent", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "oldBadgeTextNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "nextRankInfoNode", void 0);
      __decorate([ property(cc.Node) ], LeagueLeaderBoardPopupComponent.prototype, "nextRankComingSoonNode", void 0);
      LeagueLeaderBoardPopupComponent = __decorate([ ccclass ], LeagueLeaderBoardPopupComponent);
      return LeagueLeaderBoardPopupComponent;
    }(cc.Component);
    exports.default = LeagueLeaderBoardPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./LeagueBadgeComponent": "LeagueBadgeComponent",
    "./LeaguePopupCardComponent": "LeaguePopupCardComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PinScrollViewCardComponent": "PinScrollViewCardComponent",
    "./PopupComponent": "PopupComponent",
    "./SmartScrollViewComponent": "SmartScrollViewComponent"
  } ],
  LeagueLockedPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32e33s2XkpE4KMHY8vCGIe3", "LeagueLockedPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("./../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var PopupComponent_1 = require("./PopupComponent");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeagueLockedPopupComponent = function(_super) {
      __extends(LeagueLockedPopupComponent, _super);
      function LeagueLockedPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.leaderBoardPosition = null;
        _this.gamesToUnlockLabel = null;
        _this.gamesToUnlockTextLabel = null;
        _this.rewardUptoLabel = null;
        _this.closeButton = null;
        _this.okayButton = null;
        _this.infoButton = null;
        _this.mPopupShown = false;
        _this.mAnimationStartPosition = null;
        _this.mAnimatingLeaderboard = false;
        _this.mPersistantComponent = null;
        _this.mLeagueController = null;
        _this.mPlayerController = null;
        return _this;
      }
      LeagueLockedPopupComponent.prototype.onLoad = function() {
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueLockedPopupComponent", "hidePopup"));
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueLockedPopupComponent", "hidePopup"));
        this.infoButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueLockedPopupComponent", "onInfoPressed"));
        this.mAnimationStartPosition = this.node.getPosition();
      };
      LeagueLockedPopupComponent.prototype.initialize = function() {
        if (!this.mPersistantComponent) {
          var persistantNode = cc.find("PersistantNode");
          var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
          this.mPersistantComponent = persistantController;
          this.mPlayerController = persistantController.GetPlayerController();
          this.mLeagueController = persistantController.getLeagueController();
        }
        var gamesRemaining = this.mLeagueController.getLeagueEnableGames() - this.mPlayerController.getModel().getPublicGamesWonCount();
        this.gamesToUnlockLabel.string = gamesRemaining.toString();
        this.rewardUptoLabel.string = Helper_1.Helper.getLocaleNumber(this.mLeagueController.getLeagueRewardForLeagueAndRank(5, 1));
        var gamesRemaining = this.mLeagueController.getLeagueEnableGames() - this.mPlayerController.getModel().getPublicGamesWonCount();
        this.gamesToUnlockTextLabel.getComponent(LocalizationComponent_1.default).setValues("#WIN_2_GAMES_TO_GET_RANK_TEXT_IG", {
          game_num: gamesRemaining.toString()
        });
      };
      LeagueLockedPopupComponent.prototype.showPopup = function() {
        this.initialize();
        this.getComponent(PopupComponent_1.default).showPopup();
        this.mPersistantComponent.GetStatsController().count("popup", 1, "show", "leagues_locked");
      };
      LeagueLockedPopupComponent.prototype.hidePopup = function() {
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      LeagueLockedPopupComponent.prototype.animateLeaderBoardPopup = function(show) {
        this.mAnimatingLeaderboard = true;
        this.node.position = this.mAnimationStartPosition;
        var targetPosition = this.leaderBoardPosition.getPosition();
        if (!show) {
          this.node.position = this.leaderBoardPosition.getPosition();
          targetPosition = this.mAnimationStartPosition;
        }
        var size = this.node.getContentSize();
        var duration = .5;
        var move = cc.moveTo(duration, targetPosition);
        var func = cc.callFunc(this.animationComplete, this);
        var seq = cc.sequence([ move, func ]);
        this.node.runAction(seq);
      };
      LeagueLockedPopupComponent.prototype.animationComplete = function() {
        this.mAnimatingLeaderboard = false;
      };
      LeagueLockedPopupComponent.prototype.onInfoPressed = function() {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_LEAGUE_INFO_POPUP);
        this.mPersistantComponent.GetStatsController().count("button", 1, "leagues_locked", "help");
      };
      __decorate([ property(cc.Node) ], LeagueLockedPopupComponent.prototype, "leaderBoardPosition", void 0);
      __decorate([ property(cc.Label) ], LeagueLockedPopupComponent.prototype, "gamesToUnlockLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueLockedPopupComponent.prototype, "gamesToUnlockTextLabel", void 0);
      __decorate([ property(cc.Label) ], LeagueLockedPopupComponent.prototype, "rewardUptoLabel", void 0);
      __decorate([ property(cc.Button) ], LeagueLockedPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Button) ], LeagueLockedPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Button) ], LeagueLockedPopupComponent.prototype, "infoButton", void 0);
      LeagueLockedPopupComponent = __decorate([ ccclass ], LeagueLockedPopupComponent);
      return LeagueLockedPopupComponent;
    }(cc.Component);
    exports.default = LeagueLockedPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./../Generic/Helper": "Helper",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  LeagueModels: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d4402HITA5CdKUOQnU+PdDZ", "LeagueModels");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var LeagueInfo = function() {
      function LeagueInfo() {
        this.name = "";
        this.promotionIndex = 0;
        this.demotionIndex = 0;
        this.icon = "";
        this.preAssigned = 0;
        this.rewards = [];
        this.topRewards = [];
      }
      return LeagueInfo;
    }();
    exports.LeagueInfo = LeagueInfo;
    var LeagueConfig = function() {
      function LeagueConfig() {
        this.startTime = 0;
        this.period = 0;
        this.leagueCount = 0;
        this.playersPerDiv = 0;
        this.promotionIndex = 0;
        this.demotionIndex = 0;
        this.assetZip = "";
        this.leagueDefs = [];
        this.lastUpdated = 0;
      }
      return LeagueConfig;
    }();
    exports.LeagueConfig = LeagueConfig;
    var LeaguePlayerInfo = function() {
      function LeaguePlayerInfo() {
        this.pid = "";
        this.name = "";
        this.lname = "";
        this.avatar = "";
        this.snuid = "";
        this.snid = 0;
        this.lastUpdated = 0;
        this.points = 0;
        this.rank = 1;
        this.index = 0;
        this.flag = "GLO";
      }
      return LeaguePlayerInfo;
    }();
    exports.LeaguePlayerInfo = LeaguePlayerInfo;
    var LeagueResults = function() {
      function LeagueResults(data) {
        this.change = 0;
        this.chips = 0;
        this.rank = 0;
        this.newLeague = 0;
        this.leagueId = "";
        this.points = 0;
        this.players = [];
        if (!data) return;
        this.change = data[Constants_1.constants.LEAGUES_CONFIG_URI.CHANGE];
        this.chips = data[Constants_1.constants.LEAGUES_CONFIG_URI.CHIPS];
        this.rank = data[Constants_1.constants.LEAGUES_CONFIG_URI.RANK];
        this.newLeague = data[Constants_1.constants.LEAGUES_CONFIG_URI.NEW_LEAGUE];
        this.leagueId = data[Constants_1.constants.LEAGUES_CONFIG_URI.LEAGUE_ID];
        for (var i in data[Constants_1.constants.LEAGUES_CONFIG_URI.PLAYERS]) {
          var playerObj = data[Constants_1.constants.LEAGUES_CONFIG_URI.PLAYERS];
          var player = {};
          player["pid"] = playerObj[Constants_1.constants.LEAGUES_CONFIG_URI.PID];
          player["change"] = playerObj[Constants_1.constants.LEAGUES_CONFIG_URI.CHANGE];
          player["rank"] = playerObj[Constants_1.constants.LEAGUES_CONFIG_URI.RANK];
          player["points"] = playerObj[Constants_1.constants.LEAGUES_CONFIG_URI.POINTS];
          this.players.push(player);
        }
        data[Constants_1.constants.LEAGUES_CONFIG_URI.POINTS] && (this.points = data[Constants_1.constants.LEAGUES_CONFIG_URI.POINTS]);
      }
      return LeagueResults;
    }();
    exports.LeagueResults = LeagueResults;
    cc._RF.pop();
  }, {
    "../Constants": "Constants"
  } ],
  LeaguePopupCardComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4cc6fd6kpBMfKPEgsxQa57O", "LeaguePopupCardComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("./../Generic/Helper");
    var ProfileImageComponent_1 = require("./ProfileImageComponent");
    var CountryFlagComponent_1 = require("./CountryFlagComponent");
    var ProfileCustomizationController_1 = require("../Controllers/ProfileCustomizationController");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeaguePopupCardComponent = function(_super) {
      __extends(LeaguePopupCardComponent, _super);
      function LeaguePopupCardComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nameLabel = null;
        _this.nameForFlagsLabel = null;
        _this.flagComponent = null;
        _this.rankLabel = null;
        _this.rankLabelForFlag = null;
        _this.coinsEarnedLabel = null;
        _this.profileImage = null;
        _this.profileImageForFlag = null;
        _this.nameNode = null;
        _this.flagNode = null;
        _this.playerHighlightLayer = null;
        _this.promoteLayer = null;
        _this.demoteLayer = null;
        _this.promoteLayerForPlayer = null;
        _this.demoteLayerForPlayer = null;
        return _this;
      }
      LeaguePopupCardComponent.prototype.start = function() {};
      LeaguePopupCardComponent.prototype.onLoad = function() {};
      LeaguePopupCardComponent.prototype.initialize = function(name, rank, photoUrl, coinsEarned, isThisMe, isInPromote, isInDemote, flag) {
        this.nameNode.active = true;
        this.flagNode.active = false;
        this.nameLabel.string = Helper_1.Helper.getTruncatedString(name, 12, true);
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        var playerController = this.mPersistantComponent.GetPlayerController();
        if (playerController.getRankingFlagEnable()) {
          this.profileImageForFlag.initialize(photoUrl);
          this.nameForFlagsLabel.string = Helper_1.Helper.getTruncatedString(name, 12, true);
          this.flagComponent.initialize(flag || ProfileCustomizationController_1.ProfileCustomizationController.GLOBAL_COUNTRY_FLAG_CODE);
          this.flagNode.active = true;
          this.nameNode.active = false;
        }
        this.rankLabel.string = rank.toString();
        this.rankLabelForFlag.string = rank.toString();
        this.coinsEarnedLabel.string = Helper_1.Helper.getLocaleNumber(coinsEarned);
        this.profileImage.initialize(photoUrl);
        this.playerHighlightLayer.active = isThisMe;
        this.promoteLayer.active = isInPromote && !isThisMe;
        this.demoteLayer.active = isInDemote && !isThisMe;
        this.promoteLayerForPlayer.active = false;
        this.demoteLayerForPlayer.active = false;
      };
      __decorate([ property(cc.Label) ], LeaguePopupCardComponent.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Label) ], LeaguePopupCardComponent.prototype, "nameForFlagsLabel", void 0);
      __decorate([ property(CountryFlagComponent_1.default) ], LeaguePopupCardComponent.prototype, "flagComponent", void 0);
      __decorate([ property(cc.Label) ], LeaguePopupCardComponent.prototype, "rankLabel", void 0);
      __decorate([ property(cc.Label) ], LeaguePopupCardComponent.prototype, "rankLabelForFlag", void 0);
      __decorate([ property(cc.Label) ], LeaguePopupCardComponent.prototype, "coinsEarnedLabel", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], LeaguePopupCardComponent.prototype, "profileImage", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], LeaguePopupCardComponent.prototype, "profileImageForFlag", void 0);
      __decorate([ property(cc.Node) ], LeaguePopupCardComponent.prototype, "nameNode", void 0);
      __decorate([ property(cc.Node) ], LeaguePopupCardComponent.prototype, "flagNode", void 0);
      __decorate([ property(cc.Node) ], LeaguePopupCardComponent.prototype, "playerHighlightLayer", void 0);
      __decorate([ property(cc.Node) ], LeaguePopupCardComponent.prototype, "promoteLayer", void 0);
      __decorate([ property(cc.Node) ], LeaguePopupCardComponent.prototype, "demoteLayer", void 0);
      __decorate([ property(cc.Node) ], LeaguePopupCardComponent.prototype, "promoteLayerForPlayer", void 0);
      __decorate([ property(cc.Node) ], LeaguePopupCardComponent.prototype, "demoteLayerForPlayer", void 0);
      LeaguePopupCardComponent = __decorate([ ccclass ], LeaguePopupCardComponent);
      return LeaguePopupCardComponent;
    }(cc.Component);
    exports.default = LeaguePopupCardComponent;
    cc._RF.pop();
  }, {
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Controllers/ProfileCustomizationController": "ProfileCustomizationController",
    "./../Generic/Helper": "Helper",
    "./CountryFlagComponent": "CountryFlagComponent",
    "./ProfileImageComponent": "ProfileImageComponent"
  } ],
  LeagueUnlockedPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "45de0ARHx9Fh7LrwtXkI65I", "LeagueUnlockedPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("./../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var PopupComponent_1 = require("./PopupComponent");
    var LeagueBadgeComponent_1 = require("./LeagueBadgeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeagueUnlockedPopupComponent = function(_super) {
      __extends(LeagueUnlockedPopupComponent, _super);
      function LeagueUnlockedPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.okayButton = null;
        _this.mPersistantNodeComponent = null;
        return _this;
      }
      LeagueUnlockedPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantNodeComponent = persistantController;
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeagueUnlockedPopupComponent", "onOkayPressed"));
        var league = persistantController.getLeagueController().getLeague();
        var leagueName = persistantController.getLeagueController().getLeagueName();
        "" == leagueName && (leagueName = persistantController.getLeagueController().getDefaultLeagueName());
        this.leagueBadgeComponent.initialize(league || 1);
        this.leagueNameLabel.string = leagueName;
        var pid = this.mPersistantNodeComponent.GetPlayerController().getPlayerId();
        cc.sys.localStorage.removeItem("FirstUnlockOfLeagues:" + pid);
      };
      LeagueUnlockedPopupComponent.prototype.onOkayPressed = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_LEAGUE_POPUP);
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Button) ], LeagueUnlockedPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LeagueUnlockedPopupComponent.prototype, "leagueBadgeComponent", void 0);
      __decorate([ property(cc.Label) ], LeagueUnlockedPopupComponent.prototype, "leagueNameLabel", void 0);
      LeagueUnlockedPopupComponent = __decorate([ ccclass ], LeagueUnlockedPopupComponent);
      return LeagueUnlockedPopupComponent;
    }(cc.Component);
    exports.default = LeagueUnlockedPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./../Generic/Helper": "Helper",
    "./LeagueBadgeComponent": "LeagueBadgeComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  LeaguesComingSoonComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae339u8Ee1C3Z5l1vtSWem6", "LeaguesComingSoonComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LeaguesComingSoonComponent = function(_super) {
      __extends(LeaguesComingSoonComponent, _super);
      function LeaguesComingSoonComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.msgLabel = null;
        _this.okayButton = null;
        _this.closeButton = null;
        _this.mLeaguesEnabled = false;
        return _this;
      }
      LeaguesComingSoonComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeaguesComingSoonComponent", "hidePopup"));
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LeaguesComingSoonComponent", "closePopup"));
      };
      LeaguesComingSoonComponent.prototype.initialize = function(leaguesEnabled) {
        this.mLeaguesEnabled = leaguesEnabled;
      };
      LeaguesComingSoonComponent.prototype.hidePopup = function() {
        this.mPersistantComponent.GetStatsController().count("button", 1, this.node.name, this.mLeaguesEnabled ? "tell_me_more" : "okay");
        this.mLeaguesEnabled && this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_LEAGUE_INFO_POPUP);
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      LeaguesComingSoonComponent.prototype.closePopup = function() {
        this.mPersistantComponent.GetStatsController().count("button", 1, this.node.name, "close");
      };
      __decorate([ property(cc.Label) ], LeaguesComingSoonComponent.prototype, "msgLabel", void 0);
      __decorate([ property(cc.Button) ], LeaguesComingSoonComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Button) ], LeaguesComingSoonComponent.prototype, "closeButton", void 0);
      LeaguesComingSoonComponent = __decorate([ ccclass ], LeaguesComingSoonComponent);
      return LeaguesComingSoonComponent;
    }(cc.Component);
    exports.default = LeaguesComingSoonComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  LoadingComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7cc52no0lxJq7z0hU9f+8UZ", "LoadingComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Config_1 = require("../Config");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LoadingComponent = function(_super) {
      __extends(LoadingComponent, _super);
      function LoadingComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.progressBar = null;
        _this.loadingPercentage = null;
        _this.loadingTextLabel = null;
        _this.currentPercentage = 0;
        _this.currentTextIndex = 0;
        _this.loadingTextList = [ "Play with friends and express with chat!", "Third six is a wasted turn!", "Roll the dice! Make a kill! You are here to chill :)", "This is the trend - Invite a Friend.", "Tip: Chat can be turned On/Off from Settings menu", "Friends mode costs no coins - no price tag on friendship!" ];
        _this.loadingTextListSpanish = [ "Juega con amigos y expresa con chat!", "¡El tercer seis es un turno perdido!", "¡Tira los dados! ¡Haz una matanza! Estás aquí para relajarte :)", "Esta es la tendencia: invitar a un amigo", "Sugerencia: el chat se puede activar / desactivar desde el menú de configuración", "El modo amigos no cuesta monedas, ¡no hay precio en la amistad!" ];
        _this.mCurrentLocale = 0;
        _this.textChageInterval = null;
        return _this;
      }
      LoadingComponent.prototype.start = function() {
        this.progressBar.progress = 0;
        this.loadingPercentage.string = "0%";
        var persistantNode = cc.find("PersistantNode");
        persistantNode || Helper_1.Helper.sendSentryLog("LoadingComponent persistantNode null");
        var persistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        persistantComponent.GetStateMachineController().init();
        var version = Config_1.Config.VERSION;
        persistantComponent.GetStatsController().count("wallet", 1, "client_version", version, Date.now() + "", FBInstant.player.getID());
        var ua = window.navigator.userAgent + "";
        var isCanvas = !cc.sys.capabilities["opengl"] || ua.indexOf("ASUS_") > -1;
        var rendererString = Helper_1.Helper.isRendererCanvas() ? "canvas" : "webGl";
        var localStorageExists = cc.sys.localStorage.getItem != cc.sys.localStorage.setItem;
        persistantComponent.GetStatsController().count("debug", 1, "renderer", rendererString);
        var counterString = "app_open,1,others,,,,,0";
        persistantComponent.GetStatsController().open(FBInstant.player.getID(), FBInstant.getLocale(), "open", -1, -1, true, counterString);
        var soundController = persistantComponent.GetSoundController();
        var music = cc.sys.localStorage.getItem("music");
        if (null == music) {
          music = "true";
          cc.sys.localStorage.setItem("music", true);
        }
        soundController.enableMusic("true" == music);
        var sound = cc.sys.localStorage.getItem("sound");
        if (null == sound) {
          sound = "true";
          cc.sys.localStorage.setItem("sound", true);
        }
        soundController.enableSounds("true" == sound);
        var vibration = cc.sys.localStorage.getItem("vibration");
        if (null == vibration) {
          vibration = true;
          cc.sys.localStorage.setItem("vibration", true);
        }
        soundController.enableVibration("true" == vibration);
        this.addEventListeners(persistantComponent);
        var localStg = cc.sys.localStorage.getItem("locale");
        this.mCurrentLocale = null == localStg ? 0 : parseInt(localStg);
        this.currentTextIndex = Math.floor(Math.random() * this.loadingTextList.length);
        this.loadingTextLabel.string = this.getLoadingText();
        var self = this;
        this.textChageInterval = setInterval(function() {
          self.setLoadingText();
        }, 5e3);
      };
      LoadingComponent.prototype.addEventListeners = function(persistantComponent) {
        persistantComponent.node.on(Constants_1.constants.Events.EVENT_ON_PROGRESS, this.onLoadingProgress, this);
      };
      LoadingComponent.prototype.onLoadingProgress = function(event) {
        this.currentPercentage <= event.getUserData() / 100 && (this.currentPercentage = event.getUserData() / 100);
        this.progressBar.progress = this.currentPercentage;
        this.loadingPercentage.string = Math.floor(100 * this.currentPercentage) + "%";
      };
      LoadingComponent.prototype.getLoadingText = function() {
        return this.mCurrentLocale == LocalizationController_1.LanguageTypes.SPANISH ? this.loadingTextListSpanish[this.currentTextIndex] : this.loadingTextList[this.currentTextIndex];
      };
      LoadingComponent.prototype.setLoadingText = function() {
        this.currentTextIndex = (this.currentTextIndex + 1) % this.loadingTextList.length;
        this.loadingTextLabel.string = this.getLoadingText();
      };
      LoadingComponent.prototype.onDisable = function() {
        clearInterval(this.textChageInterval);
        this.textChageInterval = null;
      };
      __decorate([ property(cc.ProgressBar) ], LoadingComponent.prototype, "progressBar", void 0);
      __decorate([ property(cc.Label) ], LoadingComponent.prototype, "loadingPercentage", void 0);
      __decorate([ property(cc.Label) ], LoadingComponent.prototype, "loadingTextLabel", void 0);
      LoadingComponent = __decorate([ ccclass ], LoadingComponent);
      return LoadingComponent;
    }(cc.Component);
    exports.default = LoadingComponent;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  LobbyComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70cc2OpqSdJoqeKf6DCJxev", "LobbyComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var State_1 = require("../states/State");
    var Logger_1 = require("../Generic/Logger");
    var PopupComponent_1 = require("./PopupComponent");
    var Config_1 = require("../Config");
    var PlayerSelectionComponent_1 = require("./PlayerSelectionComponent");
    var SettingsPopupComponent_1 = require("./SettingsPopupComponent");
    var BetSelectionPopupComponent_1 = require("./BetSelectionPopupComponent");
    var ReferralInvitePopupComponent_1 = require("./ReferralInvitePopupComponent");
    var ReferralSuccessPopupComponent_1 = require("./ReferralSuccessPopupComponent");
    var ReferralRewardPopupComponent_1 = require("./ReferralRewardPopupComponent");
    var ReferralWelcomePopupComponent_1 = require("./ReferralWelcomePopupComponent");
    var SoundController_1 = require("../Controllers/SoundController");
    var LeaderBoardPopupComponent_1 = require("./LeaderBoardPopupComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var GenericPopupComponent_1 = require("../Actions/GenericPopupComponent");
    var Helper_1 = require("../Generic/Helper");
    var RankingPopupComponent_1 = require("../Actions/RankingPopupComponent");
    var Constants_1 = require("../Constants");
    var LobbyTopHudComponent_1 = require("./LobbyTopHudComponent");
    var SurveyController_1 = require("../Controllers/SurveyController");
    var SurveyPopupWrapperComponent_1 = require("./SurveyPopupWrapperComponent");
    var ActionShowJoiningBanner_1 = require("../Actions/ActionShowJoiningBanner");
    var ActionFtueInactiveOnLobby_1 = require("../Actions/ActionFtueInactiveOnLobby");
    var ActionShowFriendOfflinePopup_1 = require("../Actions/ActionShowFriendOfflinePopup");
    var PlayerProfilePopupComponent_1 = require("./PlayerProfilePopupComponent");
    var LobbyPopupControllerComponent_1 = require("./LobbyPopupControllerComponent");
    var LeagueLeaderBoardPopupComponent_1 = require("./LeagueLeaderBoardPopupComponent");
    var GrantSuccessPopupComponent_1 = require("./GrantSuccessPopupComponent");
    var LeagueInfoPopupComponent_1 = require("./LeagueInfoPopupComponent");
    var StorePopupComponent_1 = require("./StorePopupComponent");
    var NotEnoughCoinsPopupComponent_1 = require("./NotEnoughCoinsPopupComponent");
    var LeagueEndPopupComponent_1 = require("./LeagueEndPopupComponent");
    var LeagueLockedPopupComponent_1 = require("./LeagueLockedPopupComponent");
    var LeagueBadgeComponent_1 = require("./LeagueBadgeComponent");
    var ProgressiveRewardPopupComponent_1 = require("./ProgressiveRewardPopupComponent");
    var LeaguesComingSoonComponent_1 = require("./LeaguesComingSoonComponent");
    var ProgressionEndPopupComponent_1 = require("./ProgressionEndPopupComponent");
    var RejoinPopupComponent_1 = require("./RejoinPopupComponent");
    var ProfileCustomizationController_1 = require("../Controllers/ProfileCustomizationController");
    var ReferralInviteSentPopupComponent_1 = require("./ReferralInviteSentPopupComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LobbyComponent = function(_super) {
      __extends(LobbyComponent, _super);
      function LobbyComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.onlinePlayButton = null;
        _this.privatePlayButton = null;
        _this.rankingPopup = null;
        _this.playerSelectionPopup = null;
        _this.settingsPopup = null;
        _this.leaderBoardPopup = null;
        _this.joiningBanner = null;
        _this.joiningBannerOverlay = null;
        _this.particleSystem = null;
        _this.boomSound = null;
        _this.winnerSound = null;
        _this.mTopHudCompoent = null;
        _this.mPopupControllerComponent = null;
        _this.leaderboardButton = null;
        _this.leaguesButton = null;
        _this.leaderboardRankLabel = null;
        _this.leaguesSeasonEndTimerLabel = null;
        _this.leaguesGamesToUnlockLabel = null;
        _this.leagueButtonLockedNode = null;
        _this.leagueButtonUnlockedNode = null;
        _this.leagueButtonNameNode = null;
        _this.leagueButtonBadgeNode = null;
        _this.leagueButtonCoolDownNode = null;
        _this.bottomButtonsLayer = null;
        _this.grantSuccessPopup = null;
        _this.leagueBadgeNode = null;
        _this.cooldownTimerLabel = null;
        _this.leagueRankNode = null;
        _this.leagueRankLabel = null;
        _this.leagueRankChangeLabel = null;
        _this.coolDownLeagueBadgeCompoent = null;
        _this.inactiveLeagueBadgeCompoent = null;
        _this.redLeagueRankChangeLabel = null;
        _this.greenLeagueRankChangeLabel = null;
        _this.yellowLeagueRankChangeLabel = null;
        _this.redLeagueRankChangeNode = null;
        _this.greenLeagueRankChangeNode = null;
        _this.yellowLeagueRankChangeNode = null;
        _this.leagueBadgeButtonLoadingNode = null;
        _this.leagueBadgeButtonLoadedNode = null;
        _this.rankChangeAnimation = null;
        _this.leaderboardTimerLabel = null;
        _this.leagueCooldownTimerNode = null;
        _this.leagueRegularTimerNode = null;
        _this.leagueLockedLabelNode = null;
        _this.leagueKickOffLabelrNode = null;
        _this.cooldownViewLeaderboardLabel = null;
        _this.cooldownNoBadgeLabel = null;
        _this.cooldownBadgeLabel = null;
        _this.ftueOnlineGameButtonAnim = null;
        _this.mHeartBeatInterval = null;
        _this.mShowingAutoPopup = false;
        _this.popupType = 1;
        _this.popupNative = false;
        _this.lobbyShineTimer = null;
        return _this;
      }
      LobbyComponent.prototype.onLoad = function() {
        Helper_1.Helper.sendSentryLog("LobbyComponent onLoad");
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.mPlayerController = persistantController.GetPlayerController();
        this.mPaymentController = persistantController.GetPaymentController();
        this.mStateMachineController = persistantController.GetStateMachineController();
        this.mLeaderBoardController = persistantController.GetLeaderBoardController();
        this.mActionController = persistantController.GetActionController();
        this.mExperimentController = persistantController.GetExperimentController();
        this.mStatsController = persistantController.GetStatsController();
        this.mPlayerModel = this.mPlayerController.getModel();
        this.mLogger = new Logger_1.Logger("LobbyComponent", true);
        this.mPaymentController.paymentCheck();
        this.mConfigurationController = persistantController.GetConfigurationController();
        this.createEventHandlers();
        var loc = persistantController.GetLocalizationController();
        this.joiningBanner.active = false;
        this.joiningBannerOverlay && this.joiningBannerOverlay.on(cc.Node.EventType.TOUCH_START, function() {});
        clearInterval(this.mHeartBeatInterval);
        this.mHeartBeatInterval = setInterval(this.heartBeatStat.bind(this), 1e4);
        var lbVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludo_leaderboard_instant");
        if (2 != lbVariant) {
          this.logo.setScale(1);
          this.logo.setPositionY(.2 * this.node.height);
          this.onlinePlayButton.node.setPositionY(.1 * -this.node.height);
          this.privatePlayButton.node.setPositionY(.1 * -this.node.height);
        }
        if (this.mPersistantComponent.GetPlayerController().getModel().isReferralSupported() && this.mPersistantComponent.GetAdsController().isRewardedVideoSupported()) {
          this.mLogger.Log("tanisha===== both ad and referral present");
          this.logo.setPositionY(this.logo.getPositionY() - .05 * this.node.height);
          this.onlinePlayButton.node.setPositionY(this.onlinePlayButton.node.getPositionY() - .05 * this.node.height);
          this.privatePlayButton.node.setPositionY(this.privatePlayButton.node.getPositionY() - .05 * this.node.height);
        }
        this.mVisibilityChangeCallback = this.onVisibilityChange.bind(this);
        document.addEventListener("visibilitychange", this.mVisibilityChangeCallback);
        this.handleCanvas();
        this.addEventListeners();
      };
      LobbyComponent.prototype.addEventListeners = function() {
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_COIN_HUD_PRESSED, this.onCoinHudPressed, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_PROGRESSION_HUD_PRESSED, this.onProgressionPressed, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_FEEDBACK_CLICKED, this.onFeedbackClicked, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_PROFILE_PRESSED, this.ProfilePressed, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ON_PURCHASE_SUCCESS, this.onPaymentSuccess, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ON_PURCHASE_FAIL, this.onPaymentFail, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.onRewardeVideoVerified, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ADS_FINISHED, this.onAdsFinished, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ADS_UNAVAILABLE, this.onAdsUnavailable, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_ADS_CONFIRMATION, this.confirmWatchAds, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_SHOW_COMPLETE, this.hideGenericPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_LEAGUE_INFO_POPUP, this.showLeagueInfoPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_STORE_POPUP, this.showStorePopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_STORE_NOT_SUPPORTED_POPUP, this.paymentNotSupportedPopUp, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_LEAGUE_END_POPUP, this.showLeagueEndPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED, this.initializeLeaguesButton, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_CHECK_FOR_AUTO_POPUPS, this.checkForAutoPopups, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_PLAY_ONLINE_POPUP, this.OnlinePressed, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_STORE_NOT_SUPPORTED_POPUP, this.paymentNotSupportedPopUp, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_INTERSTITIAL_ADS, this.showInterstitialAds, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_LEAGUE_POPUP, this.showLeaguePopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_BET_SELECT_POPUP, this.showBetSelectPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_INVITE_POPUP, this.showReferralInvitePopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_SENT_SUCCESS_POPUP, this.showReferralSentSuccessPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_GRANTED_POPUP, this.showReferralSuccessGrantedPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_REWARD_POPUP, this.showReferralRewardPopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_WELCOME_POPUP, this.showReferralWelcomePopup, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_DB_VIDEO_NOT_AVAILABLE, this.showDBAdsNotAvailable, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_DB_VIDEO_SERVER_ERROR, this.showDBAdsError, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_MUSIC_STATUS, this.soundStatusChanged, this);
      };
      LobbyComponent.prototype.onFeedbackClicked = function() {
        this.mPersistantComponent.GetSurveyController().showFeedBack(SurveyController_1.SCENE_TYPE.LOBBY);
      };
      LobbyComponent.prototype.heartBeatStat = function() {
        this.mStatsController.count("heartbeat", 1, "lobby");
      };
      LobbyComponent.prototype.start = function() {
        Helper_1.Helper.sendSentryLog("LobbyComponent start");
        this.mPlayerController.setPrivateJoinSuccess(false);
        this.mActionController.SetViewComponent(this);
        this.privatePlayButton.interactable = true;
        this.onlinePlayButton.interactable = true;
        this.mStateMachineController.onEvent(State_1.StateEvent.LOBBY_LOADED);
        this.mStatsController.count("visit", 1, "lobby_screen");
        this.playMusicLobby();
        this.checkAndUpdatePlayerBadge();
        if (this.mPersistantComponent.getFBGameAsyncDone()) {
          var leaderBoardController = this.mPersistantComponent.GetLeaderBoardController();
          leaderBoardController.initialize();
          this.mPersistantComponent.node.on("receipt_fetched", this.onReceiptFetchCompleted, this);
          this.mStateMachineController.onEvent(State_1.StateEvent.RECEIPT_FETCH, {
            forceFetch: true
          });
          this.checkAndShowLobbyPopup();
          this.mPersistantComponent.getLeagueController().resetRetryCount();
          this.mPersistantComponent.getLeagueController().retryAfterTimeOut(0);
        } else this.startGameAsync();
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_POPUP_CLOSED, this.checkAndShowLobbyPopup, this);
        this.initializeLeaguesButton();
      };
      LobbyComponent.prototype.initializeLeaguesButton = function() {
        var leagueController = this.mPersistantComponent.getLeagueController();
        var gamesRemaining = leagueController.getLeagueEnableGames() - this.mPlayerController.getModel().getPublicGamesWonCount();
        this.leaguesGamesToUnlockLabel.getComponent(LocalizationComponent_1.default).setValues("#WIN_GAME_AMOUNT_IG", {
          game_num: gamesRemaining.toString()
        });
        var isLeaguesAssignable = leagueController.canAssignLeagues();
        this.leagueBadgeNode.initialize(leagueController.getLeague());
        leagueController.isInCooldown() && (this.cooldownTimerLabel.string = Helper_1.Helper.getTimerString(Math.round(leagueController.getCoolDownExpiry() - Date.now() / 1e3)));
        this.leagueRankChangeLabel.string = leagueController.getRelativeRankChangeForPlayer().toString();
        this.redLeagueRankChangeLabel.string = leagueController.getRelativeRankChangeForPlayer().toString();
        this.greenLeagueRankChangeLabel.string = leagueController.getRelativeRankChangeForPlayer().toString();
        this.yellowLeagueRankChangeLabel.string = leagueController.getRelativeRankChangeForPlayer().toString();
        if (0 != leagueController.getRelativeRankChangeForPlayer() && leagueController.getRelativeRankChangeForPlayer() != Constants_1.constants.LEAGUE_RANK_CHANGE_UNDEFINED) {
          this.rankChangeAnimation.stop("RankDeltaAnim");
          this.rankChangeAnimation.play("RankDeltaAnim");
        }
        leagueController.getMyLeagueInfo() && (this.leagueRankLabel.string = leagueController.getMyLeagueInfo().rank.toString());
        if (leagueController.wasUserInactive() || isLeaguesAssignable) {
          this.inactiveLeagueBadgeCompoent.initialize(leagueController.getLeague());
          this.coolDownLeagueBadgeCompoent.initialize(leagueController.getLeague());
        } else {
          this.inactiveLeagueBadgeCompoent.initialize(-1);
          this.coolDownLeagueBadgeCompoent.initialize(-1);
        }
        this.mLogger.Log("shreyas getRelativeRankChangeForPlayer " + leagueController.getRelativeRankChangeForPlayer());
      };
      LobbyComponent.prototype.checkAndUpdatePlayerBadge = function() {
        var storedBadgeString = FBInstant.player.getID() + "storedBadge";
        var storedBadge = cc.sys.localStorage.getItem(storedBadgeString);
        var newPlayerTrophies = this.mPlayerController.getModel().getTrophies();
        var newPlayerBadge = this.mConfigurationController.getBadgeFromTrophies(newPlayerTrophies);
        null === storedBadge && cc.sys.localStorage.setItem(storedBadgeString, newPlayerBadge);
      };
      LobbyComponent.prototype.update = function() {
        var leagueController = this.mPersistantComponent.getLeagueController();
        this.leaguesSeasonEndTimerLabel.string = Helper_1.Helper.getTimerString(Math.round(leagueController.getLeagueExpiry() - Date.now() / 1e3));
        this.cooldownTimerLabel.string = Helper_1.Helper.getTimerString(Math.round(leagueController.getCoolDownExpiry() - Date.now() / 1e3));
        this.leaderboardTimerLabel.string = Helper_1.Helper.getTimerString(Math.round(this.mLeaderBoardController.getLeaderboardExpireTimer() - Date.now() / 1e3));
      };
      LobbyComponent.prototype.startGameAsync = function() {
        var self = this;
        this.mStatsController.count("visit", 1, "loading_time_stat", "start_game_async_init", Date.now() + "");
        var engineLoadTime = Date.now() - globalStartTime;
        var firstTime = Config_1.Config.CLIENT_VERSION != cc.sys.localStorage.getItem(Constants_1.constants.CONFIG_VERSION_KEY);
        firstTime && cc.sys.localStorage.setItem(Constants_1.constants.CONFIG_VERSION_KEY, Config_1.Config.CLIENT_VERSION);
        this.mStatsController.count("perf", engineLoadTime, "player_load", firstTime ? "fresh_load" : "not_fresh_load");
        this.mStatsController.count("visit", 1, "context_type", FBInstant.context.getType());
        this.mPersistantComponent.setFBGameAsyncDone(true);
        var sender_id = Helper_1.Helper.isOpenFromShare();
        "" != sender_id && this.mStatsController.count("visit", 1, "share_open", sender_id);
        var pidMod = parseInt(this.mPlayerController.getPlayerId()) % 10;
        isNaN(pidMod) || 0 != pidMod || FBInstant.player.canSubscribeBotAsync().then(function(can_subscribe) {
          self.mStatsController.count("debug", 1, "bot_subscribe", can_subscribe + "");
        }).catch(function(error) {
          self.mStatsController.count("debug", 1, "bot_subscribe", error.code + "");
        });
        FBInstant.getEntryPointAsync().then(function(entrypoint) {
          self.mStatsController.count("visit", 1, "app_open", entrypoint);
        });
        var country = "";
        var loc = "";
        var locale = FBInstant.getLocale();
        if (locale) {
          country = locale.split("_")[1];
          loc = locale.split("_")[0];
        }
        this.mStatsController.count("wallet", 1, "locale", country, loc, Date.now() + "");
        this.mLogger.Log("LOCALE::::::" + loc.toLowerCase());
        var chosenLang = LocalizationController_1.LanguageTypes.ENGLISH;
        var locVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_SPANISH_LOC);
        chosenLang = 2 == locVariant ? "es" == loc.toLocaleLowerCase() && this.mPlayerModel.getIsNewUser() ? LocalizationController_1.LanguageTypes.SPANISH : this.mPlayerModel.getLocale() == LocalizationController_1.LanguageTypes.BAHASA ? LocalizationController_1.LanguageTypes.ENGLISH : this.mPlayerModel.getLocale() : LocalizationController_1.LanguageTypes.ENGLISH;
        LocalizationController_1.LocalizationController.getInstance().changeLocale(chosenLang);
        this.mPlayerController.updateFriends(function(status) {
          self.mLogger && self.mLogger.Log("Updating sninfo aync " + status);
        });
        var profileCustomExperiment = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_CUSTOM_PROFILE);
        this.mLogger.Log("PROFILE CUSTOM EXPERIMENT::::::: " + profileCustomExperiment);
        if (2 == profileCustomExperiment) {
          ProfileCustomizationController_1.ProfileCustomizationController.getInstance().setExperiementFlag(true);
          ProfileCustomizationController_1.ProfileCustomizationController.getInstance().LoadCountryCodes();
        } else ProfileCustomizationController_1.ProfileCustomizationController.getInstance().setExperiementFlag(false);
        this.mTopHudCompoent.onStartGameAsyncComplete();
        this.mStateMachineController.onEvent(State_1.StateEvent.LOAD_GAME_SCENE);
        this.mPrivateRoomInfo = this.mPlayerController.getModel().getPivateRoomInfo();
        var playerId = this.mPlayerController.getFbId();
        var pTableId = Helper_1.Helper.getPrivateTableId();
        var contextId = "";
        var contextType = "";
        if (FBInstant.context) {
          contextId = FBInstant.context.getID();
          contextType = FBInstant.context.getType();
        }
        this.mPlayerModel.isReferralSupported() && this.mPlayerController.getModel().getIsNewUser() && Helper_1.Helper.getSenderReferralCode() && this.mPersistantComponent.GetReferralController().claimChipsForNewUser(Helper_1.Helper.getSenderReferralCode());
        if ("" != pTableId) {
          this.mPlayerController.getModel().getIsNewUser() && this.mStatsController.count("visit", 1, "invite_install", contextId, "game_invite");
          this.mStatsController.count("chatbot", 1, "friend_invite", "open", playerId, contextId, pTableId);
        } else if ("" != Helper_1.Helper.getSenderReferralCode()) {
          this.mPlayerController.getModel().getIsNewUser() && this.mStatsController.count("visit", 1, "invite_install", contextId, "referral_invite");
          this.mStatsController.count("chatbot", 1, "referral_open", "open", playerId, contextId);
        }
        self.mPersistantComponent.GetInterstitialAdController().initInterstitialVideoAds();
        self.lobbyShineTimer = setTimeout(function() {
          self.mActionController.runAction(ActionFtueInactiveOnLobby_1.ActionFtueInactiveOnLobby.Create(self.ftueOnlineGameButtonAnim));
        }, 3e3);
        if (!Helper_1.Helper.isEmpty(this.mPrivateRoomInfo)) {
          this.mPrivateRoomInfo.joinViaInvite = true;
          this.mPlayerController.getModel().resetPrivateRoomInfo();
          this.mPlayerController.getModel().resetOnlineRoomInfo();
          this.mActionController.runAction(ActionShowJoiningBanner_1.ActionShowJoiningBanner.Create());
          this.mStateMachineController.onEvent(State_1.StateEvent.START_GAME, this.mPrivateRoomInfo);
          this.mStatsController.count("chatbot", 1, "friend_invite", "join", playerId, contextId, pTableId);
          return;
        }
        if ("" != Helper_1.Helper.getPrivateTableId() || "LINK" == contextType) {
          var inviteVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_inviteclick");
          2 == inviteVar && this.mActionController.runAction(ActionShowFriendOfflinePopup_1.ActionShowFriendOfflinePopup.Create());
          this.mStatsController.count("chatbot", 1, "friend_invite", "fail", playerId, contextId, pTableId);
        }
        this.checkAndShowLobbyPopup();
        if (Helper_1.Helper.isLapserOpen()) {
          var days = Helper_1.Helper.getLapserTypeDays();
          this.mStatsController.count("chatbot", days, "lapser", "open", FBInstant.player.getID());
        }
        if (Helper_1.Helper.isShareRankOpen()) {
          this.mStatsController.count("chatbot", 1, "shareRankMessage", "open", FBInstant.player.getID());
          this.mPlayerController.getModel().getIsNewUser() && this.mStatsController.count("visit", 1, "share_rank_install");
        }
      };
      LobbyComponent.prototype.createEventHandlers = function() {
        this.onlinePlayButton.clickEvents.push(this.getEventHandler("OnlinePressed"));
        this.privatePlayButton.clickEvents.push(this.getEventHandler("PrivatePressed"));
        this.leaderboardButton.clickEvents.push(this.getEventHandler("onLeaderBoardButtonPressed"));
        this.leaguesButton.clickEvents.push(this.getEventHandler("onLeagueButtonPressed"));
      };
      LobbyComponent.prototype.getEventHandler = function(functionName) {
        var eHandler = new cc.Component.EventHandler();
        eHandler.target = this.node;
        eHandler.component = "LobbyComponent";
        eHandler.handler = functionName;
        return eHandler;
      };
      LobbyComponent.prototype.OnlinePressed = function() {
        var playerSelectionPopup = this.mPopupControllerComponent.getPlayerSelectionPopup();
        var pSelectionC = playerSelectionPopup.node.getComponent(PlayerSelectionComponent_1.default);
        pSelectionC.reset();
        playerSelectionPopup.showPopup();
        pSelectionC.setIsPrivateTable(false);
        this.mStatsController.count("button", 1, "lobby_mode", "online");
      };
      LobbyComponent.prototype.PrivatePressed = function() {
        this.mStatsController.count("button", 1, "lobby_mode", "friends");
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_FTUE_CLEAR);
        this.mStateMachineController.onEvent(State_1.StateEvent.START_GAME, {
          isPrivate: true
        });
        this.disableButtons();
      };
      LobbyComponent.prototype.ProfilePressed = function(event) {
        var player = this.mPlayerController.getModel();
        if (player && !player.isCustomChatEnabled()) return;
        var playerProfilePopup = this.mPopupControllerComponent.getPlayerProfilePopup();
        playerProfilePopup.showPopup();
        playerProfilePopup.getComponent(PlayerProfilePopupComponent_1.default).initialize(true, this.mPlayerController.getPlayerId());
      };
      LobbyComponent.prototype.onProgressionPressed = function() {};
      LobbyComponent.prototype.disableButtons = function() {
        this.privatePlayButton.interactable = false;
        this.onlinePlayButton.interactable = false;
      };
      LobbyComponent.prototype.SettingsPressed = function() {
        var settingsPopup = this.mPopupControllerComponent.getSettingsPopup();
        var settingsComponent = settingsPopup.node.getComponent(SettingsPopupComponent_1.default);
        settingsPopup.showPopup();
        this.mStatsController.count("popup", 1, "settings", "show");
        settingsComponent.initialize();
      };
      LobbyComponent.prototype.onDisable = function() {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_FTUE_CLEAR);
      };
      LobbyComponent.prototype.onDestroy = function() {
        SoundController_1.SoundController.getInstance().stopMusic();
        clearInterval(this.mHeartBeatInterval);
        clearTimeout(this.lobbyShineTimer);
        document.removeEventListener("visibilitychange", this.mVisibilityChangeCallback);
        this.mPersistantComponent.node.off("receipt_fetched", this.onReceiptFetchCompleted, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_POPUP_CLOSED, this.checkAndShowLobbyPopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_COIN_HUD_PRESSED, this.onCoinHudPressed, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_PROGRESSION_HUD_PRESSED, this.ProfilePressed, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_FEEDBACK_CLICKED, this.onFeedbackClicked, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_ON_PURCHASE_SUCCESS, this.onPaymentSuccess, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_ON_PURCHASE_FAIL, this.onPaymentFail, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_ADS_FINISHED, this.onAdsUnavailable, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_SHOW_COMPLETE, this.hideGenericPopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_PROFILE_PRESSED, this.ProfilePressed, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.onRewardeVideoVerified, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_ADS_UNAVAILABLE, this.onAdsUnavailable, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_ADS_CONFIRMATION, this.confirmWatchAds, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_STORE_NOT_SUPPORTED_POPUP, this.paymentNotSupportedPopUp, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_INTERSTITIAL_ADS, this.showInterstitialAds, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_CHECK_FOR_AUTO_POPUPS, this.checkForAutoPopups, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_BET_SELECT_POPUP, this.showBetSelectPopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_INVITE_POPUP, this.showReferralInvitePopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_SENT_SUCCESS_POPUP, this.showReferralSentSuccessPopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_GRANTED_POPUP, this.showReferralSuccessGrantedPopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_REWARD_POPUP, this.showReferralRewardPopup, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_WELCOME_POPUP, this.showReferralWelcomePopup, this);
      };
      LobbyComponent.prototype.checkForAutoPopups = function() {
        if (this.mShowingAutoPopup) return;
        this.checkAndShowLobbyPopup();
      };
      LobbyComponent.prototype.soundStatusChanged = function() {
        SoundController_1.SoundController.getInstance().isMusicEnabled() && this.playMusicLobby();
      };
      LobbyComponent.prototype.getLeaderBoardPopup = function() {
        return this.mPopupControllerComponent.getOldLeaderboardPopup().getComponent(LeaderBoardPopupComponent_1.default);
      };
      LobbyComponent.prototype.showReconnectionPopup = function() {
        var pCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "retryReconnect");
        var sCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "gotoLobby");
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        genericPopup.getComponent(GenericPopupComponent_1.default).initialize("#ERROR_POPUP_TITLE", "#LIVESERVER_CONNECTION_ISSUE_TEXT", "#BTN_RETRY", true, pCallback, pCallback);
      };
      LobbyComponent.prototype.showNewRankPopup = function() {
        var popupShown = false;
        var enableProgression = this.mPersistantComponent.GetPlayerController().shouldEnableProgression();
        var showPopup = this.didPlayerGetNewBadge();
        var newRankPoup = this.mPopupControllerComponent.getNewRankPopup();
        if (showPopup && enableProgression && null !== newRankPoup) {
          newRankPoup.getComponent(PopupComponent_1.default).showPopup();
          var newPlayerTrophies = this.mPlayerController.getModel().getTrophies();
          var newPlayerBadge = this.mConfigurationController.getBadgeFromTrophies(newPlayerTrophies);
          this.mStatsController.count("popup", 1, "open", "rank_promote", newPlayerBadge.toString());
          popupShown = true;
        }
        return popupShown;
      };
      LobbyComponent.prototype.didPlayerGetNewBadge = function() {
        var storedBadgeString = FBInstant.player.getID() + "storedBadge";
        var storedBadge = cc.sys.localStorage.getItem(storedBadgeString);
        var newPlayerTrophies = this.mPlayerController.getModel().getTrophies();
        var newPlayerBadge = this.mConfigurationController.getBadgeFromTrophies(newPlayerTrophies);
        if (null !== storedBadge && parseInt(storedBadge) < newPlayerBadge) return true;
        if (null !== storedBadge && parseInt(storedBadge) > newPlayerBadge) {
          cc.sys.localStorage.setItem(storedBadgeString, newPlayerBadge);
          return false;
        }
        return false;
      };
      LobbyComponent.prototype.showFriendBusyPopup = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initializeWithBlueButton("#TIME_OUT_IG", "#FRIENDS_BUSY_IG", true, "", "#PRIVACY_OKAY", true, null, oCallback, oCallback);
        this.mStatsController.count("popup", 1, "open", "timeout");
      };
      LobbyComponent.prototype.showFriendOfflinePopup = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initializeWithBlueButton("#TOO_LATE_IG", "#FRIEND_OFFLINE_IG", true, "", "#PRIVACY_OKAY", true, null, oCallback, oCallback);
        this.mStatsController.count("popup", 1, "open", "late_join");
      };
      LobbyComponent.prototype.showHostLeftPopup = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initialize("#TIME_OUT_IG", "#HOST_LEFT_IG", "#PRIVACY_OKAY", false, oCallback);
      };
      LobbyComponent.prototype.showHostLeftRejoinPopup = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initializeWithGreenButton("#ERROR_TEXT", "#START_ANOTHER", true, "", "#LOBBY_TOKEN", true, null, oCallback, oCallback);
      };
      LobbyComponent.prototype.hideGenericPopup = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup && genericPopup.hidePopup();
      };
      LobbyComponent.prototype.gotoLobby = function() {
        var playerSelectionPopup = this.mPopupControllerComponent.getPlayerSelectionPopup();
        this.mStateMachineController.onEvent(State_1.StateEvent.EXIT_TO_LOBBY);
        playerSelectionPopup.hidePopup();
      };
      LobbyComponent.prototype.retryReconnect = function() {
        this.mStateMachineController.onEvent(State_1.StateEvent.RETRY_RECONNECT);
        this.hideGenericPopup();
      };
      LobbyComponent.prototype.playMusicLobby = function() {
        SoundController_1.SoundController.getInstance().playMusic("background_music");
      };
      LobbyComponent.prototype.onVisibilityChange = function(status) {
        var visStatus = !document.hidden;
        if (visStatus) this.playMusicLobby(); else {
          SoundController_1.SoundController.getInstance().stopAll();
          SoundController_1.SoundController.getInstance().stopMusic();
        }
      };
      LobbyComponent.prototype.showJoiningBanner = function(val) {};
      LobbyComponent.prototype.handleCanvas = function() {
        Helper_1.Helper.isRendererCanvas() ? this.particleSystem.getComponent(cc.ParticleSystem).enabled = false : this.particleSystem.getComponent(cc.ParticleSystem).enabled = true;
      };
      LobbyComponent.prototype.checkAndShowSurveyPopup = function() {
        var popupData = this.mPersistantComponent.GetSurveyController().getPopupData(SurveyController_1.SCENE_TYPE.LOBBY);
        if (!popupData) return false;
        this.node.getComponent(SurveyPopupWrapperComponent_1.default).initializeSurvey(popupData);
        return true;
      };
      LobbyComponent.prototype.checkAndshowCreateShortcutPopup = function() {
        var self = this;
        var showCallback = function() {
          self.mStatsController.count("popup", 1, "shortcut", "open");
          self.mPersistantComponent.incrementShortCutPopupShownCount();
        };
        var errorCallback = function(reason, from) {
          self.mStatsController.count("popup", 1, "shortcut", "error", JSON.stringify(reason), from);
        };
        var cannotShowCallback = function() {
          self.mStatsController.count("popup", 1, "shortcut", "cannot_show");
        };
        var player = this.mPersistantComponent.GetPlayerController().getModel();
        var canShow = false;
        player && (canShow = player.shouldShowShortcutPopup());
        var shownShortcutPopup = cc.sys.localStorage.getItem(Constants_1.constants.SHORTCUT_POPUP_KEY);
        if (this.mPersistantComponent.getShortCutPopupShownCount() < 1 && this.mPersistantComponent.isBackFromGame() && canShow && !shownShortcutPopup) {
          Helper_1.Helper.showCreateShortCut(showCallback, errorCallback, cannotShowCallback);
          return true;
        }
        return false;
      };
      LobbyComponent.prototype.showNotEnoughChipsPopup = function() {
        var notEnoughChips = this.mPopupControllerComponent.getNotEnoughCoinsPopup();
        if (!notEnoughChips) return;
        notEnoughChips.showPopup();
        notEnoughChips.getComponent(NotEnoughCoinsPopupComponent_1.default).setIsLobby(true);
      };
      LobbyComponent.prototype.hideNotEnoughChipsPopup = function() {
        var notEnoughChips = this.mPopupControllerComponent.getNotEnoughCoinsPopup();
        notEnoughChips && notEnoughChips.hidePopup();
      };
      LobbyComponent.prototype.hidePlayerSelectionPopup = function() {
        var playerSelectionPopup = this.mPopupControllerComponent.getPlayerSelectionPopup();
        playerSelectionPopup && playerSelectionPopup.hidePopup();
      };
      LobbyComponent.prototype.hideBetSelectionPopup = function() {
        var betSelectionPopup = this.mPopupControllerComponent.getBetSelectionPopup();
        betSelectionPopup && betSelectionPopup.hidePopup();
      };
      LobbyComponent.prototype.checkAndShowDailyBonusPopup = function() {
        var player = this.mPlayerController.getModel();
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        if (player && player.isDailyBonusGranted() && 2 == eco_variant) {
          this.mTopHudCompoent.onDailybonusPressed();
          return true;
        }
        return false;
      };
      LobbyComponent.prototype.checkAndShowRejoinPopup = function() {
        var player = this.mPlayerController.getModel();
        if (player && player.getOnlineRoomInfo()) {
          var onlineRoomInfo = player.getOnlineRoomInfo();
          var mode = onlineRoomInfo.gameType;
          var roomId = onlineRoomInfo.roomId;
          var rejoinPopup = this.mPopupControllerComponent.getRejoinPopup();
          rejoinPopup.showPopup();
          this.mStatsController.count("popup", 1, "open", "rejoin", roomId);
          rejoinPopup.getComponent(RejoinPopupComponent_1.default).initialize(mode);
          return true;
        }
        return false;
      };
      LobbyComponent.prototype.checkAndShowLobbyPopup = function() {
        this.mShowingAutoPopup = true;
        if (this.mPersistantComponent.getLeagueController().getResults()) {
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_LEAGUE_END_POPUP);
          return true;
        }
        if (this.mPersistantComponent.GetBotSubscriptionController().canSubscribeBot()) {
          this.mPersistantComponent.GetBotSubscriptionController().fbCallSubscribeBot();
          return true;
        }
        if (this.mPersistantComponent.GetAdsController().getQueuedRewardChips()) {
          var chipsValue = this.mPersistantComponent.GetAdsController().getQueuedRewardChips();
          this.mPersistantComponent.GetAdsController().clearQueuedRewardChips();
          this.showGrantSuccessPopup(chipsValue, false);
          return true;
        }
        if (this.mPersistantComponent.GetAdsController().getQueuedRewardGems()) {
          var chipsValue = this.mPersistantComponent.GetAdsController().getQueuedRewardGems();
          this.mPersistantComponent.GetAdsController().clearQueuedRewardGems();
          this.showGrantSuccessPopup(chipsValue, true);
          return true;
        }
        if (this.mPlayerModel && this.mPlayerModel.getIsInviteTimerComplete()) {
          this.mPlayerModel.setIsInviteTimerComplete(false);
          this.showFriendBusyPopup();
          return true;
        }
        if (this.mPlayerModel && this.mPlayerModel.getIsHostLeftForceKick()) {
          this.mPlayerModel.setHostLeftForceKick(false);
          this.showHostLeftPopup();
          return true;
        }
        if (this.showNewRankPopup()) return true;
        if (this.mPersistantComponent.getLeagueController().shouldShowLeagueUnlockedPopup()) {
          this.showLeagueUnlockedPopup();
          return true;
        }
        if (this.mTopHudCompoent.isDailyBonusOpen() || this.checkAndShowDailyBonusPopup()) return true;
        if (this.mPlayerModel && this.mPlayerModel.getFriendRefCodeData()) {
          this.showReferralRewardPopup();
          return true;
        }
        if (this.mPlayerModel && this.mPlayerModel.isReferralSupported() && this.mPersistantComponent.GetReferralController().shouldShowWelcomePopupStatus()) {
          this.mPersistantComponent.GetReferralController().showWelcomePopup();
          return true;
        }
        if (this.checkAndShowRejoinPopup()) return true;
        if (this.mPlayerModel && this.mPlayerModel.getIsHostLeftForRejoin()) {
          this.mPlayerModel.setHostLeftForRejoin(false);
          this.showHostLeftRejoinPopup();
          return true;
        }
        if (this.checkAndShowProgressionEnded()) return true;
        if (this.checkAndShowComingSoonPopup()) return true;
        if (this.checkAndShowSurveyPopup()) return true;
        if (this.checkAndshowCreateShortcutPopup()) return true;
        if (this.checkAndShowProgressiveRewardPopup()) return true;
        this.mShowingAutoPopup = false;
        return false;
      };
      LobbyComponent.prototype.onReceiptFetchCompleted = function() {
        this.mPersistantComponent.getLeagueController().getLeagueInitialized() || this.mPersistantComponent.getLeagueController().retryAfterTimeOut(10);
        this.mPersistantComponent.node.off("receipt_fetched", this.onReceiptFetchCompleted, this);
        if (this.mShowingAutoPopup) return;
        this.checkAndShowLobbyPopup();
      };
      LobbyComponent.prototype.isAutoPopupShowing = function() {
        return this.mShowingAutoPopup;
      };
      LobbyComponent.prototype.showReferralInvitePopup = function(event) {
        var referralInvitePopup = this.mPopupControllerComponent.getReferralInvitePopup();
        referralInvitePopup.showPopup();
        var referralInviteComponent = referralInvitePopup.node.getComponent(ReferralInvitePopupComponent_1.default);
        referralInviteComponent.initialize();
      };
      LobbyComponent.prototype.showReferralSentSuccessPopup = function(event) {
        var referralInviteSentPopup = this.mPopupControllerComponent.getReferralInviteSentPopup();
        referralInviteSentPopup.showPopup();
        referralInviteSentPopup.node.getComponent(ReferralInviteSentPopupComponent_1.default).initialize();
      };
      LobbyComponent.prototype.showReferralWelcomePopup = function(event) {
        var referralWelcomePopup = this.mPopupControllerComponent.getReferralWelcomePopup();
        referralWelcomePopup.showPopup();
        referralWelcomePopup.node.getComponent(ReferralWelcomePopupComponent_1.default).initialize();
      };
      LobbyComponent.prototype.showReferralRewardPopup = function(event) {
        var referralRewardPopup = this.mPopupControllerComponent.getReferralRewardPopup();
        referralRewardPopup.showPopup();
        referralRewardPopup.node.getComponent(ReferralRewardPopupComponent_1.default).initialize();
      };
      LobbyComponent.prototype.showReferralSuccessGrantedPopup = function(event) {
        var referralSuccessGrantedPopup = this.mPopupControllerComponent.getReferralSuccessPopup();
        referralSuccessGrantedPopup.showPopup();
        var friendName = "Friend";
        if (event) {
          var data = event.getUserData();
          data.friendName && (friendName = data.friendName);
        }
        referralSuccessGrantedPopup.getComponent(ReferralSuccessPopupComponent_1.default).initialize(friendName);
      };
      LobbyComponent.prototype.showStorePopup = function(event, showGems) {
        var source = event ? "notenoughchip" : "HUD";
        this.mStatsController.count("popup", 1, "open", "store", source, showGems ? "premium" : "coins");
        var storePopupComponent = this.mPopupControllerComponent.getStorePopup();
        storePopupComponent.showPopup();
        storePopupComponent.getComponent(StorePopupComponent_1.default).initialize(showGems);
      };
      LobbyComponent.prototype.showBetSelectPopup = function(event) {
        var isBetSelectEnable = this.mPersistantComponent.GetPlayerController().getModel().getBetSelectEnabledState();
        if (!isBetSelectEnable) return;
        var gameType = event ? event.getUserData().gameType : 1;
        var betSelectPopup = this.mPopupControllerComponent.getBetSelectionPopup();
        betSelectPopup.showPopup();
        var betSelectComponent = betSelectPopup.node.getComponent(BetSelectionPopupComponent_1.default);
        betSelectComponent.initialize(gameType);
      };
      LobbyComponent.prototype.showPaymentNotSupportedPopUp = function(header, bodyText) {
        return;
        var genericPopup;
        var oCallback;
      };
      LobbyComponent.prototype.paymentNotSupportedPopUp = function() {
        cc.sys.os == cc.sys.OS_IOS ? this.showPaymentNotSupportedPopUp("#PAYMENT_UNSPPORTED_HEADER", "#PAYMENT_IOS_UNSPPORTED_TEXT") : cc.sys.os == cc.sys.OS_ANDROID ? this.showPaymentNotSupportedPopUp("#PAYMENT_UNSPPORTED_HEADER", "#PAYMENT_AND_UNSPPORTED_TEXT") : cc.sys.isBrowser && this.showPaymentNotSupportedPopUp("#PAYMENT_UNSPPORTED_HEADER", "#PAYMENT_MSG_UNSPPORTED_TEXT");
      };
      LobbyComponent.prototype.onCoinHudPressed = function(event) {
        this.mLogger.Log("tanisha onCoinHud");
        this.mStatsController.count("button", 1, "HUD", event && event.getUserData().showGems ? "premium_hud" : "coins_hud");
        if (this.mPaymentController.isStoreEnabled()) this.showStorePopup(null, !!event && event.getUserData().showGems); else {
          var genericPopup = this.mPopupControllerComponent.getGenericPopup();
          genericPopup.showPopup();
          var genericP = genericPopup.getComponent(GenericPopupComponent_1.default);
          var hidePopupCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
          genericP.initializeWithBlueButton("#STORE_COMING_TEXT", "#COMING_TEXT", true, "", "#PRIVACY_OKAY", true, null, hidePopupCallback, hidePopupCallback);
        }
      };
      LobbyComponent.prototype.onPaymentSuccess = function(event) {
        if (event) {
          var data = event.getUserData();
          this.mLogger.Log("tanisha pay success " + data.packVal + " " + data.grantValue + " item:" + data.grantItem);
          if (data.grantValue) {
            this.grantSuccessPopup.showPopup();
            this.grantSuccessPopup.getComponent(GrantSuccessPopupComponent_1.default).initialize(data.grantValue, "#GRANT_HEADER_TEXT", "#COLLECT_BTN_TEXT", data.packVal.Image_type, "gems" == data.grantItem);
          } else this.mLogger.Log("eagle value of grantChips for Rewarded Video is inValid: " + data.grantValue);
        }
      };
      LobbyComponent.prototype.hidePaymentSuccess = function() {
        this.grantSuccessPopup && this.grantSuccessPopup.hidePopup();
      };
      LobbyComponent.prototype.onPaymentFail = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initializeWithBlueButton("#PAYMENT_FAIL_HEADER", "#PAYMENT_FAIL_TEXT", true, "", "#PRIVACY_OKAY", true, null, oCallback, oCallback);
      };
      LobbyComponent.prototype.showLeaderBoardPopup = function() {
        return;
        var leaderboardPopup;
      };
      LobbyComponent.prototype.onLeagueButtonPressed = function() {
        if (this.mPersistantComponent.getLeagueController().isLeagueEnabled()) {
          var leagueName = this.mPersistantComponent.getLeagueController().getLeague() > 0 ? this.mPersistantComponent.getLeagueController().getLeagueName() : "";
          var leaguePopup = this.mPopupControllerComponent.getLeagueLeaderBoardPopup();
          leaguePopup.getComponent(LeagueLeaderBoardPopupComponent_1.default).showPopup();
          this.mStatsController.count("button", 1, "lobby", "leagues", "unlocked", leagueName);
        } else {
          var leaguePopup = this.mPopupControllerComponent.getLeagueLockedPopup();
          leaguePopup.getComponent(LeagueLockedPopupComponent_1.default).showPopup();
          this.mStatsController.count("button", 1, "lobby", "leagues", "locked");
        }
      };
      LobbyComponent.prototype.showLeaguePopup = function() {
        var leaguePopup = this.mPopupControllerComponent.getLeagueLeaderBoardPopup();
        leaguePopup.getComponent(LeagueLeaderBoardPopupComponent_1.default).showPopup();
      };
      LobbyComponent.prototype.onLeaderBoardButtonPressed = function() {
        this.mStatsController.count("button", 1, "lobby", "friends");
        this.showLeaderBoardPopup();
      };
      LobbyComponent.prototype.onRewardeVideoVerified = function(event) {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_PROG_ADREWARDS);
        variant > 1 && !this.mPopupControllerComponent.getProgressiveAdRewardPopup().isOpen() && this.showProgressiveAdPopup(variant);
        if (event) {
          var data = event.getUserData();
          data.grantChips ? this.showGrantSuccessPopup(data.grantChips, false) : data.grantGems ? this.showGrantSuccessPopup(data.grantGems, true) : this.mLogger.Log("eagle value of grantChips for Rewarded Video is inValid: " + data.grantChips);
        }
      };
      LobbyComponent.prototype.showGrantSuccessPopup = function(value, isGems) {
        this.grantSuccessPopup.showPopup();
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_PROG_ADREWARDS);
        if (variant <= 1) this.grantSuccessPopup.getComponent(GrantSuccessPopupComponent_1.default).initialize(value, "#VIDEO_COMPLETE_HEADER", "#COLLECT_BTN_TEXT", null, isGems); else {
          var playerProgAdMaxCount = this.mPersistantComponent.GetPlayerController().getModel().getPlayerProgAdMaxCount();
          var videoAvailableCount = this.mPersistantComponent.GetAdsController().getVideoAvailableCount();
          var currentSeenVideo = playerProgAdMaxCount - videoAvailableCount;
          var progAdConfig = this.mPersistantComponent.GetPlayerController().getModel().getPlayerProgAdConfig();
          this.grantSuccessPopup.getComponent(GrantSuccessPopupComponent_1.default).initialize(value, "#VIDEO_COMPLETE_HEADER", "#COLLECT_BTN_TEXT", progAdConfig[currentSeenVideo - 1].imgType, isGems);
        }
      };
      LobbyComponent.prototype.confirmWatchAds = function() {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_PROG_ADREWARDS);
        variant <= 1 ? this.showOldGenericAdPopup() : this.showProgressiveAdPopup(variant);
      };
      LobbyComponent.prototype.showProgressiveAdPopup = function(variant) {
        var progressiveRewardPopup = this.mPopupControllerComponent.getProgressiveAdRewardPopup();
        this.mStatsController.count("popup", 1, "open", "progressive_adrewards", this.mPersistantComponent.GetAdsController().getVideoAvailableCount() + "");
        progressiveRewardPopup.showPopup();
        progressiveRewardPopup.getComponent(ProgressiveRewardPopupComponent_1.default).initialize(variant);
      };
      LobbyComponent.prototype.showOldGenericAdPopup = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        this.mStatsController.count("popup", 1, "open", "ad_confirm", this.mPersistantComponent.GetAdsController().getVideoAvailableCount() + "");
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback1 = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideShowAdsPopup");
        var oCallback2 = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "showRewardedAds");
        var grantChips = this.mPlayerModel.getRewardedVideoGrantChips();
        var adsMessage = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#WATCH_ADS_TEXT", {
          coins_num: Helper_1.Helper.getLocaleNumber(grantChips)
        });
        genericPopup.getComponent(GenericPopupComponent_1.default).initializeWithBlueButton("#WATCH_ADS_HEADER", adsMessage, true, "", "#WATCH_ADS_IG", true, null, oCallback2, oCallback1);
        genericPopup.getComponent(GenericPopupComponent_1.default).setFontSizes(32, 32, -1, -1);
        genericPopup.getComponent(GenericPopupComponent_1.default).setOverlayCloseOnTap(false);
      };
      LobbyComponent.prototype.showRewardedAds = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        this.mStatsController.count("button", 1, "watch", "ad_confirm");
        genericPopup.getComponent(GenericPopupComponent_1.default).activateSpinner();
        this.mPersistantComponent.GetAdsController().initiateRewardedVideoAds("HUD");
      };
      LobbyComponent.prototype.hideShowAdsPopup = function() {
        this.mStatsController.count("button", 1, "close", "ad_confirm");
        this.hideGenericPopup();
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_RESET_ADS);
      };
      LobbyComponent.prototype.onAdsUnavailable = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "closeAdUnavailablePopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initialize("#VIDEO_UNAVAILABLE_HEADER", "#TRY_AGAIN_TEXT", "#PRIVACY_OKAY", true, oCallback, oCallback);
        genericPopup.getComponent(GenericPopupComponent_1.default).setFontSizes(-1, -1, 32, -1);
        genericPopup.getComponent(GenericPopupComponent_1.default).setOverlayCloseOnTap(false);
      };
      LobbyComponent.prototype.showDBAdsNotAvailable = function() {
        this.mStatsController.count("popup", 1, "open", "adUnavailable", "dailyAdBonus");
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initializeWithBlueButton("#VIDEO_UNAVAILABLE_HEADER", "#TRY_AGAIN_TEXT", true, "", "#PRIVACY_OKAY", true, null, oCallback, oCallback);
        genericPopup.getComponent(GenericPopupComponent_1.default).setFontSizes(-1, -1, 32, -1);
        genericPopup.getComponent(GenericPopupComponent_1.default).setOverlayCloseOnTap(false);
      };
      LobbyComponent.prototype.showDBAdsError = function() {
        this.mStatsController.count("popup", 1, "open", "serverError", "dailyAdBonus");
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initializeWithBlueButton("#ERROR_POPUP_TITLE", "#SERVER_RESPONSE_CONNECTION_ERROR", true, "", "#PRIVACY_OKAY", true, null, oCallback, oCallback);
        genericPopup.getComponent(GenericPopupComponent_1.default).setFontSizes(-1, -1, 32, -1);
        genericPopup.getComponent(GenericPopupComponent_1.default).setOverlayCloseOnTap(false);
      };
      LobbyComponent.prototype.closeAdUnavailablePopup = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup && genericPopup.hidePopup();
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_PROG_ADREWARDS);
        if (variant > 1 && this.mPopupControllerComponent.getProgressiveAdRewardPopup().isOpen()) {
          this.mStatsController.count("popup", 1, "close", "progressive_adrewards", this.mPersistantComponent.GetAdsController().getVideoAvailableCount() + "");
          this.mPopupControllerComponent.getProgressiveAdRewardPopup().hidePopup();
        }
      };
      LobbyComponent.prototype.onAdsFinished = function() {
        var genericPopup = this.mPopupControllerComponent.getGenericPopup();
        genericPopup.getComponent(PopupComponent_1.default).showPopup();
        var oCallback = Helper_1.Helper.getEventHandler(this.node, "LobbyComponent", "hideGenericPopup");
        genericPopup.getComponent(GenericPopupComponent_1.default).initialize("#NO_VIDEOS_HEADER_TEXT", "#NO_VIDEOS_TEXT", "#PRIVACY_OKAY", true, oCallback, oCallback);
      };
      LobbyComponent.prototype.showLeagueInfoPopup = function() {
        if (2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI)) return;
        var leagueInfoPopup = this.mPopupControllerComponent.getLeagueInfoPopup();
        leagueInfoPopup.showPopup();
        leagueInfoPopup.getComponent(LeagueInfoPopupComponent_1.default).initialize();
      };
      LobbyComponent.prototype.showLeagueEndPopup = function() {
        if (2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI)) return;
        var leagueEndPopup = this.mPopupControllerComponent.getLeagueEndPopup();
        if (leagueEndPopup.isOpen()) return;
        leagueEndPopup.showPopup();
        leagueEndPopup.getComponent(LeagueEndPopupComponent_1.default).initialize();
      };
      LobbyComponent.prototype.showInterstitialAds = function(event) {
        var data = event.getUserData();
        var mInterstitialAdController = this.mPersistantComponent.GetInterstitialAdController();
        this.mLogger.Log("mInterstitialAdController.isVideoPreloaded() " + mInterstitialAdController.isVideoPreloaded());
        if (mInterstitialAdController.isVideoPreloaded()) {
          this.mLogger.Log("mInterstitialAd initiate " + data.reason);
          mInterstitialAdController.initiateInterstitialVideoAds(data.reason);
        }
      };
      LobbyComponent.prototype.showLeagueUnlockedPopup = function() {
        var popup = this.mPopupControllerComponent.getLeagueUnlockedPopup();
        popup.showPopup();
      };
      LobbyComponent.prototype.checkAndShowComingSoonPopup = function() {
        var showComingSoonPopup = this.mPlayerModel.checkAndResetComingSoonPopup();
        var showProgressionEndingPopup = this.mPlayerModel.shouldShowProgressionPopup();
        if (showComingSoonPopup && !showProgressionEndingPopup) {
          var comingSoonPopup = this.mPopupControllerComponent.getComingSoonPopup();
          var leagues_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI);
          comingSoonPopup.getComponent(LeaguesComingSoonComponent_1.default).initialize(2 == leagues_variant);
          comingSoonPopup.showPopup();
          return true;
        }
        return false;
      };
      LobbyComponent.prototype.checkAndShowProgressiveRewardPopup = function() {
        var showProgressiveRewardPopup = this.mPlayerModel.checkAndResetProgressiveRewardPopup();
        if (showProgressiveRewardPopup) {
          this.confirmWatchAds();
          return true;
        }
        return false;
      };
      LobbyComponent.prototype.checkAndShowProgressionEnded = function() {
        var showProgressionEndingPopup = this.mPlayerModel.shouldShowProgressionPopup();
        if (showProgressionEndingPopup) {
          this.mPlayerModel.resetShowProgressionPopup();
          var rewardObj = this.mPlayerModel.getProgressionEndReward();
          var progressionEndPopup = this.mPopupControllerComponent.getProgressionEndedPopup();
          progressionEndPopup.getComponent(ProgressionEndPopupComponent_1.default).initialize(rewardObj.trophies, rewardObj.coinsGrant);
          progressionEndPopup.showPopup();
          return true;
        }
        return false;
      };
      __decorate([ property(cc.Button) ], LobbyComponent.prototype, "onlinePlayButton", void 0);
      __decorate([ property(cc.Button) ], LobbyComponent.prototype, "privatePlayButton", void 0);
      __decorate([ property(RankingPopupComponent_1.default) ], LobbyComponent.prototype, "rankingPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyComponent.prototype, "playerSelectionPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyComponent.prototype, "settingsPopup", void 0);
      __decorate([ property(LeaderBoardPopupComponent_1.default) ], LobbyComponent.prototype, "leaderBoardPopup", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "logo", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "joiningBanner", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "joiningBannerOverlay", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "particleSystem", void 0);
      __decorate([ property(cc.AudioSource) ], LobbyComponent.prototype, "boomSound", void 0);
      __decorate([ property(cc.AudioSource) ], LobbyComponent.prototype, "winnerSound", void 0);
      __decorate([ property(LobbyTopHudComponent_1.default) ], LobbyComponent.prototype, "mTopHudCompoent", void 0);
      __decorate([ property(LobbyPopupControllerComponent_1.default) ], LobbyComponent.prototype, "mPopupControllerComponent", void 0);
      __decorate([ property(cc.Button) ], LobbyComponent.prototype, "leaderboardButton", void 0);
      __decorate([ property(cc.Button) ], LobbyComponent.prototype, "leaguesButton", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "leaderboardRankLabel", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "leaguesSeasonEndTimerLabel", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "leaguesGamesToUnlockLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueButtonLockedNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueButtonUnlockedNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueButtonNameNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueButtonBadgeNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueButtonCoolDownNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "bottomButtonsLayer", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyComponent.prototype, "grantSuccessPopup", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LobbyComponent.prototype, "leagueBadgeNode", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "cooldownTimerLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueRankNode", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "leagueRankLabel", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "leagueRankChangeLabel", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LobbyComponent.prototype, "coolDownLeagueBadgeCompoent", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], LobbyComponent.prototype, "inactiveLeagueBadgeCompoent", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "redLeagueRankChangeLabel", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "greenLeagueRankChangeLabel", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "yellowLeagueRankChangeLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "redLeagueRankChangeNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "greenLeagueRankChangeNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "yellowLeagueRankChangeNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueBadgeButtonLoadingNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueBadgeButtonLoadedNode", void 0);
      __decorate([ property(cc.Animation) ], LobbyComponent.prototype, "rankChangeAnimation", void 0);
      __decorate([ property(cc.Label) ], LobbyComponent.prototype, "leaderboardTimerLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueCooldownTimerNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueRegularTimerNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueLockedLabelNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "leagueKickOffLabelrNode", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "cooldownViewLeaderboardLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "cooldownNoBadgeLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyComponent.prototype, "cooldownBadgeLabel", void 0);
      __decorate([ property(cc.Animation) ], LobbyComponent.prototype, "ftueOnlineGameButtonAnim", void 0);
      LobbyComponent = __decorate([ ccclass ], LobbyComponent);
      return LobbyComponent;
    }(cc.Component);
    exports.default = LobbyComponent;
    cc._RF.pop();
  }, {
    "../Actions/ActionFtueInactiveOnLobby": "ActionFtueInactiveOnLobby",
    "../Actions/ActionShowFriendOfflinePopup": "ActionShowFriendOfflinePopup",
    "../Actions/ActionShowJoiningBanner": "ActionShowJoiningBanner",
    "../Actions/GenericPopupComponent": "GenericPopupComponent",
    "../Actions/RankingPopupComponent": "RankingPopupComponent",
    "../Config": "Config",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Controllers/ProfileCustomizationController": "ProfileCustomizationController",
    "../Controllers/SoundController": "SoundController",
    "../Controllers/SurveyController": "SurveyController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../states/State": "State",
    "./BetSelectionPopupComponent": "BetSelectionPopupComponent",
    "./GrantSuccessPopupComponent": "GrantSuccessPopupComponent",
    "./LeaderBoardPopupComponent": "LeaderBoardPopupComponent",
    "./LeagueBadgeComponent": "LeagueBadgeComponent",
    "./LeagueEndPopupComponent": "LeagueEndPopupComponent",
    "./LeagueInfoPopupComponent": "LeagueInfoPopupComponent",
    "./LeagueLeaderBoardPopupComponent": "LeagueLeaderBoardPopupComponent",
    "./LeagueLockedPopupComponent": "LeagueLockedPopupComponent",
    "./LeaguesComingSoonComponent": "LeaguesComingSoonComponent",
    "./LobbyPopupControllerComponent": "LobbyPopupControllerComponent",
    "./LobbyTopHudComponent": "LobbyTopHudComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./NotEnoughCoinsPopupComponent": "NotEnoughCoinsPopupComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PlayerProfilePopupComponent": "PlayerProfilePopupComponent",
    "./PlayerSelectionComponent": "PlayerSelectionComponent",
    "./PopupComponent": "PopupComponent",
    "./ProgressionEndPopupComponent": "ProgressionEndPopupComponent",
    "./ProgressiveRewardPopupComponent": "ProgressiveRewardPopupComponent",
    "./ReferralInvitePopupComponent": "ReferralInvitePopupComponent",
    "./ReferralInviteSentPopupComponent": "ReferralInviteSentPopupComponent",
    "./ReferralRewardPopupComponent": "ReferralRewardPopupComponent",
    "./ReferralSuccessPopupComponent": "ReferralSuccessPopupComponent",
    "./ReferralWelcomePopupComponent": "ReferralWelcomePopupComponent",
    "./RejoinPopupComponent": "RejoinPopupComponent",
    "./SettingsPopupComponent": "SettingsPopupComponent",
    "./StorePopupComponent": "StorePopupComponent",
    "./SurveyPopupWrapperComponent": "SurveyPopupWrapperComponent"
  } ],
  LobbyPopupControllerComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "efed5883LVGga8oIGjX6TK7", "LobbyPopupControllerComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PopupComponent_1 = require("./PopupComponent");
    var Constants_1 = require("../Constants");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LobbyPopupControllerComponent = function(_super) {
      __extends(LobbyPopupControllerComponent, _super);
      function LobbyPopupControllerComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.rankingPopup = null;
        _this.playerSelectionPopup = null;
        _this.settingsPopup = null;
        _this.leaderBoardPopup = null;
        _this.genericPopup = null;
        _this.newRankPopup = null;
        _this.mPlayerProfilePopup = null;
        _this.mNotEnoughCoinsPopup = null;
        _this.leagueLeaderBoardPopup = null;
        _this.leagueInfoPopup = null;
        _this.leagueEndPopup = null;
        _this.leagueLockedPopup = null;
        _this.oldLeaderBoardPopup = null;
        _this.leagueUnlockedPopup = null;
        _this.oldStorePopup = null;
        _this.newStorePopup = null;
        _this.progressiveAdRewardPopup = null;
        _this.leaguesComingSoonPopup = null;
        _this.leaguesComingSoonPopup2 = null;
        _this.progressionEndedPopup = null;
        _this.betSelectionPopup = null;
        _this.rejoinPopup = null;
        _this.referralInvitePopup = null;
        _this.referralInviteSentPopup = null;
        _this.referralRewardPopup = null;
        _this.referralSuccessPopup = null;
        _this.referralWelcomePopup = null;
        return _this;
      }
      LobbyPopupControllerComponent.prototype.start = function() {};
      LobbyPopupControllerComponent.prototype.getGenericPopup = function() {
        return this.genericPopup;
      };
      LobbyPopupControllerComponent.prototype.getPlayerProfilePopup = function() {
        return this.mPlayerProfilePopup;
      };
      LobbyPopupControllerComponent.prototype.getRankingPopup = function() {
        return this.rankingPopup;
      };
      LobbyPopupControllerComponent.prototype.getPlayerSelectionPopup = function() {
        return this.playerSelectionPopup;
      };
      LobbyPopupControllerComponent.prototype.getReferralInvitePopup = function() {
        return this.referralInvitePopup;
      };
      LobbyPopupControllerComponent.prototype.getReferralInviteSentPopup = function() {
        return this.referralInviteSentPopup;
      };
      LobbyPopupControllerComponent.prototype.getSettingsPopup = function() {
        return this.settingsPopup;
      };
      LobbyPopupControllerComponent.prototype.getLeaderboardPopup = function() {
        return this.leaderBoardPopup;
      };
      LobbyPopupControllerComponent.prototype.getNewRankPopup = function() {
        return this.newRankPopup;
      };
      LobbyPopupControllerComponent.prototype.getNotEnoughCoinsPopup = function() {
        return this.mNotEnoughCoinsPopup;
      };
      LobbyPopupControllerComponent.prototype.getLeagueLeaderBoardPopup = function() {
        return this.leagueLeaderBoardPopup;
      };
      LobbyPopupControllerComponent.prototype.getLeagueInfoPopup = function() {
        return this.leagueInfoPopup;
      };
      LobbyPopupControllerComponent.prototype.getLeagueEndPopup = function() {
        return this.leagueEndPopup;
      };
      LobbyPopupControllerComponent.prototype.getLeagueLockedPopup = function() {
        return this.leagueLockedPopup;
      };
      LobbyPopupControllerComponent.prototype.getOldLeaderboardPopup = function() {
        return this.oldLeaderBoardPopup;
      };
      LobbyPopupControllerComponent.prototype.getProgressiveAdRewardPopup = function() {
        return this.progressiveAdRewardPopup;
      };
      LobbyPopupControllerComponent.prototype.getLeagueUnlockedPopup = function() {
        return this.leagueUnlockedPopup;
      };
      LobbyPopupControllerComponent.prototype.getStorePopup = function() {
        var power_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        if (2 == power_variant) return this.newStorePopup;
        return this.oldStorePopup;
      };
      LobbyPopupControllerComponent.prototype.getComingSoonPopup = function() {
        var leagues_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI);
        if (2 == leagues_variant) return this.leaguesComingSoonPopup2;
        return this.leaguesComingSoonPopup;
      };
      LobbyPopupControllerComponent.prototype.getProgressionEndedPopup = function() {
        return this.progressionEndedPopup;
      };
      LobbyPopupControllerComponent.prototype.getBetSelectionPopup = function() {
        return this.betSelectionPopup;
      };
      LobbyPopupControllerComponent.prototype.getRejoinPopup = function() {
        return this.rejoinPopup;
      };
      LobbyPopupControllerComponent.prototype.getReferralRewardPopup = function() {
        return this.referralRewardPopup;
      };
      LobbyPopupControllerComponent.prototype.getReferralSuccessPopup = function() {
        return this.referralSuccessPopup;
      };
      LobbyPopupControllerComponent.prototype.getReferralWelcomePopup = function() {
        return this.referralWelcomePopup;
      };
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "rankingPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "playerSelectionPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "settingsPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "leaderBoardPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "genericPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "newRankPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "mPlayerProfilePopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "mNotEnoughCoinsPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "leagueLeaderBoardPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "leagueInfoPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "leagueEndPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "leagueLockedPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "oldLeaderBoardPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "leagueUnlockedPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "oldStorePopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "newStorePopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "progressiveAdRewardPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "leaguesComingSoonPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "leaguesComingSoonPopup2", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "progressionEndedPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "betSelectionPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "rejoinPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "referralInvitePopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "referralInviteSentPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "referralRewardPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "referralSuccessPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyPopupControllerComponent.prototype, "referralWelcomePopup", void 0);
      LobbyPopupControllerComponent = __decorate([ ccclass ], LobbyPopupControllerComponent);
      return LobbyPopupControllerComponent;
    }(cc.Component);
    exports.default = LobbyPopupControllerComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "./PopupComponent": "PopupComponent"
  } ],
  LobbyTopHudComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8d2504zw+9FfaO6bBl0hmWP", "LobbyTopHudComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BadgeComponent_1 = require("./BadgeComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Constants_1 = require("../Constants");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Config_1 = require("../Config");
    var ProfileImageComponent_1 = require("./ProfileImageComponent");
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var DailyBonusPopupComponent_1 = require("./DailyBonusPopupComponent");
    var ScrollingNumberActionComponent_1 = require("../Actions/ScrollingNumberActionComponent");
    var ProgressComponent_1 = require("./ProgressComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LobbyTopHudComponent = function(_super) {
      __extends(LobbyTopHudComponent, _super);
      function LobbyTopHudComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.trophyLabel = null;
        _this.nameLabel = null;
        _this.profileImage = null;
        _this.profileBadge = null;
        _this.progressionButton = null;
        _this.coinButton = null;
        _this.versionString = null;
        _this.progressionNode = null;
        _this.progressionNameLabel = null;
        _this.coinsNode = null;
        _this.coinsLabel = null;
        _this.dailyBonusNode = null;
        _this.dailyBonusEnabledButton = null;
        _this.dailyBonusDisabledButton = null;
        _this.dailyBonusEnabledNode = null;
        _this.dailyBonusDisabledNode = null;
        _this.dailyBonusPopup = null;
        _this.dailyBonusExpPopup = null;
        _this.dailyBonusTimerLabel = null;
        _this.coinIcon = null;
        _this.progressComponent = null;
        _this.adsNode = null;
        _this.referralButtonUp = null;
        _this.referralButtonDown = null;
        _this.coinPlusIcon = null;
        _this.gemsIcon = null;
        _this.gemsPlusIcon = null;
        _this.coinsNoPowerupNode = null;
        _this.gemsNode = null;
        _this.gemsLabel = null;
        _this.gemsButton = null;
        _this.mTimeLeft = 0;
        _this.mCurrentCoins = 0;
        _this.mCoinNodeAnimtion = null;
        _this.mTimeout = null;
        _this.mCurrentGems = 0;
        return _this;
      }
      LobbyTopHudComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.mPlayerController = persistantController.GetPlayerController();
        this.mExperimentController = persistantController.GetExperimentController();
        this.mStatsController = persistantController.GetStatsController();
        this.mConfigurationController = persistantController.GetConfigurationController();
        this.versionString.string = Config_1.Config.VERSION;
        this.mPlayerModel = this.mPlayerController.getModel();
        this.mCoinNodeAnimtion = this.coinsNode.getComponent(cc.Animation);
        this.referralButtonUp.getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LobbyTopHudComponent", "onReferralButtonClicked", false));
        this.referralButtonDown.getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LobbyTopHudComponent", "onReferralButtonClicked", false));
      };
      LobbyTopHudComponent.prototype.start = function() {
        var deltaX = cc.director.getVisibleSize().width - 640;
        var scale = cc.director.getVisibleSize().width / 640;
        this.node.setScale(scale);
        var name = this.mPlayerController.getPlayerName();
        this.nameLabel.string = Helper_1.Helper.getTruncatedString(name, 12, true);
        this.progressionNameLabel.string = Helper_1.Helper.getTruncatedString(name, 12, true);
        this.profileBadge.showBadge(this.mConfigurationController.getBadgeFromTrophies(this.mPlayerModel.getTrophies()));
        if (this.mPersistantComponent.getCachedProfileImageSprite()) {
          this.profileImage.getComponent(ProfileImageComponent_1.default).setSpriteFrame(this.mPersistantComponent.getCachedProfileImageSprite());
          this.initializeLeaguesBadge();
        } else this.profileImageLoading();
        var enableProgression = this.mPersistantComponent.GetPlayerController().shouldEnableProgression();
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        this.coinsLabel.string = Helper_1.Helper.getLocaleNumber(this.mPlayerModel.getCoins());
        this.mCurrentCoins = this.mPlayerModel.getCoins();
        this.mPersistantComponent.node.on("dailyBonusPopupClosed", this.onDailybonusPopupClosed, this);
        this.mPersistantComponent.node.on("updateLobbyCoinsHud", this.updateCoinsHud, this);
        this.mPersistantComponent.node.on("updateLobbyGemsHud", this.updateGemsHud, this);
        this.mPersistantComponent.node.on("name_change", this.onNameChange, this);
      };
      LobbyTopHudComponent.prototype.onNameChange = function(event) {
        var data = event.getUserData();
        this.nameLabel.string = Helper_1.Helper.getTruncatedString(data.name, 12, true);
        this.progressionNameLabel.string = Helper_1.Helper.getTruncatedString(data.name, 12, true);
      };
      LobbyTopHudComponent.prototype.initializeLeaguesBadge = function() {
        this.profileImage.getComponent(ProfileImageComponent_1.default).showLeagueBadge(this.mPersistantComponent.getLeagueController().getLeague());
      };
      LobbyTopHudComponent.prototype.adsButtonIntialization = function() {
        if (!this.adsNode.active) return;
        var adButtonVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_HUD_ADBUTTON);
        adButtonVariant = adButtonVariant || 1;
        var MaxVariant = 4;
        for (var iterator = 1; iterator <= MaxVariant; iterator++) ;
        var referralStatus = this.mPlayerModel.isReferralSupported();
        if (referralStatus && 3 == adButtonVariant) var referralButtonVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_REFERRAL_BUTTON);
      };
      LobbyTopHudComponent.prototype.referralButtonIntialization = function() {
        var referralStatus = this.mPlayerModel.isReferralSupported();
      };
      LobbyTopHudComponent.prototype.onReferralButtonClicked = function() {
        this.mStatsController.count("button", 1, "lobby_referral");
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_INVITE_POPUP);
      };
      LobbyTopHudComponent.prototype.checkAndInitializeGems = function() {
        this.mCurrentGems = 0;
        var power_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        if (2 == power_variant) {
          this.mCurrentGems = this.mPlayerModel.getGems();
          this.gemsLabel.string = Helper_1.Helper.getLocaleNumber(this.mPlayerModel.getGems());
        } else this.coinsNode.setPosition(this.coinsNoPowerupNode.getPosition());
      };
      LobbyTopHudComponent.prototype.updateProgressString = function() {
        var enableProgression = this.mPersistantComponent.GetPlayerController().shouldEnableProgression();
        if (!enableProgression) {
          this.trophyLabel.string = "";
          return;
        }
        this.progressionNameLabel.string = Helper_1.Helper.getTruncatedString(this.mPlayerController.getPlayerName(), 12, true);
        var trophies = this.mPlayerController.getModel().getTrophies();
        this.progressComponent.setProgressBar(trophies);
        this.trophyLabel.string = this.mConfigurationController.getTrophiesRequiredForNextBadgeString(trophies);
      };
      LobbyTopHudComponent.prototype.onStartGameAsyncComplete = function() {
        this.profileImageLoading();
      };
      LobbyTopHudComponent.prototype.profileImageLoading = function() {
        this.nameLabel.string = Helper_1.Helper.getTruncatedString(this.mPlayerController.getPlayerName(), 12, true);
        this.progressionNameLabel.string = Helper_1.Helper.getTruncatedString(this.mPlayerController.getPlayerName(), 12, true);
        this.profileImage.getComponent(ProfileImageComponent_1.default).initialize(FBInstant.player.getPhoto());
        this.initializeLeaguesBadge();
      };
      LobbyTopHudComponent.prototype.createEventHandlers = function() {
        this.dailyBonusEnabledButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LobbyTopHudComponent", "onDailybonusPressed"));
        this.dailyBonusDisabledButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LobbyTopHudComponent", "onDailybonusPressed"));
        this.coinButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LobbyTopHudComponent", "coinHudPressed", false));
        this.gemsButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "LobbyTopHudComponent", "coinHudPressed", true));
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_LEAGUE_DATA_FETCHED, this.initializeLeaguesBadge, this);
      };
      LobbyTopHudComponent.prototype.updateCoinsHud = function(event) {
        if (!this.mPlayerModel || this.mCurrentCoins == this.mPlayerModel.getCoins()) return;
        if (event && "dontAnimate" == event.getUserData()) {
          this.coinsLabel.string = Helper_1.Helper.getLocaleNumber(this.mPlayerModel.getCoins());
          this.mCurrentCoins = this.mPlayerModel.getCoins();
          return;
        }
        var data = event.getUserData();
        this.coinsLabel.getComponent(ScrollingNumberActionComponent_1.default).scrollTo(this.mCurrentCoins, this.mPlayerModel.getCoins(), data.timer);
        this.mCurrentCoins = this.mPlayerModel.getCoins();
      };
      LobbyTopHudComponent.prototype.updateGemsHud = function(event) {
        if (!this.mPlayerModel || this.mCurrentGems == this.mPlayerModel.getGems()) return;
        if (event && "dontAnimate" == event.getUserData()) {
          this.gemsLabel.string = Helper_1.Helper.getLocaleNumber(this.mPlayerModel.getGems());
          this.mCurrentGems = this.mPlayerModel.getGems();
          return;
        }
        var data = event.getUserData();
        this.gemsLabel.getComponent(ScrollingNumberActionComponent_1.default).scrollTo(this.mCurrentGems, this.mPlayerModel.getGems(), data.timer);
        this.mCurrentGems = this.mPlayerModel.getGems();
      };
      LobbyTopHudComponent.prototype.getFinalCoinPosition = function() {
        return this.coinIcon.node.parent.convertToWorldSpaceAR(this.coinIcon.node.getPosition());
      };
      LobbyTopHudComponent.prototype.getFinalGemsPosition = function() {
        return this.gemsIcon.node.parent.convertToWorldSpaceAR(this.gemsIcon.node.getPosition());
      };
      LobbyTopHudComponent.prototype.initializeDailyBonusNode = function() {
        var player = this.mPlayerController.getModel();
        var isDailyBonusReady = false;
        player && (isDailyBonusReady = isDailyBonusReady || player.isDailyBonusGranted());
        this.mTimeLeft = player.getDailyBonusCollectTime();
      };
      LobbyTopHudComponent.prototype.onDailybonusPressed = function() {
        var adsSupported = this.mPersistantComponent.GetAdsController().isRewardedVideoSupported();
        var canShowAds = this.mPlayerModel.canShowDailyBonusVideo();
        if (this.dailyBonusExpPopup && canShowAds && adsSupported) {
          this.dailyBonusExpPopup.showPopup();
          this.dailyBonusExpPopup.getComponent(DailyBonusPopupComponent_1.default).initialize();
        } else if (this.dailyBonusPopup) {
          this.dailyBonusPopup.showPopup();
          this.dailyBonusPopup.getComponent(DailyBonusPopupComponent_1.default).initialize();
        }
      };
      LobbyTopHudComponent.prototype.isDailyBonusOpen = function() {
        return this.dailyBonusExpPopup.getComponent(PopupComponent_1.default).isOpen() || this.dailyBonusPopup.getComponent(PopupComponent_1.default).isOpen();
      };
      LobbyTopHudComponent.prototype.hideDailyBonus = function() {
        this.dailyBonusPopup && this.dailyBonusPopup.hidePopup();
      };
      LobbyTopHudComponent.prototype.update = function(dt) {};
      LobbyTopHudComponent.prototype.onDailybonusPopupClosed = function() {
        this.initializeDailyBonusNode();
      };
      LobbyTopHudComponent.prototype.onDestroy = function() {
        this.mPersistantComponent.node.off("dailyBonusPopupClosed", this.onDailybonusPopupClosed, this);
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mTimeout = null;
      };
      LobbyTopHudComponent.prototype.getTimerStringForDailyBonus = function(timeLeft) {
        var timeString = "";
        if (timeLeft > Constants_1.constants.TIME_S.HOUR) {
          var hour = Math.floor(timeLeft / Constants_1.constants.TIME_S.HOUR);
          timeString = hour < 10 ? "0" + hour + "h " : hour + "h ";
          timeLeft -= hour * Constants_1.constants.TIME_S.HOUR;
          var min = Math.floor(timeLeft / Constants_1.constants.TIME_S.MINUTE);
          min < 10 ? timeString = timeString + "0" + min : timeString += min;
          timeString += "m";
        } else {
          var min = Math.floor(timeLeft / Constants_1.constants.TIME_S.MINUTE);
          timeString = min < 10 ? timeString + "0" + min + "m " : timeString + min + "m ";
          var secs = Math.floor(timeLeft % Constants_1.constants.TIME_S.MINUTE);
          secs < 10 ? timeString = timeString + "0" + secs : timeString += secs;
          timeString += "s";
        }
        return timeString;
      };
      LobbyTopHudComponent.prototype.coinHudPressed = function(event, gemsPressed) {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_COIN_HUD_PRESSED, {
          showGems: gemsPressed
        });
      };
      LobbyTopHudComponent.prototype.progressionPressed = function() {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_PROGRESSION_HUD_PRESSED);
      };
      __decorate([ property(cc.Label) ], LobbyTopHudComponent.prototype, "trophyLabel", void 0);
      __decorate([ property(cc.Label) ], LobbyTopHudComponent.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "profileImage", void 0);
      __decorate([ property(BadgeComponent_1.BadgeComponent) ], LobbyTopHudComponent.prototype, "profileBadge", void 0);
      __decorate([ property(cc.Button) ], LobbyTopHudComponent.prototype, "progressionButton", void 0);
      __decorate([ property(cc.Button) ], LobbyTopHudComponent.prototype, "coinButton", void 0);
      __decorate([ property(cc.Label) ], LobbyTopHudComponent.prototype, "versionString", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "progressionNode", void 0);
      __decorate([ property(cc.Label) ], LobbyTopHudComponent.prototype, "progressionNameLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "coinsNode", void 0);
      __decorate([ property(cc.Label) ], LobbyTopHudComponent.prototype, "coinsLabel", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "dailyBonusNode", void 0);
      __decorate([ property(cc.Button) ], LobbyTopHudComponent.prototype, "dailyBonusEnabledButton", void 0);
      __decorate([ property(cc.Button) ], LobbyTopHudComponent.prototype, "dailyBonusDisabledButton", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "dailyBonusEnabledNode", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "dailyBonusDisabledNode", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyTopHudComponent.prototype, "dailyBonusPopup", void 0);
      __decorate([ property(PopupComponent_1.default) ], LobbyTopHudComponent.prototype, "dailyBonusExpPopup", void 0);
      __decorate([ property(cc.Label) ], LobbyTopHudComponent.prototype, "dailyBonusTimerLabel", void 0);
      __decorate([ property(cc.Sprite) ], LobbyTopHudComponent.prototype, "coinIcon", void 0);
      __decorate([ property(ProgressComponent_1.default) ], LobbyTopHudComponent.prototype, "progressComponent", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "adsNode", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "referralButtonUp", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "referralButtonDown", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "coinPlusIcon", void 0);
      __decorate([ property(cc.Sprite) ], LobbyTopHudComponent.prototype, "gemsIcon", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "gemsPlusIcon", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "coinsNoPowerupNode", void 0);
      __decorate([ property(cc.Node) ], LobbyTopHudComponent.prototype, "gemsNode", void 0);
      __decorate([ property(cc.Label) ], LobbyTopHudComponent.prototype, "gemsLabel", void 0);
      __decorate([ property(cc.Button) ], LobbyTopHudComponent.prototype, "gemsButton", void 0);
      LobbyTopHudComponent = __decorate([ ccclass ], LobbyTopHudComponent);
      return LobbyTopHudComponent;
    }(cc.Component);
    exports.default = LobbyTopHudComponent;
    cc._RF.pop();
  }, {
    "../Actions/ScrollingNumberActionComponent": "ScrollingNumberActionComponent",
    "../Config": "Config",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "./BadgeComponent": "BadgeComponent",
    "./DailyBonusPopupComponent": "DailyBonusPopupComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent",
    "./ProfileImageComponent": "ProfileImageComponent",
    "./ProgressComponent": "ProgressComponent"
  } ],
  LocalizationComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "248dcYSXuZAf7XLyl131v49", "LocalizationComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var LocalizationRepositionComponent_1 = require("./LocalizationRepositionComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LocalizationComponent = function(_super) {
      __extends(LocalizationComponent, _super);
      function LocalizationComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.mKey = "";
        _this.mParams = null;
        _this.mPosition = null;
        _this.mFontSize = null;
        _this.mPersistantComponent = null;
        return _this;
      }
      LocalizationComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mKey = this.label.string;
        this.label.string = LocalizationController_1.LocalizationController.getInstance().LocalizedString(this.mKey, this.mParams);
        this.mPosition = this.label.node.getPosition();
        this.mFontSize = this.label.fontSize;
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_LOCALE_CHANGE, this.onLocaleChange, this);
        this.onLocaleChange();
      };
      LocalizationComponent.prototype.onEnable = function() {};
      LocalizationComponent.prototype.onLocaleChange = function() {
        this.label.string = LocalizationController_1.LocalizationController.getInstance().LocalizedString(this.mKey, this.mParams);
        this.applyReposition();
      };
      LocalizationComponent.prototype.applyReposition = function() {
        var repositionComponents = this.node.getComponents(LocalizationRepositionComponent_1.default);
        var currentLocale = LocalizationController_1.LocalizationController.getInstance().getLocaleInteger();
        var found = false;
        for (var i in repositionComponents) {
          var reposition = repositionComponents[i];
          if (reposition.getLocale() == currentLocale) {
            this.label.node.setPositionX(this.mPosition.x + reposition.getOffsetX());
            this.label.node.setPositionY(this.mPosition.y + reposition.getOffsetY());
            reposition.getFontSize() && (this.label.fontSize = reposition.getFontSize());
            reposition.getLineHeight() >= 0 && (this.label.lineHeight = reposition.getLineHeight());
            found = true;
            break;
          }
        }
        if (!found) {
          this.label.node.setPosition(this.mPosition);
          this.label.fontSize = this.mFontSize;
        }
      };
      LocalizationComponent.prototype.setValues = function(key, params) {
        this.mKey = key;
        this.mParams = params;
        this.label.string = LocalizationController_1.LocalizationController.getInstance().LocalizedString(this.mKey, this.mParams);
      };
      __decorate([ property(cc.Label) ], LocalizationComponent.prototype, "label", void 0);
      LocalizationComponent = __decorate([ ccclass ], LocalizationComponent);
      return LocalizationComponent;
    }(cc.Component);
    exports.default = LocalizationComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/LocalizationController": "LocalizationController",
    "./LocalizationRepositionComponent": "LocalizationRepositionComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  LocalizationController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "53a1fX6LVZHZJJ1OECujBjB", "LocalizationController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var LanguageTypes;
    (function(LanguageTypes) {
      LanguageTypes[LanguageTypes["ENGLISH"] = 0] = "ENGLISH";
      LanguageTypes[LanguageTypes["BAHASA"] = 1] = "BAHASA";
      LanguageTypes[LanguageTypes["FRENCH"] = 2] = "FRENCH";
      LanguageTypes[LanguageTypes["ARABIC"] = 3] = "ARABIC";
      LanguageTypes[LanguageTypes["SPANISH"] = 4] = "SPANISH";
    })(LanguageTypes = exports.LanguageTypes || (exports.LanguageTypes = {}));
    var LocalizationController = function() {
      function LocalizationController() {
        this.mVibrateDuration = 200;
        this.mSoundsEnabled = true;
        this.mVibrateEnabled = true;
        this.mMusicEnabled = true;
        this.mLanguages = [ "English", "Bahasa", "French", "Arabic", "Spanish" ];
        this.mPersistantNodeComponent = null;
        LocalizationController.sInstance = this;
      }
      LocalizationController.getInstance = function() {
        if (LocalizationController.sInstance) return LocalizationController.sInstance;
        LocalizationController.sInstance = new LocalizationController();
        LocalizationController.sInstance.LocalizedStringLoadCheck();
        return LocalizationController.sInstance;
      };
      LocalizationController.prototype.getLocaleInteger = function() {
        return LocalizationController.locale;
      };
      LocalizationController.prototype.getLocaleString = function() {
        return this.mLanguages[LocalizationController.locale];
      };
      LocalizationController.prototype.getLocaleByIndex = function(index) {
        return this.mLanguages[index];
      };
      LocalizationController.prototype.readLocaleDataFromFile = function(fileName, fallback) {
        void 0 === fallback && (fallback = false);
        var self = this;
        cc.loader.loadRes("Localization/" + fileName, function(err, data) {
          if (!err) {
            var arr = data.Strings;
            for (var i in arr) arr[i][1].length > 0 && (fallback ? LocalizationController.sEnglishStrings[arr[i][0]] = arr[i][1] : LocalizationController.sLocalizedStrings[arr[i][0]] = arr[i][1]);
            self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_LOCALE_CHANGE);
          }
        });
      };
      LocalizationController.prototype.LocalizedFileName = function() {
        var fileName = "";
        switch (LocalizationController.locale) {
         case 0:
          fileName = "Localized_en";
          break;

         case 1:
          fileName = "Localized_ba";
          break;

         case 2:
          fileName = "Localized_fr";
          break;

         case 3:
          fileName = "Localized_ar";
          break;

         case 4:
          fileName = "Localized_sp";
          break;

         default:
          fileName = "Localized_en";
        }
        return fileName;
      };
      LocalizationController.prototype.LocalizedStringLoadCheck = function() {
        var fileName = this.LocalizedFileName();
        0 == Object.keys(LocalizationController.sLocalizedStrings).length && this.readLocaleDataFromFile(fileName);
        0 == Object.keys(LocalizationController.sEnglishStrings).length && this.readLocaleDataFromFile("Localized_en", true);
      };
      LocalizationController.prototype.changeLocale = function(newLocale) {
        LocalizationController.locale = newLocale;
        cc.sys.localStorage.setItem("locale", newLocale);
        LocalizationController.sLocalizedStrings = {};
        LocalizationController.sInstance = null;
        LocalizationController.getInstance();
        var persistantNode = cc.find("PersistantNode");
        LocalizationController.getInstance().initialize(persistantNode.getComponent(PersistantNodeComponent_1.default));
      };
      LocalizationController.prototype.rawLocalizedString = function(key) {
        if (key in LocalizationController.sLocalizedStrings) return LocalizationController.sLocalizedStrings[key];
        if (key in LocalizationController.sEnglishStrings) return LocalizationController.sEnglishStrings[key];
        if ("#" != key.charAt(0)) return key;
        return "%" + key + "%";
      };
      LocalizationController.prototype.LocalizedString = function(key, params) {
        var raw = this.rawLocalizedString(key);
        if (params) {
          var tokens = Object.keys(params);
          for (var i in tokens) raw = raw.replace("%" + tokens[i] + "%", params[tokens[i]]);
        }
        return raw;
      };
      LocalizationController.prototype.getLocalizationString = function(key) {
        return this.LocalizedString(key, null);
      };
      LocalizationController.prototype.initialize = function(persistantNodeComponent) {
        this.mPersistantNodeComponent = persistantNodeComponent;
      };
      LocalizationController.locale = 0;
      LocalizationController.sLocalizedStrings = {};
      LocalizationController.sEnglishStrings = {};
      return LocalizationController;
    }();
    exports.LocalizationController = LocalizationController;
    cc._RF.pop();
  }, {
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Constants": "Constants"
  } ],
  LocalizationRepositionComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a643ExT+hNALxLcdiosc77", "LocalizationRepositionComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LocalizationRepositionComponent = function(_super) {
      __extends(LocalizationRepositionComponent, _super);
      function LocalizationRepositionComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.locale = 0;
        _this.positionOffsetX = 0;
        _this.positionOffsetY = 0;
        _this.fontSize = 0;
        _this.lineHeight = -1;
        return _this;
      }
      LocalizationRepositionComponent.prototype.setValues = function(locale, offsetX, offsetY, font, lineHgt) {
        this.locale = locale;
        this.positionOffsetX = offsetX;
        this.positionOffsetY = offsetY;
        this.fontSize = font;
        lineHgt && (this.lineHeight = lineHgt);
      };
      LocalizationRepositionComponent.prototype.onLoad = function() {};
      LocalizationRepositionComponent.prototype.getLocale = function() {
        return this.locale;
      };
      LocalizationRepositionComponent.prototype.getOffsetX = function() {
        return this.positionOffsetX;
      };
      LocalizationRepositionComponent.prototype.getOffsetY = function() {
        return this.positionOffsetY;
      };
      LocalizationRepositionComponent.prototype.getFontSize = function() {
        return this.fontSize;
      };
      LocalizationRepositionComponent.prototype.getLineHeight = function() {
        return this.lineHeight;
      };
      LocalizationRepositionComponent.prototype.onDestroy = function() {};
      __decorate([ property(cc.Integer) ], LocalizationRepositionComponent.prototype, "locale", void 0);
      __decorate([ property(cc.Integer) ], LocalizationRepositionComponent.prototype, "positionOffsetX", void 0);
      __decorate([ property(cc.Integer) ], LocalizationRepositionComponent.prototype, "positionOffsetY", void 0);
      __decorate([ property(cc.Integer) ], LocalizationRepositionComponent.prototype, "fontSize", void 0);
      __decorate([ property(cc.Integer) ], LocalizationRepositionComponent.prototype, "lineHeight", void 0);
      LocalizationRepositionComponent = __decorate([ ccclass ], LocalizationRepositionComponent);
      return LocalizationRepositionComponent;
    }(cc.Component);
    exports.default = LocalizationRepositionComponent;
    cc._RF.pop();
  }, {} ],
  Logger: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff881RtWvREMJHbyZlaw40x", "Logger");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger = function() {
      function Logger(key, loggingEnabled) {
        this.mKey = key;
        this.mLoggingEnabled = loggingEnabled;
      }
      Logger.prototype.Log = function(message) {
        this.mLoggingEnabled && console.log(this.mKey + " : " + message);
      };
      return Logger;
    }();
    exports.Logger = Logger;
    cc._RF.pop();
  }, {} ],
  MessageFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f3633nJF5RMdoE798Usbk8G", "MessageFactory");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var InMessages_1 = require("./InMessages");
    var Logger_1 = require("../Generic/Logger");
    var MessageFactory = function() {
      function MessageFactory() {}
      MessageFactory.decode = function(message) {
        if ("RA" == message.getMI()) return new InMessages_1.RoomJoinAck(message);
        if ("RK" == message.getMI()) return new InMessages_1.ReconnectAck(message);
        if ("DRA" == message.getMI()) return new InMessages_1.DiceRollAck(message);
        if ("BC" == message.getMI()) return new InMessages_1.BootCollect(message);
        if ("PPA" == message.getMI()) return new InMessages_1.PawnMovementAck(message);
        if ("RE" == message.getMI()) return new InMessages_1.RoomJoinUpdate(message);
        if ("CK" == message.getMI()) return new InMessages_1.CloseAck(message);
        if ("FK" == message.getMI()) return new InMessages_1.ForceKick(message);
        if ("RU" == message.getMI()) {
          var pt = message.getMP().PT;
          if (8 == pt) return new InMessages_1.JoinTableUpdate(message);
          if (13 == pt) return new InMessages_1.CountDownStart(message);
          if (9 == pt) return new InMessages_1.UserLeave(message);
          if (42 == pt) return new InMessages_1.PlayerInfoUpdate(message);
        } else {
          if ("AP" == message.getMI()) return new InMessages_1.AutoPlayUpdate(message);
          if ("HB" == message.getMI()) return new InMessages_1.HeartBeat(message);
          if ("GE" == message.getMI()) return new InMessages_1.GameEnd(message);
          if ("SO" == message.getMI()) return new InMessages_1.SocialInPacket(message);
          if ("SUP" == message.getMI()) return new InMessages_1.SurveyPopupPacket(message);
          if ("RP" == message.getMI()) return new InMessages_1.RejoinPacket(message);
        }
        MessageFactory.sLogger.Log("Unsupported message.. " + JSON.stringify(message));
        return null;
      };
      MessageFactory.sLogger = new Logger_1.Logger("MessageFactory", true);
      return MessageFactory;
    }();
    exports.MessageFactory = MessageFactory;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "./InMessages": "InMessages"
  } ],
  Message: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d892atm2lDeb505cFsHCPH", "Message");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Message = function() {
      function Message(data) {
        this.raw = data;
        this.MI = data.MI;
        this.MP = data.MP;
        this.HD = data.HD;
        this.UR = data.UR;
        this.PY = data.PY;
      }
      Message.prototype.getRaw = function() {
        return this.raw;
      };
      Message.prototype.getMI = function() {
        return this.MI;
      };
      Message.prototype.getMP = function() {
        return this.MP;
      };
      Message.prototype.getHD = function() {
        return this.HD;
      };
      Message.prototype.getUR = function() {
        return this.UR;
      };
      Message.prototype.getPY = function() {
        return this.PY;
      };
      return Message;
    }();
    exports.Message = Message;
    var ConnectionReady = function(_super) {
      __extends(ConnectionReady, _super);
      function ConnectionReady() {
        var _this = _super.call(this, {}) || this;
        _this.state = "ready";
        return _this;
      }
      ConnectionReady.prototype.toString = function() {
        return "ConnectionReady";
      };
      return ConnectionReady;
    }(Message);
    exports.ConnectionReady = ConnectionReady;
    var ConnectionLost = function(_super) {
      __extends(ConnectionLost, _super);
      function ConnectionLost() {
        var _this = _super.call(this, {}) || this;
        _this.state = "lost";
        return _this;
      }
      ConnectionLost.prototype.toString = function() {
        return "ConnectionLost";
      };
      return ConnectionLost;
    }(Message);
    exports.ConnectionLost = ConnectionLost;
    var ConnectionFailed = function(_super) {
      __extends(ConnectionFailed, _super);
      function ConnectionFailed() {
        var _this = _super.call(this, {}) || this;
        _this.state = "failed";
        return _this;
      }
      ConnectionFailed.prototype.toString = function() {
        return "ConnectionFailed";
      };
      return ConnectionFailed;
    }(Message);
    exports.ConnectionFailed = ConnectionFailed;
    cc._RF.pop();
  }, {} ],
  NetworkController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b7cb0088IFO7Y0USl/kepUB", "NetworkController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ReconnectingWebSocket = function() {
      function ReconnectingWebSocket(url, protocols) {
        void 0 === protocols && (protocols = []);
        this.debug = false;
        this.reconnectInterval = 1e3;
        this.timeoutInterval = 2e3;
        this.forcedClose = false;
        this.timedOut = false;
        this.protocols = [];
        this.onopen = function(event) {};
        this.onclose = function(event) {};
        this.onconnecting = function() {};
        this.onmessage = function(event) {};
        this.onerror = function(event) {};
        this.url = url;
        this.protocols = protocols;
        this.readyState = WebSocket.CONNECTING;
        this.connect(false);
      }
      ReconnectingWebSocket.prototype.connect = function(reconnectAttempt) {
        var _this = this;
        this.ws = new WebSocket(this.url, this.protocols);
        this.onconnecting();
        this.log("ReconnectingWebSocket", "attempt-connect", this.url);
        var localWs = this.ws;
        var timeout = setTimeout(function() {
          _this.log("ReconnectingWebSocket", "connection-timeout", _this.url);
          _this.timedOut = true;
          localWs.close();
          _this.timedOut = false;
        }, this.timeoutInterval);
        this.ws.onopen = function(event) {
          clearTimeout(timeout);
          _this.log("ReconnectingWebSocket", "onopen", _this.url);
          _this.readyState = WebSocket.OPEN;
          reconnectAttempt = false;
          _this.onopen(event);
        };
        this.ws.onclose = function(event) {
          clearTimeout(timeout);
          _this.ws = null;
          if (_this.forcedClose) {
            _this.readyState = WebSocket.CLOSED;
            _this.onclose(event);
          } else {
            _this.readyState = WebSocket.CONNECTING;
            _this.onconnecting();
            if (!reconnectAttempt && !_this.timedOut) {
              _this.log("ReconnectingWebSocket", "onclose", _this.url);
              _this.onclose(event);
            }
            setTimeout(function() {
              _this.connect(true);
            }, _this.reconnectInterval);
          }
        };
        this.ws.onmessage = function(event) {
          _this.log("ReconnectingWebSocket", "onmessage", _this.url, event.data);
          _this.onmessage(event);
        };
        this.ws.onerror = function(event) {
          _this.log("ReconnectingWebSocket", "onerror", _this.url, event);
          _this.onerror(event);
        };
      };
      ReconnectingWebSocket.prototype.send = function(data) {
        if (this.ws) {
          this.log("ReconnectingWebSocket", "send", this.url, data);
          return this.ws.send(data);
        }
        throw "INVALID_STATE_ERR : Pausing to reconnect websocket";
      };
      ReconnectingWebSocket.prototype.close = function() {
        if (this.ws) {
          this.forcedClose = true;
          this.ws.close();
          return true;
        }
        return false;
      };
      ReconnectingWebSocket.prototype.refresh = function() {
        if (this.ws) {
          this.ws.close();
          return true;
        }
        return false;
      };
      ReconnectingWebSocket.prototype.log = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        (this.debug || ReconnectingWebSocket.debugAll) && console.debug.apply(console, args);
      };
      ReconnectingWebSocket.debugAll = false;
      return ReconnectingWebSocket;
    }();
    exports.ReconnectingWebSocket = ReconnectingWebSocket;
    cc._RF.pop();
  }, {} ],
  NewRankPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bf984hZQN9JdpgwaUhhXtVq", "NewRankPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BadgeComponent_1 = require("./BadgeComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var Helper_1 = require("../Generic/Helper");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var ActionPlayConfettiAnimation_1 = require("../Actions/ActionPlayConfettiAnimation");
    var ActionPlayLobbySound_1 = require("../Actions/ActionPlayLobbySound");
    var ActionPlaySound_1 = require("../Actions/ActionPlaySound");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NewRankPopupComponent = function(_super) {
      __extends(NewRankPopupComponent, _super);
      function NewRankPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.badgeComponent = null;
        _this.messageLabel = null;
        _this.diamondAnimation = null;
        _this.mPersistantController = null;
        _this.mConfigurationController = null;
        _this.mActionController = null;
        _this.mShownTime = 0;
        _this.mBadgeUpdated = false;
        return _this;
      }
      NewRankPopupComponent.prototype.start = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mConfigurationController = this.mPersistantController.GetConfigurationController();
        this.mActionController = this.mPersistantController.GetActionController();
        var playerModel = this.mPersistantController.GetPlayerController().getModel();
        var trophies = playerModel.getTrophies();
        var badge = this.mConfigurationController.getBadgeFromTrophies(trophies);
        var badgeName = this.mConfigurationController.getBadgeName(badge);
        var localizedBadgeName = LocalizationController_1.LocalizationController.getInstance().LocalizedString(badgeName, null);
        this.messageLabel.getComponent(LocalizationComponent_1.default).setValues("#RANK_UP_TEXT", {
          rank_num: localizedBadgeName
        });
        this.mActionController.runAction(ActionPlayConfettiAnimation_1.ActionPlayConfettiAnimation.Create(this.confettiSpineNode1, 200, false));
        if (!Helper_1.Helper.isRendererCanvas()) {
          this.mActionController.runAction(ActionPlayLobbySound_1.ActionPlayLobbySound.Create(ActionPlaySound_1.SoundType.BOOM, 200));
          this.mActionController.runAction(ActionPlayLobbySound_1.ActionPlayLobbySound.Create(ActionPlaySound_1.SoundType.WINNER, 200));
        }
        badge == Constants_1.constants.BADGE.DIAMOND ? this.diamondAnimation.node.active = true : this.badgeComponent.showBadge(this.mConfigurationController.getBadgeFromTrophies(playerModel.getTrophies()));
        this.mBadgeUpdated = false;
        this.mShownTime = 0;
      };
      NewRankPopupComponent.prototype.onOkayPressed = function() {
        this.mPersistantController.GetStatsController().count("popup", 1, "close", "rank_promote");
        this.mPersistantController.GetStatsController().count("button", 1, "rank_promote", "yay");
        this.updateStoredBadgeBadge();
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      NewRankPopupComponent.prototype.updateStoredBadgeBadge = function() {
        if (true === this.mBadgeUpdated) return;
        this.mBadgeUpdated = true;
        var playerController = this.mPersistantController.GetPlayerController();
        var playerTrophies = playerController.getModel().getTrophies();
        this.mConfigurationController.updatePlayerBadge(playerTrophies, this.mPersistantController.GetStatsController());
      };
      NewRankPopupComponent.prototype.update = function(dt) {
        this.mShownTime += dt;
        false === this.mBadgeUpdated && this.mShownTime > this.mConfigurationController.getNewBadgeShowTime() && this.updateStoredBadgeBadge();
      };
      NewRankPopupComponent.prototype.onSharePressed = function() {
        var playerController = this.mPersistantController.GetPlayerController();
        var playerName = playerController.getPlayerName();
        var playerPic = playerController.getPhotoUrl();
        var trophies = playerController.getModel().getTrophies();
        var badge = this.mConfigurationController.getBadgeFromTrophies(trophies);
        var badgeName = this.mConfigurationController.getBadgeName(badge);
        var badgeShareName = this.mConfigurationController.getBadgeShareName(badge);
        var localizedBadgeName = LocalizationController_1.LocalizationController.getInstance().LocalizedString(badgeName);
        var localizedBadgeShareName = LocalizationController_1.LocalizationController.getInstance().LocalizedString(badgeShareName);
        if (badge < 1) return;
        var badgeUrl = "Badge" + (badge - 1).toString() + ".png";
        var bgImageUrl = "BG_facebook_share.png";
        Helper_1.Helper.shareNewBadge(localizedBadgeName + ".png", localizedBadgeName, playerName, bgImageUrl, playerPic, badgeUrl, localizedBadgeShareName);
        this.mPersistantController.GetStatsController().count("button", 1, "rank_promote", "share");
      };
      __decorate([ property(BadgeComponent_1.BadgeComponent) ], NewRankPopupComponent.prototype, "badgeComponent", void 0);
      __decorate([ property(cc.Label) ], NewRankPopupComponent.prototype, "messageLabel", void 0);
      __decorate([ property(cc.Animation) ], NewRankPopupComponent.prototype, "diamondAnimation", void 0);
      __decorate([ property(cc.Node) ], NewRankPopupComponent.prototype, "confettiSpineNode1", void 0);
      NewRankPopupComponent = __decorate([ ccclass ], NewRankPopupComponent);
      return NewRankPopupComponent;
    }(cc.Component);
    exports.default = NewRankPopupComponent;
    cc._RF.pop();
  }, {
    "../Actions/ActionPlayConfettiAnimation": "ActionPlayConfettiAnimation",
    "../Actions/ActionPlayLobbySound": "ActionPlayLobbySound",
    "../Actions/ActionPlaySound": "ActionPlaySound",
    "../Constants": "Constants",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "./BadgeComponent": "BadgeComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  NotEnoughCoinsPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3659Xq6T5LwLVNjs5fyJ77", "NotEnoughCoinsPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var ActionHidePlayerSelectionPopup_1 = require("../Actions/ActionHidePlayerSelectionPopup");
    var ActionHideBetSelectionPopup_1 = require("../Actions/ActionHideBetSelectionPopup");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var Constants_1 = require("../Constants");
    var State_1 = require("../states/State");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NotEnoughCoinsPopupComponent = function(_super) {
      __extends(NotEnoughCoinsPopupComponent, _super);
      function NotEnoughCoinsPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.myCoinsLabel = null;
        _this.coinsNeededLabel = null;
        _this.okayButton = null;
        _this.watchAdsButton = null;
        _this.disabledWatchAdsButton = null;
        _this.adsNode = null;
        _this.okayNode = null;
        _this.closeButton = null;
        _this.storeOnlyNode = null;
        _this.adsOnlyNode = null;
        _this.storeAndAdsNode = null;
        _this.storeOnlyButton = null;
        _this.AdsOnlyButton = null;
        _this.AdsOnlyDisabledButton = null;
        _this.storeButton = null;
        _this.mIsLobby = true;
        return _this;
      }
      NotEnoughCoinsPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.mPlayerController = this.mPersistantComponent.GetPlayerController();
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "NotEnoughCoinsPopupComponent", "hidePopup"));
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "NotEnoughCoinsPopupComponent", "hidePopupWithCondition"));
        this.watchAdsButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "NotEnoughCoinsPopupComponent", "watchAds"));
        this.AdsOnlyButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "NotEnoughCoinsPopupComponent", "watchAds"));
        this.disabledWatchAdsButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "NotEnoughCoinsPopupComponent", "disabledButtonPopup"));
        this.AdsOnlyDisabledButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "NotEnoughCoinsPopupComponent", "disabledButtonPopup"));
        this.storeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "NotEnoughCoinsPopupComponent", "onBuyPressed"));
        this.storeOnlyButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "NotEnoughCoinsPopupComponent", "onBuyPressed"));
        this.mStatsController = persistantController.GetStatsController();
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_VIDEO_AVAILABLE_COUNT_CHANGED, this.onAvailableVideoCountChange, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_START, this.resetAdsButton, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_SUCCESS, this.onVideoPreloadSuccess, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_ERROR, this.onVideoPreloadError, this);
      };
      NotEnoughCoinsPopupComponent.prototype.start = function() {
        this.initializeButtons();
        this.mPersistantComponent.GetAdsController().getVideoAvailableCount() <= 0 || !this.mPersistantComponent.GetAdsController().isVideoPreloaded() ? this.disableAdsButton() : this.enableAdsButton();
      };
      NotEnoughCoinsPopupComponent.prototype.setIsLobby = function(isLobby) {
        this.mIsLobby = isLobby;
      };
      NotEnoughCoinsPopupComponent.prototype.getIsLobby = function() {
        return this.mIsLobby;
      };
      NotEnoughCoinsPopupComponent.prototype.disabledButtonPopup = function() {
        this.getIsLobby() && this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_NOT_ENOUGH_COIN_DISABLE_POPUP);
      };
      NotEnoughCoinsPopupComponent.prototype.resetAdsButton = function() {
        this.mPersistantComponent.GetAdsController().getVideoAvailableCount() > 0 && this.mPersistantComponent.GetAdsController().isVideoPreloaded() ? this.enableAdsButton() : this.disableAdsButton();
      };
      NotEnoughCoinsPopupComponent.prototype.watchAds = function() {
        this.hidePopup();
        this.mStatsController.count("button", 1, "ad", "insuf_coins", this.mPersistantComponent.GetAdsController().getVideoAvailableCount() + "");
        this.mPersistantComponent.GetAdsController().initiateRewardedVideoAds("insuf_coins");
      };
      NotEnoughCoinsPopupComponent.prototype.onBuyPressed = function() {
        this.hidePopup();
        this.mIsLobby ? this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_STORE_POPUP) : this.mPersistantComponent.GetStateMachineController().onEvent(State_1.StateEvent.SHOW_STORE_POPUP);
      };
      NotEnoughCoinsPopupComponent.prototype.onVideoPreloadSuccess = function() {
        this.enableAdsButton();
      };
      NotEnoughCoinsPopupComponent.prototype.onVideoPreloadError = function() {
        this.disableAdsButton();
      };
      NotEnoughCoinsPopupComponent.prototype.onAvailableVideoCountChange = function() {
        this.mPersistantComponent.GetAdsController().getVideoAvailableCount() ? this.enableAdsButton() : this.disableAdsButton();
      };
      NotEnoughCoinsPopupComponent.prototype.enableAdsButton = function() {
        this.disabledWatchAdsButton.enabled = false;
        this.disabledWatchAdsButton.node.active = false;
        this.watchAdsButton.enabled = true;
        this.watchAdsButton.node.active = true;
        this.AdsOnlyDisabledButton.enabled = false;
        this.AdsOnlyDisabledButton.node.active = false;
        this.AdsOnlyButton.enabled = true;
        this.AdsOnlyButton.node.active = true;
      };
      NotEnoughCoinsPopupComponent.prototype.disableAdsButton = function() {
        this.disabledWatchAdsButton.enabled = true;
        this.disabledWatchAdsButton.node.active = true;
        this.watchAdsButton.enabled = false;
        this.watchAdsButton.node.active = false;
        this.AdsOnlyDisabledButton.enabled = true;
        this.AdsOnlyDisabledButton.node.active = true;
        this.AdsOnlyButton.enabled = false;
        this.AdsOnlyButton.node.active = false;
      };
      NotEnoughCoinsPopupComponent.prototype.hidePopup = function() {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_STOP_NEXT_BUTTON_SPINNER);
        this.getComponent(PopupComponent_1.default).hidePopup();
        this.mPersistantComponent.GetActionController().runAction(ActionHidePlayerSelectionPopup_1.ActionHidePlayerSelectionPopup.Create());
        this.mPersistantComponent.GetActionController().runAction(ActionHideBetSelectionPopup_1.ActionHideBetSelectionPopup.Create());
      };
      NotEnoughCoinsPopupComponent.prototype.hidePopupWithCondition = function() {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_STOP_NEXT_BUTTON_SPINNER);
        var isBetSelectEnable = this.mPlayerController.getModel().getBetSelectEnabledState();
        if (isBetSelectEnable) {
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_STOP_SPINNER_ON_BET_SELECT_POPUP);
          this.getComponent(PopupComponent_1.default).hidePopup();
        } else {
          this.getComponent(PopupComponent_1.default).hidePopup();
          this.mPersistantComponent.GetActionController().runAction(ActionHidePlayerSelectionPopup_1.ActionHidePlayerSelectionPopup.Create());
        }
      };
      NotEnoughCoinsPopupComponent.prototype.onEnable = function() {
        var player = this.mPlayerController.getModel();
        if (player) {
          this.myCoinsLabel.string = Helper_1.Helper.getLocaleNumber(player.getCoins());
          var localizationComponent = this.coinsNeededLabel.node.getComponent(LocalizationComponent_1.default);
          var betAmount = this.mPlayerController.getBetAmountForBetSelect();
          localizationComponent.setValues("#NEED_COINS_AMOUNT_TEXT", {
            coin_num: Helper_1.Helper.getLocaleNumber(betAmount)
          });
        }
      };
      NotEnoughCoinsPopupComponent.prototype.onDestroy = function() {
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_VIDEO_AVAILABLE_COUNT_CHANGED, this.onAvailableVideoCountChange, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_START, this.resetAdsButton, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_SUCCESS, this.onVideoPreloadSuccess, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_ERROR, this.onVideoPreloadError, this);
      };
      NotEnoughCoinsPopupComponent.prototype.initializeButtons = function() {
        var isAdsEnabled = this.mPersistantComponent.GetAdsController().isRewardedVideoSupported();
        var isStoreEnabled = this.mPersistantComponent.GetPaymentController().isPaymentSupported();
        this.adsOnlyNode.active = isAdsEnabled && !isStoreEnabled;
        this.storeOnlyNode.active = !isAdsEnabled && isStoreEnabled;
        this.okayNode.active = !isAdsEnabled && !isStoreEnabled;
        this.storeAndAdsNode.active = isAdsEnabled && isStoreEnabled;
      };
      __decorate([ property(cc.Label) ], NotEnoughCoinsPopupComponent.prototype, "myCoinsLabel", void 0);
      __decorate([ property(cc.Label) ], NotEnoughCoinsPopupComponent.prototype, "coinsNeededLabel", void 0);
      __decorate([ property(cc.Button) ], NotEnoughCoinsPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Button) ], NotEnoughCoinsPopupComponent.prototype, "watchAdsButton", void 0);
      __decorate([ property(cc.Button) ], NotEnoughCoinsPopupComponent.prototype, "disabledWatchAdsButton", void 0);
      __decorate([ property(cc.Node) ], NotEnoughCoinsPopupComponent.prototype, "adsNode", void 0);
      __decorate([ property(cc.Node) ], NotEnoughCoinsPopupComponent.prototype, "okayNode", void 0);
      __decorate([ property(cc.Button) ], NotEnoughCoinsPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Node) ], NotEnoughCoinsPopupComponent.prototype, "storeOnlyNode", void 0);
      __decorate([ property(cc.Node) ], NotEnoughCoinsPopupComponent.prototype, "adsOnlyNode", void 0);
      __decorate([ property(cc.Node) ], NotEnoughCoinsPopupComponent.prototype, "storeAndAdsNode", void 0);
      __decorate([ property(cc.Button) ], NotEnoughCoinsPopupComponent.prototype, "storeOnlyButton", void 0);
      __decorate([ property(cc.Button) ], NotEnoughCoinsPopupComponent.prototype, "AdsOnlyButton", void 0);
      __decorate([ property(cc.Button) ], NotEnoughCoinsPopupComponent.prototype, "AdsOnlyDisabledButton", void 0);
      __decorate([ property(cc.Button) ], NotEnoughCoinsPopupComponent.prototype, "storeButton", void 0);
      NotEnoughCoinsPopupComponent = __decorate([ ccclass ], NotEnoughCoinsPopupComponent);
      return NotEnoughCoinsPopupComponent;
    }(cc.Component);
    exports.default = NotEnoughCoinsPopupComponent;
    cc._RF.pop();
  }, {
    "../Actions/ActionHideBetSelectionPopup": "ActionHideBetSelectionPopup",
    "../Actions/ActionHidePlayerSelectionPopup": "ActionHidePlayerSelectionPopup",
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../states/State": "State",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  OutMessages: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8e28Tq4W9L/5wnnQinlbk4", "OutMessages");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Message_1 = require("../Generic/Message");
    var RoomJoin = function(_super) {
      __extends(RoomJoin, _super);
      function RoomJoin(playerId, name, receipt, is4Player, skipRoomId, betAmount, isPrivate, privateRoomId) {
        var _this = this;
        var obj = {
          MI: "jr",
          MP: {
            UI: "1001742127007",
            AT: "1001742127007-1517572661584|98ee5cfff3dc4e794aeaf53aa214af42713848eb",
            FN: "Ankish",
            RT: 1,
            GID: 1,
            MID: 1,
            BAMT: 500,
            CL: 2,
            LL: 1,
            VI: "2-IOS",
            TE: "wifi",
            CE: 352
          }
        };
        obj.MP.UI = playerId;
        obj.MP.FN = name;
        obj.MP.AT = receipt;
        betAmount && (obj.MP.BAMT = betAmount);
        "" != skipRoomId && (obj.MP.SP = skipRoomId);
        is4Player && (obj.MP.GID = 3);
        isPrivate && (obj.MP.GID = 4);
        privateRoomId && (obj.MP.RI = privateRoomId);
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return RoomJoin;
    }(Message_1.Message);
    exports.RoomJoin = RoomJoin;
    var UpdateDetails = function(_super) {
      __extends(UpdateDetails, _super);
      function UpdateDetails(playerId, powerupEnabled) {
        var _this = this;
        var obj = {
          MI: "ud",
          MP: {
            UI: "1001742127007",
            PE: false
          }
        };
        obj.MP.UI = playerId;
        obj.MP.PE = powerupEnabled;
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return UpdateDetails;
    }(Message_1.Message);
    exports.UpdateDetails = UpdateDetails;
    var PrivateRoomJoin = function(_super) {
      __extends(PrivateRoomJoin, _super);
      function PrivateRoomJoin(playerId, name, receipt, privateRoomId) {
        var _this = this;
        var obj = {
          MI: "jr",
          MP: {
            UI: "1001742127007",
            AT: "1001742127007-1517572661584|98ee5cfff3dc4e794aeaf53aa214af42713848eb",
            FN: "Ankish",
            RT: 1,
            GID: 4,
            MID: 1,
            BAMT: 500,
            CL: 2,
            LL: 1,
            VI: "2-IOS",
            TE: "wifi",
            CE: 352
          }
        };
        obj.MP.UI = playerId;
        obj.MP.FN = name;
        obj.MP.AT = receipt;
        obj.MP.RI = privateRoomId;
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return PrivateRoomJoin;
    }(Message_1.Message);
    exports.PrivateRoomJoin = PrivateRoomJoin;
    var GameStart = function(_super) {
      __extends(GameStart, _super);
      function GameStart() {
        var _this = this;
        var obj = {
          RI: "nj741100k",
          II: "",
          MI: "ia",
          MP: {
            PT: 33,
            IR: false
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return GameStart;
    }(Message_1.Message);
    exports.GameStart = GameStart;
    var LeaveGame = function(_super) {
      __extends(LeaveGame, _super);
      function LeaveGame(playerId, roomId, sessionKey) {
        var _this = this;
        var obj = {
          MI: "cl",
          MP: {
            UI: "1001742127007",
            SK: "test",
            RI: "bGt113000ekH01"
          }
        };
        obj.MP.UI = playerId;
        obj.MP.RI = roomId;
        obj.MP.SK = sessionKey;
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return LeaveGame;
    }(Message_1.Message);
    exports.LeaveGame = LeaveGame;
    var ResetTimer = function(_super) {
      __extends(ResetTimer, _super);
      function ResetTimer() {
        var _this = this;
        var obj = {
          RI: "",
          II: "",
          MI: "ia",
          MP: {
            PT: 40
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return ResetTimer;
    }(Message_1.Message);
    exports.ResetTimer = ResetTimer;
    var PrivateRoomCreate = function(_super) {
      __extends(PrivateRoomCreate, _super);
      function PrivateRoomCreate(playerId, name, receipt, is4Player) {
        var _this = this;
        var obj = obj = {
          MI: "jr",
          MP: {
            UI: "1001742127007",
            AT: "1001742127007-1518441545232|96a544be849cc5faf1a80490c86e21e6e3a6cfd9",
            FN: "Ankish",
            CP: true,
            CO: {
              max_blind: "875378226",
              no_limit: false,
              fast_table: true,
              boot_amount: "4771074746621440578",
              pot_limit: "4769361712136798765",
              max_chaal: "4702377281996402758",
              room_type: 1278160965,
              GID: 4,
              MID: 1,
              BAMT: 500,
              CL: 3144704
            },
            VI: "2-IOS"
          }
        };
        obj.MP.UI = playerId;
        obj.MP.FN = name;
        obj.MP.AT = receipt;
        is4Player && (obj.MP.GID = 3);
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return PrivateRoomCreate;
    }(Message_1.Message);
    exports.PrivateRoomCreate = PrivateRoomCreate;
    var RollDice = function(_super) {
      __extends(RollDice, _super);
      function RollDice(powerup_id) {
        var _this = this;
        var obj = {
          RI: "",
          II: "",
          MI: "ia",
          MP: {
            PT: 1,
            PUI: powerup_id
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return RollDice;
    }(Message_1.Message);
    exports.RollDice = RollDice;
    var AutoPlayOff = function(_super) {
      __extends(AutoPlayOff, _super);
      function AutoPlayOff() {
        var _this = this;
        var obj = {
          RI: "",
          II: "",
          MI: "ia",
          MP: {
            PT: 38,
            AP: false
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return AutoPlayOff;
    }(Message_1.Message);
    exports.AutoPlayOff = AutoPlayOff;
    var PawnPress = function(_super) {
      __extends(PawnPress, _super);
      function PawnPress(roomId, instanceId, userIndex, pawnIndex) {
        var _this = this;
        var obj = {
          RI: "GXg11300K",
          II: "GXg11300K4/V01",
          MI: "ia",
          MP: {
            PT: 0,
            HR: true,
            AM: 0x600000c62f20,
            PPI: 1,
            MCT: 0
          }
        };
        obj.RI = roomId;
        obj.II = instanceId;
        obj.MP.PPI = pawnIndex;
        obj.MP.AM = userIndex;
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return PawnPress;
    }(Message_1.Message);
    exports.PawnPress = PawnPress;
    var DebugDiceRequest = function(_super) {
      __extends(DebugDiceRequest, _super);
      function DebugDiceRequest(dice, roomId, instanceId) {
        var _this = this;
        var obj = {
          RI: "zWm112000",
          II: "zWm112000g+z01",
          MI: "ia",
          MP: {
            PT: 35,
            MCT: 5
          }
        };
        obj.RI = roomId;
        obj.II = instanceId;
        obj.MP.MCT = dice;
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return DebugDiceRequest;
    }(Message_1.Message);
    exports.DebugDiceRequest = DebugDiceRequest;
    var Reconnect = function(_super) {
      __extends(Reconnect, _super);
      function Reconnect(pid, sessionKey, roomId, instanceId) {
        var _this = this;
        var obj = {
          MI: "rc",
          MP: {
            UI: pid,
            SK: sessionKey,
            RI: roomId,
            II: instanceId
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return Reconnect;
    }(Message_1.Message);
    exports.Reconnect = Reconnect;
    var SocialOutPacket = function(_super) {
      __extends(SocialOutPacket, _super);
      function SocialOutPacket(roomId, messages) {
        var _this = this;
        var obj = {
          MI: "SO",
          MP: {
            PI: "",
            RI: roomId,
            FM: false,
            SMS: messages
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return SocialOutPacket;
    }(Message_1.Message);
    exports.SocialOutPacket = SocialOutPacket;
    var InvitePacket = function(_super) {
      __extends(InvitePacket, _super);
      function InvitePacket(pid, roomId, contextId) {
        var _this = this;
        var obj = {
          MI: "IN",
          MP: {
            UI: pid,
            RI: roomId,
            CTXID: contextId
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return InvitePacket;
    }(Message_1.Message);
    exports.InvitePacket = InvitePacket;
    var PlayerInfoUpdatePacket = function(_super) {
      __extends(PlayerInfoUpdatePacket, _super);
      function PlayerInfoUpdatePacket(roomId, instanceId, profileUrl) {
        var _this = this;
        var obj = {
          RI: roomId,
          II: instanceId,
          MI: "ia",
          MP: {
            PT: 42,
            SPU: profileUrl
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return PlayerInfoUpdatePacket;
    }(Message_1.Message);
    exports.PlayerInfoUpdatePacket = PlayerInfoUpdatePacket;
    cc._RF.pop();
  }, {
    "../Generic/Message": "Message"
  } ],
  OverlayComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "826877ah2lPEY/+NR8oRLTB", "OverlayComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PopupComponent_1 = require("./PopupComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var OverlayComponent = function(_super) {
      __extends(OverlayComponent, _super);
      function OverlayComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.closeOnTap = false;
        _this.overlay = null;
        return _this;
      }
      OverlayComponent.prototype.start = function() {
        this.overlay.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnded.bind(this));
      };
      OverlayComponent.prototype.onTouchEnded = function(event) {
        var popupComponent = this.node.getComponent(PopupComponent_1.default);
        if (!this.closeOnTap) return;
        if (popupComponent) {
          var nodeSpaceLocation = this.node.parent.convertToNodeSpace(event.currentTouch._point);
          cc.rectContainsPoint(this.node.getBoundingBox(), nodeSpaceLocation) || popupComponent.hidePopup();
        }
      };
      OverlayComponent.prototype.onDestroy = function() {
        this.overlay && this.overlay.node && this.overlay.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEnded, this);
      };
      OverlayComponent.prototype.setCloseOnTap = function(val) {
        this.closeOnTap = val;
      };
      __decorate([ property ], OverlayComponent.prototype, "closeOnTap", void 0);
      __decorate([ property(cc.Sprite) ], OverlayComponent.prototype, "overlay", void 0);
      OverlayComponent = __decorate([ ccclass ], OverlayComponent);
      return OverlayComponent;
    }(cc.Component);
    exports.default = OverlayComponent;
    cc._RF.pop();
  }, {
    "./PopupComponent": "PopupComponent"
  } ],
  PawnComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "08730pVLP1GNZx6RdKQ386l", "PawnComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PawnComponent = function(_super) {
      __extends(PawnComponent, _super);
      function PawnComponent() {
        var _this = _super.call(this) || this;
        _this.pawn = null;
        _this.wheel = null;
        _this.wheelAnimDuration = .3;
        _this.mUserIndex = -1;
        _this.mCellIndex = -1;
        _this.mPawnIndex = -1;
        return _this;
      }
      PawnComponent.prototype.onLoad = function() {
        this.wheel.active = false;
      };
      PawnComponent.prototype.initialize = function(uIndex, cIndex, pIndex) {
        this.mUserIndex = uIndex;
        this.mCellIndex = cIndex;
        this.mPawnIndex = pIndex;
      };
      PawnComponent.prototype.setCellIndex = function(cIndex) {
        this.mCellIndex = cIndex;
      };
      PawnComponent.prototype.startHighlight = function() {
        var scale1 = cc.scaleTo(.15, 1, 1.25);
        var scale2 = cc.scaleTo(.15, 1, 1);
        var delay1 = cc.delayTime(.1);
        var scale3 = cc.scaleTo(.15, 1, 1.08);
        var scale4 = cc.scaleTo(.15, 1, 1);
        var delay2 = cc.delayTime(.1);
        var seqAnimation = cc.sequence(scale1, scale2, delay1, scale3, scale4, delay2);
        var foreverAnimation = cc.repeatForever(seqAnimation);
        this.pawn.runAction(foreverAnimation);
        this.wheel.active = true;
        var rotate = cc.rotateBy(this.wheelAnimDuration, 90, 90);
        var foreverRotateAnimation = cc.repeatForever(rotate);
        this.wheel.runAction(foreverRotateAnimation);
      };
      PawnComponent.prototype.stopHighlight = function() {
        if (!this.pawn || !this.wheel) return;
        this.pawn.stopAllActions();
        this.wheel.stopAllActions();
        this.pawn.setScale(1, 1);
        this.wheel.rotation = 0;
        this.wheel.active = false;
      };
      PawnComponent.prototype.getUserIndex = function() {
        return this.mUserIndex;
      };
      PawnComponent.prototype.getCellIndex = function() {
        return this.mCellIndex;
      };
      PawnComponent.prototype.getPawnIndex = function() {
        return this.mPawnIndex;
      };
      PawnComponent.prototype.hidePawn = function() {
        this.pawn.active = false;
        this.wheel.active = false;
      };
      PawnComponent.prototype.getStartPosition = function() {
        return 13 * this.mUserIndex + 1;
      };
      PawnComponent.prototype.getRelativeCellIndex = function() {
        if (this.mCellIndex < 0) return this.mCellIndex;
        if (this.mCellIndex > 51) return this.mCellIndex;
        var offset = this.mCellIndex - this.getStartPosition();
        var index = (offset + 52) % 52;
        return index;
      };
      __decorate([ property(cc.Node) ], PawnComponent.prototype, "pawn", void 0);
      __decorate([ property(cc.Node) ], PawnComponent.prototype, "wheel", void 0);
      __decorate([ property(cc.Integer) ], PawnComponent.prototype, "wheelAnimDuration", void 0);
      PawnComponent = __decorate([ ccclass ], PawnComponent);
      return PawnComponent;
    }(cc.Component);
    exports.default = PawnComponent;
    cc._RF.pop();
  }, {} ],
  PawnsContainerComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c80a5d4WOVMEb5+4z9vAwsV", "PawnsContainerComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PawnComponent_1 = require("./PawnComponent");
    var Game_1 = require("../models/Game");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var BoardComponent_1 = require("./BoardComponent");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var ActionRepositionPawns_1 = require("../Actions/ActionRepositionPawns");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PawnsContainerComponent = function(_super) {
      __extends(PawnsContainerComponent, _super);
      function PawnsContainerComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.greenPawn = null;
        _this.redPawn = null;
        _this.yellowPawn = null;
        _this.bluePawn = null;
        _this.board = null;
        return _this;
      }
      PawnsContainerComponent.prototype.onLoad = function() {
        this.mPrefabMap = {};
        this.mPawns = {};
        this.mPositionMap = [];
        this.mLogger = new Logger_1.Logger("PawnsContainerComponent", true);
        var persistNode = cc.find("PersistantNode");
        var persistNodeComponent = persistNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantNodeComponent = persistNodeComponent;
        this.mGameController = persistNodeComponent.GetGameController();
        this.mActionController = persistNodeComponent.GetActionController();
        this.mFtueController = persistNodeComponent.getFtueController();
        this.mPrefabMap[Game_1.PawnColor.GREEN] = this.greenPawn;
        this.mPrefabMap[Game_1.PawnColor.RED] = this.redPawn;
        this.mPrefabMap[Game_1.PawnColor.YELLOW] = this.yellowPawn;
        this.mPrefabMap[Game_1.PawnColor.BLUE] = this.bluePawn;
        this.clickPanel.node.on(cc.Node.EventType.TOUCH_END, this.onLayoutClicked.bind(this));
      };
      PawnsContainerComponent.prototype.start = function() {};
      PawnsContainerComponent.prototype.initializePawnsOfPlayer = function(gamePlayer) {
        var playerIndex = gamePlayer.getIndex();
        if (null != this.mPawns[playerIndex]) return;
        this.mPawns[playerIndex] = [];
        var seatIndex = this.mGameController.getSeatIndex(playerIndex);
        this.mLogger.Log("Initialize pIndex : " + playerIndex + " seat index : " + seatIndex);
        for (var index = 0; index < 4; index++) {
          var pawn = cc.instantiate(this.mPrefabMap[playerIndex]);
          var cellIndex = gamePlayer.getPawnPositions()[index];
          this.mPawns[playerIndex].push(pawn.getComponent(PawnComponent_1.default));
          pawn.setPosition(this.getPositionPawn(cellIndex, playerIndex, index));
          var pComponent = pawn.getComponent(PawnComponent_1.default);
          pComponent.initialize(playerIndex, cellIndex, index);
          this.node.addChild(pawn);
        }
      };
      PawnsContainerComponent.prototype.createDummyPawnsForTest = function(cellIndex, numPawns) {
        for (var index = 0; index < numPawns; index++) {
          var pawn = cc.instantiate(this.mPrefabMap[Helper_1.Helper.getRandom(0, 4)]);
          var playerIndex = 1;
          this.mPawns[playerIndex] || (this.mPawns[playerIndex] = []);
          this.mPawns[playerIndex].push(pawn.getComponent(PawnComponent_1.default));
          pawn.setPosition(this.getPositionPawn(cellIndex, playerIndex, 1));
          var pComponent = pawn.getComponent(PawnComponent_1.default);
          pComponent.initialize(playerIndex, cellIndex, index);
          this.node.addChild(pawn);
        }
      };
      PawnsContainerComponent.prototype.getMapKey1 = function(pComponent) {
        return this.getMapKey(pComponent, pComponent.getCellIndex());
      };
      PawnsContainerComponent.prototype.getMapKey = function(pComponent, cellIndex) {
        var key;
        key = -1 == cellIndex ? pComponent.getUserIndex() + "_" + cellIndex : -2 == cellIndex ? pComponent.getUserIndex() + "_" + cellIndex : cellIndex.toString();
        return key;
      };
      PawnsContainerComponent.prototype.getPawnsAtCellByCellIndex = function(cIndex) {
        var pawnsReturn = [];
        var myIndex = this.mGameController.getMyIndex();
        var checkUIndex = false;
        -1 != cIndex && -2 != cIndex || (checkUIndex = true);
        for (var key in this.mPawns) if (this.mPawns.hasOwnProperty(key)) {
          var pawns = this.mPawns[key];
          for (var i = 0; i < pawns.length; i++) pawns[i].getCellIndex() == cIndex && pawns[i].getUserIndex() != myIndex && pawnsReturn.push(pawns[i]);
        }
        return pawnsReturn;
      };
      PawnsContainerComponent.prototype.getPawnsAtCellIndex = function(cIndex, uIndex) {
        var pawnsReturn = [];
        var checkUIndex = false;
        -1 != cIndex && -2 != cIndex || (checkUIndex = true);
        for (var key in this.mPawns) if (this.mPawns.hasOwnProperty(key)) {
          var pawns = this.mPawns[key];
          for (var i = 0; i < pawns.length; i++) if (pawns[i].getCellIndex() == cIndex) {
            if (checkUIndex && pawns[i].getUserIndex() != uIndex) continue;
            pawnsReturn.push(pawns[i]);
          }
        }
        return pawnsReturn;
      };
      PawnsContainerComponent.prototype.getLocalCellIndex = function(cellIndex, playerIndex, pawnIndex) {
        if (cellIndex >= 0) {
          playerIndex = 0;
          pawnIndex = 0;
        }
        return 100 * cellIndex + 10 * playerIndex + pawnIndex;
      };
      PawnsContainerComponent.prototype.getPositionPawn = function(cellIndex, playerIndex, pawnIndex) {
        var localIndex = this.getLocalCellIndex(cellIndex, playerIndex, pawnIndex);
        this.mPositionMap[localIndex] || (this.mPositionMap[localIndex] = this.node.convertToNodeSpaceAR(this.board.getWorldPositionCell(cellIndex, playerIndex, pawnIndex)));
        return this.mPositionMap[localIndex];
      };
      PawnsContainerComponent.prototype.getPawnCurrentPosition = function(pawn) {
        return this.node.convertToNodeSpaceAR(pawn.node.parent.convertToWorldSpaceAR(pawn.node.getPosition()));
      };
      PawnsContainerComponent.prototype.getFirstUserIndex = function() {
        for (var i = 0; i < 4; i++) if (this.mPawns[i]) return i;
        return -1;
      };
      PawnsContainerComponent.prototype.movePawn = function(userIndex, pawnIndex, finalPos) {
        var position = this.getPositionPawn(finalPos, userIndex, pawnIndex);
        var pawn = this.getPawn(userIndex, pawnIndex);
        pawn.node.setPosition(position);
      };
      PawnsContainerComponent.prototype.getPawn = function(userIndex, pawnIndex) {
        return this.mPawns[userIndex][pawnIndex];
      };
      PawnsContainerComponent.prototype.stopHighlightForUser = function(userIndex) {
        if (this.mPawns[userIndex]) for (var k = 0; k < this.mPawns[userIndex].length; k++) this.mPawns[userIndex][k] && this.mPawns[userIndex][k].stopHighlight();
      };
      PawnsContainerComponent.prototype.getNearestPawnIndex = function(loc, highlightedPawns) {
        var myIndex = this.mGameController.getMyIndex();
        var mPawns = this.mPawns[myIndex];
        var minDist = 75;
        var resultIndex = -1;
        if (mPawns) for (var i = 0; i < highlightedPawns.length; i++) {
          var pawnComponent = mPawns[highlightedPawns[i]];
          var dist = pawnComponent.node.getPosition().sub(loc).mag();
          if (dist < minDist) {
            minDist = dist;
            resultIndex = highlightedPawns[i];
          }
        }
        return resultIndex;
      };
      PawnsContainerComponent.prototype.onLayoutClicked = function(event) {
        var loc = event.touch.getLocation();
        var locInNode = this.node.convertToNodeSpaceAR(loc);
        this.mLogger.Log("Touched at " + loc.x + " " + loc.y);
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_FTUE_CLEAR);
        this.mGameController.hideFtue();
        if (this.mGameController.shouldListenClicks()) {
          var highlightedPawns = this.mGameController.getHighlightedPawns();
          var pawnIndex = this.getNearestPawnIndex(locInNode, highlightedPawns);
          -1 != pawnIndex && this.mGameController.progressPawn(pawnIndex);
        }
      };
      PawnsContainerComponent.prototype.getPawnsMap = function() {
        return this.mPawns;
      };
      PawnsContainerComponent.prototype.respositionAllPawns = function() {
        for (var i = 0; i < 4; i++) if (this.mPawns[i]) for (var j = 0; j < this.mPawns[i].length; j++) this.mActionController.runAction(ActionRepositionPawns_1.ActionRepositionPawns.Create(this.mPawns[i][j].getCellIndex(), i));
      };
      PawnsContainerComponent.prototype.hidePawnsForUser = function(index) {
        var hideAllUserPawns = false;
        this.mGameController.isGameOver() && (hideAllUserPawns = true);
        if (hideAllUserPawns) for (var i in this.mPawns) for (var j = 0; j < this.mPawns[i].length; j++) this.mPawns[i][j].hidePawn(); else if (this.mPawns[index]) {
          for (var k = 0; k < this.mPawns[index].length; k++) this.mPawns[index][k].hidePawn();
          this.mPawns[index] = [];
        }
      };
      PawnsContainerComponent.prototype.addPawnsAll = function() {
        var pos;
        for (var index = 0; index <= 71; index++) {
          pos = this.getPositionPawn(index, 0, 0);
          var pawn = cc.instantiate(this.mPrefabMap[Game_1.PawnColor.RED]);
          pawn.setPosition(pos);
          this.node.addChild(pawn);
        }
        for (var i = 0; i < 4; i++) for (var j = 0; j < 4; j++) {
          pos = this.getPositionPawn(-1, i, j);
          var colorIndex = this.mGameController.getSeatIndex(i);
          var pawn = cc.instantiate(this.mPrefabMap[colorIndex]);
          pawn.setPosition(pos);
          this.node.addChild(pawn);
        }
        for (var i = 0; i < 4; i++) {
          pos = this.getPositionPawn(-2, i, 0);
          var colorIndex = this.mGameController.getSeatIndex(i);
          var pawn = cc.instantiate(this.mPrefabMap[colorIndex]);
          pawn.setPosition(pos);
          this.node.addChild(pawn);
        }
      };
      __decorate([ property(cc.Prefab) ], PawnsContainerComponent.prototype, "greenPawn", void 0);
      __decorate([ property(cc.Prefab) ], PawnsContainerComponent.prototype, "redPawn", void 0);
      __decorate([ property(cc.Prefab) ], PawnsContainerComponent.prototype, "yellowPawn", void 0);
      __decorate([ property(cc.Prefab) ], PawnsContainerComponent.prototype, "bluePawn", void 0);
      __decorate([ property(BoardComponent_1.default) ], PawnsContainerComponent.prototype, "board", void 0);
      __decorate([ property(cc.Layout) ], PawnsContainerComponent.prototype, "clickPanel", void 0);
      __decorate([ property(cc.Sprite) ], PawnsContainerComponent.prototype, "skullSprite", void 0);
      PawnsContainerComponent = __decorate([ ccclass ], PawnsContainerComponent);
      return PawnsContainerComponent;
    }(cc.Component);
    exports.default = PawnsContainerComponent;
    cc._RF.pop();
  }, {
    "../Actions/ActionRepositionPawns": "ActionRepositionPawns",
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../models/Game": "Game",
    "./BoardComponent": "BoardComponent",
    "./PawnComponent": "PawnComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  PaymentController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "20188MFEedNjbOxPOCp/2/F", "PaymentController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var Constants_1 = require("../Constants");
    var Helper_1 = require("../Generic/Helper");
    var PaymentController = function() {
      function PaymentController(persistantNodeComponent) {
        this.mPaymentSupported = false;
        this.mPaymentReady = false;
        this.mCatalogFromFB = {};
        this.mPendingPayments = [];
        this.mStoreConfig = Constants_1.constants.STORE_CONFIG;
        this.mLogger = new Logger_1.Logger("PaymentController", true);
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mPaymentSupported = false;
        this.mPaymentReady = false;
        this.mPlayerController = this.mPersistantNodeComponent.GetPlayerController();
        this.mGetCatalogRetryCnt = 3;
        this.mOnReadyRetryCnt = 3;
        this.mSourceOfPayment = "";
        this.sourceOfPayment();
      }
      PaymentController.prototype.sourceOfPayment = function() {
        cc.sys.os == cc.sys.OS_IOS ? this.mSourceOfPayment = "ios" : cc.sys.os == cc.sys.OS_ANDROID ? this.mSourceOfPayment = "android" : cc.sys.isBrowser && (this.mSourceOfPayment = "facebook.com");
      };
      PaymentController.prototype.setStoreEnabled = function(valueFromServer) {
        this.mStoreEnabled = valueFromServer;
      };
      PaymentController.prototype.isStoreEnabled = function() {
        return this.mStoreEnabled && this.mPaymentSupported;
      };
      PaymentController.prototype.isDeviceIOS = function() {
        return "ios" == this.mSourceOfPayment;
      };
      PaymentController.prototype.paymentCheck = function() {
        var supportedAPIs = FBInstant.getSupportedAPIs();
        this.mLogger.Log("tanisha Supported APIS " + JSON.stringify(supportedAPIs));
        if (null != supportedAPIs && supportedAPIs.toString().indexOf("payments.purchaseAsync") > -1) {
          this.mPaymentSupported = true;
          this.mLogger.Log("tanisha payments.purchaseAsync present");
          this.initPayment();
        } else {
          this.mLogger.Log("tanisha payments.purchaseAsync nooooottt present");
          this.mPaymentSupported = false;
        }
      };
      PaymentController.prototype.isPaymentSupported = function() {
        return this.mPaymentSupported && this.isStoreEnabled();
      };
      PaymentController.prototype.isPaymentReady = function() {
        return this.mPaymentReady && this.isStoreEnabled();
      };
      PaymentController.prototype.getCatalogfromFB = function() {
        var self = this;
        self.mCatalogFromFB = {};
        FBInstant.payments.getCatalogAsync().then(function(catalog) {
          catalog.length >= 1 && (self.mPriceCurrencyCode = catalog[0].priceCurrencyCode);
          for (var itr = 0; itr < catalog.length; itr++) self.mCatalogFromFB[catalog[itr].productID] = catalog[itr].price;
          self.mLogger.Log("tanisha mCatalogFromFB " + JSON.stringify(self.mCatalogFromFB));
        }, function(error) {
          self.mLogger.Log("Tanisha mCatalogFromFB error retrying!" + JSON.stringify(error));
          self.mGetCatalogRetryCnt-- && self.mGetCatalogRetryCnt >= 0 && self.getCatalogfromFB();
        });
      };
      PaymentController.prototype.getCatalogSheet = function() {
        return this.mCatalogFromFB;
      };
      PaymentController.prototype.initPayment = function() {
        var self = this;
        this.mLogger.Log("initPayment() enter");
        if (this.isPaymentSupported()) {
          this.mLogger.Log("initPayment() enter isPaymentSupported() part");
          FBInstant.payments.onReady(function() {
            self.mLogger.Log("Tanisha Payments Ready!");
            self.mPaymentReady = true;
            self.getCatalogfromFB();
            self.checkAndCompletePendingPayment();
          }, function(error) {
            self.mLogger.Log("Tanisha Payments Not Ready!");
            while (self.mOnReadyRetryCnt--) self.initPayment();
          });
        } else this.mLogger.Log("tanisha payment not supported");
      };
      PaymentController.prototype.checkAndCompletePendingPayment = function() {
        var self = this;
        self.mLogger.Log("tanisha getPurchasesAsync enter");
        FBInstant.payments.getPurchasesAsync().then(function(purchases) {
          for (var i = 0; i < purchases.length; i++) {
            self.mStatsController.count("purchase", 1, "unconsumed", purchases[i].productID);
            self.mPendingPayments.push(purchases[i]);
          }
          self.verifyPendingPayment();
        }, function(error) {
          self.mLogger.Log("checkAndCompletePendingPayment fail" + error);
        });
      };
      PaymentController.prototype.verifyPendingPayment = function() {
        this.mPendingPayments.length && this.verifyPurchase(this.mPendingPayments[0]);
      };
      PaymentController.prototype.consumePurchase = function(purchaseToken, datareceipt) {
        var self = this;
        this.mLogger.Log("tanisha consume purchase entry token-" + purchaseToken);
        this.updateReceipt(datareceipt);
        FBInstant.payments.consumePurchaseAsync(purchaseToken).then(function() {
          self.mStatsController.count("purchase", 1, "consumed", datareceipt.package_id);
          self.mLogger.Log("tanisha consumePurchaseAsync Purchase successfully consumed");
          self.mPendingPayments.splice(0, 1);
          self.verifyPendingPayment();
        }).catch(function(error) {
          self.mStatsController.count("purchase", 1, "consume_fail", datareceipt.package_id, JSON.stringify(error));
          self.mLogger.Log("tanisha consumePurchaseAsync Purchase not consumed" + JSON.stringify(error));
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_SPINNER_STOP);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ENABLE_STORE_CLICK);
        });
      };
      PaymentController.prototype.updateReceipt = function(datareceipt) {
        if (datareceipt && datareceipt.result) {
          var packVal;
          for (var idx = 0; idx < Object.keys(this.mStoreConfig.packs).length; idx++) if (this.mStoreConfig.packs[idx].pkg_id == datareceipt.package_id) {
            packVal = this.mStoreConfig.packs[idx];
            break;
          }
          this.mPlayerController.onReceiptFetch(datareceipt.result);
          this.mLogger.Log("tanisha onReceiptFetch " + JSON.stringify(datareceipt.result));
          var grantValue = datareceipt.result.chips ? datareceipt.result.chips : datareceipt.result.gems;
          var grantItem = datareceipt.result.chips ? "chips" : "gems";
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_PURCHASE_SUCCESS, {
            packVal: packVal,
            grantValue: grantValue,
            grantItem: grantItem
          });
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_SPINNER_STOP);
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ENABLE_STORE_CLICK);
        }
      };
      PaymentController.prototype.currencyFormatChange = function(value) {
        return value.replace(/,/g, "_");
      };
      PaymentController.prototype.verifyPurchase = function(purchase) {
        this.mLogger.Log("Tanisha verifying purchase " + purchase);
        var product_id = purchase.productID;
        var params = {
          pid: this.mPlayerController.getModel().getId(),
          access_token: this.mPlayerController.getModel().getAccessToken(),
          duid: this.mPlayerController.getModel().getSnuid(),
          purchaseToken: purchase.purchaseToken,
          dataString: purchase,
          store_payment_method: this.mSourceOfPayment,
          currency: this.mPriceCurrencyCode,
          payment_currency: this.currencyFormatChange(this.mCatalogFromFB[purchase.productID])
        };
        this.mLogger.Log("Tanisha verifying purchase ====" + this.mCatalogFromFB[purchase.productID]);
        var self = this;
        this.mStatsController.count("purchase", 1, "grant_call", product_id);
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/purchase/" + this.mPlayerController.getModel().getId() + "/finish", params, function(d) {
          self.mLogger.Log("tanisha consumePurchaseAsync calling verify done: " + JSON.stringify(d));
          self.mStatsController.count("purchase", 1, "grant_ack", product_id, "success");
          self.consumePurchase(purchase.purchaseToken, d);
        }, function() {
          self.mLogger.Log("tanisha: payment verification error.");
          self.mStatsController.count("purchase", 1, "grant_ack", product_id, "failure", "failure from server");
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_PURCHASE_FAIL);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_SPINNER_STOP);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ENABLE_STORE_CLICK);
        });
      };
      PaymentController.prototype.startPurchase = function(packValue) {
        var self = this;
        if (self.isPaymentReady()) {
          var productId = packValue.pkg_id;
          this.mStatsController.count("purchase", 1, "initiated", packValue.pkg_id, this.mSourceOfPayment);
          FBInstant.payments.purchaseAsync({
            productID: productId,
            developerPayload: "foobar"
          }).then(function(purchase) {
            self.mLogger.Log("tanisha purchase done" + JSON.stringify(purchase));
            Helper_1.Helper.sendFBAnalytics("iap_complete");
            self.verifyPurchase(purchase);
          }).catch(function(error) {
            self.mStatsController.count("purchase", 1, "failure", productId, error.code);
            self.mLogger.Log("tanisha error Purchase" + JSON.stringify(error) + " productid " + productId);
            self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_SPINNER_STOP);
            self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ENABLE_STORE_CLICK);
          });
        } else {
          self.mLogger.Log("Payment not ready! startPurchase else enter");
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_SPINNER_STOP);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ENABLE_STORE_CLICK);
        }
      };
      return PaymentController;
    }();
    exports.PaymentController = PaymentController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger"
  } ],
  PersistantNodeComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02a49EsqFtDfJ36MdLDpq0V", "PersistantNodeComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerController_1 = require("../Controllers/PlayerController");
    var StateMachineController_1 = require("../Controllers/StateMachineController");
    var GameController_1 = require("../Controllers/GameController");
    var ActionController_1 = require("../Controllers/ActionController");
    var SoundController_1 = require("../Controllers/SoundController");
    var LeaderBoardController_1 = require("../Controllers/LeaderBoardController");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var StatsController_1 = require("../Controllers/StatsController");
    var ConfigurationController_1 = require("../Controllers/ConfigurationController");
    var SurveyController_1 = require("../Controllers/SurveyController");
    var ChatBlockController_1 = require("../Controllers/ChatBlockController");
    var LeagueController_1 = require("../Controllers/LeagueController");
    var AdsController_1 = require("../Controllers/AdsController");
    var InterstitialAdController_1 = require("../Controllers/InterstitialAdController");
    var PaymentController_1 = require("../Controllers/PaymentController");
    var RouterController_1 = require("../Controllers/RouterController");
    var BotSubscribtionController_1 = require("../Controllers/BotSubscribtionController");
    var FtueController_1 = require("../Controllers/FtueController");
    var ReferralController_1 = require("../Controllers/ReferralController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PersistantNodeComponent = function(_super) {
      __extends(PersistantNodeComponent, _super);
      function PersistantNodeComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mConfigurationController = null;
        _this.mPlayerController = null;
        _this.mStateMachineController = null;
        _this.mGameController = null;
        _this.mActionController = null;
        _this.mSoundController = null;
        _this.mLeaderBoardController = null;
        _this.mLocalizationController = null;
        _this.mExperimentController = null;
        _this.mChatBlockController = null;
        _this.mSurveyController = null;
        _this.mStatsController = null;
        _this.mLeagueController = null;
        _this.mRouterController = null;
        _this.mProfilePicSprite = null;
        _this.mFBGameAsyncDone = false;
        _this.mShortCutPopupShowCount = 0;
        _this.mBackFromGame = false;
        _this.mAdsController = null;
        _this.mInterstitialAdController = null;
        _this.mPaymentController = null;
        _this.mBotSubscribtionController = null;
        _this.mFtueController = null;
        _this.mTouchNodeComponent = null;
        _this.mReferralController = null;
        return _this;
      }
      PersistantNodeComponent.prototype.onLoad = function() {
        cc.game.addPersistRootNode(this.node);
        this.mConfigurationController = new ConfigurationController_1.ConfigurationController();
        this.mPlayerController = new PlayerController_1.PlayerController(this);
        this.mGameController = new GameController_1.GameController();
        this.mActionController = new ActionController_1.ActionController();
        this.mStatsController = new StatsController_1.StatsController();
        this.mStateMachineController = new StateMachineController_1.StateMachineController(this);
        this.mSoundController = new SoundController_1.SoundController(this);
        this.mExperimentController = ExperiementController_1.ExperimentController.getInstance();
        this.mLeaderBoardController = new LeaderBoardController_1.LeaderBoardController(this);
        this.mStateMachineController = new StateMachineController_1.StateMachineController(this);
        this.mLocalizationController = LocalizationController_1.LocalizationController.getInstance();
        this.mLocalizationController.initialize(this);
        this.mSurveyController = new SurveyController_1.SurveyController(this);
        this.mChatBlockController = new ChatBlockController_1.ChatBlockController(this);
        this.mLeagueController = new LeagueController_1.LeagueController(this);
        this.mAdsController = new AdsController_1.AdsController(this);
        this.mInterstitialAdController = new InterstitialAdController_1.InterstitialAdController(this);
        this.mPaymentController = new PaymentController_1.PaymentController(this);
        this.mRouterController = new RouterController_1.RouterController(this);
        this.mBotSubscribtionController = new BotSubscribtionController_1.BotSubscribtionController(this);
        this.mFtueController = new FtueController_1.FtueController(this);
        this.mReferralController = new ReferralController_1.ReferralController(this);
        this.mGameController.setPersistantNodeComponent(this);
        this.mActionController.initialize(this);
        this.mShortCutPopupShowCount = 0;
        this.mBackFromGame = false;
        this.mTouchNodes = [];
      };
      PersistantNodeComponent.prototype.GetSurveyController = function() {
        return this.mSurveyController;
      };
      PersistantNodeComponent.prototype.GetConfigurationController = function() {
        return this.mConfigurationController;
      };
      PersistantNodeComponent.prototype.GetPlayerController = function() {
        return this.mPlayerController;
      };
      PersistantNodeComponent.prototype.GetBotSubscriptionController = function() {
        return this.mBotSubscribtionController;
      };
      PersistantNodeComponent.prototype.GetStateMachineController = function() {
        return this.mStateMachineController;
      };
      PersistantNodeComponent.prototype.GetGameController = function() {
        return this.mGameController;
      };
      PersistantNodeComponent.prototype.GetActionController = function() {
        return this.mActionController;
      };
      PersistantNodeComponent.prototype.GetSoundController = function() {
        return this.mSoundController;
      };
      PersistantNodeComponent.prototype.GetLeaderBoardController = function() {
        return this.mLeaderBoardController;
      };
      PersistantNodeComponent.prototype.GetLocalizationController = function() {
        return this.mLocalizationController;
      };
      PersistantNodeComponent.prototype.GetExperimentController = function() {
        return this.mExperimentController;
      };
      PersistantNodeComponent.prototype.GetStatsController = function() {
        return this.mStatsController;
      };
      PersistantNodeComponent.prototype.cacheProfileImageSprite = function(spriteFrame) {
        this.mProfilePicSprite = spriteFrame;
      };
      PersistantNodeComponent.prototype.getCachedProfileImageSprite = function() {
        return this.mProfilePicSprite;
      };
      PersistantNodeComponent.prototype.getFBGameAsyncDone = function() {
        return this.mFBGameAsyncDone;
      };
      PersistantNodeComponent.prototype.setFBGameAsyncDone = function(value) {
        this.mFBGameAsyncDone = value;
      };
      PersistantNodeComponent.prototype.getShortCutPopupShownCount = function() {
        return this.mShortCutPopupShowCount;
      };
      PersistantNodeComponent.prototype.incrementShortCutPopupShownCount = function() {
        this.mShortCutPopupShowCount++;
      };
      PersistantNodeComponent.prototype.isBackFromGame = function() {
        return this.mBackFromGame;
      };
      PersistantNodeComponent.prototype.setGameSceneVisited = function(value) {
        this.mBackFromGame = true;
      };
      PersistantNodeComponent.prototype.getChatBlockController = function() {
        return this.mChatBlockController;
      };
      PersistantNodeComponent.prototype.GetAdsController = function() {
        return this.mAdsController;
      };
      PersistantNodeComponent.prototype.GetInterstitialAdController = function() {
        return this.mInterstitialAdController;
      };
      PersistantNodeComponent.prototype.GetPaymentController = function() {
        return this.mPaymentController;
      };
      PersistantNodeComponent.prototype.GetReferralController = function() {
        return this.mReferralController;
      };
      PersistantNodeComponent.prototype.getRouterController = function() {
        return this.mRouterController;
      };
      PersistantNodeComponent.prototype.getLeagueController = function() {
        return this.mLeagueController;
      };
      PersistantNodeComponent.prototype.getFtueController = function() {
        return this.mFtueController;
      };
      PersistantNodeComponent.prototype.setTouchNode = function(touchNodeComponent) {
        this.mTouchNodeComponent = touchNodeComponent;
        if (touchNodeComponent) {
          for (var i = 0; i < this.mTouchNodes.length; i++) touchNodeComponent.registerListener(this.mTouchNodes[i].targetNode, this.mTouchNodes[i].targetFunc, this.mTouchNodes[i].rectBound);
          this.mTouchNodes = [];
        }
      };
      PersistantNodeComponent.prototype.registerForTouchOutside = function(targetNode, targetFunc, rectBound) {
        this.mTouchNodeComponent ? this.mTouchNodeComponent.registerListener(targetNode, targetFunc, rectBound) : this.mTouchNodes[this.mTouchNodes.length] = {
          targetNode: targetNode,
          targetFunc: targetFunc,
          rectBound: rectBound
        };
      };
      PersistantNodeComponent.prototype.deRegisterListener = function(targetNode, targetFunc, rectBound) {
        this.mTouchNodeComponent && this.mTouchNodeComponent.deRegisterListener(targetNode, targetFunc, rectBound);
      };
      PersistantNodeComponent.prototype.removeTouchNode = function(touchNodeComponent) {
        this.mTouchNodeComponent = null;
      };
      PersistantNodeComponent = __decorate([ ccclass ], PersistantNodeComponent);
      return PersistantNodeComponent;
    }(cc.Component);
    exports.default = PersistantNodeComponent;
    cc._RF.pop();
  }, {
    "../Controllers/ActionController": "ActionController",
    "../Controllers/AdsController": "AdsController",
    "../Controllers/BotSubscribtionController": "BotSubscribtionController",
    "../Controllers/ChatBlockController": "ChatBlockController",
    "../Controllers/ConfigurationController": "ConfigurationController",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Controllers/FtueController": "FtueController",
    "../Controllers/GameController": "GameController",
    "../Controllers/InterstitialAdController": "InterstitialAdController",
    "../Controllers/LeaderBoardController": "LeaderBoardController",
    "../Controllers/LeagueController": "LeagueController",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Controllers/PaymentController": "PaymentController",
    "../Controllers/PlayerController": "PlayerController",
    "../Controllers/ReferralController": "ReferralController",
    "../Controllers/RouterController": "RouterController",
    "../Controllers/SoundController": "SoundController",
    "../Controllers/StateMachineController": "StateMachineController",
    "../Controllers/StatsController": "StatsController",
    "../Controllers/SurveyController": "SurveyController"
  } ],
  PinScrollViewCardComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8b0e4Qpxq9GWIC9zxi+Tjjl", "PinScrollViewCardComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PinScrollViewCardComponent = function(_super) {
      __extends(PinScrollViewCardComponent, _super);
      function PinScrollViewCardComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mScrollView = null;
        _this.cardToBePinned = null;
        _this.cloneOfCardToBePinned = null;
        _this.mScrollViewType = 1;
        _this.mIsCardVisibleCallback = null;
        _this.mIsLoadedAtLeastOnce = false;
        return _this;
      }
      PinScrollViewCardComponent.prototype.start = function() {};
      PinScrollViewCardComponent.prototype.initializeCardToBePinned = function(card, cloneNodeOfTheCard, indexNum) {
        this.mScrollView = this.node.getComponent(cc.ScrollView);
        this.mScrollView.node.on("scrolling", this.onScroll, this);
        this.cardToBePinned = card;
        this.cloneOfCardToBePinned && this.cloneOfCardToBePinned.removeFromParent();
        this.cloneOfCardToBePinned = cloneNodeOfTheCard;
        this.cloneOfCardToBePinned.active = false;
        this.mScrollView.content.parent.addChild(this.cloneOfCardToBePinned);
        this.mScrollViewType = 1;
        indexNum && this.addCloneCardEvent(indexNum);
      };
      PinScrollViewCardComponent.prototype.addCloneCardEvent = function(index) {
        var cloneBtn = this.cloneOfCardToBePinned.getComponent(cc.Button);
        if (cloneBtn) cloneBtn.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PinScrollViewCardComponent", "onPinnedItemClick", {
          index: index
        })); else {
          var myBtn = this.cloneOfCardToBePinned.addComponent(cc.Button);
          myBtn.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PinScrollViewCardComponent", "onPinnedItemClick", {
            index: index
          }));
        }
      };
      PinScrollViewCardComponent.prototype.initializeWithCallback = function(cloneNodeOfTheCard, isCardVisibleCallback, indexNumber) {
        this.mScrollView = this.node.getComponent(cc.ScrollView);
        this.mScrollView.node.on("scrolling", this.onScroll, this);
        this.cloneOfCardToBePinned && this.cloneOfCardToBePinned.removeFromParent();
        this.cloneOfCardToBePinned = cloneNodeOfTheCard;
        this.cloneOfCardToBePinned.active = false;
        this.mScrollView.content.parent.addChild(this.cloneOfCardToBePinned);
        this.mScrollViewType = 2;
        this.mIsCardVisibleCallback = isCardVisibleCallback;
        indexNumber && this.addCloneCardEvent(indexNumber);
      };
      PinScrollViewCardComponent.prototype.onPinnedItemClick = function(event, customData) {
        if (!this.cloneOfCardToBePinned) return;
        var approxIndex = this.isCardVisible(this.cloneOfCardToBePinned) > 1 ? customData.index + 2 : customData.index - 2;
        var spacingY = 0;
        var layoutComponent = this.getComponentInChildren(cc.Layout);
        layoutComponent && (spacingY = layoutComponent.spacingY);
        var yPos = cc.clampf(approxIndex * (this.cloneOfCardToBePinned.height + spacingY), 0, this.mScrollView.getMaxScrollOffset().y);
        var xPos = this.mScrollView.getScrollOffset().x;
        this.mIsLoadedAtLeastOnce && this.mScrollView.scrollToOffset(new cc.Vec2(xPos, yPos), .7);
      };
      PinScrollViewCardComponent.prototype.onScroll = function(event) {
        var isCardVisible = 0;
        1 == this.mScrollViewType && this.cardToBePinned ? isCardVisible = this.isCardVisible(this.cardToBePinned) : 2 == this.mScrollViewType && (isCardVisible = this.mIsCardVisibleCallback());
        if (this.cloneOfCardToBePinned) {
          this.cloneOfCardToBePinned.active = 0 != isCardVisible;
          0 != isCardVisible ? this.cloneOfCardToBePinned.position = 1 == isCardVisible ? new cc.Vec2(0, -this.cloneOfCardToBePinned.height / 2) : new cc.Vec2(0, -this.mScrollView.content.parent.height + this.cloneOfCardToBePinned.height / 2) : this.mIsLoadedAtLeastOnce = true;
        }
      };
      PinScrollViewCardComponent.prototype.isCardVisible = function(card) {
        var scrollViewPosition = this.mScrollView.node.parent.convertToWorldSpaceAR(this.mScrollView.node.getPosition());
        var scrollViewHeight = this.mScrollView.node.getContentSize().height;
        if (card) {
          var cardPosition = card.parent.convertToWorldSpaceAR(card.getPosition());
          var cardHeight = card.getContentSize().height;
          if (cardPosition.y + cardHeight / 2 > scrollViewPosition.y) return 1;
          if (cardPosition.y - cardHeight / 2 < scrollViewPosition.y - scrollViewHeight) return -1;
        }
        return 0;
      };
      PinScrollViewCardComponent = __decorate([ ccclass ], PinScrollViewCardComponent);
      return PinScrollViewCardComponent;
    }(cc.Component);
    exports.default = PinScrollViewCardComponent;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper"
  } ],
  PlaySoundComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33fc0VsgzpAAaA7wsjJPvjn", "PlaySoundComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlaySoundComponent = function(_super) {
      __extends(PlaySoundComponent, _super);
      function PlaySoundComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mPersistantController = null;
        return _this;
      }
      PlaySoundComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantController.node.on("play_sound_event", this.playSound, this);
      };
      PlaySoundComponent.prototype.start = function() {};
      PlaySoundComponent.prototype.playSound = function(event) {
        if (event && event.getUserData()) {
          var data = event.getUserData();
          var childAudioSource = this.node.getChildByName(data.sound_name);
          if (childAudioSource) {
            var audio = childAudioSource.getComponent(cc.AudioSource);
            audio && audio.play();
          }
        }
      };
      PlaySoundComponent.prototype.onDestroy = function() {
        this.mPersistantController.node.off("play_sound_event", this.playSound, this);
      };
      PlaySoundComponent = __decorate([ ccclass ], PlaySoundComponent);
      return PlaySoundComponent;
    }(cc.Component);
    exports.default = PlaySoundComponent;
    cc._RF.pop();
  }, {
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  PlayerController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "644e7hwIitL7YRkVXWYlmm3", "PlayerController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExperiementController_1 = require("./ExperiementController");
    var Logger_1 = require("../Generic/Logger");
    var Player_1 = require("../models/Player");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var InMessages_1 = require("../Network/InMessages");
    var State_1 = require("../states/State");
    var Helper_1 = require("../Generic/Helper");
    var SurveyController_1 = require("./SurveyController");
    var Constants_1 = require("../Constants");
    var LocalizationController_1 = require("./LocalizationController");
    var ProfileCustomizationController_1 = require("./ProfileCustomizationController");
    var PlayerController = function() {
      function PlayerController(persistantNodeComponent) {
        this.mPlayerRcptFetchInProgress = false;
        this.mPowerupSettingsTimeout = null;
        this.mPowerupSettingsRetryCount = 0;
        this.mLogger = new Logger_1.Logger("PlayerController", true);
        this.mPlayerModel = null;
        this.mRetryCount = 0;
        this.mReceiptLastUpdated = 0;
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.isPrivateJoin = false;
      }
      PlayerController.prototype.doUserGet = function(id, signature, callback) {
        var params = {
          cache_version: "1",
          client_time: "1518031268306",
          client_version: Config_1.Config.CLIENT_VERSION,
          dau_source: "",
          deviceResolution: "640.000000:1136.000000",
          device_stats: "",
          device_token: "",
          device_type: "2",
          duid: "7B42AA3F-5AB1-4D7E-90D3-5D275CBC6EFE",
          fb_invitable_last_fetched_at: "0",
          flyid: "1267900294",
          imeiNumber: "",
          isRooted: "0",
          lc: "IN",
          leaderboard_max_ts: "0",
          locale: "1",
          net: "wifi",
          payment_currency: "INR",
          secondary_blob_hash: "",
          serialNumber: "",
          sn_friend_max_ts: "0",
          nv: "2"
        };
        params.snat = signature;
        this.mSignature = signature;
        params.client_time = Date.now();
        params.device_type = "1";
        params.duid = id;
        params.installOS = "instant";
        params.snuid = id;
        params.locale = LocalizationController_1.LocalizationController.getInstance().getLocaleInteger() + "";
        params.snid = 1;
        params.uuid = "";
        params.vid = "";
        params.h = "231";
        params.platform = Helper_1.Helper.getOs();
        params.browser = Helper_1.Helper.getModelName();
        params.privateRoomKey = Helper_1.Helper.getPrivateTableId();
        params.fbName = FBInstant.player.getName();
        params.fbPhotoUrl = FBInstant.player.getPhoto();
        params.senderId = Helper_1.Helper.getSenderId();
        if (FBInstant.context) {
          params.contextId = FBInstant.context.getID();
          params.contextType = FBInstant.context.getType();
          this.mLogger.Log("tanisha -------- userget params.contextId " + params.contextId + " params.contextType " + params.contextType);
        }
        this.mLogger.Log("tanisha ------- " + params.refCode);
        if (FBInstant.getLocale()) {
          var loc = FBInstant.getLocale().split("_")[0];
          params.locale_ig = loc;
        }
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        this.mUserGetCallback = callback;
        this.mRetryCount = 3;
        this.doUserGetInteral(connection, params);
      };
      PlayerController.prototype.getRankingFlagEnable = function() {
        var options = this.mPlayerModel.getRankingFlagEnableOptions();
        var leaderboardController = this.mPersistantNodeComponent.getLeagueController();
        var leagueId = leaderboardController.getLeagueId();
        var showFlags = options.rankingFlagEnable;
        var _a = leagueId.split("_"), season = _a[0], league = _a[1], division = _a[2];
        var showFlagForDivision = division % options.rankingFlagDel == 0;
        var showFlagForSeason = options.rankingFlagEnableForSeason.indexOf(parseInt(season || 0)) > -1;
        var isExperiementOn = ProfileCustomizationController_1.ProfileCustomizationController.getInstance().isEnabled();
        return showFlags && showFlagForSeason && showFlagForDivision && isExperiementOn;
      };
      PlayerController.prototype.incrementPlayerTrophies = function(trophies) {
        this.shouldEnableProgression() && this.mPlayerModel.incrementTrophies(trophies);
      };
      PlayerController.prototype.doUserGetInteral = function(connection, params) {
        var self = this;
        connection.doPost("/user/rget_v2", params, function(data) {
          var userGetMessage = new InMessages_1.UserGetMessage(data);
          self.mPlayerModel = new Player_1.Player(userGetMessage);
          self.mPlayerModel.setLastBetSelectedAmount(userGetMessage.defaultBetSelectAmount);
          null != userGetMessage.surveyPopupData && self.mPersistantNodeComponent.GetSurveyController().setPopupData(userGetMessage.surveyPopupData, SurveyController_1.SCENE_TYPE.LOBBY);
          null != userGetMessage.rewardedVideoAvailableCount && self.mPersistantNodeComponent.GetAdsController().setVideoAvailableCount(userGetMessage.rewardedVideoAvailableCount);
          null != userGetMessage.rewardedInterstitialVideoAvailableCount && self.mPersistantNodeComponent.GetInterstitialAdController().setInterstitialVideoAvailableCount(userGetMessage.rewardedInterstitialVideoAvailableCount);
          null != userGetMessage.subscribedToBot && self.mPersistantNodeComponent.GetBotSubscriptionController().setUserSubscribedToBotValue(userGetMessage.subscribedToBot);
          var leaderboardController = self.mPersistantNodeComponent.GetLeaderBoardController();
          leaderboardController && leaderboardController.setLeaderboardExpireTimer(userGetMessage.leaderboardExpiry);
          var experimentController = self.mPersistantNodeComponent.GetExperimentController();
          experimentController && experimentController.parseExperimentAndInitialize(self.mPlayerModel.getExperimentVariants());
          self.mUserGetCallback(true);
          var betSelectVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_BET_SELECT);
          self.mPlayerModel.setBetSelectEnabledState(betSelectVar > 1);
          var ftueController = self.mPersistantNodeComponent.getFtueController();
          ftueController.setFtueDetails(userGetMessage.ftue);
          var statsController = self.mPersistantNodeComponent.GetStatsController();
          statsController && statsController.init(self.mPlayerModel.getId(), "instant", false, 1e4);
          self.mPlayerModel.isCustomChatEnabled() || self.mPersistantNodeComponent.getChatBlockController().enableChat();
          var paymentController = self.mPersistantNodeComponent.GetPaymentController();
          paymentController && paymentController.setStoreEnabled(userGetMessage.store_enabled);
          var referralController = self.mPersistantNodeComponent.GetReferralController();
          referralController && referralController.setReferralEnabled(userGetMessage.referralObj.referralEnabled);
          self.mPersistantNodeComponent.GetBotSubscriptionController().initialize(userGetMessage.botSubscribeType);
          var leagueController = self.mPersistantNodeComponent.getLeagueController();
          leagueController.setLeagueInfo(userGetMessage.leagueInfo, userGetMessage.wasUserInactive, userGetMessage.fistLeagueAssigned);
          leagueController.setLeagueEnabled(userGetMessage.leagueEnabled);
          leagueController.setLeagueEnableGames(userGetMessage.leagueEnabledGames);
          leagueController.setLeagueCooldownInfo(userGetMessage.isInCooldown, userGetMessage.coolDownExpiry, userGetMessage.seasonEndTime);
          leagueController.setShowLeagueUnlockedPopup(userGetMessage.shouldShowLeagueUnlockedPopup);
          userGetMessage.leagueConfig && leagueController.setLeagueConfig(userGetMessage.leagueConfig);
          self.mPersistantNodeComponent.getRouterController().connectToRouter();
          self.mLogger.Log(userGetMessage.toString());
          self.mReceiptLastUpdated = Date.now();
          self.getNetworkStats();
        }, function() {
          self.mUserGetCallback(false);
        });
      };
      PlayerController.prototype.getModel = function() {
        return this.mPlayerModel;
      };
      PlayerController.prototype.getBetAmountForBetSelect = function() {
        var player = this.getModel();
        var betAmount = this.getModel().getCurrentBetAmount();
        var betSelectVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_BET_SELECT);
        (2 == betSelectVar || 3 == betSelectVar && player.getPublicGamesCount() >= 5) && (betAmount = player.getLastBetSelectedAmount());
        return betAmount;
      };
      PlayerController.prototype.shouldUpdateFriends = function(friendsInfo) {
        if (this.getNewFriendsList(friendsInfo).length > 0) return true;
        if (this.mPlayerModel && this.mPlayerModel.getPhotoUrl() != FBInstant.player.getPhoto()) return true;
        return false;
      };
      PlayerController.prototype.updateFriends = function(callback) {
        var self = this;
        var friends_info = {};
        FBInstant.player.getConnectedPlayersAsync().then(function(players) {
          friends_info = players.map(function(player) {
            return {
              id: player.getID(),
              name: player.getName(),
              photo: player.getPhoto()
            };
          });
          self.mPlayerModel && friends_info && self.mPlayerModel.setFriendsInfo(friends_info);
          self.mPersistantNodeComponent.GetStateMachineController().onEvent(State_1.StateEvent.FRIEND_LIST_FETCHED);
          if (!self.shouldUpdateFriends(friends_info)) {
            self.mLogger.Log("Same data found hence not updating ");
            callback(true);
            return;
          }
          var params = {
            cache_version: "1",
            client_time: "1518031268306",
            client_version: Config_1.Config.CLIENT_VERSION,
            dau_source: "",
            deviceResolution: "640.000000:1136.000000",
            device_stats: "",
            device_token: "",
            device_type: "2",
            duid: "7B42AA3F-5AB1-4D7E-90D3-5D275CBC6EFE",
            fb_invitable_last_fetched_at: "0",
            flyid: "1267900294",
            imeiNumber: "",
            isRooted: "0",
            lc: "IN",
            locale: "1"
          };
          params.snat = self.mSignature;
          params.client_time = Date.now();
          params.device_type = "1";
          params.duid = self.mPlayerModel.getSnuid();
          params.installOS = "instantgames";
          params.snuid = self.mPlayerModel.getFbId();
          params.locale = LocalizationController_1.LocalizationController.getInstance().getLocaleInteger() + "";
          params.snid = 1;
          params.uuid = "";
          params.vid = "";
          params.h = "231";
          params.friends = self.getNewFriendsList(friends_info);
          params.fbPhotoUrl = FBInstant.player.getPhoto();
          var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
          connection.doPost("/user/updateSnInfo", params, function(data) {
            callback(true);
          }, function() {
            callback(false);
          });
        }, function() {
          this.mLogger.Log("Fetching friends failed");
          callback(false);
        });
      };
      PlayerController.prototype.getNewFriendsList = function(friends_list) {
        if (!friends_list) return;
        var new_friends_list = [];
        var myFriendsSnuidList = [];
        var myFriendsList = this.mPlayerModel.getFriendsList();
        for (var i in myFriendsList) {
          var splitArray = myFriendsList[i].split("_");
          splitArray[2] && myFriendsSnuidList.push(splitArray[2]);
        }
        myFriendsSnuidList = myFriendsSnuidList.concat(this.mPlayerModel.getFriendsListDirty());
        for (var i in friends_list) -1 === myFriendsSnuidList.indexOf(friends_list[i].id) && new_friends_list.push(friends_list[i]);
        return new_friends_list;
      };
      PlayerController.prototype.getPlayerId = function() {
        if (this.mPlayerModel) return this.mPlayerModel.getId();
        return "";
      };
      PlayerController.prototype.getFbId = function() {
        if (this.mPlayerModel) return this.mPlayerModel.getFbId();
        return "";
      };
      PlayerController.prototype.fetchPlayerReceipt = function() {
        var params = {
          pid: this.getModel().getId(),
          access_token: this.getModel().getAccessToken(),
          duid: this.getModel().getSnuid()
        };
        var self = this;
        this.setReceiptFetchInProgress(true);
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/receipt/get", params, function(d) {
          self.onReceiptFetch(d);
        }, function() {
          setTimeout(function() {
            self.fetchPlayerReceipt();
          }, 1e4);
        });
      };
      PlayerController.prototype.onReceiptFetch = function(data) {
        this.getModel().deserializeFromReceipt(data);
        null != data.surveyData && this.mPersistantNodeComponent.GetSurveyController().setPopupData(data.surveyData, SurveyController_1.SCENE_TYPE.LOBBY);
        null != data.referralData && this.mPersistantNodeComponent.GetPlayerController().getModel().setCanClaimReferral(data.referralData);
        this.setReceiptFetchInProgress(false);
        this.mPersistantNodeComponent.node.emit("receipt_fetched");
        this.mPersistantNodeComponent.node.emit("updateLobbyCoinsHud", "dontAnimate");
        this.mPersistantNodeComponent.node.emit("updateLobbyGemsHud", "dontAnimate");
      };
      PlayerController.prototype.isReceiptFetchInProgress = function() {
        return this.mPlayerRcptFetchInProgress;
      };
      PlayerController.prototype.setReceiptFetchInProgress = function(val) {
        this.mPlayerRcptFetchInProgress = val;
      };
      PlayerController.prototype.getLastTimeReceiptWasFetched = function() {
        return this.mReceiptLastUpdated;
      };
      PlayerController.prototype.isFriendListInitialized = function() {
        if (this.mPlayerModel) return this.mPlayerModel.isFriendListInitialized();
        return false;
      };
      PlayerController.prototype.getPlayerName = function() {
        var name = "";
        this.mPlayerModel && (name = this.mPlayerModel.getName());
        name || (name = FBInstant.player.getName());
        return name;
      };
      PlayerController.prototype.getPlayerCountry = function() {
        var country = "";
        this.mPlayerModel && (country = this.mPlayerModel.getCountryCode());
        return country;
      };
      PlayerController.prototype.getPhotoUrl = function() {
        var photo = "";
        this.mPlayerModel && (photo = this.mPlayerModel.getPhotoUrl());
        photo || (photo = FBInstant.player.getPhoto());
        return photo;
      };
      PlayerController.prototype.getNetworkStats = function() {
        if (navigator && navigator.connection) {
          var connection = navigator.connection;
          var statsController = this.mPersistantNodeComponent.GetStatsController();
          statsController && statsController.count("network", 1, connection.effectiveType);
          navigator.connection.onchange = updateConnectionStatus;
        }
        function updateConnectionStatus() {
          statsController && statsController.count("network", 1, "change", connection.effectiveType);
        }
      };
      PlayerController.prototype.isPrivateJoinSuccess = function() {
        return this.isPrivateJoin;
      };
      PlayerController.prototype.setPrivateJoinSuccess = function(status) {
        this.isPrivateJoin = status;
      };
      PlayerController.prototype.shouldEnableProgression = function() {
        return this.getModel().getTrophies() > 0 && !this.getModel().hasProgressionEnded();
      };
      PlayerController.prototype.saveLocaleOnServer = function() {
        var params = {
          cache_version: "1",
          client_time: "1518031268306",
          client_version: Config_1.Config.CLIENT_VERSION,
          dau_source: "",
          deviceResolution: "640.000000:1136.000000",
          setting_type: "locale",
          device_token: "",
          device_type: "2",
          duid: "7B42AA3F-5AB1-4D7E-90D3-5D275CBC6EFE",
          locale: "1"
        };
        params.access_token = this.getModel().getAccessToken();
        params.client_time = Date.now();
        params.device_type = "1";
        params.pid = this.getModel().getId();
        params.duid = this.mPlayerModel.getSnuid();
        params.installOS = "instant";
        params.snuid = this.mPlayerModel.getFbId();
        params.locale = LocalizationController_1.LocalizationController.getInstance().getLocaleInteger() + "";
        params.snid = 1;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        var self = this;
        connection.doPost("/user/update_setting", params, function(data) {
          self.mLogger.Log("eagle locale value set to " + data.locale);
          null != data.locale && self.getModel().setLocale(data.locale);
        }, function() {
          self.mLogger.Log("eagle error locale value not set");
        });
      };
      PlayerController.prototype.saveProfileCustomization = function(name, countrCode, onSuccess, changeState) {
        var params = {
          cache_version: "1",
          client_time: "1518031268306",
          client_version: Config_1.Config.CLIENT_VERSION,
          dau_source: "",
          deviceResolution: "640.000000:1136.000000",
          device_token: "",
          device_type: "2",
          duid: "7B42AA3F-5AB1-4D7E-90D3-5D275CBC6EFE",
          locale: "1"
        };
        params.access_token = this.getModel().getAccessToken();
        params.client_time = Date.now();
        params.device_type = "1";
        params.pid = this.getModel().getId();
        params.duid = this.mPlayerModel.getSnuid();
        params.installOS = "instant";
        params.snuid = this.mPlayerModel.getFbId();
        params.snid = 1;
        params.custom_name = "" == name ? this.getModel().getName() : name;
        params.custom_country_code = "" == countrCode ? "GL" : countrCode;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        var self = this;
        connection.doPost("/user/update_profile", params, function(data) {
          self.mLogger.Log("server response=======ashraf====== success" + data.server_response);
          if (data.server_response) if ("true" == data.server_response) {
            self.getModel().setCustomName(data.custom_name);
            self.getModel().setName(data.custom_name);
            self.getModel().setCustomCountryCode(data.custom_country_code);
            self.fetchPlayerReceipt();
            onSuccess();
          } else data.server_response == ProfileCustomizationController_1.ProfileCustomizationController.SERVER_RESPONSE_FAILED_ABUSIVE_NAME ? changeState("#SERVER_RESPONSE_FAILED_ABUSIVE_NAME", "#ff0000") : data.server_response == ProfileCustomizationController_1.ProfileCustomizationController.SERVER_RESPONSE_MAXED_OUT && changeState("#SERVER_RESPONSE_MAXED_OUT", "ff0000"); else changeState("#SERVER_RESPONSE_TRY_AGAIN", "#ff0000");
        }, function() {
          changeState("#SERVER_RESPONSE_CONNECTION_ERROR", "#ff0000");
        });
      };
      PlayerController.prototype.changePowerupSettings = function(powerupEnabled) {
        this.mPowerupSettingsRetryCount = 0;
        this.getModel().setPowerupSettings(powerupEnabled);
      };
      PlayerController.prototype.savePowerupSettingsOnServer = function() {
        if (this.getModel().getPreviousPowerupSettings() == this.getModel().getPowerupSettings()) return;
        if (this.mPowerupSettingsRetryCount > 3) return;
        if (this.mPowerupSettingsTimeout) {
          clearTimeout(this.mPowerupSettingsTimeout);
          this.mPowerupSettingsTimeout = null;
        }
        var params = {
          cache_version: "1",
          client_time: "1518031268306",
          client_version: Config_1.Config.CLIENT_VERSION,
          dau_source: "",
          deviceResolution: "640.000000:1136.000000",
          setting_type: "powerup",
          device_token: "",
          device_type: "2",
          duid: "7B42AA3F-5AB1-4D7E-90D3-5D275CBC6EFE",
          powerupEnabled: this.getModel().getPowerupSettings()
        };
        params.access_token = this.getModel().getAccessToken();
        params.client_time = Date.now();
        params.device_type = "1";
        params.pid = this.getModel().getId();
        params.duid = this.mPlayerModel.getSnuid();
        params.installOS = "instant";
        params.snuid = this.mPlayerModel.getFbId();
        params.snid = 1;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        var self = this;
        connection.doPost("/user/update_setting", params, function(data) {
          self.mLogger.Log("eagle powerup setings value set to " + data.powerupEnabled);
          self.mPowerupSettingsRetryCount = 0;
          null != data.powerupEnabled && self.getModel().setPreviousPowerupSettings(data.powerupEnabled);
        }, function() {
          self.mLogger.Log("eagle error powerup setings value not set");
          self.mPowerupSettingsRetryCount++;
          self.mPowerupSettingsTimeout = setTimeout(function() {
            self.savePowerupSettingsOnServer();
          }, 15e3);
        });
      };
      PlayerController.prototype.isGamesPlayedMismatch = function() {
        return this.getModel().getOldGamesPlayed() >= 0 && this.getModel().getGamesPlayed() != this.getModel().getOldGamesPlayed();
      };
      return PlayerController;
    }();
    exports.PlayerController = PlayerController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../Network/InMessages": "InMessages",
    "../models/Player": "Player",
    "../states/State": "State",
    "./ExperiementController": "ExperiementController",
    "./LocalizationController": "LocalizationController",
    "./ProfileCustomizationController": "ProfileCustomizationController",
    "./SurveyController": "SurveyController"
  } ],
  PlayerProfileModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f4acIbB3lCwJN/1NfBYGD1", "PlayerProfileModel");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerProfileModel = function() {
      function PlayerProfileModel(data) {
        this.mGamesPlayed = 0;
        this.mGamesWon = 0;
        this.mTwoPlayerGamesWon = 0;
        this.mFourPlayerGamesWon = 0;
        this.mWinRate = 0;
        this.mLeague = -1;
        if (!data) return;
        void 0 != data.gamesPlayed && (this.mGamesPlayed = data.gamesPlayed);
        void 0 != data.gamesWon && (this.mGamesWon = data.gamesWon);
        void 0 != data.twoPlayerGamesWon && (this.mTwoPlayerGamesWon = data.twoPlayerGamesWon);
        void 0 != data.fourPlayerGamesWon && (this.mFourPlayerGamesWon = data.fourPlayerGamesWon);
        void 0 != data.winRate && (this.mWinRate = data.winRate);
      }
      return PlayerProfileModel;
    }();
    exports.PlayerProfileModel = PlayerProfileModel;
    cc._RF.pop();
  }, {} ],
  PlayerProfilePopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6b149EWaFJHgpFl8XzVfkaY", "PlayerProfilePopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfileImageComponent_1 = require("./ProfileImageComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var Constants_1 = require("../Constants");
    var CountryFlagComponent_1 = require("./CountryFlagComponent");
    var ProfileCustomizationController_1 = require("../Controllers/ProfileCustomizationController");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerProfilePopupComponent = function(_super) {
      __extends(PlayerProfilePopupComponent, _super);
      function PlayerProfilePopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.gameWonLabel = null;
        _this.twoPlayergameWonLabel = null;
        _this.fourPlayergameWonLabel = null;
        _this.winRateLabel = null;
        _this.playerProfile = null;
        _this.playerNameLabel = null;
        _this.okayButton = null;
        _this.closeButton = null;
        _this.blockButton = null;
        _this.unblockButton = null;
        _this.blockNode = null;
        _this.unblockNode = null;
        _this.blockUnblockAnimation = null;
        _this.blockTooltipNode = null;
        _this.unblockTooltipNode = null;
        _this.customNameLabel = null;
        _this.editButton = null;
        _this.cFlagComponent = null;
        _this.mPid = "";
        _this.mIsLobby = false;
        _this.closeClicked = false;
        _this.eventHandlerToOff = null;
        return _this;
      }
      PlayerProfilePopupComponent.prototype.onClosePressed = function() {
        this.closeClicked = true;
      };
      PlayerProfilePopupComponent.prototype.onEditPopUpLoadComplete = function() {
        this.spinnerComponent.hideLoader();
        if (!this.closeClicked) {
          this.editProfilePopupComponent.active = true;
          this.mPersistantController.GetStatsController().count("popup", 1, "show", "edit_profile_popup");
        }
        this.editButton.interactable = true;
        this.closeClicked = false;
      };
      PlayerProfilePopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mGameController = this.mPersistantController.GetGameController();
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerProfilePopupComponent", "onOkayPressed"));
        this.blockButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerProfilePopupComponent", "onBlockPressed"));
        this.unblockButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerProfilePopupComponent", "onBlockPressed"));
        this.closeButton && this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerProfilePopupComponent", "onClosePressed"));
        this.editButton && this.editButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerProfilePopupComponent", "onEditBtnPress"));
        var self = this;
        this.eventHandlerToOff = this.onEditPopUpLoadComplete.bind(this);
        this.mPersistantController.node.on("EditPopUpLoadComplete", this.eventHandlerToOff);
      };
      PlayerProfilePopupComponent.prototype.start = function() {};
      PlayerProfilePopupComponent.prototype.initialize = function(isLobby, pid) {
        this.mPid = pid;
        this.mIsLobby = isLobby;
        var name = "";
        var profileData;
        var league = -1;
        this.closeClicked = false;
        var playerController = this.mPersistantController.GetPlayerController();
        var photoUrl = playerController.getPhotoUrl();
        if (this.mIsLobby) {
          name = playerController.getPlayerName();
          var playerModel = playerController.getModel();
          playerModel && (profileData = playerModel.getProfileInfo());
          league = this.mPersistantController.getLeagueController().getLeague();
        } else {
          var gamePlayer = this.mGameController.getGamePlayerModel(pid);
          if (!gamePlayer) return;
          playerController.getPlayerId() != pid && (photoUrl = gamePlayer.getPhotoUrl());
          name = gamePlayer.getName();
          profileData = gamePlayer.getProfileInfo();
          league = profileData.mLeague;
        }
        if (!profileData) return;
        this.playerNameLabel.string = Helper_1.Helper.getTruncatedString(name, 15, true);
        this.playerProfile.initialize(photoUrl);
        this.gameWonLabel.string = profileData.mGamesWon.toString() + " of " + profileData.mGamesPlayed.toString();
        this.twoPlayergameWonLabel.string = profileData.mTwoPlayerGamesWon.toString();
        this.fourPlayergameWonLabel.string = profileData.mFourPlayerGamesWon.toString();
        this.winRateLabel.string = (100 * profileData.mWinRate).toString().substr(0, 4) + "%";
        this.blockTooltipNode.active = false;
        this.unblockTooltipNode.active = false;
        this.mPersistantController.getLeagueController().isLeagueEnabled() && this.playerProfile.showLeagueBadge(league);
        this.updateBlockButton();
        this.updateCustomProfile();
      };
      PlayerProfilePopupComponent.prototype.updateCustomProfile = function() {
        if (!ProfileCustomizationController_1.ProfileCustomizationController.getInstance().isEnabled()) {
          this.playerNameLabel.node.active = true;
          this.customProfileNode && (this.customProfileNode.active = false);
          this.editProfilePopupComponent && (this.editProfilePopupComponent.node.active = false);
          this.editButton && (this.editButton.node.active = false);
          this.cFlagComponent && (this.cFlagComponent.node.active = false);
          return;
        }
        if (!this.customProfileNode) return;
        this.playerNameLabel.node.active = false;
        this.customNameLabel.node.active = true;
        if (this.mIsLobby) {
          this.customNameLabel.string = Helper_1.Helper.getTruncatedString(this.mPersistantController.GetPlayerController().getPlayerName(), 12, true);
          this.editButton && (this.editButton.node.active = true);
          if (this.cFlagComponent) {
            var cusCountryCode = this.mPersistantController.GetPlayerController().getModel().getCustomCountryCode();
            this.cFlagComponent.initialize("" == cusCountryCode ? ProfileCustomizationController_1.ProfileCustomizationController.GLOBAL_COUNTRY_FLAG_CODE : cusCountryCode);
          }
        } else {
          this.customNameLabel.string = Helper_1.Helper.getTruncatedString(this.mGameController.getGamePlayerModel(this.mPid).getName(), 12, true);
          this.editButton && (this.editButton.node.active = false);
          if (this.cFlagComponent) {
            var cusCountryCode = this.mGameController.getGamePlayerModel(this.mPid).getCountry();
            this.cFlagComponent.initialize(cusCountryCode || ProfileCustomizationController_1.ProfileCustomizationController.GLOBAL_COUNTRY_FLAG_CODE);
          }
        }
      };
      PlayerProfilePopupComponent.prototype.onEditBtnPress = function() {
        this.spinnerComponent.showLoader();
        this.editButton.interactable = false;
        var self = this;
        this.closeClicked = false;
        this.mPersistantController.GetStatsController().count("button", 1, "edit_profile_popup");
        cc.loader.loadRes("EditProfilePopupNode", function(err, prefab) {
          var newNode = cc.instantiate(prefab);
          self.node.addChild(newNode);
          self.editProfilePopupComponent = newNode;
          newNode.active = false;
          self.editProfilePopupComponent.getComponent("EditProfilePopupComponent").initialize();
        });
      };
      PlayerProfilePopupComponent.prototype.onOkayPressed = function() {
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      PlayerProfilePopupComponent.prototype.onBlockPressed = function() {
        var chatBlockCtrl = this.mPersistantController.getChatBlockController();
        this.blockTooltipNode.active = !chatBlockCtrl.isPidBlocked(this.mPid);
        this.unblockTooltipNode.active = chatBlockCtrl.isPidBlocked(this.mPid);
        if (chatBlockCtrl.isPidBlocked(this.mPid)) {
          chatBlockCtrl.unblockPid(this.mPid);
          this.mPersistantController.GetStatsController().count("button", 1, "unblock", this.mPid, this.mPersistantController.GetGameController().getInstanceId());
        } else {
          var gameController = this.mPersistantController.GetGameController();
          chatBlockCtrl.blockPid(this.mPid);
          var game = gameController.getModel();
          var instanceId = "";
          if (game) {
            game.removeChatHistoryForPid(this.mPid);
            instanceId = game.getInstanceId();
          }
          this.mPersistantController.GetStatsController().count("button", 1, "block", this.mPid, instanceId);
          this.mPersistantController.node.emit(Constants_1.constants.Events.EVENT_REFRESH_CHAT_HISTORY);
        }
        this.blockUnblockAnimation.stop("BlockAndUnblockBubbleAnim");
        this.blockUnblockAnimation.play("BlockAndUnblockBubbleAnim");
        this.updateBlockButton();
      };
      PlayerProfilePopupComponent.prototype.updateBlockButton = function() {
        var chatBlockCtrl = this.mPersistantController.getChatBlockController();
        var isThisMe = this.mPid == this.mPersistantController.GetPlayerController().getPlayerId();
        var showBlockButtons = !isThisMe && !this.mIsLobby && !chatBlockCtrl.isChatBlocked();
        this.blockNode.active = showBlockButtons && !chatBlockCtrl.isPidBlocked(this.mPid);
        this.unblockNode.active = showBlockButtons && chatBlockCtrl.isPidBlocked(this.mPid);
      };
      PlayerProfilePopupComponent.prototype.onEnable = function() {
        var sceneString = this.mIsLobby ? "lobby" : "game";
        var instanceId = "";
        this.mIsLobby || (instanceId = this.mPersistantController.GetGameController().getInstanceId());
        this.mPersistantController.GetStatsController().count("popup", 1, "open", "profile", instanceId, this.mPid, sceneString);
      };
      PlayerProfilePopupComponent.prototype.onDisable = function() {
        var sceneString = this.mIsLobby ? "lobby" : "game";
        var instanceId = "";
        this.mIsLobby || (instanceId = this.mPersistantController.GetGameController().getInstanceId());
        this.mPersistantController.GetStatsController().count("popup", 1, "close", "profile", instanceId, this.mPid, sceneString);
      };
      PlayerProfilePopupComponent.prototype.onDestroy = function() {
        this.mPersistantController.node.off("EditPopUpLoadComplete", this.eventHandlerToOff);
      };
      __decorate([ property(cc.Label) ], PlayerProfilePopupComponent.prototype, "gameWonLabel", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], PlayerProfilePopupComponent.prototype, "spinnerComponent", void 0);
      __decorate([ property(cc.Label) ], PlayerProfilePopupComponent.prototype, "twoPlayergameWonLabel", void 0);
      __decorate([ property(cc.Label) ], PlayerProfilePopupComponent.prototype, "fourPlayergameWonLabel", void 0);
      __decorate([ property(cc.Label) ], PlayerProfilePopupComponent.prototype, "winRateLabel", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], PlayerProfilePopupComponent.prototype, "playerProfile", void 0);
      __decorate([ property(cc.Label) ], PlayerProfilePopupComponent.prototype, "playerNameLabel", void 0);
      __decorate([ property(cc.Button) ], PlayerProfilePopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Button) ], PlayerProfilePopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Button) ], PlayerProfilePopupComponent.prototype, "blockButton", void 0);
      __decorate([ property(cc.Button) ], PlayerProfilePopupComponent.prototype, "unblockButton", void 0);
      __decorate([ property(cc.Node) ], PlayerProfilePopupComponent.prototype, "blockNode", void 0);
      __decorate([ property(cc.Node) ], PlayerProfilePopupComponent.prototype, "unblockNode", void 0);
      __decorate([ property(cc.Animation) ], PlayerProfilePopupComponent.prototype, "blockUnblockAnimation", void 0);
      __decorate([ property(cc.Node) ], PlayerProfilePopupComponent.prototype, "blockTooltipNode", void 0);
      __decorate([ property(cc.Node) ], PlayerProfilePopupComponent.prototype, "unblockTooltipNode", void 0);
      __decorate([ property(cc.Node) ], PlayerProfilePopupComponent.prototype, "customProfileNode", void 0);
      __decorate([ property(cc.Label) ], PlayerProfilePopupComponent.prototype, "customNameLabel", void 0);
      __decorate([ property(cc.Button) ], PlayerProfilePopupComponent.prototype, "editButton", void 0);
      __decorate([ property(CountryFlagComponent_1.default) ], PlayerProfilePopupComponent.prototype, "cFlagComponent", void 0);
      PlayerProfilePopupComponent = __decorate([ ccclass ], PlayerProfilePopupComponent);
      return PlayerProfilePopupComponent;
    }(cc.Component);
    exports.default = PlayerProfilePopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ProfileCustomizationController": "ProfileCustomizationController",
    "../Generic/Helper": "Helper",
    "./CountryFlagComponent": "CountryFlagComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent",
    "./ProfileImageComponent": "ProfileImageComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  PlayerSelectionComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aade0+VI/RFCKndyeFUA5KZ", "PlayerSelectionComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var ButtonPressComponent_1 = require("./ButtonPressComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var State_1 = require("../states/State");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Constants_1 = require("../Constants");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerSelectionComponent = function(_super) {
      __extends(PlayerSelectionComponent, _super);
      function PlayerSelectionComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.button2Players = null;
        _this.button4Players = null;
        _this.economyButton2Players = null;
        _this.economyButton4Players = null;
        _this.closeButton = null;
        _this.title = null;
        _this.twoPlayerBetAmountLabel = null;
        _this.fourPlayerBetAmountLabel = null;
        _this.twoPlayerRewardLabel = null;
        _this.fourPlayerRewardLabel = null;
        _this.economyButtonNode = null;
        _this.normalButtonNode = null;
        _this.spinner2pRegularNode = null;
        _this.spinner4pRegularNode = null;
        _this.mIsPrivateTable = false;
        return _this;
      }
      PlayerSelectionComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStateMachineController = this.mPersistantNodeComponent.GetStateMachineController();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mPlayerController = this.mPersistantNodeComponent.GetPlayerController();
        this.mActionController = this.mPersistantNodeComponent.GetActionController();
        this.button2Players.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerSelectionComponent", "player2Clicked"));
        this.button4Players.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerSelectionComponent", "player4Clicked"));
        this.economyButton2Players.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerSelectionComponent", "player2Clicked"));
        this.economyButton4Players.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "PlayerSelectionComponent", "player4Clicked"));
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_START_TWO_PLAYER_GAME, this.player2GameStart, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_START_FOUR_PLAYER_GAME, this.player4GameStart, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_CLOSED_BET_SELECT_POPUP, this.spinnerStop, this);
        this.initializeButtons();
      };
      PlayerSelectionComponent.prototype.onDestroy = function() {
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_START_TWO_PLAYER_GAME, this.player2GameStart, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_START_FOUR_PLAYER_GAME, this.player4GameStart, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_CLOSED_BET_SELECT_POPUP, this.spinnerStop, this);
      };
      PlayerSelectionComponent.prototype.spinnerStop = function() {
        this.spinner2pRegularNode.hideLoader();
        this.spinner4pRegularNode.hideLoader();
        this.reset();
      };
      PlayerSelectionComponent.prototype.player2Clicked = function() {
        var betSelectEnabled = this.mPlayerController.getModel().getBetSelectEnabledState();
        betSelectEnabled ? this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_BET_SELECT_POPUP, {
          gameType: Constants_1.constants.TABLE_TYPE.TABLE_TYPE_1V1
        }) : this.player2GameStart();
      };
      PlayerSelectionComponent.prototype.player4Clicked = function() {
        var betSelectEnabled = this.mPlayerController.getModel().getBetSelectEnabledState();
        betSelectEnabled ? this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_BET_SELECT_POPUP, {
          gameType: Constants_1.constants.TABLE_TYPE.TABLE_TYPE_4P
        }) : this.player4GameStart();
      };
      PlayerSelectionComponent.prototype.player2GameStart = function(event) {
        this.mStatsController.count("button", 1, event && event.getUserData().bet_selected ? "bet_selected" : "play_start", "2player", "online", event && event.getUserData().bet_selected ? "" + event.getUserData().bet_selected : "");
        this.mStateMachineController.onEvent(State_1.StateEvent.START_GAME);
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_FTUE_CLEAR);
        this.disableButtons();
      };
      PlayerSelectionComponent.prototype.player4GameStart = function(event) {
        this.mStatsController.count("button", 1, event && event.getUserData().bet_selected ? "bet_selected" : "play_start", "4player", "online", event && event.getUserData().bet_selected ? "" + event.getUserData().bet_selected : "");
        var data = {
          "4Player": true
        };
        this.mStateMachineController.onEvent(State_1.StateEvent.START_GAME, data);
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_FTUE_CLEAR);
        this.disableButtons();
      };
      PlayerSelectionComponent.prototype.disableButtons = function() {
        this.button2Players.interactable = false;
        this.button4Players.interactable = false;
        this.closeButton.interactable = false;
        this.economyButton2Players.interactable = false;
        this.economyButton4Players.interactable = false;
      };
      PlayerSelectionComponent.prototype.reset = function() {
        this.button2Players.interactable = true;
        this.button4Players.interactable = true;
        this.economyButton2Players.interactable = true;
        this.economyButton4Players.interactable = true;
        this.closeButton.interactable = true;
        this.button2Players.getComponent(ButtonPressComponent_1.default).reset();
        this.button4Players.getComponent(ButtonPressComponent_1.default).reset();
      };
      PlayerSelectionComponent.prototype.setIsPrivateTable = function(isPrivate) {
        this.mIsPrivateTable = isPrivate;
        var localizationComponent = this.title.getComponent(LocalizationComponent_1.default);
        if (this.mIsPrivateTable) localizationComponent.setValues("#FRIEND_STATUS"); else {
          var betSelectEnabled = this.mPlayerController.getModel().getBetSelectEnabledState();
          betSelectEnabled ? localizationComponent.setValues("#SELECT_PLAYERS_TEXT") : localizationComponent.setValues("#LOCAL_NOTIF_4HOUR_ACTION");
        }
        this.initializeButtons();
      };
      PlayerSelectionComponent.prototype.getIsPrivateTable = function() {
        return this.mIsPrivateTable;
      };
      PlayerSelectionComponent.prototype.initializeButtons = function() {
        var player = this.mPlayerController.getModel();
        if (player) {
          var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
          var betSelectEnabled = player.getBetSelectEnabledState();
          this.normalButtonNode.active = 2 != eco_variant || this.mIsPrivateTable;
          this.economyButtonNode.active = 2 == eco_variant && !this.mIsPrivateTable;
          this.normalButtonNode.active = this.normalButtonNode.active || betSelectEnabled;
          this.economyButtonNode.active = this.economyButtonNode.active && !betSelectEnabled;
          this.twoPlayerBetAmountLabel.string = Helper_1.Helper.getLocaleNumber(player.getCurrentBetAmount());
          this.fourPlayerBetAmountLabel.string = Helper_1.Helper.getLocaleNumber(player.getCurrentBetAmount());
          player.getTwoPlayerWinMeta()[0] && (this.twoPlayerRewardLabel.string = Helper_1.Helper.getLocaleNumber(player.getTwoPlayerWinMeta()[0]));
          player.getFourPlayerWinMeta()[0] && (this.fourPlayerRewardLabel.string = Helper_1.Helper.getLocaleNumber(player.getFourPlayerWinMeta()[0]));
        }
      };
      __decorate([ property(cc.Button) ], PlayerSelectionComponent.prototype, "button2Players", void 0);
      __decorate([ property(cc.Button) ], PlayerSelectionComponent.prototype, "button4Players", void 0);
      __decorate([ property(cc.Button) ], PlayerSelectionComponent.prototype, "economyButton2Players", void 0);
      __decorate([ property(cc.Button) ], PlayerSelectionComponent.prototype, "economyButton4Players", void 0);
      __decorate([ property(cc.Button) ], PlayerSelectionComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Label) ], PlayerSelectionComponent.prototype, "title", void 0);
      __decorate([ property(cc.Label) ], PlayerSelectionComponent.prototype, "twoPlayerBetAmountLabel", void 0);
      __decorate([ property(cc.Label) ], PlayerSelectionComponent.prototype, "fourPlayerBetAmountLabel", void 0);
      __decorate([ property(cc.Label) ], PlayerSelectionComponent.prototype, "twoPlayerRewardLabel", void 0);
      __decorate([ property(cc.Label) ], PlayerSelectionComponent.prototype, "fourPlayerRewardLabel", void 0);
      __decorate([ property(cc.Node) ], PlayerSelectionComponent.prototype, "economyButtonNode", void 0);
      __decorate([ property(cc.Node) ], PlayerSelectionComponent.prototype, "normalButtonNode", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], PlayerSelectionComponent.prototype, "spinner2pRegularNode", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], PlayerSelectionComponent.prototype, "spinner4pRegularNode", void 0);
      PlayerSelectionComponent = __decorate([ ccclass ], PlayerSelectionComponent);
      return PlayerSelectionComponent;
    }(cc.Component);
    exports.default = PlayerSelectionComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "../states/State": "State",
    "./ButtonPressComponent": "ButtonPressComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  Player: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42a624/6mhL74c1/Wmcrhyl", "Player");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var Player = function() {
      function Player(message) {
        this.mIsTimerComplete = false;
        this.mHostLeftForceKick = false;
        this.mHostLeftForRejoin = false;
        this.mTrophies = 0;
        this.mGamesPlayed = 0;
        this.mPreviousGamesPlayed = 0;
        this.mPrivateGamesPlayed = 0;
        this.mGamesWon = 0;
        this.mPowerupDebugUnlockCount = 0;
        this.mDailyBonusCollectTime = 0;
        this.mDailyAdCollectTime = 0;
        this.mStatusServerAddress = "";
        this.mShowShortcutPopup = false;
        this.mCustomChatEnabled = true;
        this.mStoreEnabled = true;
        this.receipt_timestamp = null;
        this.mAdsGrantChips = 0;
        this.mRouterAddress = "";
        this.mCanJoinLeagues = false;
        this.mRouterConnectGamesWin = 10;
        this.mHasProgressionEnded = false;
        this.mShouldShowProgressionPopup = false;
        this.mLocale = 0;
        this.mBetSelected = 0;
        this.mBetSelectEnabledState = false;
        this.mReferralObj = null;
        this.mCustomName = "";
        this.mCustomCountryCode = "";
        this.rankingFlagEnable = false;
        this.rankingFlagDel = 1;
        this.rankingFlagEnableForSeason = [];
        this.mFriendListDirty = [];
        this.mPowerupSettings = true;
        this.mPreviousPowerupSettings = true;
        this.mShowDailyBonusVideo = false;
        this.mDBAdsMultiplier = 2;
        this.mOldGamesPlayed = -1;
        this.mSubscribedToBot = false;
        this.mLastUsedLiveServerAddress = null;
        this.mShowAdsPopup = false;
        this.mId = message.id;
        this.mSnuid = message.snuid;
        this.setReceipt(message.receipt);
        this.mCoins = message.chipsFree + message.chipsPaid;
        this.mGems = message.gems;
        this.mAccessToken = message.accessToken;
        this.mFriendsList = message.friendsList;
        this.mName = message.name;
        this.mPhotoUrl = message.photoUrl;
        this.mIsNewUser = message.isNewUser;
        this.mSnuid = message.snuid;
        this.mExperimentVarirants = message.experiments;
        this.mFriendsInitialized = false;
        this.mCountryCode = message.countryCode;
        this.mSslGameServerAddress = message.sslGameServerAddress;
        this.mGameServerListBetSelect = message.gameServerListBetSelect;
        this.mTrophies = message.trophies;
        this.mOldGamesPlayed = message.oldGamesPlayed;
        this.mGamesPlayed = message.gamesPlayed;
        this.mPreviousGamesPlayed = this.mGamesPlayed;
        this.mPrivateGamesPlayed = message.privateGamesPlayed;
        this.mDailyBonusCollectTime = message.timeRemainingForDailyBonus + Math.round(Date.now() / 1e3);
        this.mDailyAdCollectTime = message.timeRemainingForAdReset + Math.round(Date.now() / 1e3);
        this.mDailyBonusGranted = message.dailyBonusGranted;
        this.mDailyBonusValue = message.dailyBonusValue;
        this.mDailyBonusGemsValue = message.dailyBonusGemsValue;
        this.mCurrentBetAmount = message.currentBetAmount;
        this.mBetSelected = message.defaultBetSelectAmount;
        this.mTwoPlayerWinMeta = message.twoPlayerWinMeta;
        this.mFourPlayerWinMeta = message.fourPlayerWinMeta;
        this.mCurrentBetAmountList = message.currentBetAmountList;
        this.mTwoPlayerWinMetaList = message.twoPlayerWinMetaList;
        this.mFourPlayerWinMetaList = message.fourPlayerWinMetaList;
        this.mDefaultBetSelectAmount = message.defaultBetSelectAmount;
        this.mStatusServerAddress = message.statusServerAddress;
        this.mRouterAddress = message.routerAddress;
        this.mShowShortcutPopup = false;
        this.mPrivateRoomInfo = message.privateRoomInfo;
        this.mProfileInfo = message.profileData;
        this.mCustomChatEnabled = message.custom_chat_enabled;
        this.mGamesWon = message.gamesWon;
        this.mAdsGrantChips = message.adsGrantChips;
        this.mCanJoinLeagues = message.canJoinLeagues;
        this.mRouterConnectGamesWin = message.routerConnectGamesWon;
        this.mAdsGrantChips = message.adsGrantChips;
        this.mPlayerWithinDThree = message.playerWithinDThree;
        this.mPlayerRewardedAdPlacementId = message.rewardedAdsPlacementId ? message.rewardedAdsPlacementId : "1072612402873309_1304389196362294";
        this.mPlayerInterstitialAdPlacementId = message.interstitialAdsPlacementId ? message.interstitialAdsPlacementId : "1072612402873309_1340095722791641";
        this.mPlayerInterstitialDefaultPlacementId = message.interstitialAdsPriceSettingDefaultId;
        this.mPlayerInterstitialAdsPriceSettingVariantId = message.interstitialAdsPriceSettingVariantId;
        this.mPlayerProgAdConfig = message.progAdConfig;
        this.mPlayerProgAdMaxCount = message.progAdMaxCount;
        this.mShowComingSoonPopup = message.showComingSoonPopup;
        this.mHasProgressionEnded = message.progressionEnded;
        this.mShouldShowProgressionPopup = message.showProgressionEndPopup;
        this.mTrophyRewards = message.trophyRewards;
        this.mLocale = message.locale;
        this.mOnlineRoomInfo = message.onlineRoomInfo;
        message.onlineRoomInfo && this.setSkipRoomId(this.mOnlineRoomInfo.roomId);
        this.mCustomName = message.customName;
        this.mCustomCountryCode = message.customCountryCode;
        this.rankingFlagEnable = message.rankingFlagEnable;
        this.rankingFlagDel = message.rankingFlagDel;
        this.rankingFlagEnableForSeason = message.rankingFlagEnableForSeason;
        this.mFriendListDirty = message.friendListDirty;
        this.mReferralObj = message.referralObj;
        this.mPowerupSettings = message.powerupEnabled;
        this.mPreviousPowerupSettings = message.powerupEnabled;
        this.mPowerupDebugUnlockCount = message.powerupDebugUnlockCount;
        this.mShowDailyBonusVideo = message.showDailyBonusVideo;
        this.mDBAdsMultiplier = message.dbAdsMultiplier;
        this.mSubscribedToBot = message.subscribedToBot;
        this.mEmojisStatusList = message.emojisStatusList;
        this.mShowAdsPopup = !!message.showAdsPopup && message.showAdsPopup;
      }
      Player.prototype.getRankingFlagEnableOptions = function() {
        return {
          rankingFlagEnable: this.rankingFlagEnable,
          rankingFlagDel: this.rankingFlagDel,
          rankingFlagEnableForSeason: this.rankingFlagEnableForSeason
        };
      };
      Player.prototype.getSubscribedToBotStatus = function() {
        return this.mSubscribedToBot;
      };
      Player.prototype.setSubscribedToBotStatus = function(subscribedBot) {
        this.mSubscribedToBot = subscribedBot;
      };
      Player.prototype.getEmojisStatusList = function() {
        return this.mEmojisStatusList ? this.mEmojisStatusList : [];
      };
      Player.prototype.resetEmojiStatusList = function() {
        for (var itr = 0; itr < this.mEmojisStatusList.length; itr++) this.mEmojisStatusList[itr] = 0;
      };
      Player.prototype.getPlayerReferralCode = function() {
        return this.mReferralObj.referralCode;
      };
      Player.prototype.isReferralSupported = function() {
        return this.mReferralObj.referralEnabled;
      };
      Player.prototype.getFriendRefCodeData = function() {
        return this.mReferralObj.friendRefCodeData;
      };
      Player.prototype.resetFriendRefCodeData = function() {
        this.mReferralObj.friendRefCodeData = null;
      };
      Player.prototype.getReferralFriendPhotoUrl = function() {
        return this.mReferralObj.referralFriendPhotoUrl;
      };
      Player.prototype.getCanClaimReferral = function() {
        return this.mReferralObj.canUseReferralCode;
      };
      Player.prototype.setCanClaimReferral = function(canClaim) {
        this.mReferralObj.canUseReferralCode = canClaim;
      };
      Player.prototype.getPlayerReferralRewardAmount = function() {
        return this.mReferralObj.referralRewardAmount;
      };
      Player.prototype.getPlayerReferralGrantedCount = function() {
        return this.mReferralObj.referralRewardsGrantedCount;
      };
      Player.prototype.resetPlayerReferralGrantedCount = function() {
        this.mReferralObj.referralRewardsGrantedCount = 0;
      };
      Player.prototype.getPlayerProgAdMaxCount = function() {
        return this.mPlayerProgAdMaxCount;
      };
      Player.prototype.getPlayerProgAdConfig = function() {
        return this.mPlayerProgAdConfig;
      };
      Player.prototype.getPlayerRewardedAdPlacementId = function() {
        return this.mPlayerRewardedAdPlacementId;
      };
      Player.prototype.getPlayerInterstitialAdPlacement = function() {
        return this.mPlayerInterstitialAdPlacementId;
      };
      Player.prototype.getPlayerInterstitialAdDefaultPlacementId = function() {
        return this.mPlayerInterstitialDefaultPlacementId;
      };
      Player.prototype.getPlayerInterstitalAdsPriceSettingVariantId = function() {
        return this.mPlayerInterstitialAdsPriceSettingVariantId;
      };
      Player.prototype.getPlayerWithinDThree = function() {
        return this.mPlayerWithinDThree;
      };
      Player.prototype.incrementTrophies = function(trophies) {
        void 0 !== this.mTrophies && (this.mTrophies += trophies);
      };
      Player.prototype.getTrophies = function() {
        return this.mTrophies;
      };
      Player.prototype.getId = function() {
        return this.mId;
      };
      Player.prototype.getSnuid = function() {
        return this.mSnuid;
      };
      Player.prototype.getReceipt = function() {
        if (0 == this.receipt_timestamp || Date.now() - this.receipt_timestamp > 48e4) return "";
        return this.mReceipt;
      };
      Player.prototype.getCoins = function() {
        return this.mCoins;
      };
      Player.prototype.getGems = function() {
        return this.mGems;
      };
      Player.prototype.getAccessToken = function() {
        return this.mAccessToken;
      };
      Player.prototype.getFriendsList = function() {
        return this.mFriendsList;
      };
      Player.prototype.getName = function() {
        if (this.mName) return this.mName;
        return "";
      };
      Player.prototype.getPhotoUrl = function() {
        if (this.mPhotoUrl) return this.mPhotoUrl;
        return "";
      };
      Player.prototype.getIsNewUser = function() {
        return this.mIsNewUser;
      };
      Player.prototype.getFbId = function() {
        return this.mSnuid;
      };
      Player.prototype.getFriendsInfo = function() {
        return this.mFriendsInfo;
      };
      Player.prototype.getCountryCode = function() {
        return this.getCustomCountryCode() || this.mCountryCode;
      };
      Player.prototype.setFriendsInfo = function(friendsInfo) {
        this.mFriendsInfo = friendsInfo;
        this.mFriendsInitialized = true;
      };
      Player.prototype.setReceipt = function(rcpt) {
        this.mReceipt = rcpt;
        this.receipt_timestamp = Date.now();
      };
      Player.prototype.setName = function(name) {
        this.mName = name;
      };
      Player.prototype.setPhoto = function(photo) {
        this.mPhotoUrl = photo;
      };
      Player.prototype.getExperimentVariants = function() {
        return this.mExperimentVarirants;
      };
      Player.prototype.deserializeFromReceipt = function(data) {
        this.setReceipt(data.rcpt);
        this.mSslGameServerAddress = data.gameServerAddress;
        data.rcptChips && (this.mCoins = data.rcptChips);
        data.gemsCount && (this.mGems = data.gemsCount);
        if (this.mDailyBonusGranted) {
          this.mCoins = this.mCoins - this.mDailyBonusValue;
          this.mGems = this.mGems - this.mDailyBonusGemsValue;
        }
        data.grantedChips && (this.mCoins = this.mCoins - data.grantedChips);
        data.grantedGems && (this.mGems = this.mGems - data.grantedGems);
        data.chips && (this.mCoins = this.mCoins - data.chips);
        this.mReferralObj.referralRewardsGrantedCount && (this.mCoins = this.mCoins - this.mReferralObj.referralRewardAmount * this.mReferralObj.referralRewardsGrantedCount);
        void 0 != data.rcptCurrentBetAmt && (this.mCurrentBetAmount = data.rcptCurrentBetAmt);
        data.twoPlayerWinMeta && (this.mTwoPlayerWinMeta = data.twoPlayerWinMeta);
        data.fourPlayerWinMeta && (this.mFourPlayerWinMeta = data.fourPlayerWinMeta);
        void 0 != data.rcptCurrentBetAmtList && (this.mCurrentBetAmountList = data.rcptCurrentBetAmtList);
        data.twoPlayerWinMetaList && (this.mTwoPlayerWinMetaList = data.twoPlayerWinMetaList);
        data.fourPlayerWinMetaList && (this.mFourPlayerWinMetaList = data.fourPlayerWinMetaList);
        data.defaultBetSelectAmount && (this.mDefaultBetSelectAmount = data.defaultBetSelectAmount);
        data.gameServerListBetSelect && (this.mGameServerListBetSelect = data.gameServerListBetSelect);
        data.powerupDebugUnlockCount && (this.mPowerupDebugUnlockCount = data.powerupDebugUnlockCount);
        this.mShowShortcutPopup = !!data.showShortcutPopup;
        data.canJoinLeagues && (this.mCanJoinLeagues = data.canJoinLeagues);
        null != data.powerupEnabled && (this.mPreviousPowerupSettings = data.powerupEnabled);
      };
      Player.prototype.isFriendListInitialized = function() {
        return this.mFriendsInitialized;
      };
      Player.prototype.getIsInviteTimerComplete = function() {
        return this.mIsTimerComplete;
      };
      Player.prototype.setIsInviteTimerComplete = function(val) {
        this.mIsTimerComplete = val;
      };
      Player.prototype.getIsHostLeftForceKick = function() {
        return this.mHostLeftForceKick;
      };
      Player.prototype.setHostLeftForceKick = function(val) {
        this.mHostLeftForceKick = val;
      };
      Player.prototype.getIsHostLeftForRejoin = function() {
        return this.mHostLeftForRejoin;
      };
      Player.prototype.setHostLeftForRejoin = function(val) {
        this.mHostLeftForRejoin = val;
      };
      Player.prototype.getLiveServerAddress = function(mode) {
        var modeS = "" + mode;
        var urlFound = null;
        var wsUrls = this.mSslGameServerAddress;
        var wsUrlArray = wsUrls.split(",");
        for (var i = 0; i < wsUrlArray.length; i++) {
          var url = wsUrlArray[i];
          var urlsplit = url.split(";");
          if (2 == urlsplit.length && urlsplit[1] == modeS) {
            urlFound = urlsplit[0];
            break;
          }
        }
        return urlFound;
      };
      Player.prototype.getLiveServerAddressFromList = function(mode, betAmount) {
        var modeS = mode + "_" + betAmount;
        var urlFound = null;
        var wsUrls = this.mGameServerListBetSelect;
        var wsUrlArray = wsUrls.split(",");
        for (var i = 0; i < wsUrlArray.length; i++) {
          var url = wsUrlArray[i];
          var urlsplit = url.split(";");
          if (2 == urlsplit.length && urlsplit[1] == modeS) {
            urlFound = urlsplit[0];
            break;
          }
        }
        return urlFound;
      };
      Player.prototype.getGamesPlayed = function() {
        return this.mGamesPlayed;
      };
      Player.prototype.incrementGamesPlayed = function(isPrivate) {
        this.mGamesPlayed++;
        isPrivate ? this.mPrivateGamesPlayed++ : this.mProfileInfo.mGamesPlayed++;
      };
      Player.prototype.incrementGameWon = function(isPrivate, mode) {
        if (!isPrivate) {
          this.mGamesWon++;
          this.mProfileInfo.mGamesWon++;
        }
        mode == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_1V1 ? this.mProfileInfo.mTwoPlayerGamesWon = this.mProfileInfo.mTwoPlayerGamesWon + 1 : mode == Constants_1.constants.TABLE_TYPE.TABLE_TYPE_4P && (this.mProfileInfo.mFourPlayerGamesWon = this.mProfileInfo.mFourPlayerGamesWon + 1);
      };
      Player.prototype.updateWinRate = function() {
        0 == this.mProfileInfo.mGamesPlayed || 0 == this.mProfileInfo.mGamesWon ? this.mProfileInfo.mWinRate = 0 : this.mProfileInfo.mWinRate = this.mProfileInfo.mGamesWon / this.mProfileInfo.mGamesPlayed;
      };
      Player.prototype.getPublicGamesWonCount = function() {
        return this.mProfileInfo.mTwoPlayerGamesWon + this.mProfileInfo.mFourPlayerGamesWon;
      };
      Player.prototype.getPublicGamesCount = function() {
        return this.mProfileInfo.mGamesPlayed;
      };
      Player.prototype.setCoins = function(coins) {
        this.mCoins = coins;
      };
      Player.prototype.setGems = function(gems) {
        this.mGems = gems;
      };
      Player.prototype.isDailyBonusGranted = function() {
        return this.mDailyBonusGranted;
      };
      Player.prototype.getDailyBonusAmount = function() {
        return this.mDailyBonusValue;
      };
      Player.prototype.getDailyBonusGemsAmount = function() {
        return this.mDailyBonusGemsValue;
      };
      Player.prototype.getDailyBonusCollectTime = function() {
        return this.mDailyBonusCollectTime - Math.round(Date.now() / 1e3);
      };
      Player.prototype.getDailyAdCollectTime = function() {
        return this.mDailyAdCollectTime - Math.round(Date.now() / 1e3);
      };
      Player.prototype.getCurrentBetAmount = function() {
        if (!this.mCurrentBetAmount) return 0;
        return this.mCurrentBetAmount;
      };
      Player.prototype.getCurrentBetAmountList = function() {
        if (!this.mCurrentBetAmountList) return [];
        return this.mCurrentBetAmountList;
      };
      Player.prototype.resetDailyBonus = function() {
        this.mDailyBonusGranted = false;
        this.mDailyBonusValue = 0;
        this.mDailyBonusGemsValue = 0;
      };
      Player.prototype.getTwoPlayerWinMeta = function() {
        if (!this.mTwoPlayerWinMeta) return [];
        return this.mTwoPlayerWinMeta;
      };
      Player.prototype.getFourPlayerWinMeta = function() {
        if (!this.mFourPlayerWinMeta) return [];
        return this.mFourPlayerWinMeta;
      };
      Player.prototype.getTwoPlayerWinMetaList = function() {
        if (!this.mTwoPlayerWinMetaList) return [];
        return this.mTwoPlayerWinMetaList;
      };
      Player.prototype.getFourPlayerWinMetaList = function() {
        if (!this.mFourPlayerWinMetaList) return [];
        return this.mFourPlayerWinMetaList;
      };
      Player.prototype.getDefaultBetSelectAmount = function() {
        if (!this.mDefaultBetSelectAmount) return 0;
        return this.mDefaultBetSelectAmount;
      };
      Player.prototype.setLastBetSelectedAmount = function(betAmount) {
        this.mBetSelected = betAmount;
      };
      Player.prototype.getLastBetSelectedAmount = function() {
        return this.mBetSelected;
      };
      Player.prototype.setBetSelectEnabledState = function(value) {
        this.mBetSelectEnabledState = value;
      };
      Player.prototype.getBetSelectEnabledState = function() {
        return this.mBetSelectEnabledState;
      };
      Player.prototype.setBetAndRewardInfo = function(betAmount, twoPlayerWinMeta, fourPlayerWinMeta) {
        void 0 != betAmount && (this.mCurrentBetAmount = betAmount);
        twoPlayerWinMeta && (this.mTwoPlayerWinMeta = twoPlayerWinMeta);
        fourPlayerWinMeta && (this.mFourPlayerWinMeta = fourPlayerWinMeta);
      };
      Player.prototype.setBetAndRewardListInfo = function(currentBetAmountList, twoPlayerWinMetaList, fourPlayerWinMetaList, defaultBetSelectAmount) {
        this.mCurrentBetAmountList = currentBetAmountList;
        this.mTwoPlayerWinMetaList = twoPlayerWinMetaList;
        this.mFourPlayerWinMetaList = fourPlayerWinMetaList;
        this.mDefaultBetSelectAmount = defaultBetSelectAmount;
      };
      Player.prototype.getStatusServerAddress = function() {
        return this.mStatusServerAddress;
      };
      Player.prototype.getRouterAddress = function() {
        return this.mRouterAddress;
      };
      Player.prototype.shouldShowShortcutPopup = function() {
        return this.mShowShortcutPopup;
      };
      Player.prototype.getPivateRoomInfo = function() {
        return this.mPrivateRoomInfo;
      };
      Player.prototype.resetPrivateRoomInfo = function() {
        this.mPrivateRoomInfo = null;
      };
      Player.prototype.getProfileInfo = function() {
        return this.mProfileInfo;
      };
      Player.prototype.isCustomChatEnabled = function() {
        return this.mCustomChatEnabled;
      };
      Player.prototype.getRewardedVideoGrantChips = function() {
        return this.mAdsGrantChips;
      };
      Player.prototype.canJoinLeagues = function() {
        return this.mCanJoinLeagues;
      };
      Player.prototype.setCanJoinLeagues = function() {
        this.mCanJoinLeagues = true;
      };
      Player.prototype.getRouterConnectGamesWon = function() {
        return this.mRouterConnectGamesWin;
      };
      Player.prototype.checkAndResetComingSoonPopup = function() {
        var showPopup = this.mShowComingSoonPopup;
        this.mShowComingSoonPopup = false;
        return showPopup;
      };
      Player.prototype.checkAndResetProgressiveRewardPopup = function() {
        var showPopup = this.mShowAdsPopup;
        this.mShowAdsPopup = false;
        return showPopup;
      };
      Player.prototype.getFtueTimers = function() {
        return Constants_1.constants.FTUE_TIMERS;
      };
      Player.prototype.getFtueOffTimer = function() {
        return Constants_1.constants.FTUE_OFF_TIMERS;
      };
      Player.prototype.hasProgressionEnded = function() {
        return this.mHasProgressionEnded;
      };
      Player.prototype.getProgressionEndReward = function() {
        return this.mTrophyRewards;
      };
      Player.prototype.shouldShowProgressionPopup = function() {
        return this.mShouldShowProgressionPopup;
      };
      Player.prototype.resetShowProgressionPopup = function() {
        this.mShouldShowProgressionPopup = false;
      };
      Player.prototype.getLocale = function() {
        return this.mLocale;
      };
      Player.prototype.setLocale = function(locale) {
        this.mLocale = locale;
      };
      Player.prototype.getOnlineRoomInfo = function() {
        return this.mOnlineRoomInfo;
      };
      Player.prototype.resetOnlineRoomInfo = function() {
        this.mOnlineRoomInfo = null;
      };
      Player.prototype.setSkipRoomId = function(roomId) {
        this.mSkipRoomId = roomId;
      };
      Player.prototype.getSkipRoomId = function() {
        return this.mSkipRoomId;
      };
      Player.prototype.resetSkipRoomId = function() {
        this.mSkipRoomId = "";
      };
      Player.prototype.setCustomName = function(newName) {
        this.mCustomName = newName;
      };
      Player.prototype.getCustomName = function() {
        if (this.mCustomName && "" != this.mCustomName) return this.mCustomName;
        return "";
      };
      Player.prototype.setCustomCountryCode = function(newCC) {
        this.mCustomCountryCode = newCC;
      };
      Player.prototype.getCustomCountryCode = function() {
        if (this.mCustomCountryCode && "" != this.mCustomCountryCode) return this.mCustomCountryCode;
        return "";
      };
      Player.prototype.getFriendsListDirty = function() {
        return this.mFriendListDirty;
      };
      Player.prototype.getPowerupSettings = function() {
        return this.mPowerupSettings;
      };
      Player.prototype.setPowerupSettings = function(powerupSettings) {
        this.mPowerupSettings = powerupSettings;
      };
      Player.prototype.setPreviousPowerupSettings = function(powerupSettings) {
        this.mPreviousPowerupSettings = powerupSettings;
      };
      Player.prototype.getPreviousPowerupSettings = function() {
        return this.mPreviousPowerupSettings;
      };
      Player.prototype.getPowerupDebugUnlockCount = function() {
        return this.mPowerupDebugUnlockCount;
      };
      Player.prototype.getPreviousGamesPlayedCount = function() {
        return this.mPreviousGamesPlayed;
      };
      Player.prototype.setPreviousGamesPlayedCount = function() {
        this.mPreviousGamesPlayed = this.mGamesPlayed;
      };
      Player.prototype.canShowDailyBonusVideo = function() {
        return this.mShowDailyBonusVideo;
      };
      Player.prototype.incrementDBValue = function(grantedChips, grantedGems) {
        grantedChips && (this.mDailyBonusValue += grantedChips);
        grantedGems && (this.mDailyBonusGemsValue += grantedGems);
      };
      Player.prototype.getDBAdsMultiplier = function() {
        return this.mDBAdsMultiplier;
      };
      Player.prototype.getOldGamesPlayed = function() {
        return this.mOldGamesPlayed;
      };
      Player.prototype.resetOldGamesPlayed = function() {
        this.mOldGamesPlayed = -1;
      };
      Player.prototype.setLastUsedLiveServerAddress = function(address) {
        this.mLastUsedLiveServerAddress = address;
      };
      Player.prototype.getLastUsedLiveServerAddress = function() {
        return this.mLastUsedLiveServerAddress;
      };
      return Player;
    }();
    exports.Player = Player;
    cc._RF.pop();
  }, {
    "../Constants": "Constants"
  } ],
  PopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "add97Ol8yhFEJPbPK37QLfT", "PopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PopupComponent = function(_super) {
      __extends(PopupComponent, _super);
      function PopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mCurrentScale = 1;
        return _this;
      }
      PopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.overlay && this.overlay.on(cc.Node.EventType.TOUCH_START, function() {});
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mCurrentScale = this.contents.scale;
      };
      PopupComponent.prototype.start = function() {
        this.closeButton && this.closeButton.clickEvents.push(this.getEventHandler("hidePopup"));
      };
      PopupComponent.prototype.showPopup = function() {
        this.node.active = true;
        this.mStatsController.count("popup", 1, "open", this.node.name);
        this.contents.scale = .01;
        var action = cc.scaleTo(.2, this.mCurrentScale).easing(cc.easeBackOut());
        var callFunc = cc.callFunc(this.animationComplete, this);
        var sequence = cc.sequence(action, callFunc);
        this.contents.runAction(sequence);
        this.mPersistantNodeComponent && this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_POPUP_SHOWN, {
          popup_name: this.node.name
        });
      };
      PopupComponent.prototype.animationComplete = function() {
        this.node.emit(Constants_1.constants.Events.EVENT_POPUP_SHOW_COMPLETE);
      };
      PopupComponent.prototype.hidePopup = function() {
        this.node.active && this.mStatsController.count("popup", 1, "close", this.node.name);
        this.node.active = false;
        this.mPersistantNodeComponent && this.mPersistantNodeComponent.node.emit("popup_closed", {
          popup_name: this.node.name
        });
      };
      PopupComponent.prototype.getEventHandler = function(functionName) {
        var eHandler = new cc.Component.EventHandler();
        eHandler.target = this.node;
        eHandler.component = "PopupComponent";
        eHandler.handler = functionName;
        return eHandler;
      };
      PopupComponent.prototype.isOpen = function() {
        return this.node.active;
      };
      __decorate([ property(cc.Node) ], PopupComponent.prototype, "contents", void 0);
      __decorate([ property(cc.Node) ], PopupComponent.prototype, "overlay", void 0);
      __decorate([ property(cc.Button) ], PopupComponent.prototype, "closeButton", void 0);
      PopupComponent = __decorate([ ccclass ], PopupComponent);
      return PopupComponent;
    }(cc.Component);
    exports.default = PopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ProfileCustomizationController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1c167AZDEZO6L8lBPKSgmDi", "ProfileCustomizationController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfileCustomizationController = function() {
      function ProfileCustomizationController() {
        this.isExperimentOn = false;
        ProfileCustomizationController._instance = this;
      }
      ProfileCustomizationController.getInstance = function() {
        if (ProfileCustomizationController._instance) return ProfileCustomizationController._instance;
        ProfileCustomizationController._instance = new ProfileCustomizationController();
        return ProfileCustomizationController._instance;
      };
      ProfileCustomizationController.prototype.isEnabled = function() {
        return this.isExperimentOn;
      };
      ProfileCustomizationController.prototype.setExperiementFlag = function(value) {
        this.isExperimentOn = value;
      };
      ProfileCustomizationController.prototype.getExperimentFlag = function() {
        return this.isExperimentOn;
      };
      ProfileCustomizationController.prototype.LoadCountryCodes = function() {
        0 == Object.keys(ProfileCustomizationController.countryCodes).length && this.readFlagData();
      };
      ProfileCustomizationController.prototype.getCountryCodes = function() {
        if (0 == Object.keys(ProfileCustomizationController.countryCodes).length) return;
        return ProfileCustomizationController.countryCodes;
      };
      ProfileCustomizationController.prototype.readFlagData = function() {
        cc.loader.loadRes(ProfileCustomizationController.COUNTRY_FLAGS_INFO_FILE_NAME, function(err, data) {
          if (!err) {
            var arr = data;
            var indexCounter = 0;
            for (var i = 0; i < arr.length; i++) if (arr[i].skip && "0" == arr[i].skip) {
              ProfileCustomizationController.countryCodes[indexCounter] = arr[i];
              indexCounter++;
            }
          }
        });
      };
      ProfileCustomizationController.prototype.getCountryNameByCode = function(ccode) {
        for (var i = 0; i < Object.keys(ProfileCustomizationController.countryCodes).length; i++) if (ProfileCustomizationController.countryCodes[i].code == ccode) return ProfileCustomizationController.countryCodes[i].name;
        return "";
      };
      ProfileCustomizationController.prototype.getCountryFileNameByCode = function(ccode) {
        for (var i = 0; i < Object.keys(ProfileCustomizationController.countryCodes).length; i++) if (ProfileCustomizationController.countryCodes[i].code == ccode) return ProfileCustomizationController.countryCodes[i].file;
        return "";
      };
      ProfileCustomizationController.prototype.addPlayerCountry = function(pid, countryCode) {
        ProfileCustomizationController.playersCountryCache[pid] = countryCode;
      };
      ProfileCustomizationController.prototype.addPlayerCustomName = function(pid, cName) {
        ProfileCustomizationController.playersCusNameCache[pid] = cName;
      };
      ProfileCustomizationController.prototype.getCountryCodeByPid = function(pid) {
        if (ProfileCustomizationController.playersCountryCache[pid]) return ProfileCustomizationController.playersCountryCache[pid];
        return ProfileCustomizationController.GLOBAL_COUNTRY_FLAG_CODE;
      };
      ProfileCustomizationController.prototype.getCustomNameByPid = function(pid) {
        if (ProfileCustomizationController.playersCusNameCache[pid]) return ProfileCustomizationController.playersCusNameCache[pid];
        return "";
      };
      ProfileCustomizationController.SERVER_RESPONSE_SUCEESS = "true";
      ProfileCustomizationController.SERVER_RESPONSE_FAILED_ABUSIVE_NAME = "abusive_name";
      ProfileCustomizationController.SERVER_RESPONSE_NONE = "no_response";
      ProfileCustomizationController.SERVER_RESPONSE_MAXED_OUT = "maxed_out";
      ProfileCustomizationController.COUNTRY_FLAGS_INFO_FILE_NAME = "country_flag_info";
      ProfileCustomizationController.GLOBAL_COUNTRY_FLAG_NAME = "flag_world_01";
      ProfileCustomizationController.GLOBAL_COUNTRY_FLAG_CODE = "GLO";
      ProfileCustomizationController.countryCodes = {};
      ProfileCustomizationController.playersCountryCache = {};
      ProfileCustomizationController.playersCusNameCache = {};
      return ProfileCustomizationController;
    }();
    exports.ProfileCustomizationController = ProfileCustomizationController;
    cc._RF.pop();
  }, {} ],
  ProfileImageComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d41ebH+KrpA9rFultPirRwo", "ProfileImageComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExperiementController_1 = require("./../Controllers/ExperiementController");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var Logger_1 = require("../Generic/Logger");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var ActionPlaySound_1 = require("../Actions/ActionPlaySound");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LeagueBadgeComponent_1 = require("./LeagueBadgeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProfileImageComponent = function(_super) {
      __extends(ProfileImageComponent, _super);
      function ProfileImageComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.squareSprite = null;
        _this.spinnerComponent = null;
        _this.progressBar = null;
        _this.squareProgressBar = null;
        _this.leftNode = null;
        _this.squareLeftNode = null;
        _this.maskNode = null;
        _this.squareMaskNode = null;
        _this.rankOneNode = null;
        _this.rankTwoNode = null;
        _this.profileButton = null;
        _this.leagueBadgeComponent = null;
        _this.mHalfTimeVibration = false;
        _this.mProgressBar = null;
        _this.mSprite = null;
        _this.mLeftNode = null;
        _this.mIndex = -1;
        _this.mInitialized = false;
        _this.mUrl = "";
        return _this;
      }
      ProfileImageComponent.prototype.onLoad = function() {
        this.mInitialized || (this.node.active = false);
      };
      ProfileImageComponent.prototype.preInitialize = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mActionController = persistantNodeComponent.GetActionController();
        this.mSoundController = persistantNodeComponent.GetSoundController();
        this.mConfigurationController = persistantNodeComponent.GetConfigurationController();
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mLogger = new Logger_1.Logger("ProfileImageComponent", true);
        if (Helper_1.Helper.isRendererCanvas()) {
          this.mProgressBar = this.squareProgressBar;
          this.mSprite = this.squareSprite;
          this.mLeftNode = this.squareLeftNode;
          this.maskNode.active = false;
          this.squareMaskNode.active = true;
        } else {
          this.mProgressBar = this.progressBar;
          this.mSprite = this.sprite;
          this.mLeftNode = this.leftNode;
          this.maskNode.active = true;
          this.squareMaskNode.active = false;
        }
        this.mProgressBar && (this.mProgressBar.node.opacity = 0);
        this.mTimerRunning = false;
        this.mTotalTime = -1;
        this.mTimeRemaining = -1;
        this.node.active = false;
        this.mLeftNode && (this.mLeftNode.active = false);
        this.rankOneNode && (this.rankOneNode.active = false);
        this.rankTwoNode && (this.rankTwoNode.active = false);
        this.mTimeoutId = null;
        this.mInitialized = true;
        this.leagueBadgeComponent && (this.leagueBadgeComponent.node.active = false);
      };
      ProfileImageComponent.prototype.showBadge = function(badge) {};
      ProfileImageComponent.prototype.initialize = function(url) {
        this.preInitialize();
        this.mSprite.spriteFrame = new cc.SpriteFrame();
        this.node.active = true;
        var self = this;
        if (this.profileButton) {
          var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
          this.profileButton.interactable = player && player.isCustomChatEnabled();
          this.profileButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ProfileImageComponent", "profilePressed"));
        }
        if (!url || "" == url) return;
        this.mUrl = url;
        this.hideLeft();
        cc.loader.load({
          url: url,
          type: "png"
        }, function(err, texture) {
          if (!err) {
            self.spinnerComponent && self.spinnerComponent.hideLoader();
            self.mSprite && texture.url == self.mUrl && (self.mSprite.spriteFrame = new cc.SpriteFrame(texture));
            url == FBInstant.player.getPhoto() && self.mPersistantNodeComponent && self.mPersistantNodeComponent.cacheProfileImageSprite(self.mSprite.spriteFrame);
          }
        });
        this.spinnerComponent.showLoader();
      };
      ProfileImageComponent.prototype.startTimer = function(totalTime, halfTimeVibration) {
        void 0 === halfTimeVibration && (halfTimeVibration = false);
        this.mLogger.Log("Starting timer with time " + totalTime);
        this.mTotalTime = totalTime;
        this.mTimeRemaining = totalTime;
        this.mTimerRunning = true;
        this.mHalfTimeVibration = !halfTimeVibration;
        this.mProgressBar && this.mProgressBar.node && this.mProgressBar.node.runAction(cc.fadeIn(.2));
        this.startSoundTimer();
      };
      ProfileImageComponent.prototype.setTimerOffset = function(timeRemaining) {
        this.mTimeRemaining = timeRemaining;
        this.startSoundTimer();
      };
      ProfileImageComponent.prototype.startSoundTimer = function() {
        if (this.mTimeoutId) {
          clearTimeout(this.mTimeoutId);
          this.mTimeoutId = null;
        }
        var timeForFirst = this.mTimeRemaining - Math.floor(this.mTimeRemaining);
        this.mTimeoutId = setTimeout(this.onEachSecond.bind(this), 1e3 * timeForFirst);
      };
      ProfileImageComponent.prototype.onEachSecond = function() {
        var thresholdTime = .16 * this.mTotalTime;
        this.mTimeRemaining < thresholdTime && this.mActionController.runAction(ActionPlaySound_1.ActionPlaySound.Create(ActionPlaySound_1.SoundType.PAWN_TIMER));
        this.mTimeRemaining >= 1 ? this.mTimeoutId = setTimeout(this.onEachSecond.bind(this), 1e3) : this.mTimeoutId = null;
      };
      ProfileImageComponent.prototype.stopTimer = function() {
        this.mProgressBar && this.mProgressBar.node && this.mProgressBar.node.runAction(cc.fadeOut(.2));
        this.mTimerRunning = false;
        clearTimeout(this.mTimeoutId);
        this.mTimeoutId = null;
      };
      ProfileImageComponent.prototype.forceStopTimer = function() {
        this.mProgressBar && this.mProgressBar.node && this.mProgressBar.node.stopAllActions();
        this.mTimerRunning = false;
        this.mTimeoutId && clearTimeout(this.mTimeoutId);
        this.mTimeoutId = null;
      };
      ProfileImageComponent.prototype.update = function(dt) {
        if (!this.mTimerRunning) return;
        this.mTimeRemaining -= dt;
        this.mProgressBar.progress = this.mTimeRemaining / this.mTotalTime;
        if (this.mTimeRemaining <= .5 * this.mTotalTime && !this.mHalfTimeVibration) {
          this.mHalfTimeVibration = true;
          this.mSoundController.playVibration();
        }
      };
      ProfileImageComponent.prototype.showLeft = function(show) {
        void 0 === show && (show = true);
        this.mLeftNode && (this.mLeftNode.active = show);
      };
      ProfileImageComponent.prototype.showRankNode = function(show, rank) {
        void 0 === rank && (rank = -1);
        this.rankOneNode && (this.rankOneNode.active = show && 1 == rank);
        this.rankTwoNode && (this.rankTwoNode.active = show && 2 == rank);
      };
      ProfileImageComponent.prototype.hideLeft = function() {
        this.mLeftNode && (this.mLeftNode.active = false);
      };
      ProfileImageComponent.prototype.setSpriteFrame = function(sprite) {
        this.preInitialize();
        this.node.active = true;
        this.mSprite && (this.mSprite.spriteFrame = sprite);
        this.profileButton && this.profileButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ProfileImageComponent", "profilePressed"));
      };
      ProfileImageComponent.prototype.profilePressed = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_PROFILE_PRESSED, {
          index: this.mIndex
        });
      };
      ProfileImageComponent.prototype.onDestroy = function() {
        this.forceStopTimer();
      };
      ProfileImageComponent.prototype.setIndex = function(index) {
        this.mIndex = index;
      };
      ProfileImageComponent.prototype.showLeagueBadge = function(badge) {
        if (this.leagueBadgeComponent && 2 == ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI) && (this.mPersistantNodeComponent.getLeagueController().canAssignLeagues() || this.mPersistantNodeComponent.getLeagueController().wasUserInactive())) {
          this.leagueBadgeComponent.node.active = true;
          this.leagueBadgeComponent.initialize(badge);
        }
      };
      __decorate([ property(cc.Sprite) ], ProfileImageComponent.prototype, "sprite", void 0);
      __decorate([ property(cc.Sprite) ], ProfileImageComponent.prototype, "squareSprite", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], ProfileImageComponent.prototype, "spinnerComponent", void 0);
      __decorate([ property(cc.ProgressBar) ], ProfileImageComponent.prototype, "progressBar", void 0);
      __decorate([ property(cc.ProgressBar) ], ProfileImageComponent.prototype, "squareProgressBar", void 0);
      __decorate([ property(cc.Node) ], ProfileImageComponent.prototype, "leftNode", void 0);
      __decorate([ property(cc.Node) ], ProfileImageComponent.prototype, "squareLeftNode", void 0);
      __decorate([ property(cc.Node) ], ProfileImageComponent.prototype, "maskNode", void 0);
      __decorate([ property(cc.Node) ], ProfileImageComponent.prototype, "squareMaskNode", void 0);
      __decorate([ property(cc.Node) ], ProfileImageComponent.prototype, "rankOneNode", void 0);
      __decorate([ property(cc.Node) ], ProfileImageComponent.prototype, "rankTwoNode", void 0);
      __decorate([ property(cc.Button) ], ProfileImageComponent.prototype, "profileButton", void 0);
      __decorate([ property(LeagueBadgeComponent_1.default) ], ProfileImageComponent.prototype, "leagueBadgeComponent", void 0);
      ProfileImageComponent = __decorate([ ccclass ], ProfileImageComponent);
      return ProfileImageComponent;
    }(cc.Component);
    exports.default = ProfileImageComponent;
    cc._RF.pop();
  }, {
    "../Actions/ActionPlaySound": "ActionPlaySound",
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./../Controllers/ExperiementController": "ExperiementController",
    "./LeagueBadgeComponent": "LeagueBadgeComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  ProgAdCardComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8308O/eThE2qZGELuoRXA+", "ProgAdCardComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProgAdCardComponent = function(_super) {
      __extends(ProgAdCardComponent, _super);
      function ProgAdCardComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.greenNode = null;
        _this.blueNode = null;
        _this.greyNode = null;
        _this.gemNode = null;
        _this.coinNode = null;
        _this.coinDisabledNode = null;
        _this.gemDisabledNode = null;
        _this.coinAmountText = null;
        _this.spinnerComponent = null;
        return _this;
      }
      ProgAdCardComponent.prototype.onLoad = function() {
        this.initLogger();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.blueNode.getComponent(cc.Button).clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ProgAdCardComponent", "onCardButtonClicked", true));
      };
      ProgAdCardComponent.prototype.addEventListeners = function() {
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_POST_PROG_WATCH_AD, this.spinnerStopNdEnableButtonInteraction, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_PROG_AD_BUTTON_CLICK, this.disableButtonInteraction, this);
      };
      ProgAdCardComponent.prototype.spinnerStopNdEnableButtonInteraction = function() {
        this.mLogger.Log("tanisha spinnerStopNdEnableButtonInteraction" + this.spinnerComponent);
        this.spinnerComponent.hideLoader();
        this.blueNode.getComponent(cc.Button).enabled = true;
      };
      ProgAdCardComponent.prototype.disableButtonInteraction = function() {
        this.blueNode.getComponent(cc.Button).enabled = false;
      };
      ProgAdCardComponent.prototype.start = function() {
        this.addEventListeners();
      };
      ProgAdCardComponent.prototype.initialize = function(nodeType, val, isCoin, imgType) {
        this.greenNode.active = 0 == nodeType;
        this.blueNode.active = 1 == nodeType;
        this.greyNode.active = 2 == nodeType;
        this.coinAmountText.string = String(val);
        if (0 == nodeType) {
          this.coinAmountText.getComponent(cc.LabelOutline).color = new cc.Color(90, 122, 94);
          this.coinAmountText.node.color = new cc.Color(223, 233, 218);
        } else if (1 == nodeType) {
          this.coinAmountText.getComponent(cc.LabelOutline).color = new cc.Color(0, 0, 0);
          this.coinAmountText.node.color = new cc.Color(255, 255, 255);
        } else if (2 == nodeType) {
          this.coinAmountText.getComponent(cc.LabelOutline).color = new cc.Color(111, 111, 111);
          this.coinAmountText.node.color = new cc.Color(228, 228, 228);
        }
        var enabledState = nodeType <= 1;
        this.mLogger.Log("tanisha initialiZation for prog ad card ");
        this.gemNode.active = !isCoin && enabledState;
        this.gemDisabledNode.active = !isCoin && !enabledState;
        this.coinNode.active = isCoin && enabledState;
        this.coinDisabledNode.active = isCoin && !enabledState;
        this.spinnerComponent.node.active = false;
        for (var iter = 1; iter <= 5; iter++) {
          this.gemNode.getChildByName("gemStack" + iter).active = iter == imgType && !isCoin && enabledState;
          this.gemDisabledNode.getChildByName("gemStack" + iter).active = iter == imgType && !isCoin && !enabledState;
          this.coinNode.getChildByName("coinStack" + iter).active = iter == imgType && isCoin && enabledState;
          this.coinDisabledNode.getChildByName("coinStack" + iter).active = iter == imgType && isCoin && !enabledState;
        }
      };
      ProgAdCardComponent.prototype.initLogger = function() {
        this.mLogger || (this.mLogger = new Logger_1.Logger("ProgAdCardComponent", true));
      };
      ProgAdCardComponent.prototype.onCardButtonClicked = function() {
        this.spinnerComponent.node.active = true;
        this.spinnerComponent.showLoader();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_PROG_CARD_CLICK);
      };
      ProgAdCardComponent.prototype.onDestroy = function() {
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_POST_PROG_WATCH_AD, this.spinnerStopNdEnableButtonInteraction, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_PROG_AD_BUTTON_CLICK, this.disableButtonInteraction, this);
      };
      __decorate([ property(cc.Node) ], ProgAdCardComponent.prototype, "greenNode", void 0);
      __decorate([ property(cc.Node) ], ProgAdCardComponent.prototype, "blueNode", void 0);
      __decorate([ property(cc.Node) ], ProgAdCardComponent.prototype, "greyNode", void 0);
      __decorate([ property(cc.Node) ], ProgAdCardComponent.prototype, "gemNode", void 0);
      __decorate([ property(cc.Node) ], ProgAdCardComponent.prototype, "coinNode", void 0);
      __decorate([ property(cc.Node) ], ProgAdCardComponent.prototype, "coinDisabledNode", void 0);
      __decorate([ property(cc.Node) ], ProgAdCardComponent.prototype, "gemDisabledNode", void 0);
      __decorate([ property(cc.Label) ], ProgAdCardComponent.prototype, "coinAmountText", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], ProgAdCardComponent.prototype, "spinnerComponent", void 0);
      ProgAdCardComponent = __decorate([ ccclass ], ProgAdCardComponent);
      return ProgAdCardComponent;
    }(cc.Component);
    exports.default = ProgAdCardComponent;
    cc._RF.pop();
  }, {
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  ProgressComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "16aa97/+y1BHb3Mfk9JYmca", "ProgressComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProgressComponent = function(_super) {
      __extends(ProgressComponent, _super);
      function ProgressComponent() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ProgressComponent.prototype.onLoad = function() {};
      ProgressComponent.prototype.start = function() {};
      ProgressComponent.prototype.setProgressBar = function(trophies) {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mConfigurationController = persistantController.GetConfigurationController();
        var enableProgression = persistantController.GetPlayerController().shouldEnableProgression();
        if (!enableProgression) {
          this.getComponent(cc.ProgressBar).node.active = false;
          return;
        }
        this.getComponent(cc.ProgressBar).progress = this.mConfigurationController.getPercentageFromTrophies(trophies);
      };
      ProgressComponent = __decorate([ ccclass ], ProgressComponent);
      return ProgressComponent;
    }(cc.Component);
    exports.default = ProgressComponent;
    cc._RF.pop();
  }, {
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ProgressionEndPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "25b9bPSM9VOeYwqWOngrZ4g", "ProgressionEndPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Constants_1 = require("../Constants");
    var Helper_1 = require("../Generic/Helper");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var BadgeComponent_1 = require("./BadgeComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var CoinAnimationMetaComponent_1 = require("./CoinAnimationMetaComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProgressionEndPopupComponent = function(_super) {
      __extends(ProgressionEndPopupComponent, _super);
      function ProgressionEndPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.msgLabel = null;
        _this.trophiesLabel = null;
        _this.coinsLabel = null;
        _this.collectBtn = null;
        _this.closeButton = null;
        _this.badgeNode = null;
        _this.coinAnimationNode = null;
        return _this;
      }
      ProgressionEndPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.collectBtn.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ProgressionEndPopupComponent", "onCollect"));
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ProgressionEndPopupComponent", "onClose"));
        this.badgeNode.forceShowBadge(true);
      };
      ProgressionEndPopupComponent.prototype.start = function() {
        this.coinsLabel.getComponent(LocalizationComponent_1.default).setValues(this.mCoins + "");
        this.trophiesLabel.getComponent(LocalizationComponent_1.default).setValues(this.mTrophies + "");
        var player = this.mPersistantComponent.GetPlayerController().getModel();
        var trophies = player.getTrophies();
        var badge = this.mPersistantComponent.GetConfigurationController().getBadgeFromTrophies(trophies);
        this.badgeNode.showBadge(badge);
        var badgeName = this.mPersistantComponent.GetConfigurationController().getBadgeName(badge);
        var localizedBadgeName = LocalizationController_1.LocalizationController.getInstance().LocalizedString(badgeName, null);
        this.msgLabel.getComponent(LocalizationComponent_1.default).setValues("#GREAT_JOB_PLACING_LEAGUE_TEXT", {
          badge_name: localizedBadgeName
        });
      };
      ProgressionEndPopupComponent.prototype.initialize = function(trophies, coins) {
        this.mTrophies = trophies;
        this.mCoins = coins;
      };
      ProgressionEndPopupComponent.prototype.onCollect = function() {
        this.mPersistantComponent.GetStatsController().count("button", 1, this.node.name, "collect");
        this.collectCoins();
      };
      ProgressionEndPopupComponent.prototype.onClose = function() {
        this.mPersistantComponent.GetStatsController().count("button", 1, this.node.name, "close");
        this.collectCoins();
      };
      ProgressionEndPopupComponent.prototype.collectCoins = function() {
        var player = this.mPersistantComponent.GetPlayerController().getModel();
        player.resetDailyBonus();
        if (this.mCoins > 0) {
          player.setCoins(player.getCoins() + this.mCoins);
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, {
            position: this.collectBtn.node.parent.convertToWorldSpaceAR(this.collectBtn.node.getPosition()),
            comp: this.coinAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
            firstHitEvent: {
              eventName: "updateLobbyCoinsHud",
              value: this.mCoins
            }
          });
        }
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Label) ], ProgressionEndPopupComponent.prototype, "msgLabel", void 0);
      __decorate([ property(cc.Label) ], ProgressionEndPopupComponent.prototype, "trophiesLabel", void 0);
      __decorate([ property(cc.Label) ], ProgressionEndPopupComponent.prototype, "coinsLabel", void 0);
      __decorate([ property(cc.Button) ], ProgressionEndPopupComponent.prototype, "collectBtn", void 0);
      __decorate([ property(cc.Button) ], ProgressionEndPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(BadgeComponent_1.BadgeComponent) ], ProgressionEndPopupComponent.prototype, "badgeNode", void 0);
      __decorate([ property(cc.Node) ], ProgressionEndPopupComponent.prototype, "coinAnimationNode", void 0);
      ProgressionEndPopupComponent = __decorate([ ccclass ], ProgressionEndPopupComponent);
      return ProgressionEndPopupComponent;
    }(cc.Component);
    exports.default = ProgressionEndPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "./BadgeComponent": "BadgeComponent",
    "./CoinAnimationMetaComponent": "CoinAnimationMetaComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  ProgressiveRewardPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68868HHkOdG7qf/aCDhWK7z", "ProgressiveRewardPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var ProgAdCardComponent_1 = require("./ProgAdCardComponent");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProgressiveRewardPopupComponent = function(_super) {
      __extends(ProgressiveRewardPopupComponent, _super);
      function ProgressiveRewardPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.titleLabel = null;
        _this.adsLeftCount = null;
        _this.infoTextLabel = null;
        _this.reverseNode = null;
        _this.straightNode = null;
        _this.resetInfoTextLabel = null;
        _this.resetTimerLabel = null;
        _this.watchAdEnabledButton = null;
        _this.watchAdEnabledNode = null;
        _this.watchAdDisabledButton = null;
        _this.watchAdDisabledNode = null;
        _this.spinnerComponent = null;
        _this.closeButton = null;
        _this.mPlayerVariantActive = 0;
        _this.mTimeLeft = 0;
        _this.mStatsController = null;
        return _this;
      }
      ProgressiveRewardPopupComponent.prototype.onLoad = function() {
        this.initLogger();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mPlayerProgAdConfig = this.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerProgAdConfig();
        this.mPlayerProgAdMaxCount = this.mPersistantNodeComponent.GetPlayerController().getModel().getPlayerProgAdMaxCount();
        this.watchAdEnabledButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ProgressiveRewardPopupComponent", "onWatchAdsButtonClicked", true));
        this.watchAdDisabledButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ProgressiveRewardPopupComponent", "onWatchAdsButtonClicked", false));
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ProgressiveRewardPopupComponent", "closeButtonClicked", false));
        this.mLogger.Log("tanisha config from server " + JSON.stringify(this.mPlayerProgAdConfig));
        this.addEventListeners();
      };
      ProgressiveRewardPopupComponent.prototype.start = function() {};
      ProgressiveRewardPopupComponent.prototype.addEventListeners = function() {
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_RESET_ADS, this.resetAdsButton, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.changeAdRewardNodes, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_VIDEO_AVAILABLE_COUNT_CHANGED, this.onAvailableVideoCountChange, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_SUCCESS, this.onVideoPreloadSuccess, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_ERROR, this.onVideoPreloadError, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.onVideoVerifySuccess, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_ERROR, this.onVideoVerifyError, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_SHOW_COMPLETE, this.videoShowComplete, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_POST_PROG_WATCH_AD, this.resetButtonAndSpinnerStop, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_PROG_AD_BUTTON_CLICK, this.disableButtonInteraction, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_PROG_CARD_CLICK, this.onProgCardClicked, this);
      };
      ProgressiveRewardPopupComponent.prototype.closeButtonClicked = function() {
        this.getComponent(PopupComponent_1.default).hidePopup();
        this.mStatsController.count("popup", 1, "close", "progressive_adrewards", this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount() + "");
      };
      ProgressiveRewardPopupComponent.prototype.resetAdsButton = function() {
        this.enableButtonInteraction();
        this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount() > 0 && this.mPersistantNodeComponent.GetAdsController().isVideoPreloaded() ? this.enableAdsButton() : this.disableAdsButton();
      };
      ProgressiveRewardPopupComponent.prototype.buttonSpinnerStop = function() {
        this.mLogger.Log("tanisha spinner stop");
        this.spinnerComponent.hideLoader();
      };
      ProgressiveRewardPopupComponent.prototype.resetButtonAndSpinnerStop = function() {
        this.mLogger.Log("tanisha reset button n spinner stop");
        this.resetAdsButton();
        this.buttonSpinnerStop();
      };
      ProgressiveRewardPopupComponent.prototype.disableButtonInteraction = function() {
        this.watchAdEnabledButton.enabled = false;
        this.watchAdDisabledButton.enabled = false;
      };
      ProgressiveRewardPopupComponent.prototype.enableButtonInteraction = function() {
        this.watchAdEnabledButton.enabled = true;
        this.watchAdDisabledButton.enabled = true;
      };
      ProgressiveRewardPopupComponent.prototype.onVideoPreloadSuccess = function() {
        this.enableAdsButton();
      };
      ProgressiveRewardPopupComponent.prototype.onVideoVerifySuccess = function() {};
      ProgressiveRewardPopupComponent.prototype.onVideoPreloadError = function() {
        this.disableAdsButton();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_POST_PROG_WATCH_AD);
      };
      ProgressiveRewardPopupComponent.prototype.videoShowComplete = function() {};
      ProgressiveRewardPopupComponent.prototype.onVideoVerifyError = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_POST_PROG_WATCH_AD);
      };
      ProgressiveRewardPopupComponent.prototype.disableAdsButton = function() {
        this.watchAdEnabledNode.active = false;
        this.watchAdDisabledNode.active = true;
      };
      ProgressiveRewardPopupComponent.prototype.enableAdsButton = function() {
        this.watchAdEnabledNode.active = true;
        this.watchAdDisabledNode.active = false;
      };
      ProgressiveRewardPopupComponent.prototype.onWatchAdsButtonClicked = function(event, customEventData) {
        event ? this.mStatsController.count("button", 1, "progressive_adrewards", "watch", "button") : this.mStatsController.count("button", 1, "progressive_adrewards", "watch", "card");
        var adController = this.mPersistantNodeComponent.GetAdsController();
        this.mLogger.Log("tanisha Watch now Button clicked");
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_PROG_AD_BUTTON_CLICK);
        adController.getVideoAvailableCount() > 0 && adController.isVideoPreloaded() ? adController.initiateRewardedVideoAds("HUD") : this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount() <= 0 ? this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ADS_FINISHED) : this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ADS_UNAVAILABLE);
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_POST_PROG_WATCH_AD);
      };
      ProgressiveRewardPopupComponent.prototype.onProgCardClicked = function(event) {
        this.onWatchAdsButtonClicked(null, null);
      };
      ProgressiveRewardPopupComponent.prototype.initialize = function(type) {
        this.mTimeLeft = this.mPersistantNodeComponent.GetPlayerController().getModel().getDailyAdCollectTime();
        this.reverseNode.active = 3 == type;
        this.straightNode.active = 2 == type;
        this.mPlayerVariantActive = type;
        2 == type ? this.initializeStraightReverseNode(this.straightNode) : this.initializeStraightReverseNode(this.reverseNode);
        this.mLogger.Log("tanisha initialiZation for staright " + (2 == type));
        this.resetAdsButton();
      };
      ProgressiveRewardPopupComponent.prototype.update = function(dt) {
        this.mTimeLeft = this.mTimeLeft - dt;
        this.mTimeLeft < 0 && (this.mTimeLeft = 0);
        this.resetTimerLabel.string = this.getTimerStringForCollectTime(Math.round(this.mTimeLeft));
      };
      ProgressiveRewardPopupComponent.prototype.getTimerStringForCollectTime = function(timeLeft) {
        var timeString = "";
        var hour = Math.floor(timeLeft / Constants_1.constants.TIME_S.HOUR);
        timeString = hour < 10 ? "0" + hour : hour.toString();
        timeString += "h : ";
        timeLeft -= hour * Constants_1.constants.TIME_S.HOUR;
        var min = Math.floor(timeLeft / Constants_1.constants.TIME_S.MINUTE);
        min < 10 ? timeString = timeString + "0" + min : timeString += min;
        timeString += "m : ";
        var secs = Math.floor(timeLeft % Constants_1.constants.TIME_S.MINUTE);
        secs < 10 ? timeString = timeString + "0" + secs : timeString += secs;
        timeString += "s";
        return timeString;
      };
      ProgressiveRewardPopupComponent.prototype.getRelativeAdConfig = function() {
        var activeNodecount = this.mPlayerProgAdMaxCount - this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount();
        if (activeNodecount < 5) return this.mPlayerProgAdConfig.slice(0, 5);
        var endIndex = activeNodecount + 1;
        endIndex = endIndex >= this.mPlayerProgAdConfig.length ? this.mPlayerProgAdConfig.length : endIndex;
        return this.mPlayerProgAdConfig.slice(endIndex - 5, endIndex);
      };
      ProgressiveRewardPopupComponent.prototype.initializeStraightReverseNode = function(nodeType) {
        var activeNodecount = this.mPlayerProgAdMaxCount - this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount() + 1;
        var config = this.getRelativeAdConfig();
        this.adsLeftCount.string = this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount();
        activeNodecount > 5 && (activeNodecount = 5);
        0 == this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount() && (activeNodecount = 6);
        var arrowNode = nodeType.getChildByName("arrowNode");
        var infoNode = nodeType.getChildByName("InfoNode");
        arrowNode.active = true;
        infoNode.active = true;
        for (var iterator = 1; iterator <= 5; iterator++) {
          this.mLogger.Log("tanisha initialiZation for staright row " + iterator + "activeNodecount " + activeNodecount + " arrowImgEnabled " + (activeNodecount < iterator));
          if (iterator < 5) {
            arrowNode.getChildByName("arrowImg_0" + iterator).getChildByName("arrowImgEnabled").active = activeNodecount > iterator;
            arrowNode.getChildByName("arrowImg_0" + iterator).getChildByName("arrowImgDisabled").active = activeNodecount <= iterator;
          }
          var cardType = iterator == activeNodecount ? 1 : iterator > activeNodecount ? 2 : 0;
          var cardConfig = config[iterator - 1];
          infoNode.getChildByName("Node" + iterator).getComponent(ProgAdCardComponent_1.default).initialize(cardType, cardConfig.val, cardConfig.isCoin, cardConfig.imgType);
        }
      };
      ProgressiveRewardPopupComponent.prototype.onAvailableVideoCountChange = function() {
        this.buttonSpinnerStop();
        this.changeAdRewardNodes();
        this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount() && this.mPersistantNodeComponent.GetAdsController().isVideoPreloaded() ? this.enableAdsButton() : this.disableAdsButton();
      };
      ProgressiveRewardPopupComponent.prototype.changeAdRewardNodes = function() {
        if (2 == this.mPlayerVariantActive) this.initializeStraightReverseNode(this.straightNode); else {
          if (3 != this.mPlayerVariantActive) return;
          this.initializeStraightReverseNode(this.reverseNode);
        }
      };
      ProgressiveRewardPopupComponent.prototype.changeStraightReverseNode = function(nodeType) {
        var currentSeenVideo = this.mPlayerProgAdMaxCount - this.mPersistantNodeComponent.GetAdsController().getVideoAvailableCount();
        currentSeenVideo >= 4 && (currentSeenVideo = 4);
        var config = this.getRelativeAdConfig();
        var arrowNode = nodeType.getChildByName("arrowNode");
        var infoNode = nodeType.getChildByName("InfoNode");
        if (currentSeenVideo < this.mPlayerProgAdMaxCount) {
          arrowNode.getChildByName("arrowImg_0" + currentSeenVideo).getChildByName("arrowImgEnabled").active = true;
          arrowNode.getChildByName("arrowImg_0" + currentSeenVideo).getChildByName("arrowImgDisabled").active = false;
        }
        var cardConfig = config[currentSeenVideo - 1];
        infoNode.getChildByName("Node" + currentSeenVideo).getComponent(ProgAdCardComponent_1.default).initialize(0, cardConfig.val, cardConfig.isCoin, cardConfig.imgType);
        var toBeSeenVideo = currentSeenVideo + 1;
        if (toBeSeenVideo <= this.mPlayerProgAdMaxCount) {
          cardConfig = config[toBeSeenVideo - 1];
          infoNode.getChildByName("Node" + toBeSeenVideo).getComponent(ProgAdCardComponent_1.default).initialize(1, cardConfig.val, cardConfig.isCoin, cardConfig.imgType);
        }
      };
      ProgressiveRewardPopupComponent.prototype.initLogger = function() {
        this.mLogger || (this.mLogger = new Logger_1.Logger("ProgressiveRewardPopupComponent", true));
      };
      ProgressiveRewardPopupComponent.prototype.onDestroy = function() {
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_RESET_ADS, this.resetAdsButton, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.changeAdRewardNodes, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_VIDEO_AVAILABLE_COUNT_CHANGED, this.onAvailableVideoCountChange, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_SUCCESS, this.onVideoPreloadSuccess, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_PRELOADED_ERROR, this.onVideoPreloadError, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_SUCCESS, this.onVideoVerifySuccess, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_VERIFY_ERROR, this.onVideoVerifyError, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_REWARDED_VIDEO_SHOW_COMPLETE, this.videoShowComplete, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_POST_PROG_WATCH_AD, this.resetButtonAndSpinnerStop, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_PROG_AD_BUTTON_CLICK, this.disableButtonInteraction, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_PROG_CARD_CLICK, this.onProgCardClicked, this);
      };
      __decorate([ property(cc.Label) ], ProgressiveRewardPopupComponent.prototype, "titleLabel", void 0);
      __decorate([ property(cc.Label) ], ProgressiveRewardPopupComponent.prototype, "adsLeftCount", void 0);
      __decorate([ property(cc.Label) ], ProgressiveRewardPopupComponent.prototype, "infoTextLabel", void 0);
      __decorate([ property(cc.Node) ], ProgressiveRewardPopupComponent.prototype, "reverseNode", void 0);
      __decorate([ property(cc.Node) ], ProgressiveRewardPopupComponent.prototype, "straightNode", void 0);
      __decorate([ property(cc.Label) ], ProgressiveRewardPopupComponent.prototype, "resetInfoTextLabel", void 0);
      __decorate([ property(cc.Label) ], ProgressiveRewardPopupComponent.prototype, "resetTimerLabel", void 0);
      __decorate([ property(cc.Button) ], ProgressiveRewardPopupComponent.prototype, "watchAdEnabledButton", void 0);
      __decorate([ property(cc.Node) ], ProgressiveRewardPopupComponent.prototype, "watchAdEnabledNode", void 0);
      __decorate([ property(cc.Button) ], ProgressiveRewardPopupComponent.prototype, "watchAdDisabledButton", void 0);
      __decorate([ property(cc.Node) ], ProgressiveRewardPopupComponent.prototype, "watchAdDisabledNode", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], ProgressiveRewardPopupComponent.prototype, "spinnerComponent", void 0);
      __decorate([ property(cc.Button) ], ProgressiveRewardPopupComponent.prototype, "closeButton", void 0);
      ProgressiveRewardPopupComponent = __decorate([ ccclass ], ProgressiveRewardPopupComponent);
      return ProgressiveRewardPopupComponent;
    }(cc.Component);
    exports.default = ProgressiveRewardPopupComponent;
    cc._RF.pop();
  }, {
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./PopupComponent": "PopupComponent",
    "./ProgAdCardComponent": "ProgAdCardComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  Queue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70e04TKWLVIcYeQn7ZIU9zt", "Queue");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Queue = function() {
      function Queue() {
        this._store = [];
      }
      Queue.prototype.push = function(val) {
        this._store.push(val);
      };
      Queue.prototype.pop = function() {
        return this._store.shift();
      };
      Queue.prototype.clear = function() {
        this._store = [];
      };
      Queue.prototype.length = function() {
        return this._store.length;
      };
      Queue.prototype.getRaw = function() {
        return this._store;
      };
      return Queue;
    }();
    exports.Queue = Queue;
    cc._RF.pop();
  }, {} ],
  RankUpPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5b90ol77NLxoUfOKzC6FSp", "RankUpPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GenericPopupComponent_1 = require("GenericPopupComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RankUpPopupComponent = function(_super) {
      __extends(RankUpPopupComponent, _super);
      function RankUpPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.shareButton = null;
        return _this;
      }
      RankUpPopupComponent.prototype.initialize = function(title, message, primaryBtnText, showCloseButton, primaryBtnCallback, secondaryBtnCallBack, closeBtnCallBack) {
        _super.prototype.initialize.call(this, title, message, primaryBtnText, showCloseButton, primaryBtnCallback, closeBtnCallBack);
        this.shareButton.clickEvents.push(secondaryBtnCallBack);
      };
      RankUpPopupComponent.prototype.resetButtons = function() {
        _super.prototype.resetButtons.call(this);
        this.clearCallbacks(this.shareButton);
      };
      __decorate([ property(cc.Button) ], RankUpPopupComponent.prototype, "shareButton", void 0);
      RankUpPopupComponent = __decorate([ ccclass ], RankUpPopupComponent);
      return RankUpPopupComponent;
    }(GenericPopupComponent_1.default);
    exports.default = RankUpPopupComponent;
    cc._RF.pop();
  }, {
    GenericPopupComponent: "GenericPopupComponent"
  } ],
  RankingPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37315ZBIJVLL7v8Zei/QVdG", "RankingPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("../Components/PersistantNodeComponent");
    var ProfileImageComponent_1 = require("../Components/ProfileImageComponent");
    var Constants_1 = require("../Constants");
    var GenericPopupComponent_1 = require("./GenericPopupComponent");
    var PopupComponent_1 = require("../Components/PopupComponent");
    var Helper_1 = require("../Generic/Helper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RankingPopupComponent = function(_super) {
      __extends(RankingPopupComponent, _super);
      function RankingPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.profileNode = null;
        _this.profileImage = null;
        _this.progressBar = null;
        _this.progressBarBackground = null;
        return _this;
      }
      RankingPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.mPlayerController = persistantController.GetPlayerController();
        this.mPlayerModel = this.mPlayerController.getModel();
        this.mConfigurationController = persistantController.GetConfigurationController();
        var closeCallback = Helper_1.Helper.getEventHandler(this.node, "RankingPopupComponent", "hidePopup");
        this.okayButton.clickEvents.push(closeCallback);
        this.crossButton.clickEvents.push(closeCallback);
      };
      RankingPopupComponent.prototype.initializeFBPhoto = function(url) {
        this.profileImage.getComponent(ProfileImageComponent_1.default).initialize(url);
      };
      RankingPopupComponent.prototype.getBadgeNode = function(badge) {
        if (badge == Constants_1.constants.BADGE.NONE) return this.noneNode;
        if (badge == Constants_1.constants.BADGE.BRONZE) return this.bronzeNode;
        if (badge == Constants_1.constants.BADGE.SILVER) return this.silverNode;
        if (badge == Constants_1.constants.BADGE.GOLD) return this.goldNode;
        if (badge == Constants_1.constants.BADGE.PLATINUM) return this.platinumNode;
        return this.diamondNode;
      };
      RankingPopupComponent.prototype.InitializeProfileComponent = function() {
        var percent = this.mConfigurationController.getPercentageFromTrophies(this.mPlayerModel.getTrophies());
        var badge = this.mConfigurationController.getBadgeFromTrophies(this.mPlayerModel.getTrophies());
        badge >= Constants_1.constants.BADGE.DIAMOND && (percent = 0);
        var profileX = (this.getBadgeNode(badge + 1).getPositionX() - this.getBadgeNode(badge).getPositionX()) * percent + this.getBadgeNode(badge).getPositionX();
        this.profileNode.setPositionX(profileX);
        this.mPersistantComponent.getCachedProfileImageSprite() && this.profileImage.getComponent(ProfileImageComponent_1.default).setSpriteFrame(this.mPersistantComponent.getCachedProfileImageSprite());
        var offsetX = 0;
        var progressPercent = (profileX - this.getBadgeNode(Constants_1.constants.BADGE.NONE).getPositionX()) / (this.diamondNode.getPositionX() - this.getBadgeNode(Constants_1.constants.BADGE.NONE).getPositionX());
        this.progressBar.progress = progressPercent;
      };
      RankingPopupComponent.prototype.hidePopup = function() {
        this.mPersistantComponent.GetStatsController().count("popup", 1, "close", "rank_info");
        this.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Node) ], RankingPopupComponent.prototype, "profileNode", void 0);
      __decorate([ property(cc.Node) ], RankingPopupComponent.prototype, "profileImage", void 0);
      __decorate([ property(cc.ProgressBar) ], RankingPopupComponent.prototype, "progressBar", void 0);
      __decorate([ property(cc.Sprite) ], RankingPopupComponent.prototype, "progressBarBackground", void 0);
      __decorate([ property(cc.Node) ], RankingPopupComponent.prototype, "noneNode", void 0);
      __decorate([ property(cc.Node) ], RankingPopupComponent.prototype, "bronzeNode", void 0);
      __decorate([ property(cc.Node) ], RankingPopupComponent.prototype, "silverNode", void 0);
      __decorate([ property(cc.Node) ], RankingPopupComponent.prototype, "goldNode", void 0);
      __decorate([ property(cc.Node) ], RankingPopupComponent.prototype, "platinumNode", void 0);
      __decorate([ property(cc.Node) ], RankingPopupComponent.prototype, "diamondNode", void 0);
      __decorate([ property(cc.Button) ], RankingPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Button) ], RankingPopupComponent.prototype, "crossButton", void 0);
      RankingPopupComponent = __decorate([ ccclass ], RankingPopupComponent);
      return RankingPopupComponent;
    }(GenericPopupComponent_1.default);
    exports.default = RankingPopupComponent;
    cc._RF.pop();
  }, {
    "../Components/PersistantNodeComponent": "PersistantNodeComponent",
    "../Components/PopupComponent": "PopupComponent",
    "../Components/ProfileImageComponent": "ProfileImageComponent",
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./GenericPopupComponent": "GenericPopupComponent"
  } ],
  ReferralController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "52d11KCwxFCN6fBOxO7jHz4", "ReferralController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var Constants_1 = require("../Constants");
    var Helper_1 = require("../Generic/Helper");
    var ReferralController = function() {
      function ReferralController(persistantNodeComponent) {
        this.mShowWelcomePopup = false;
        this.mWelcomeShowData = null;
        this.mReferralEnabled = false;
        this.mLogger = new Logger_1.Logger("ReferralController", true);
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mPlayerController = this.mPersistantNodeComponent.GetPlayerController();
      }
      ReferralController.prototype.setReferralEnabled = function(enabled) {
        this.mReferralEnabled = enabled;
      };
      ReferralController.prototype.getReferralEnabled = function() {
        return this.mReferralEnabled;
      };
      ReferralController.prototype.fbInviteForReferral = function(callback, closeCallback, errorCallback) {
        var self = this;
        this.mLogger.Log("fbInviteForReferral enter");
        FBInstant.context.chooseAsync({
          filters: [ "NEW_PLAYERS_ONLY" ]
        }).then(function() {
          var ctxId = FBInstant.context.getID();
          var ctxType = FBInstant.context.getType();
          var data = {
            id: ctxId,
            type: ctxType
          };
          self.mLogger.Log("chooseAsync then");
          callback && callback(data);
        }, function(reason) {
          "SAME_CONTEXT" === reason.code ? callback() : "USER_INPUT" == reason.code ? closeCallback && closeCallback() : errorCallback && errorCallback(reason.code);
        });
      };
      ReferralController.prototype.inviteForReferral = function() {
        this.mLogger.Log("tanisha inviteForReferral ");
        this.fbInviteForReferral(this.OnInviteComplete.bind(this), this.OnInviteClosed.bind(this), this.OnInviteError.bind(this));
      };
      ReferralController.prototype.OnInviteComplete = function(data) {
        this.closeInviteSentPopup();
        this.mLogger.Log("tanisha OnInviteComplete " + JSON.stringify(data));
        var contextId = FBInstant.context.getID();
        var playerId = this.mPersistantNodeComponent.GetPlayerController().getPlayerId();
        var playerName = this.mPlayerController.getPlayerName();
        var playerPic = this.mPlayerController.getPhotoUrl();
        var message = "Hey! Play Ludo Club via my invite and we both will get " + Helper_1.Helper.formatWithCommas(this.mPlayerController.getModel().getPlayerReferralRewardAmount()) + " coins for FREE!";
        var playerReferralCode = this.mPlayerController.getModel().getPlayerReferralCode();
        var playerFBId = this.mPlayerController.getFbId();
        this.mStatsController.count("chatbot", 1, "referral_invite", "send", playerFBId, contextId);
        Helper_1.Helper.sendInviteToPlayer(playerName, playerPic, null, playerId, message, playerReferralCode, this.OnInviteSendSuccess.bind(this), this.OnInviteSendError.bind(this));
      };
      ReferralController.prototype.OnInviteClosed = function() {
        this.closeInviteSentPopup();
        this.mLogger.Log("tanisha OnInviteClosed ");
      };
      ReferralController.prototype.OnInviteError = function(reason) {
        this.closeInviteSentPopup();
        this.mStatsController.count("chatbot", 1, "referral_invite", "send_fail");
      };
      ReferralController.prototype.OnInviteSendSuccess = function(roomId) {
        this.closeInviteSentPopup();
        this.mStatsController.count("chatbot", 1, "referral_invite", "send_success");
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_SENT_SUCCESS_POPUP);
      };
      ReferralController.prototype.OnInviteSendError = function(reason) {
        this.closeInviteSentPopup();
        this.mStatsController.count("chatbot", 1, "referral_invite", "fail");
      };
      ReferralController.prototype.closeInviteSentPopup = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_CLOSE_INVITE_SENT_POPUP);
      };
      ReferralController.prototype.claimChips = function(referralCode) {
        var playerController = this.mPersistantNodeComponent.GetPlayerController();
        var params = {
          pid: playerController.getModel().getId(),
          access_token: playerController.getModel().getAccessToken(),
          duid: playerController.getModel().getSnuid(),
          code: referralCode,
          type: 3
        };
        var self = this;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/earn/chips", params, function(data) {
          self.mLogger.Log("tanisha claimChips vrified " + JSON.stringify(data));
          if (data.returnCode) return;
          self.mStatsController.count("gameplay", 1, "enter_code", "success");
          playerController.getModel().setCanClaimReferral(false);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_FRIENDS_NODE);
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_GRANTED_POPUP, {
            grantChips: data.chips,
            friendName: data.friend_name
          });
          self.mPersistantNodeComponent.GetPlayerController().onReceiptFetch(data);
        }, function() {
          var condition = navigator.onLine ? "online" : "offline";
          self.mStatsController.count("gameplay", 1, "enter_code", "failure");
          self.mLogger.Log("tanisha: referral fail ");
          self.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_ERROR_TEXT_CODE, {
            online: "online" == condition
          });
        });
      };
      ReferralController.prototype.claimChipsForNewUser = function(referralCode) {
        this.mLogger.Log("claimChipsForNewUser enter with referralCode " + referralCode);
        var playerController = this.mPersistantNodeComponent.GetPlayerController();
        var params = {
          pid: playerController.getModel().getId(),
          access_token: playerController.getModel().getAccessToken(),
          duid: playerController.getModel().getSnuid(),
          code: referralCode,
          type: 3
        };
        var self = this;
        var connection = new Connection_1.Connection(Config_1.Config.USER_SERVER_ADDR);
        connection.doPost("/earn/chips", params, function(data) {
          if (data.returnCode) return;
          self.mLogger.Log("tanisha claimChips vrified " + JSON.stringify(data));
          playerController.getModel().setCanClaimReferral(false);
          self.setShowWelcomePopup(true, data);
          self.mPersistantNodeComponent.GetPlayerController().onReceiptFetch(data);
        }, function() {
          self.mLogger.Log("tanisha: referral fail ");
        });
      };
      ReferralController.prototype.showWelcomePopup = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_REFERRAL_WELCOME_POPUP, {
          grantChips: this.mWelcomeShowData.chips,
          friendName: this.mWelcomeShowData.friend_name
        });
      };
      ReferralController.prototype.setShowWelcomePopup = function(show, data) {
        this.mShowWelcomePopup = show;
        this.mWelcomeShowData = data;
      };
      ReferralController.prototype.shouldShowWelcomePopupStatus = function() {
        return this.getReferralEnabled() && this.mShowWelcomePopup;
      };
      return ReferralController;
    }();
    exports.ReferralController = ReferralController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger"
  } ],
  ReferralInvitePopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "581c0NwYQpBUajIHKq3Omjm", "ReferralInvitePopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ReferralInvitePopupComponent = function(_super) {
      __extends(ReferralInvitePopupComponent, _super);
      function ReferralInvitePopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.parentRepositioningNode = null;
        _this.headerText = null;
        _this.closeButton = null;
        _this.yourCodeNodeInfoText = null;
        _this.selectFriendButton = null;
        _this.friendsCodeNode = null;
        _this.friendsCodeNodeSendButton = null;
        _this.friendsCodeNodeLabelText = null;
        _this.inviteMoreFriendsCodeNode = null;
        _this.errorCodeText = null;
        _this.coinTextLabel = null;
        _this.mStatsController = null;
        _this.mReferralController = null;
        _this.editBoxCheckTimer = 0;
        return _this;
      }
      ReferralInvitePopupComponent.prototype.onLoad = function() {
        this.initLogger();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayer = this.mPersistantNodeComponent.GetPlayerController().getModel();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mReferralController = this.mPersistantNodeComponent.GetReferralController();
        this.selectFriendButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralInvitePopupComponent", "onSelectFriendButtonClicked", false));
        this.friendsCodeNodeSendButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralInvitePopupComponent", "onfriendsCodeNodeSendButtonClicked", false));
        this.friendsCodeNodeLabelText.editingDidBegan.push(Helper_1.Helper.getEventHandler(this.node, "ReferralInvitePopupComponent", "onfriendsCodeNodeEditBoxClicked", false));
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_FRIENDS_NODE, this.setCodeEntryType, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_SHOW_ERROR_TEXT_CODE, this.showErrorCodeText, this);
        this.friendsCodeNodeLabelText.editBoxEditingReturn = this.onfriendsCodeNodeSendButtonClicked.bind(this);
      };
      ReferralInvitePopupComponent.prototype.initLogger = function() {
        this.mLogger = new Logger_1.Logger("ReferralInvitePopupComponent", true);
      };
      ReferralInvitePopupComponent.prototype.start = function() {};
      ReferralInvitePopupComponent.prototype.initialize = function() {
        this.setCodeEntryType();
        this.errorCodeText.node.active = false;
        this.yourCodeNodeInfoText.string = this.mPlayer.getPlayerReferralCode();
        var referralValue = Helper_1.Helper.formatWithCommas(this.mPlayer.getPlayerReferralRewardAmount());
        var localizationComponent = this.coinTextLabel.node.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues("#REFERRAL_NUM", {
          referral_num: referralValue + "!"
        });
        this.setPlaceHolderForFriendsCode();
        this.initializeEditBox();
      };
      ReferralInvitePopupComponent.prototype.setCodeEntryType = function() {
        var showFriendNode = this.mPlayer.getCanClaimReferral();
        this.inviteMoreFriendsCodeNode.active = !showFriendNode;
        this.friendsCodeNode.active = showFriendNode;
        this.friendsCodeNodeSendButton.interactable = false;
      };
      ReferralInvitePopupComponent.prototype.setPlaceHolderForFriendsCode = function() {
        this.friendsCodeNodeLabelText.string = "";
        this.friendsCodeNodeLabelText.placeholder = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#ENTER_CODE_TEXT", {});
      };
      ReferralInvitePopupComponent.prototype.showErrorCodeText = function(event) {
        if (event) {
          var data = event.getUserData();
          var localizationComponent = this.errorCodeText.node.getComponent(LocalizationComponent_1.default);
          data.online ? localizationComponent.setValues("#INVALID_CODE_TEXT") : localizationComponent.setValues("#SERVER_RESPONSE_CONNECTION_ERROR");
        }
        this.errorCodeText.node.active = true;
      };
      ReferralInvitePopupComponent.prototype.hideErrorCodeText = function() {
        this.errorCodeText.node.active = false;
      };
      ReferralInvitePopupComponent.prototype.onfriendsCodeNodeSendButtonClicked = function() {
        var enteredCode = this.friendsCodeNodeLabelText.string;
        this.hideErrorCodeText();
        this.mReferralController.claimChips(enteredCode);
      };
      ReferralInvitePopupComponent.prototype.onSelectFriendButtonClicked = function() {
        this.mStatsController.count("button", 1, "click", "referral_invite");
        this.mReferralController.inviteForReferral();
      };
      ReferralInvitePopupComponent.prototype.initializeEditBox = function() {
        if (this.friendsCodeNodeLabelText) {
          this.friendsCodeNodeLabelText.string = "";
          cc.sys.os != cc.sys.OS_IOS && this.friendsCodeNodeLabelText.setParentNodeForRepositioning(this.parentRepositioningNode);
        }
      };
      ReferralInvitePopupComponent.prototype.onfriendsCodeNodeEditBoxClicked = function() {
        this.hideErrorCodeText();
      };
      ReferralInvitePopupComponent.prototype.setSendButtonStatus = function(status) {
        this.friendsCodeNodeSendButton.interactable = status;
      };
      ReferralInvitePopupComponent.prototype.update = function(dt) {
        this.editBoxCheckTimer += dt;
        if (this.friendsCodeNodeLabelText && this.editBoxCheckTimer > .2) {
          this.editBoxCheckTimer = 0;
          var text = this.friendsCodeNodeLabelText.string;
          text && text.replace(/\s/g, "").length ? this.setSendButtonStatus(true) : this.setSendButtonStatus(false);
        }
      };
      __decorate([ property(cc.Node) ], ReferralInvitePopupComponent.prototype, "parentRepositioningNode", void 0);
      __decorate([ property(cc.Label) ], ReferralInvitePopupComponent.prototype, "headerText", void 0);
      __decorate([ property(cc.Button) ], ReferralInvitePopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Label) ], ReferralInvitePopupComponent.prototype, "yourCodeNodeInfoText", void 0);
      __decorate([ property(cc.Button) ], ReferralInvitePopupComponent.prototype, "selectFriendButton", void 0);
      __decorate([ property(cc.Node) ], ReferralInvitePopupComponent.prototype, "friendsCodeNode", void 0);
      __decorate([ property(cc.Button) ], ReferralInvitePopupComponent.prototype, "friendsCodeNodeSendButton", void 0);
      __decorate([ property(cc.EditBox) ], ReferralInvitePopupComponent.prototype, "friendsCodeNodeLabelText", void 0);
      __decorate([ property(cc.Node) ], ReferralInvitePopupComponent.prototype, "inviteMoreFriendsCodeNode", void 0);
      __decorate([ property(cc.Label) ], ReferralInvitePopupComponent.prototype, "errorCodeText", void 0);
      __decorate([ property(cc.Label) ], ReferralInvitePopupComponent.prototype, "coinTextLabel", void 0);
      ReferralInvitePopupComponent = __decorate([ ccclass ], ReferralInvitePopupComponent);
      return ReferralInvitePopupComponent;
    }(cc.Component);
    exports.default = ReferralInvitePopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ReferralInviteSentPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "101ef/Sh5JA963QEyO9TlTw", "ReferralInviteSentPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ReferralInviteSentPopupComponent = function(_super) {
      __extends(ReferralInviteSentPopupComponent, _super);
      function ReferralInviteSentPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.closeButton = null;
        _this.okayButton = null;
        _this.inviteMoreButton = null;
        _this.coinTextLabel = null;
        _this.spinnerComponent = null;
        _this.mPlayer = null;
        _this.mStatsController = null;
        _this.mReferralController = null;
        return _this;
      }
      ReferralInviteSentPopupComponent.prototype.onLoad = function() {
        this.initLogger();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayer = this.mPersistantNodeComponent.GetPlayerController().getModel();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mReferralController = this.mPersistantNodeComponent.GetReferralController();
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralInviteSentPopupComponent", "closePopup", false));
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralInviteSentPopupComponent", "closePopup", false));
        this.inviteMoreButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralInviteSentPopupComponent", "onInviteMoreButtonClicked", false));
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_CLOSE_INVITE_SENT_POPUP, this.closePopup, this);
      };
      ReferralInviteSentPopupComponent.prototype.initLogger = function() {
        this.mLogger = new Logger_1.Logger("ReferralInviteSentPopupComponent", true);
      };
      ReferralInviteSentPopupComponent.prototype.start = function() {};
      ReferralInviteSentPopupComponent.prototype.spinnerStop = function() {
        this.spinnerComponent.hideLoader();
      };
      ReferralInviteSentPopupComponent.prototype.initialize = function() {
        var referralVal = this.mPlayer.getPlayerReferralRewardAmount();
        var referralValue = Helper_1.Helper.formatWithCommas(referralVal);
        var localizationComponent = this.coinTextLabel.node.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues("#REFERRAL_NUM", {
          referral_num: referralValue
        });
        this.spinnerStop();
      };
      ReferralInviteSentPopupComponent.prototype.closePopup = function() {
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      ReferralInviteSentPopupComponent.prototype.onInviteMoreButtonClicked = function() {
        this.spinnerComponent.showLoader();
        this.mStatsController.count("button", 1, "click", "referral_invite_more");
        this.mReferralController.inviteForReferral();
      };
      __decorate([ property(cc.Button) ], ReferralInviteSentPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Button) ], ReferralInviteSentPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Button) ], ReferralInviteSentPopupComponent.prototype, "inviteMoreButton", void 0);
      __decorate([ property(cc.Label) ], ReferralInviteSentPopupComponent.prototype, "coinTextLabel", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], ReferralInviteSentPopupComponent.prototype, "spinnerComponent", void 0);
      ReferralInviteSentPopupComponent = __decorate([ ccclass ], ReferralInviteSentPopupComponent);
      return ReferralInviteSentPopupComponent;
    }(cc.Component);
    exports.default = ReferralInviteSentPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  ReferralRewardPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "48b750B3X5P+LO1JTQIL2P5", "ReferralRewardPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var ProfileImageComponent_1 = require("./ProfileImageComponent");
    var CoinAnimationMetaComponent_1 = require("./CoinAnimationMetaComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ReferralRewardPopupComponent = function(_super) {
      __extends(ReferralRewardPopupComponent, _super);
      function ReferralRewardPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.closeButton = null;
        _this.okayButton = null;
        _this.displayPicture = null;
        _this.friendRelatedLabel = null;
        _this.totalReferralAmountLabel = null;
        _this.coinAnimationNode = null;
        _this.mStatsController = null;
        _this.mReferralController = null;
        _this.mPlayer = null;
        _this.mValueToGrant = 0;
        return _this;
      }
      ReferralRewardPopupComponent.prototype.onLoad = function() {
        this.initLogger();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mPlayer = this.mPersistantNodeComponent.GetPlayerController().getModel();
        this.mReferralController = this.mPersistantNodeComponent.GetReferralController();
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralRewardPopupComponent", "closePopup", false));
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralRewardPopupComponent", "onOkayClick", false));
      };
      ReferralRewardPopupComponent.prototype.initLogger = function() {
        this.mLogger = new Logger_1.Logger("ReferralRewardPopupComponent", true);
      };
      ReferralRewardPopupComponent.prototype.start = function() {};
      ReferralRewardPopupComponent.prototype.initialize = function() {
        var friendRefCodeData = this.mPlayer.getFriendRefCodeData();
        var friendPhotoUrl = "";
        var totalReferralBonus = (parseInt(friendRefCodeData.totalFriends) + 1) * this.mPlayer.getPlayerReferralRewardAmount();
        var friendName = friendRefCodeData.refDataName;
        friendPhotoUrl = this.mPlayer.getReferralFriendPhotoUrl();
        this.mStatsController.count("popup", 1, "referralRewardPopup", "open", friendRefCodeData.refDataPid, String(parseInt(friendRefCodeData.totalFriends) + 1));
        this.mLogger.Log("tanisha initialize " + friendPhotoUrl + " totalReferralBonus " + totalReferralBonus);
        this.displayPicture.getComponent(ProfileImageComponent_1.default).initialize(friendPhotoUrl);
        var localizationComponent = this.friendRelatedLabel.node.getComponent(LocalizationComponent_1.default);
        friendRefCodeData.totalFriends > 0 ? localizationComponent.setValues("#FRIEND_TEXT_1", {
          friend_name: friendName,
          friend_num: friendRefCodeData.totalFriends
        }) : localizationComponent.setValues("#FRIEND_TEXT_2", {
          friend_name: friendName
        });
        localizationComponent = this.totalReferralAmountLabel.node.getComponent(LocalizationComponent_1.default);
        var referralValue;
        referralValue = totalReferralBonus >= 1e5 ? Helper_1.Helper.getLocaleNumber(totalReferralBonus) : Helper_1.Helper.formatWithCommas(totalReferralBonus);
        localizationComponent.setValues("#REFERRAL_NUM", {
          referral_num: referralValue + "!"
        });
        this.mValueToGrant = totalReferralBonus;
      };
      ReferralRewardPopupComponent.prototype.onOkayClick = function() {
        this.mStatsController.count("button", 1, "click", "referral_reward");
        this.closePopup();
      };
      ReferralRewardPopupComponent.prototype.closePopup = function() {
        this.okayButton.interactable = false;
        this.closeButton.interactable = false;
        var player = this.mPlayer;
        this.mPlayer.resetFriendRefCodeData();
        this.mPlayer.resetPlayerReferralGrantedCount();
        if (player) {
          player.setCoins(player.getCoins() + this.mValueToGrant);
          this.mLogger.Log("coins granted closePopup" + this.mValueToGrant);
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, {
            position: this.okayButton.node.parent.convertToWorldSpaceAR(this.okayButton.node.getPosition()),
            comp: this.coinAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
            firstHitEvent: {
              eventName: "updateLobbyCoinsHud",
              value: this.mValueToGrant
            }
          });
        }
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Button) ], ReferralRewardPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Button) ], ReferralRewardPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], ReferralRewardPopupComponent.prototype, "displayPicture", void 0);
      __decorate([ property(cc.Label) ], ReferralRewardPopupComponent.prototype, "friendRelatedLabel", void 0);
      __decorate([ property(cc.Label) ], ReferralRewardPopupComponent.prototype, "totalReferralAmountLabel", void 0);
      __decorate([ property(cc.Node) ], ReferralRewardPopupComponent.prototype, "coinAnimationNode", void 0);
      ReferralRewardPopupComponent = __decorate([ ccclass ], ReferralRewardPopupComponent);
      return ReferralRewardPopupComponent;
    }(cc.Component);
    exports.default = ReferralRewardPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./CoinAnimationMetaComponent": "CoinAnimationMetaComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent",
    "./ProfileImageComponent": "ProfileImageComponent"
  } ],
  ReferralSuccessPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0e279hfHK1OcZaRV7APPwvK", "ReferralSuccessPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var CoinAnimationMetaComponent_1 = require("./CoinAnimationMetaComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ReferralSuccessPopupComponent = function(_super) {
      __extends(ReferralSuccessPopupComponent, _super);
      function ReferralSuccessPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.closeButton = null;
        _this.okayButton = null;
        _this.coinTextLabel = null;
        _this.friendNameLabel = null;
        _this.coinAnimationNode = null;
        _this.mStatsController = null;
        _this.mReferralController = null;
        _this.mPlayer = null;
        _this.mValueToGrant = 0;
        return _this;
      }
      ReferralSuccessPopupComponent.prototype.onLoad = function() {
        this.initLogger();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayer = this.mPersistantNodeComponent.GetPlayerController().getModel();
        this.mReferralController = this.mPersistantNodeComponent.GetReferralController();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralSuccessPopupComponent", "closePopup", false));
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralSuccessPopupComponent", "onOkayClick", false));
      };
      ReferralSuccessPopupComponent.prototype.initLogger = function() {
        this.mLogger = new Logger_1.Logger("ReferralSuccessPopupComponent", true);
      };
      ReferralSuccessPopupComponent.prototype.start = function() {};
      ReferralSuccessPopupComponent.prototype.initialize = function(friendName) {
        var referralValue = Helper_1.Helper.formatWithCommas(this.mPlayer.getPlayerReferralRewardAmount());
        var localizationComponentVal = this.coinTextLabel.node.getComponent(LocalizationComponent_1.default);
        localizationComponentVal.setValues("#REFERRAL_NUM", {
          referral_num: referralValue
        });
        var localizationComponent = this.friendNameLabel.node.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues("#YOU_AND_FRIEND_TEXT", {
          friend_name: friendName
        });
        this.mValueToGrant = this.mPlayer.getPlayerReferralRewardAmount();
      };
      ReferralSuccessPopupComponent.prototype.onOkayClick = function() {
        this.mStatsController.count("button", 1, "click", "referral_success");
        this.closePopup();
      };
      ReferralSuccessPopupComponent.prototype.closePopup = function() {
        this.okayButton.interactable = false;
        this.closeButton.interactable = false;
        var player = this.mPlayer;
        if (player) {
          player.setCoins(player.getCoins() + this.mValueToGrant);
          this.mLogger.Log("coins granted closePopup" + this.mValueToGrant);
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, {
            position: this.okayButton.node.parent.convertToWorldSpaceAR(this.okayButton.node.getPosition()),
            comp: this.coinAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
            firstHitEvent: {
              eventName: "updateLobbyCoinsHud",
              value: this.mValueToGrant
            }
          });
        }
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Button) ], ReferralSuccessPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Button) ], ReferralSuccessPopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Label) ], ReferralSuccessPopupComponent.prototype, "coinTextLabel", void 0);
      __decorate([ property(cc.Label) ], ReferralSuccessPopupComponent.prototype, "friendNameLabel", void 0);
      __decorate([ property(cc.Node) ], ReferralSuccessPopupComponent.prototype, "coinAnimationNode", void 0);
      ReferralSuccessPopupComponent = __decorate([ ccclass ], ReferralSuccessPopupComponent);
      return ReferralSuccessPopupComponent;
    }(cc.Component);
    exports.default = ReferralSuccessPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./CoinAnimationMetaComponent": "CoinAnimationMetaComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  ReferralWelcomePopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "64695M8Z3dBQq686v+b9cIA", "ReferralWelcomePopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var CoinAnimationMetaComponent_1 = require("./CoinAnimationMetaComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ReferralWelcomePopupComponent = function(_super) {
      __extends(ReferralWelcomePopupComponent, _super);
      function ReferralWelcomePopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.closeButton = null;
        _this.okayButton = null;
        _this.totalReferralAmountLabel = null;
        _this.coinAnimationNode = null;
        _this.mReferralController = null;
        _this.mPlayer = null;
        _this.mValueToGrant = 0;
        _this.mStatsController = null;
        return _this;
      }
      ReferralWelcomePopupComponent.prototype.onLoad = function() {
        this.initLogger();
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mPlayer = this.mPersistantNodeComponent.GetPlayerController().getModel();
        this.mReferralController = this.mPersistantNodeComponent.GetReferralController();
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralWelcomePopupComponent", "closePopup", false));
        this.okayButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ReferralWelcomePopupComponent", "onOkayClicked", false));
      };
      ReferralWelcomePopupComponent.prototype.initLogger = function() {
        this.mLogger = new Logger_1.Logger("ReferralWelcomePopupComponent", true);
      };
      ReferralWelcomePopupComponent.prototype.start = function() {};
      ReferralWelcomePopupComponent.prototype.initialize = function() {
        var totalReferralBonus = this.mPlayer.getPlayerReferralRewardAmount();
        var referralValue = Helper_1.Helper.formatWithCommas(totalReferralBonus);
        var localizationComponentVal = this.totalReferralAmountLabel.node.getComponent(LocalizationComponent_1.default);
        localizationComponentVal.setValues("#REFERRAL_NUM", {
          referral_num: referralValue
        });
        this.mValueToGrant = totalReferralBonus;
      };
      ReferralWelcomePopupComponent.prototype.onOkayClicked = function() {
        this.mStatsController.count("button", 1, "click", "referral_welcome");
        this.closePopup();
      };
      ReferralWelcomePopupComponent.prototype.closePopup = function() {
        this.okayButton.interactable = false;
        this.closeButton.interactable = false;
        var player = this.mPlayer;
        this.mPersistantNodeComponent.GetReferralController().setShowWelcomePopup(false, null);
        if (player) {
          player.setCoins(player.getCoins() + this.mValueToGrant);
          this.mLogger.Log("coins granted closePopup" + this.mValueToGrant);
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_ON_COINS_COLLECT, {
            position: this.okayButton.node.parent.convertToWorldSpaceAR(this.okayButton.node.getPosition()),
            comp: this.coinAnimationNode.getComponent(CoinAnimationMetaComponent_1.default),
            firstHitEvent: {
              eventName: "updateLobbyCoinsHud",
              value: this.mValueToGrant
            }
          });
        }
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Button) ], ReferralWelcomePopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Button) ], ReferralWelcomePopupComponent.prototype, "okayButton", void 0);
      __decorate([ property(cc.Label) ], ReferralWelcomePopupComponent.prototype, "totalReferralAmountLabel", void 0);
      __decorate([ property(cc.Node) ], ReferralWelcomePopupComponent.prototype, "coinAnimationNode", void 0);
      ReferralWelcomePopupComponent = __decorate([ ccclass ], ReferralWelcomePopupComponent);
      return ReferralWelcomePopupComponent;
    }(cc.Component);
    exports.default = ReferralWelcomePopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./CoinAnimationMetaComponent": "CoinAnimationMetaComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  RejoinPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "54480s6rnRID5qCk7HcNBd7", "RejoinPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var OverlayComponent_1 = require("./OverlayComponent");
    var State_1 = require("../states/State");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RejoinPopupComponent = function(_super) {
      __extends(RejoinPopupComponent, _super);
      function RejoinPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.resumeButton = null;
        _this.cancelButton = null;
        _this.closeButton = null;
        _this.textLabel = null;
        _this.mLogger = null;
        _this.mPersistantComponent = null;
        _this.mPlayerController = null;
        return _this;
      }
      RejoinPopupComponent.prototype.onLoad = function() {
        this.mLogger = new Logger_1.Logger("RejoinPopupComponent", true);
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPlayerController = this.mPersistantComponent.GetPlayerController();
        this.mStatsController = this.mPersistantComponent.GetStatsController();
        this.mStateMachineController = this.mPersistantComponent.GetStateMachineController();
        this.resumeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "RejoinPopupComponent", "resumeGame"));
        this.cancelButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "RejoinPopupComponent", "closePopup"));
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "RejoinPopupComponent", "closePopup"));
      };
      RejoinPopupComponent.prototype.initialize = function(mode) {
        this.resumeButton.interactable = true;
        this.cancelButton.interactable = true;
        this.closeButton.interactable = true;
        var localizationComponent = this.textLabel.node.getComponent(LocalizationComponent_1.default);
        var localText = "#ACTIVE_GAME_MODE_TEXT";
        localizationComponent.setValues(localText, {
          mode_name: Constants_1.constants.MODE_TO_NAME_MAP[mode]
        });
        var overlayComp = this.node.getComponent(OverlayComponent_1.default);
        overlayComp && overlayComp.setCloseOnTap(false);
      };
      RejoinPopupComponent.prototype.closePopup = function() {
        this.resumeButton.interactable = false;
        this.cancelButton.interactable = false;
        this.closeButton.interactable = false;
        var player = this.mPlayerController.getModel();
        player && player.resetOnlineRoomInfo();
        this.mStatsController.count("button", 1, "rejoin", "close");
        this.hidePopup();
      };
      RejoinPopupComponent.prototype.resumeGame = function() {
        this.resumeButton.interactable = false;
        this.cancelButton.interactable = false;
        this.closeButton.interactable = false;
        var player = this.mPlayerController.getModel();
        this.mOnlineRoomInfo = this.mPlayerController.getModel().getOnlineRoomInfo();
        if (player) {
          this.mStatsController.count("button", 1, "rejoin", "resume");
          this.mOnlineRoomInfo.rejoin = true;
          this.mStateMachineController.onEvent(State_1.StateEvent.START_GAME, this.mOnlineRoomInfo);
          player.resetOnlineRoomInfo();
        }
      };
      RejoinPopupComponent.prototype.hidePopup = function() {
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Button) ], RejoinPopupComponent.prototype, "resumeButton", void 0);
      __decorate([ property(cc.Button) ], RejoinPopupComponent.prototype, "cancelButton", void 0);
      __decorate([ property(cc.Button) ], RejoinPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Label) ], RejoinPopupComponent.prototype, "textLabel", void 0);
      RejoinPopupComponent = __decorate([ ccclass ], RejoinPopupComponent);
      return RejoinPopupComponent;
    }(cc.Component);
    exports.default = RejoinPopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../states/State": "State",
    "./LocalizationComponent": "LocalizationComponent",
    "./OverlayComponent": "OverlayComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  RerollComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "29b5abpsPBKoKIkYosUbtPJ", "RerollComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var Helper_1 = require("../Generic/Helper");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RerollComponent = function(_super) {
      __extends(RerollComponent, _super);
      function RerollComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.powerupPrice1 = null;
        _this.powerupPrice2 = null;
        _this.powerupPrice3 = null;
        _this.powerupCount = null;
        _this.powerupButton = null;
        _this.infoPopup = null;
        _this.gamesPlayedInfoPopup = null;
        _this.rerollSettingsInfo = null;
        _this.unlockInSettingsInfo = null;
        _this.rerollSettingsButton = null;
        _this.powerupOnSprite = null;
        _this.powerupOffSprite = null;
        _this.countEnabled = null;
        _this.countDisabled = null;
        _this.changeLeftLabel = null;
        _this.changeLeftLabel2 = null;
        _this.progressBar = null;
        _this.rerollInfoTitle = null;
        _this.gamePlayedText = null;
        _this.notificationNode = null;
        _this.unLockedNode = null;
        _this.lockedNode = null;
        _this.enabledNode = null;
        _this.disabledNode = null;
        _this.invisibleBg = null;
        _this.mPowerupCountAvailable = 0;
        return _this;
      }
      RerollComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.initLogger();
        this.mStoreConfig = Constants_1.constants.STORE_CONFIG;
        this.powerupButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "RerollComponent", "onPowerupClicked"));
        this.rerollSettingsButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "RerollComponent", "onPowerupSettingClicked"));
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_DICE_ROLLED, this.onDiceRolled, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_BOARD_INITIALIZED, this.onDiceRolled, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_POWERUP_SETTINGS_CHANGED, this.onPowerupSettingsChanged, this);
        this.mPersistantComponent.registerForTouchOutside(this.rerollSettingsInfo, this.onInvisibleBgTouched.bind(this), this.invisibleBg.getBoundingBoxToWorld());
        this.powerupCount.string = "0";
        this.powerupPrice1.string = "0";
        this.powerupPrice2.string = "0";
        this.powerupPrice3.string = "0";
        this.progressBar.progress = 1;
      };
      RerollComponent.prototype.start = function() {
        this.infoPopup.active = false;
        this.gamesPlayedInfoPopup.active = false;
        this.rerollSettingsInfo.active = false;
        this.unlockInSettingsInfo.active = false;
        this.mTimeout = null;
        this.mLastPowerupCount = 0;
        this.mPowerupEnabled = false;
        this.mProgressTime = 0;
        this.mPowerupTime = 0;
        var gamesLeftToPlay = this.mPersistantComponent.GetGameController().getModel().getGamesToUnlockPowerup();
        this.notificationNode.active = null == gamesLeftToPlay || 0 == gamesLeftToPlay;
        this.initializePowerupSettings();
        this.checkAndUnlockPowerup();
      };
      RerollComponent.prototype.onDiceRolled = function(event) {
        var index = this.mPersistantComponent.GetGameController().getMyIndex();
        var gameplayer = this.mPersistantComponent.GetGameController().getModel().getPlayerIndexMap()[index];
        if (!gameplayer) return;
        this.powerupCount.string = "0";
        this.powerupPrice1.string = "0";
        this.powerupPrice2.string = "0";
        this.powerupPrice3.string = "0";
        this.mPowerupCountAvailable = gameplayer.getPowerupCount();
        this.checkAndEnableRerollCount();
        if (gameplayer.getPowerupCount() >= 0) {
          this.powerupCount.string = "" + gameplayer.getPowerupCount();
          this.changeLeftLabel.string = LocalizationController_1.LocalizationController.getInstance().rawLocalizedString("#CHANCES_LEFT_TEXT_IG") + gameplayer.getPowerupCount();
          this.changeLeftLabel2.string = gameplayer.getPowerupCount() + "";
        }
        if (gameplayer.getPowerupPrice() >= 0) {
          this.powerupPrice1.string = gameplayer.getPowerupPrice() + "";
          this.powerupPrice2.string = gameplayer.getPowerupPrice() + "";
          this.powerupPrice3.string = gameplayer.getPowerupPrice() + "";
        }
        if (event && "PowerupAvailable" == event.getUserData()) {
          this.mPowerupTime = gameplayer.getPowerupTime();
          var powerupTime = this.mPowerupTime;
          var self = this;
          this.clearRerollTimeout();
          this.mRerollTimeout = setTimeout(function() {
            self.mProgressTime = powerupTime;
            self.enablePowerup();
          }, 200);
          return;
        }
        this.mProgressTime = 0;
      };
      RerollComponent.prototype.enablePowerup = function() {
        this.mPowerupEnabled = true;
      };
      RerollComponent.prototype.disablePowerup = function() {
        this.mPowerupEnabled = false;
      };
      RerollComponent.prototype.onPowerupClicked = function() {
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_FTUE_CLEAR);
        this.mPersistantComponent.GetGameController().hideFtue();
        if (this.mPowerupEnabled) {
          this.mPersistantComponent.GetStatsController().count("button", 1, "roll_again", "premium", "", "", this.mPersistantComponent.GetGameController().getModel().getInstanceId());
          this.mPersistantComponent.GetGameController().doDiceRoll(Constants_1.constants.POWERUP_ID.REROLL);
        } else {
          var localizationComponent = this.rerollInfoTitle.getComponent(LocalizationComponent_1.default);
          0 == this.mPowerupCountAvailable ? localizationComponent.setValues("#REROLL_INFO_NOGEMS_IG") : localizationComponent.setValues("#REROLL_INFO_TEXT_IG");
          var index = this.mPersistantComponent.GetGameController().getMyIndex();
          var gameplayer = this.mPersistantComponent.GetGameController().getModel().getPlayerIndexMap()[index];
          if (!gameplayer) return;
          if (gameplayer.getPowerupPrice() > gameplayer.getGemsAvailable()) this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_GEMS_INSUFF); else {
            var timer = this.checkAndActivateInfoPopup();
            var self = this;
            this.clearPopupTimeout();
            this.mTimeout = setTimeout(function() {
              self.gamesPlayedInfoPopup.active = false;
              self.infoPopup.active = false;
              self.rerollSettingsInfo.active = false;
              self.unlockInSettingsInfo.active = false;
              self.mTimeout = null;
            }, timer);
          }
        }
      };
      RerollComponent.prototype.clearAndExtendSettingsTimeout = function() {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUPS_DEBUG2);
        var powerupDebugVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUPS_DEBUG);
        if (2 != powerupDebugVariant || 2 != variant) return;
        this.clearPopupTimeout();
        var self = this;
        this.rerollSettingsInfo.active = true;
        this.mTimeout = setTimeout(function() {
          self.rerollSettingsInfo.active = false;
          self.mTimeout = null;
        }, 2e3);
      };
      RerollComponent.prototype.checkAndActivateInfoPopup = function() {
        var gamesLeftToPlay = this.mPersistantComponent.GetGameController().getModel().getGamesToUnlockPowerup();
        var totalGamesForRerollUnlock = this.mPersistantComponent.GetGameController().getModel().getTotalGamesToUnlockPowerup();
        var showGamesLeftToPlay = !this.isRerollUnlockedForUser();
        this.gamePlayedText.string = showGamesLeftToPlay ? totalGamesForRerollUnlock - gamesLeftToPlay + "/" + totalGamesForRerollUnlock : "";
        this.gamesPlayedInfoPopup.active = showGamesLeftToPlay;
        var timer = 3e3;
        if (showGamesLeftToPlay) {
          this.infoPopup.active = false;
          this.rerollSettingsInfo.active = false;
          this.unlockInSettingsInfo.active = false;
        } else {
          var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUPS_DEBUG2);
          var powerupDebugVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUPS_DEBUG);
          var powerupOn = this.mPersistantComponent.GetPlayerController().getModel().getPowerupSettings();
          2 == variant && 2 == powerupDebugVariant ? this.rerollSettingsInfo.active = true : powerupOn || 3 != variant || 2 != powerupDebugVariant ? this.infoPopup.active = true : this.unlockInSettingsInfo.active = true;
          this.initializePowerupSettings();
          2 == variant && 2 == powerupDebugVariant && (timer = 5e3);
        }
        return timer;
      };
      RerollComponent.prototype.isRerollUnlockedForUser = function() {
        var gamesLeftToPlay = this.mPersistantComponent.GetGameController().getModel().getGamesToUnlockPowerup();
        var totalGamesForRerollUnlock = this.mPersistantComponent.GetGameController().getModel().getTotalGamesToUnlockPowerup();
        var moreGamesToPlay = null != totalGamesForRerollUnlock && null != gamesLeftToPlay && gamesLeftToPlay > 0;
        return !moreGamesToPlay;
      };
      RerollComponent.prototype.checkAndUnlockPowerup = function() {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUPS_DEBUG2);
        var powerupDebugVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUPS_DEBUG);
        this.unLockedNode.active = 2 != powerupDebugVariant || variant < 2 || this.isRerollUnlockedForUser();
        this.lockedNode.active = 2 == powerupDebugVariant && variant >= 2 && !this.isRerollUnlockedForUser();
      };
      RerollComponent.prototype.initLogger = function() {
        this.mLogger || (this.mLogger = new Logger_1.Logger("PowerupComponent", true));
      };
      RerollComponent.prototype.update = function(dt) {
        this.mProgressTime -= 1e3 * dt;
        if (this.mProgressTime > 0 && 0 != this.mPowerupTime) this.progressBar.progress = 1 - this.mProgressTime / (1 * this.mPowerupTime); else {
          this.mProgressTime = 0;
          this.progressBar.progress = 1;
          this.disablePowerup();
        }
      };
      RerollComponent.prototype.clearRerollTimeout = function() {
        if (this.mRerollTimeout) {
          clearTimeout(this.mRerollTimeout);
          this.mRerollTimeout = null;
        }
      };
      RerollComponent.prototype.clearPopupTimeout = function() {
        if (this.mTimeout) {
          clearTimeout(this.mTimeout);
          this.mTimeout = null;
        }
      };
      RerollComponent.prototype.initializePowerupSettings = function() {
        var powerupOn = this.mPersistantComponent.GetPlayerController().getModel().getPowerupSettings();
        this.powerupOffSprite.active = !powerupOn;
        this.powerupOnSprite.active = powerupOn;
        this.disabledNode.active = !powerupOn;
        this.enabledNode.active = powerupOn;
        this.checkAndEnableRerollCount();
      };
      RerollComponent.prototype.onPowerupSettingClicked = function() {
        var powerupOn = this.mPersistantComponent.GetPlayerController().getModel().getPowerupSettings();
        this.mPersistantComponent.GetPlayerController().changePowerupSettings(!powerupOn);
        this.mPersistantComponent.GetPlayerController().savePowerupSettingsOnServer();
        this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_POWERUP_SETTINGS_CHANGED);
        this.clearAndExtendSettingsTimeout();
      };
      RerollComponent.prototype.onPowerupSettingsChanged = function() {
        this.initializePowerupSettings();
        this.countEnabled.active && this.notificationNode.getComponent(cc.Animation).play();
      };
      RerollComponent.prototype.checkAndEnableRerollCount = function() {
        var index = this.mPersistantComponent.GetGameController().getMyIndex();
        var gameplayer = this.mPersistantComponent.GetGameController().getModel().getPlayerIndexMap()[index];
        var powerupOn = this.mPersistantComponent.GetPlayerController().getModel().getPowerupSettings();
        if (!gameplayer) return;
        this.countDisabled.active = !powerupOn || 0 == gameplayer.getPowerupCount();
        this.countEnabled.active = powerupOn && 0 != gameplayer.getPowerupCount();
      };
      RerollComponent.prototype.onInvisibleBgTouched = function() {
        this.rerollSettingsInfo && (this.rerollSettingsInfo.active = false);
      };
      RerollComponent.prototype.onDestroy = function() {
        this.clearPopupTimeout();
        this.clearRerollTimeout();
        this.notificationNode.stopAllActions();
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_DICE_ROLLED, this.onDiceRolled, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_BOARD_INITIALIZED, this.onDiceRolled, this);
      };
      __decorate([ property(cc.Label) ], RerollComponent.prototype, "powerupPrice1", void 0);
      __decorate([ property(cc.Label) ], RerollComponent.prototype, "powerupPrice2", void 0);
      __decorate([ property(cc.Label) ], RerollComponent.prototype, "powerupPrice3", void 0);
      __decorate([ property(cc.Label) ], RerollComponent.prototype, "powerupCount", void 0);
      __decorate([ property(cc.Button) ], RerollComponent.prototype, "powerupButton", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "infoPopup", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "gamesPlayedInfoPopup", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "rerollSettingsInfo", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "unlockInSettingsInfo", void 0);
      __decorate([ property(cc.Button) ], RerollComponent.prototype, "rerollSettingsButton", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "powerupOnSprite", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "powerupOffSprite", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "countEnabled", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "countDisabled", void 0);
      __decorate([ property(cc.Label) ], RerollComponent.prototype, "changeLeftLabel", void 0);
      __decorate([ property(cc.Label) ], RerollComponent.prototype, "changeLeftLabel2", void 0);
      __decorate([ property(cc.ProgressBar) ], RerollComponent.prototype, "progressBar", void 0);
      __decorate([ property(cc.Label) ], RerollComponent.prototype, "rerollInfoTitle", void 0);
      __decorate([ property(cc.Label) ], RerollComponent.prototype, "gamePlayedText", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "notificationNode", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "unLockedNode", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "lockedNode", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "enabledNode", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "disabledNode", void 0);
      __decorate([ property(cc.Node) ], RerollComponent.prototype, "invisibleBg", void 0);
      RerollComponent = __decorate([ ccclass ], RerollComponent);
      return RerollComponent;
    }(cc.Component);
    exports.default = RerollComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  ResultScreenCardComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6c4eciF0OJF+aagTrOeMxh0", "ResultScreenCardComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ProfileImageComponent_1 = require("./ProfileImageComponent");
    var Helper_1 = require("../Generic/Helper");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Constants_1 = require("../Constants");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ResultScreenCardComponent = function(_super) {
      __extends(ResultScreenCardComponent, _super);
      function ResultScreenCardComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.winTrophiesText = null;
        _this.nameLabel = null;
        _this.bgSpriteRegular = null;
        _this.bgSprite = null;
        _this.rankSprite = null;
        _this.profileImage = null;
        _this.trophiesNode = null;
        _this.coinsNode = null;
        _this.coinsLabel = null;
        _this.regularNode = null;
        _this.regularNameLabel = null;
        _this.gameController = null;
        return _this;
      }
      ResultScreenCardComponent.prototype.onLoad = function() {
        this.mCoinsLabelPosition = this.coinsLabel.node.parent.convertToWorldSpaceAR(this.coinsLabel.node.getPosition());
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
      };
      ResultScreenCardComponent.prototype.start = function() {};
      ResultScreenCardComponent.prototype.initialize = function(isThisMe, trophy, rank, name, photoUrl, rewardAmout, league) {
        var isPrivate = this.getGameController().isPrivateRoom();
        if (1 != rank) {
          this.bgSpriteRegular && (this.bgSpriteRegular.getComponent(cc.Sprite).enabled = -1 == rank || rank >= 4);
          this.bgSprite && (this.bgSprite.getComponent(cc.Sprite).enabled = -1 != rank && 4 != rank);
        }
        this.rankSprite && (this.rankSprite.getComponent(cc.Sprite).enabled = -1 != rank);
        this.nameLabel.string = Helper_1.Helper.getTruncatedString(name, 12, true);
        this.regularNameLabel.string = Helper_1.Helper.getTruncatedString(name, 12, true);
        this.profileImage.initialize(photoUrl);
        this.winTrophiesText.string = "+" + trophy.toString();
        var enableProgression = this.mPersistantNodeComponent.GetPlayerController().shouldEnableProgression();
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        this.trophiesNode.active = enableProgression && !isPrivate && trophy > 0;
        this.coinsLabel.string = "+" + Helper_1.Helper.getLocaleNumber(rewardAmout);
        this.coinsNode.active = !isPrivate && 2 == eco_variant && rewardAmout > 0;
        this.regularNode.active = isPrivate || 2 != eco_variant || rewardAmout <= 0;
        this.profileImage.showLeagueBadge(league);
      };
      ResultScreenCardComponent.prototype.getGameController = function() {
        this.gameController || (this.gameController = this.mPersistantNodeComponent.GetGameController());
        return this.gameController;
      };
      ResultScreenCardComponent.prototype.getCoinsLabelPosition = function() {
        return this.mCoinsLabelPosition;
      };
      __decorate([ property(cc.Label) ], ResultScreenCardComponent.prototype, "winTrophiesText", void 0);
      __decorate([ property(cc.Label) ], ResultScreenCardComponent.prototype, "nameLabel", void 0);
      __decorate([ property(cc.Sprite) ], ResultScreenCardComponent.prototype, "bgSpriteRegular", void 0);
      __decorate([ property(cc.Sprite) ], ResultScreenCardComponent.prototype, "bgSprite", void 0);
      __decorate([ property(cc.Sprite) ], ResultScreenCardComponent.prototype, "rankSprite", void 0);
      __decorate([ property(ProfileImageComponent_1.default) ], ResultScreenCardComponent.prototype, "profileImage", void 0);
      __decorate([ property(cc.Node) ], ResultScreenCardComponent.prototype, "trophiesNode", void 0);
      __decorate([ property(cc.Node) ], ResultScreenCardComponent.prototype, "coinsNode", void 0);
      __decorate([ property(cc.Label) ], ResultScreenCardComponent.prototype, "coinsLabel", void 0);
      __decorate([ property(cc.Node) ], ResultScreenCardComponent.prototype, "regularNode", void 0);
      __decorate([ property(cc.Label) ], ResultScreenCardComponent.prototype, "regularNameLabel", void 0);
      ResultScreenCardComponent = __decorate([ ccclass ], ResultScreenCardComponent);
      return ResultScreenCardComponent;
    }(cc.Component);
    exports.default = ResultScreenCardComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./ProfileImageComponent": "ProfileImageComponent"
  } ],
  ResultScreenPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "41b37P/mTpAqJeTxLwREeKO", "ResultScreenPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var ResultScreenCardComponent_1 = require("./ResultScreenCardComponent");
    var State_1 = require("../states/State");
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var Constants_1 = require("../Constants");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var CoinAnimationComponent_1 = require("./CoinAnimationComponent");
    var ScrollingNumberActionComponent_1 = require("../Actions/ScrollingNumberActionComponent");
    var CoinAnimationMetaComponent_1 = require("./CoinAnimationMetaComponent");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ResultScreenPopupComponent = function(_super) {
      __extends(ResultScreenPopupComponent, _super);
      function ResultScreenPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mPersistantNodeComponent = null;
        _this.mLogger = null;
        _this.mStatsController = null;
        _this.mRank1Card = null;
        _this.mRank2Card = null;
        _this.mRank3Card = null;
        _this.mRank4Card = null;
        _this.lobbyButton = null;
        _this.nextButton = null;
        _this.closeButton = null;
        _this.centerLobbyButton = null;
        _this.crossButton = null;
        _this.nextButtonEconomyNode = null;
        _this.nextButtonNormalNode = null;
        _this.nextGameBetAmountLabel = null;
        _this.nextGameBetAmountDisabledLabel = null;
        _this.topCoinsLabel = null;
        _this.topResultsNode = null;
        _this.coinAnimationNode = null;
        _this.nextButtonEconomySpinnerComponent = null;
        _this.mSlideInAnimationTime = .5;
        _this.mTopHudStayTime = .5;
        _this.mSlideInAnimation = null;
        _this.mSlideOutAnimation = null;
        _this.mTimeout = null;
        return _this;
      }
      ResultScreenPopupComponent.prototype.onLoad = function() {
        var isIpad = (cc.sys.isIpad || cc.sys.ipadRes) && cc.sys.isMobile;
        var deltaX = cc.director.getVisibleSize().width - Constants_1.constants.DESIGN_RESOLUTION.WIDTH;
        if (deltaX > 0 || isIpad) {
          var scale = (1.05 * cc.director.getVisibleSize().width + deltaX) / cc.director.getVisibleSize().width;
          this.topResultsNode.setScale(scale);
        }
        this.mTopHudInitialPosition = this.topResultsNode.position;
        this.topResultsNode.getComponent(cc.Widget).enabled = false;
        this.mTopHudInitialPosition.y = cc.director.getVisibleSize().height / 2 - 0 * this.topResultsNode.getContentSize().height;
        this.topResultsNode.setPosition(this.mTopHudInitialPosition);
      };
      ResultScreenPopupComponent.prototype.start = function() {
        this.lobbyButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ResultScreenPopupComponent", "exitToLobby"));
        this.centerLobbyButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ResultScreenPopupComponent", "exitToLobby"));
        this.nextButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ResultScreenPopupComponent", "startNewGame"));
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ResultScreenPopupComponent", "closePopup"));
      };
      ResultScreenPopupComponent.prototype.initialize = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantNodeComponent.node.on("updateResultsScreenCoinsHud", this.updateCoinsInHud, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_START_GAME_FROM_RESULT_POPUP, this.startGameFromResult, this);
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_STOP_NEXT_BUTTON_SPINNER, this.stopSpinner, this);
        this.reset();
        this.mRank1Card.active = false;
        this.mRank2Card.active = false;
        this.mRank3Card.active = false;
        this.mRank4Card.active = false;
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        var gamecontroller = this.mPersistantNodeComponent.GetGameController();
        var winMeta = gamecontroller.getGameEndMeta();
        var trophiesMeta = gamecontroller.getTrophiesMeta();
        this.mLogger = new Logger_1.Logger("ResultScreenPopupComponent", true);
        var resultMeta = [];
        var maxRank = 0;
        var rankedPids = [];
        for (var key in winMeta) {
          var rank = parseInt(winMeta[key].r);
          if (rank >= 1 && rank <= 4) {
            rankedPids.push(winMeta[key].p);
            resultMeta[rank] = winMeta[key];
            maxRank < rank && (maxRank = rank);
          }
        }
        var participatedPlayersMap = gamecontroller.getParticipatedPlayers();
        this.mLogger.Log("shreyas participatedPlayersMap " + JSON.stringify(participatedPlayersMap));
        for (var i in participatedPlayersMap) {
          if (-1 != rankedPids.indexOf(participatedPlayersMap[i].getId())) continue;
          if (participatedPlayersMap[i].getRank() >= 1 && participatedPlayersMap[i].getRank() <= 4) continue;
          var wMeta = {
            r: -1,
            n: participatedPlayersMap[i].getName(),
            rw: 0,
            p: participatedPlayersMap[i].getId(),
            rwm: []
          };
          rankedPids.push(wMeta.p);
          maxRank++;
          resultMeta[maxRank] = wMeta;
        }
        for (var j in winMeta) {
          var rank = parseInt(winMeta[j].r);
          if (-1 != rankedPids.indexOf(winMeta[j].p)) {
            participatedPlayersMap[winMeta[j].p] && (winMeta[j].n = participatedPlayersMap[winMeta[j].p].mName);
            continue;
          }
          if (-1 == rank) {
            maxRank++;
            resultMeta[maxRank] = winMeta[j];
          }
        }
        var myReward = 0;
        var myTrophies = 0;
        var mRewardMeta = [];
        mRewardMeta = gamecontroller.getRewardMeta();
        for (var k = 1; k <= 4; k++) if (k <= resultMeta.length && resultMeta[k]) {
          var card = this.getPositionCard(k);
          card.active = true;
          var cardComponent = card.getComponent(ResultScreenCardComponent_1.default);
          var gamePlayer = gamecontroller.getGamePlayerModel(resultMeta[k].p);
          var photo = "";
          gamePlayer && (photo = gamePlayer.getPhotoUrl());
          var trophy = 0;
          null != trophiesMeta && resultMeta[k].r >= 1 && (trophy = trophiesMeta[resultMeta[k].r]);
          null == trophy && (trophy = 0);
          var reward = mRewardMeta[k - 1] && resultMeta[k].r > 0 ? parseInt(mRewardMeta[k - 1]) : 0;
          var isThisMe = resultMeta[k].p == this.mPersistantNodeComponent.GetPlayerController().getPlayerId();
          if (isThisMe) {
            myReward = reward;
            myTrophies = 0;
          }
          cardComponent.initialize(isThisMe, trophy, resultMeta[k].r, resultMeta[k].n, photo, reward, resultMeta[k].league);
          isThisMe && (this.mCoinAnimationStartPosition = cardComponent.getCoinsLabelPosition());
        }
        this.initializeRewardsNode(myReward, myTrophies);
        var isPrivateRoom = gamecontroller.isPrivateRoom();
        this.initializeButtons(isPrivateRoom, gamecontroller.isGameOver(), gamecontroller.isMyGameOver());
        this.mLogger.Log("shreyas resultMeta " + JSON.stringify(resultMeta));
      };
      ResultScreenPopupComponent.prototype.initializeRewardsNode = function(myReward, myTrophies) {
        var gamecontroller = this.mPersistantNodeComponent.GetGameController();
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        var isPrivateRoom = gamecontroller.isPrivateRoom();
        var myIndex = gamecontroller.getMyIndex();
        this.nextButtonEconomyNode.active = 2 == eco_variant;
        this.nextButtonNormalNode.active = 2 != eco_variant;
        this.topResultsNode.active = 2 == eco_variant && !isPrivateRoom && gamecontroller.isMyGameOver() && -1 != myIndex;
        var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
        if (player) {
          var betAmount = this.mPersistantNodeComponent.GetPlayerController().getBetAmountForBetSelect();
          this.nextGameBetAmountLabel.string = Helper_1.Helper.getLocaleNumber(betAmount);
          this.nextGameBetAmountDisabledLabel.string = Helper_1.Helper.getLocaleNumber(betAmount);
          this.mCurrentCoinValue = player.getCoins() - myReward;
          this.topCoinsLabel.string = Helper_1.Helper.getLocaleNumber(this.mCurrentCoinValue);
        }
        if (gamecontroller.isMyGameOver()) {
          var gameModel = gamecontroller.getModel();
          var showAnimtion = false;
          if (gameModel) {
            showAnimtion = !gameModel.isResultShownForMe();
            gameModel.setResultShownForMe();
          }
          this.topResultsNode.setPositionY(this.topResultsNode.getPosition().y + this.topResultsNode.getContentSize().height);
          showAnimtion && this.topResultsNode.active && myReward > 0 && this.animteAndUpdateCoins();
        }
      };
      ResultScreenPopupComponent.prototype.animteAndUpdateCoins = function() {
        this.topResultsNode.setPositionY(this.topResultsNode.getPosition().y + this.topResultsNode.getContentSize().height);
        var actions = [];
        actions.push(cc.moveTo(this.mSlideInAnimationTime, this.mTopHudInitialPosition));
        actions.push(cc.delayTime(this.mTopHudStayTime));
        actions.push(cc.callFunc(this.showCoinsAnimtionAndUpdateValues, this));
        this.mSlideInAnimation = this.topResultsNode.runAction(cc.sequence(actions));
      };
      ResultScreenPopupComponent.prototype.showCoinsAnimtionAndUpdateValues = function() {
        var firstHitEvent = {
          eventName: "updateResultsScreenCoinsHud"
        };
        var targetPosition = this.coinAnimationTarget.parent.convertToWorldSpaceAR(this.coinAnimationTarget.getPosition());
        this.coinAnimationNode.getComponent(CoinAnimationComponent_1.default).initializeDefaults(this.coinAnimationNode.getComponent(CoinAnimationMetaComponent_1.default), firstHitEvent);
        this.coinAnimationNode.getComponent(CoinAnimationComponent_1.default).initialize(this.mCoinAnimationStartPosition, targetPosition);
      };
      ResultScreenPopupComponent.prototype.updateCoinsInHud = function(event) {
        var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
        if (player) {
          var data = event.getUserData();
          this.topCoinsLabel.getComponent(ScrollingNumberActionComponent_1.default).scrollTo(this.mCurrentCoinValue, player.getCoins(), data.timer);
          this.mCurrentCoinValue = player.getCoins();
        }
        var self = this;
        this.mTimeout = setTimeout(function() {
          var targetPosition = self.mTopHudInitialPosition.clone();
          targetPosition.y = targetPosition.y + self.topResultsNode.getContentSize().height;
          var action = cc.moveTo(self.mSlideInAnimationTime, targetPosition);
          self.mSlideOutAnimation = self.topResultsNode.runAction(action);
        }, 1e3 * (data.timer + this.mTopHudStayTime));
      };
      ResultScreenPopupComponent.prototype.stopAllAnimation = function() {
        this.mSlideInAnimation && this.topResultsNode.stopAction(this.mSlideInAnimation);
        this.mSlideOutAnimation && this.topResultsNode.stopAction(this.mSlideOutAnimation);
      };
      ResultScreenPopupComponent.prototype.getPositionCard = function(position) {
        if (1 == position) return this.mRank1Card;
        if (2 == position) return this.mRank2Card;
        if (3 == position) return this.mRank3Card;
        if (4 == position) return this.mRank4Card;
      };
      ResultScreenPopupComponent.prototype.initializeButtons = function(isPrivate, isGameOver, isMyGameOver) {
        if (isPrivate) {
          this.lobbyButton.node.active = false;
          this.nextButton.node.active = false;
          this.centerLobbyButton.node.active = isGameOver || isMyGameOver;
          this.closeButton.node.active = !isGameOver && !isMyGameOver;
        } else {
          this.lobbyButton.node.active = isGameOver || isMyGameOver;
          this.nextButton.node.active = isGameOver || isMyGameOver;
          this.centerLobbyButton.node.active = false;
          this.closeButton.node.active = !isGameOver && !isMyGameOver;
        }
        this.crossButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "ResultScreenPopupComponent", isGameOver ? "exitToLobby" : "closePopup"));
      };
      ResultScreenPopupComponent.prototype.exitToLobby = function() {
        this.disableButtons();
        this.mStatsController.count("button", 1, "result_screen_popup", "lobby");
        this.mLogger.Log("exitToLobby pressed");
        this.mPersistantNodeComponent.GetStateMachineController().onEvent(State_1.StateEvent.EXIT_TO_LOBBY, {
          reason: "result"
        });
      };
      ResultScreenPopupComponent.prototype.startNewGame = function() {
        this.mLogger.Log("new game pressed");
        var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        var betAmount;
        if (player && 2 == eco_variant) {
          betAmount = this.mPersistantNodeComponent.GetPlayerController().getBetAmountForBetSelect();
          player.getCoins() >= betAmount && this.disableButtons();
        }
        var gameController = this.mPersistantNodeComponent.GetGameController();
        gameController.setNewGamePressed(true);
        this.nextButtonEconomySpinnerComponent.node.active = true;
        this.nextButtonEconomySpinnerComponent.showLoader();
        this.mStatsController.count("button", 1, "result_screen_popup", "next");
        var interstitialAdController = this.mPersistantNodeComponent.GetInterstitialAdController();
        if (interstitialAdController.canShowAdBetweenGame() && player.getCoins() >= betAmount) {
          this.mLogger.Log("startNewGame enter interstitial ad show ");
          interstitialAdController.initiateInterstitialVideoAds("next_game");
        } else {
          this.mLogger.Log("startNewGame enter---- without interstitial ad");
          this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_START_GAME_FROM_RESULT_POPUP);
        }
      };
      ResultScreenPopupComponent.prototype.startGameFromResult = function() {
        var gameController = this.mPersistantNodeComponent.GetGameController();
        var forceFetch = gameController.getModel().shouldFetchReciept();
        var player = this.mPersistantNodeComponent.GetPlayerController().getModel();
        player.setSkipRoomId(gameController.getRoomId());
        var data = {
          "4Player": gameController.is4Player(),
          forceFetch: forceFetch,
          resultScreen: true
        };
        this.mPersistantNodeComponent.GetStateMachineController().onEvent(State_1.StateEvent.START_GAME_FROM_RESULT, data);
      };
      ResultScreenPopupComponent.prototype.closePopup = function() {
        this.stopAllAnimation();
        this.disableButtons();
        this.mLogger.Log("closeLobby pressed");
        var popupComponent = this.node.getComponent(PopupComponent_1.default);
        popupComponent && popupComponent.hidePopup();
      };
      ResultScreenPopupComponent.prototype.onDestroy = function() {
        this.mSlideInAnimation && this.topResultsNode.stopAction(this.mSlideInAnimation);
        if (this.crossButton && this.crossButton.clickEvents && this.crossButton.clickEvents.length > 0) for (var i = 0; i < this.crossButton.clickEvents.length; i++) this.crossButton.clickEvents.pop();
      };
      ResultScreenPopupComponent.prototype.disableButtons = function() {
        this.lobbyButton.interactable = false;
        this.nextButton.interactable = false;
        this.centerLobbyButton.interactable = false;
        this.closeButton.interactable = false;
        this.crossButton.interactable = false;
        this.initNextButton();
      };
      ResultScreenPopupComponent.prototype.reset = function() {
        this.nextButtonEconomySpinnerComponent.node.active = false;
        this.lobbyButton.interactable = true;
        this.nextButton.interactable = true;
        this.centerLobbyButton.interactable = true;
        this.closeButton.interactable = true;
        this.crossButton.interactable = true;
        this.stopAllAnimation();
        this.initNextButton();
      };
      ResultScreenPopupComponent.prototype.initNextButton = function() {
        this.nextButtonRegularEnabledNode.active = true;
        this.nextButtonEconomyEnabledNode.active = true;
      };
      ResultScreenPopupComponent.prototype.stopSpinner = function() {
        this.mLogger.Log("next button stopSpinner enter");
        this.nextButtonEconomySpinnerComponent.node.active = false;
        this.nextButtonEconomySpinnerComponent.hideLoader();
      };
      ResultScreenPopupComponent.prototype.onDisable = function() {
        this.mTimeout && clearTimeout(this.mTimeout);
        this.mPersistantNodeComponent.node.off("updateResultsScreenCoinsHud", this.updateCoinsInHud, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_START_GAME_FROM_RESULT_POPUP, this.startGameFromResult, this);
        this.mPersistantNodeComponent.node.off(Constants_1.constants.Events.EVENT_STOP_NEXT_BUTTON_SPINNER, this.stopSpinner, this);
      };
      ResultScreenPopupComponent.prototype.onSharePressed = function() {
        Helper_1.Helper.shareScreenshot();
      };
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "mRank1Card", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "mRank2Card", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "mRank3Card", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "mRank4Card", void 0);
      __decorate([ property(cc.Button) ], ResultScreenPopupComponent.prototype, "lobbyButton", void 0);
      __decorate([ property(cc.Button) ], ResultScreenPopupComponent.prototype, "nextButton", void 0);
      __decorate([ property(cc.Button) ], ResultScreenPopupComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Button) ], ResultScreenPopupComponent.prototype, "centerLobbyButton", void 0);
      __decorate([ property(cc.Button) ], ResultScreenPopupComponent.prototype, "crossButton", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "nextButtonEconomyNode", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "nextButtonNormalNode", void 0);
      __decorate([ property(cc.Label) ], ResultScreenPopupComponent.prototype, "nextGameBetAmountLabel", void 0);
      __decorate([ property(cc.Label) ], ResultScreenPopupComponent.prototype, "nextGameBetAmountDisabledLabel", void 0);
      __decorate([ property(cc.Label) ], ResultScreenPopupComponent.prototype, "topCoinsLabel", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "topResultsNode", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "coinAnimationNode", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "coinAnimationTarget", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "nextButtonRegularEnabledNode", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "nextButtonRegularDisabledNode", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "nextButtonEconomyEnabledNode", void 0);
      __decorate([ property(cc.Node) ], ResultScreenPopupComponent.prototype, "nextButtonEconomyDisabledNode", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], ResultScreenPopupComponent.prototype, "nextButtonEconomySpinnerComponent", void 0);
      ResultScreenPopupComponent = __decorate([ ccclass ], ResultScreenPopupComponent);
      return ResultScreenPopupComponent;
    }(cc.Component);
    exports.default = ResultScreenPopupComponent;
    cc._RF.pop();
  }, {
    "../Actions/ScrollingNumberActionComponent": "ScrollingNumberActionComponent",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../states/State": "State",
    "./CoinAnimationComponent": "CoinAnimationComponent",
    "./CoinAnimationMetaComponent": "CoinAnimationMetaComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent",
    "./ResultScreenCardComponent": "ResultScreenCardComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  RouterController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7543uoVgtHe4/1bRZQtzjr", "RouterController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ExperiementController_1 = require("./ExperiementController");
    var Message_1 = require("./../Generic/Message");
    var Logger_1 = require("../Generic/Logger");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var Helper_1 = require("../Generic/Helper");
    var Message_2 = require("../Generic/Message");
    var RouterOutPackets_1 = require("../Packets/RouterOutPackets");
    var RouterINPackets_1 = require("../Packets/RouterINPackets");
    var RouterPacketFactory_1 = require("../Packets/RouterPacketFactory");
    var Constants_1 = require("../Constants");
    var RouterController = function() {
      function RouterController(persistantNodeComponent) {
        this.mRetryCount = 0;
        this.mRetryTimeout = null;
        this.mLogger = new Logger_1.Logger("RouterController", true);
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mPlayerController = this.mPersistantNodeComponent.GetPlayerController();
        this.mLeagueController = this.mPersistantNodeComponent.getLeagueController();
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
      }
      RouterController.prototype.initialize = function() {};
      RouterController.prototype.connectToRouter = function() {
        if (2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES) && 2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI)) return;
        if (this.mPlayerController.getModel().getPublicGamesWonCount() < this.mPlayerController.getModel().getRouterConnectGamesWon()) return;
        var routerAdd = Config_1.Config.ROUTER_ADDR;
        this.mPlayerController.getModel() && "" != this.mPlayerController.getModel().getRouterAddress() && (routerAdd = this.mPlayerController.getModel().getRouterAddress());
        if (this.mConnection) {
          this.mConnection.closeWs();
          this.mConnection = null;
        }
        if (this.mRetryTimeout) {
          clearTimeout(this.mRetryTimeout);
          this.mRetryTimeout = null;
        }
        if (this.mRetryCount > 3) {
          this.mLogger.Log("connectToRouter reconnection retry limit reached");
          return;
        }
        this.mRetryCount++;
        this.mConnection = new Connection_1.Connection(routerAdd);
        this.mConnection.setListener(this.onMessage.bind(this));
        this.mConnection.connectWs();
      };
      RouterController.prototype.sendMessage = function(message) {
        if (2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES) && 2 != ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_LEAGUES_UI)) return;
        message && Helper_1.Helper.sendSentryLog("RouterController sendMessage: " + message.getMI());
        this.mConnection && this.mConnection.sendMessage(message);
      };
      RouterController.prototype.onMessage = function(message) {
        if (message instanceof Message_2.ConnectionReady) {
          this.mConnection && this.mConnection.sendMessage(new RouterOutPackets_1.JoinRouterMessage(this.mPlayerController.getPlayerId(), this.mPlayerController.getFbId()));
          this.mStatsController.count("debug", 1, "router_connect");
          this.mRetryCount = 0;
        } else if (message instanceof Message_1.ConnectionLost) {
          this.mStatsController.count("debug", 1, "router_disconnect");
          var self = this;
          if (this.mRetryTimeout) {
            clearTimeout(this.mRetryTimeout);
            this.mRetryTimeout = null;
          }
          this.mRetryTimeout = setTimeout(function() {
            self.connectToRouter();
          }, 3e3);
        } else if ("HB" == message.getRaw()) this.mConnection && this.mConnection.sendMessage(new RouterOutPackets_1.HeartBeatMessage()); else {
          message || this.mLogger.Log("shreyas null message " + message);
          message = RouterPacketFactory_1.RouterPacketFactory.decode(message);
          message && ("LS" == message.getHD() ? this.mLeagueController.onMessage(message) : "RU" == message.getHD() && this.handleRouterMessage(message));
        }
      };
      RouterController.prototype.handleRouterMessage = function(message) {
        message instanceof RouterINPackets_1.RouterJoinAckMessage && this.mLeagueController.sendServiceConnect();
      };
      return RouterController;
    }();
    exports.RouterController = RouterController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../Generic/Message": "Message",
    "../Packets/RouterINPackets": "RouterInPackets",
    "../Packets/RouterOutPackets": "RouterOutPackets",
    "../Packets/RouterPacketFactory": "RouterPacketFactory",
    "./../Generic/Message": "Message",
    "./ExperiementController": "ExperiementController"
  } ],
  RouterInPackets: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7739tG4w1NVpRMUFahJ8tT", "RouterInPackets");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Message_1 = require("../Generic/Message");
    var Constants_1 = require("../Constants");
    var LeagueModels_1 = require("../models/LeagueModels");
    var RouterJoinAckMessage = function(_super) {
      __extends(RouterJoinAckMessage, _super);
      function RouterJoinAckMessage(data) {
        return _super.call(this, data) || this;
      }
      RouterJoinAckMessage.prototype.toString = function() {
        return "RouterJoinAckMessage: " + JSON.stringify(this.raw);
      };
      return RouterJoinAckMessage;
    }(Message_1.Message);
    exports.RouterJoinAckMessage = RouterJoinAckMessage;
    var ServiceConnectAckMessage = function(_super) {
      __extends(ServiceConnectAckMessage, _super);
      function ServiceConnectAckMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.leagueConfig = null;
        if (!data) return _this;
        var config = data.getPY()[Constants_1.constants.FID.LEAGUES.CONFIG];
        if (config) {
          _this.leagueConfig = new LeagueModels_1.LeagueConfig();
          _this.leagueConfig.period = config[Constants_1.constants.LEAGUES_CONFIG_URI.PERIOD];
          _this.leagueConfig.leagueCount = config[Constants_1.constants.LEAGUES_CONFIG_URI.LEAGUE_COUNT];
          _this.leagueConfig.playersPerDiv = config[Constants_1.constants.LEAGUES_CONFIG_URI.PLAYERS_PER_DIV];
          _this.leagueConfig.startTime = config[Constants_1.constants.LEAGUES_CONFIG_URI.START_TIME];
          _this.leagueConfig.promotionIndex = config[Constants_1.constants.LEAGUES_CONFIG_URI.PROMOTION_INDEX];
          _this.leagueConfig.demotionIndex = config[Constants_1.constants.LEAGUES_CONFIG_URI.DEMOTION_INDEX];
          _this.leagueConfig.lastUpdated = config[Constants_1.constants.LEAGUES_CONFIG_URI.LAST_UPDATED];
          var defs = config[Constants_1.constants.LEAGUES_CONFIG_URI.DEFS];
          if (defs) for (var i in defs) {
            var leagueInfo = new LeagueModels_1.LeagueInfo();
            leagueInfo.name = defs[i][Constants_1.constants.LEAGUES_CONFIG_URI.NAME];
            leagueInfo.icon = defs[i][Constants_1.constants.LEAGUES_CONFIG_URI.ICON];
            leagueInfo.promotionIndex = defs[i][Constants_1.constants.LEAGUES_CONFIG_URI.PROMOTION_INDEX];
            leagueInfo.demotionIndex = defs[i][Constants_1.constants.LEAGUES_CONFIG_URI.DEMOTION_INDEX];
            leagueInfo.icon = defs[i][Constants_1.constants.LEAGUES_CONFIG_URI.ICON];
            leagueInfo.rewards = defs[i][Constants_1.constants.LEAGUES_CONFIG_URI.REWARDS];
            leagueInfo.topRewards = defs[i][Constants_1.constants.LEAGUES_CONFIG_URI.TOP_REWARDS];
            _this.leagueConfig.leagueDefs.push(leagueInfo);
          }
        }
        return _this;
      }
      ServiceConnectAckMessage.prototype.toString = function() {
        return "ServiceConnectAckMessage: " + JSON.stringify(this.raw);
      };
      return ServiceConnectAckMessage;
    }(Message_1.Message);
    exports.ServiceConnectAckMessage = ServiceConnectAckMessage;
    var LeagueChangeMessage = function(_super) {
      __extends(LeagueChangeMessage, _super);
      function LeagueChangeMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.leagueId = "";
        _this.leagueExpiry = 0;
        _this.league = 0;
        _this.timeout = -1;
        _this.result = null;
        _this.points = 0;
        _this.leagueId = data.getPY()[Constants_1.constants.FID.LEAGUES.LEAGUE_ID];
        _this.leagueExpiry = data.getPY()[Constants_1.constants.FID.LEAGUES.LEAGUE_EXPIRY];
        _this.league = data.getPY()[Constants_1.constants.FID.LEAGUES.LEAGUE];
        void 0 != data.getPY()[Constants_1.constants.FID.LEAGUES.TIMEOUT] && (_this.timeout = data.getPY()[Constants_1.constants.FID.LEAGUES.TIMEOUT]);
        if (data.getPY()[Constants_1.constants.FID.LEAGUES.RESULT]) {
          var resultObj = data.getPY()[Constants_1.constants.FID.LEAGUES.RESULT];
          _this.result = new LeagueModels_1.LeagueResults(resultObj);
        }
        return _this;
      }
      LeagueChangeMessage.prototype.toString = function() {
        return "LeagueChangeMessage: " + JSON.stringify(this.raw);
      };
      return LeagueChangeMessage;
    }(Message_1.Message);
    exports.LeagueChangeMessage = LeagueChangeMessage;
    var LeagueInfoMessage = function(_super) {
      __extends(LeagueInfoMessage, _super);
      function LeagueInfoMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.playerInfoMap = {};
        _this.infoLastUpdated = 0;
        var playersInfo = data.getPY()[Constants_1.constants.FID.LEAGUES.INFO];
        _this.infoLastUpdated = data.getPY()[Constants_1.constants.FID.LEAGUES.INFO_LAST_UPDATED];
        for (var i in playersInfo) {
          var playerInfo = new LeagueModels_1.LeaguePlayerInfo();
          playerInfo.name = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_NAME];
          playerInfo.lname = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_LNAME];
          playerInfo.snuid = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_SNUID];
          playerInfo.avatar = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_AVATAR];
          playerInfo.snid = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_SNID];
          playerInfo.lastUpdated = playersInfo[i][Constants_1.constants.FID.LEAGUES.INFO_LAST_UPDATED];
          playerInfo.flag = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_FLAG];
          playerInfo.pid = i;
          _this.playerInfoMap[i] = playerInfo;
        }
        return _this;
      }
      LeagueInfoMessage.prototype.toString = function() {
        return "LeagueInfoMessage: " + JSON.stringify(this.raw);
      };
      return LeagueInfoMessage;
    }(Message_1.Message);
    exports.LeagueInfoMessage = LeagueInfoMessage;
    var LeagueUpdateMessage = function(_super) {
      __extends(LeagueUpdateMessage, _super);
      function LeagueUpdateMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.leaguePointsList = [];
        _this.leagueId = "";
        _this.leagueId = data.getPY()[Constants_1.constants.FID.LEAGUES.LEAGUE_ID];
        _this.leaguePointsList = data.getPY()[Constants_1.constants.FID.LEAGUES.LEAGUE_POINTS];
        return _this;
      }
      LeagueUpdateMessage.prototype.toString = function() {
        return "LeagueUpdateMessage: " + JSON.stringify(this.raw);
      };
      return LeagueUpdateMessage;
    }(Message_1.Message);
    exports.LeagueUpdateMessage = LeagueUpdateMessage;
    var LeagueRetryMessage = function(_super) {
      __extends(LeagueRetryMessage, _super);
      function LeagueRetryMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.timeout = 0;
        _this.timeout = data.getPY()[Constants_1.constants.FID.LEAGUES.TIMEOUT];
        return _this;
      }
      LeagueRetryMessage.prototype.toString = function() {
        return "LeagueRetryMessage: " + JSON.stringify(this.raw);
      };
      return LeagueRetryMessage;
    }(Message_1.Message);
    exports.LeagueRetryMessage = LeagueRetryMessage;
    var LeagueCooldownMessage = function(_super) {
      __extends(LeagueCooldownMessage, _super);
      function LeagueCooldownMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.timeout = 0;
        _this.timeout = data.getPY()[Constants_1.constants.FID.LEAGUES.TIMEOUT];
        return _this;
      }
      LeagueCooldownMessage.prototype.toString = function() {
        return "LeagueCooldownMessage: " + JSON.stringify(this.raw);
      };
      return LeagueCooldownMessage;
    }(Message_1.Message);
    exports.LeagueCooldownMessage = LeagueCooldownMessage;
    var LeagueDetailsMessage = function(_super) {
      __extends(LeagueDetailsMessage, _super);
      function LeagueDetailsMessage(data) {
        var _this = _super.call(this, data) || this;
        _this.playerInfoMap = {};
        _this.league = 0;
        _this.league = data.getPY()[Constants_1.constants.FID.LEAGUES.LEAGUE_DESCRIPTION][Constants_1.constants.FID.LEAGUES.DIVISION_DESCRIPTION][Constants_1.constants.FID.LEAGUES.LEAGUE];
        var playersInfo = data.getPY()[Constants_1.constants.FID.LEAGUES.LEAGUE_DESCRIPTION][Constants_1.constants.FID.LEAGUES.PLAYER_DESCRIPTION];
        for (var i in playersInfo) {
          var playerInfo = new LeagueModels_1.LeaguePlayerInfo();
          playerInfo.name = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_NAME];
          playerInfo.lname = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_LNAME];
          playerInfo.snuid = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_SNUID];
          playerInfo.avatar = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_AVATAR];
          playerInfo.snid = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_SNID];
          playerInfo.flag = playersInfo[i][Constants_1.constants.LEAGUES_CONFIG_URI.PINFO_FLAG];
          playerInfo.lastUpdated = playersInfo[i][Constants_1.constants.FID.LEAGUES.INFO_LAST_UPDATED];
          playerInfo.points = playersInfo[i][Constants_1.constants.FID.LEAGUES.PLAYER_POINTS][Constants_1.constants.FID.LEAGUES.POINTS] ? playersInfo[i][Constants_1.constants.FID.LEAGUES.PLAYER_POINTS][Constants_1.constants.FID.LEAGUES.POINTS] : 0;
          playerInfo.pid = i;
          _this.playerInfoMap[i] = playerInfo;
        }
        return _this;
      }
      LeagueDetailsMessage.prototype.toString = function() {
        return "LeagueDetailsMessage: " + JSON.stringify(this.raw);
      };
      return LeagueDetailsMessage;
    }(Message_1.Message);
    exports.LeagueDetailsMessage = LeagueDetailsMessage;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Message": "Message",
    "../models/LeagueModels": "LeagueModels"
  } ],
  RouterOutPackets: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f9d5r+DxdNVrcF26dCnuTl", "RouterOutPackets");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Message_1 = require("../Generic/Message");
    var Config_1 = require("../Config");
    var Constants_1 = require("../Constants");
    var JoinRouterMessage = function(_super) {
      __extends(JoinRouterMessage, _super);
      function JoinRouterMessage(pid, fbId, clientVersion) {
        var _this = this;
        var obj = {
          HD: Constants_1.constants.ROUTE_HEADER.ROUTER,
          UR: Constants_1.constants.URI.JOIN,
          PID: pid,
          SQ: 0,
          PY: {
            CV: parseInt(Config_1.Config.CLIENT_VERSION),
            IO: "instant",
            DU: fbId
          }
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return JoinRouterMessage;
    }(Message_1.Message);
    exports.JoinRouterMessage = JoinRouterMessage;
    var ServiceConnectMessage = function(_super) {
      __extends(ServiceConnectMessage, _super);
      function ServiceConnectMessage(pid, leagueId, playerCount, lastUpdated, maxInfoUpdated) {
        var _this = this;
        var obj = {
          HD: Constants_1.constants.ROUTE_HEADER.LEAGUES,
          UR: Constants_1.constants.URI.SERVICE_CONNECT,
          PID: pid,
          SQ: 0,
          PY: {}
        };
        leagueId && "" != leagueId && (obj["PY"][Constants_1.constants.FID.LEAGUES.LEAGUE_ID] = leagueId);
        playerCount && playerCount > 0 && (obj["PY"][Constants_1.constants.FID.LEAGUES.PLAYER_COUNT] = playerCount);
        lastUpdated && lastUpdated > 0 && (obj["PY"][Constants_1.constants.FID.LEAGUES.CONFIG_LAST_UPDATED] = lastUpdated);
        maxInfoUpdated && maxInfoUpdated > 0 && (obj["PY"][Constants_1.constants.FID.LEAGUES.INFO_LAST_UPDATED] = maxInfoUpdated);
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return ServiceConnectMessage;
    }(Message_1.Message);
    exports.ServiceConnectMessage = ServiceConnectMessage;
    var HeartBeatMessage = function(_super) {
      __extends(HeartBeatMessage, _super);
      function HeartBeatMessage() {
        var _this = this;
        var obj = {
          HD: Constants_1.constants.ROUTE_HEADER.ROUTER,
          UR: Constants_1.constants.URI.HEART_BEAT,
          PY: JSON.stringify({})
        };
        _this = _super.call(this, obj) || this;
        return _this;
      }
      return HeartBeatMessage;
    }(Message_1.Message);
    exports.HeartBeatMessage = HeartBeatMessage;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Message": "Message"
  } ],
  RouterPacketFactory: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e7ecF/Z2hLvr6+zQBeyQ+n", "RouterPacketFactory");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RouterInPackets_1 = require("./RouterInPackets");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var RouterPacketFactory = function() {
      function RouterPacketFactory() {}
      RouterPacketFactory.decode = function(message) {
        this.sLogger.Log("shreyas " + JSON.stringify(message.getRaw()));
        if (message.getUR() == Constants_1.constants.URI.JOIN_ACK) return new RouterInPackets_1.RouterJoinAckMessage(message);
        if (message.getUR() == Constants_1.constants.URI.LEAGUES.SERVICE_CONNECT_ACK) return new RouterInPackets_1.ServiceConnectAckMessage(message);
        if (message.getUR() == Constants_1.constants.URI.LEAGUES.CHANGE) return new RouterInPackets_1.LeagueChangeMessage(message);
        if (message.getUR() == Constants_1.constants.URI.LEAGUES.INFO) return new RouterInPackets_1.LeagueInfoMessage(message);
        if (message.getUR() == Constants_1.constants.URI.LEAGUES.UPDATE) return new RouterInPackets_1.LeagueUpdateMessage(message);
        if (message.getUR() == Constants_1.constants.URI.LEAGUES.RETRY) return new RouterInPackets_1.LeagueRetryMessage(message);
        if (message.getUR() == Constants_1.constants.URI.LEAGUES.LEAGUE_COOLDOWN) return new RouterInPackets_1.LeagueCooldownMessage(message);
        if (message.getUR() == Constants_1.constants.URI.LEAGUES.LEAGUE_DETAILS) return new RouterInPackets_1.LeagueDetailsMessage(message);
        return null;
      };
      RouterPacketFactory.sLogger = new Logger_1.Logger("RouterPacketFactory", true);
      return RouterPacketFactory;
    }();
    exports.RouterPacketFactory = RouterPacketFactory;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Logger": "Logger",
    "./RouterInPackets": "RouterInPackets"
  } ],
  SafeCellComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0915cRkPWlLWJEoRxHj2kGr", "SafeCellComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SafeCellComponent = function(_super) {
      __extends(SafeCellComponent, _super);
      function SafeCellComponent() {
        var _this = _super.call(this) || this;
        _this.starColor = null;
        _this.starWhite = null;
        return _this;
      }
      SafeCellComponent.prototype.onLoad = function() {};
      SafeCellComponent.prototype.intialize = function(isColour) {
        this.starColor.active = isColour;
        this.starWhite.active = !isColour;
      };
      __decorate([ property(cc.Node) ], SafeCellComponent.prototype, "starColor", void 0);
      __decorate([ property(cc.Node) ], SafeCellComponent.prototype, "starWhite", void 0);
      SafeCellComponent = __decorate([ ccclass ], SafeCellComponent);
      return SafeCellComponent;
    }(cc.Component);
    exports.default = SafeCellComponent;
    cc._RF.pop();
  }, {} ],
  ScrollButtonComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15843OuBA5DSbfRHLuhyHUZ", "ScrollButtonComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScrollButtonComponent = function(_super) {
      __extends(ScrollButtonComponent, _super);
      function ScrollButtonComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mDragging = false;
        _this.mButton = null;
        return _this;
      }
      ScrollButtonComponent.prototype.onLoad = function() {
        this.mButton = this.node.getComponent(cc.Button);
        if (!this.mButton) return;
        this.mButton.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.mButton.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
        this.mButton.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
      };
      ScrollButtonComponent.prototype.start = function() {};
      ScrollButtonComponent.prototype._onTouchBegan = function(event) {
        if (!this.mButton) return;
        this.mTouchStartPosition = event.touch.getLocation();
        this.mDragging = false;
      };
      ScrollButtonComponent.prototype._onTouchEnded = function(event) {
        this.checkAndCancelClickEvent(event);
      };
      ScrollButtonComponent.prototype._onTouchMove = function(event) {
        this.checkAndCancelClickEvent(event);
      };
      ScrollButtonComponent.prototype.checkAndCancelClickEvent = function(event) {
        if (!this.mButton) return;
        var diffX = Math.abs(this.mTouchStartPosition.x - event.touch.getLocation().x);
        var diffY = Math.abs(this.mTouchStartPosition.y - event.touch.getLocation().y);
        if (diffX > 25 || diffY > 25) {
          this.mDragging = true;
          this.mButton._onTouchCancel();
        }
      };
      ScrollButtonComponent = __decorate([ ccclass ], ScrollButtonComponent);
      return ScrollButtonComponent;
    }(cc.Component);
    exports.default = ScrollButtonComponent;
    cc._RF.pop();
  }, {} ],
  ScrollingNumberActionComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3bd7HDPqhBRZ7/CPC5q7AL", "ScrollingNumberActionComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScrollingNumberActionComponent = function(_super) {
      __extends(ScrollingNumberActionComponent, _super);
      function ScrollingNumberActionComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        return _this;
      }
      ScrollingNumberActionComponent.prototype.start = function() {};
      ScrollingNumberActionComponent.prototype.scrollTo = function(from, to, time) {
        if (this.label) {
          var duration = .5;
          if (to < 10 || Math.abs(from - to) < 10) duration = .1; else if (0 != from) {
            var delta = Math.abs((to - from) / from);
            duration = duration > delta ? delta : duration;
          }
          time && (duration = time);
          duration *= 1e3;
          this.mDelta = (to - from) / duration;
          this.mIsAnimating = true;
          this.mStartNumber = from;
          this.mCurrentNumber = from;
          this.mEndNumber = to;
          this.mUpdateDelta = .1;
          this.mTimerDelta = 0;
        }
      };
      ScrollingNumberActionComponent.prototype.update = function(dt) {
        this.mTimerDelta += dt;
        if (this.mIsAnimating && this.mTimerDelta > this.mUpdateDelta) {
          var previousNumber = this.mCurrentNumber;
          this.mCurrentNumber = Math.round(this.mCurrentNumber + this.mDelta * this.mTimerDelta * 1e3);
          if (this.mDelta > 0 && this.mCurrentNumber >= this.mEndNumber || this.mDelta < 0 && this.mCurrentNumber <= this.mEndNumber || previousNumber == this.mCurrentNumber) {
            this.mCurrentNumber = this.mEndNumber;
            this.mIsAnimating = false;
          }
          this.mTimerDelta = 0;
          this.label.string = Helper_1.Helper.getLocaleNumber(this.mCurrentNumber);
        }
      };
      __decorate([ property(cc.Label) ], ScrollingNumberActionComponent.prototype, "label", void 0);
      ScrollingNumberActionComponent = __decorate([ ccclass ], ScrollingNumberActionComponent);
      return ScrollingNumberActionComponent;
    }(cc.Component);
    exports.default = ScrollingNumberActionComponent;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper"
  } ],
  SettingsPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b9d9+U0HREZ6NRZa05/1ka", "SettingsPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var PopupComponent_1 = require("./PopupComponent");
    var LanguagePopupComponent_1 = require("./LanguagePopupComponent");
    var LocalizationController_1 = require("../Controllers/LocalizationController");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Config_1 = require("../Config");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SettingsPopupComponent = function(_super) {
      __extends(SettingsPopupComponent, _super);
      function SettingsPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.playerId = null;
        _this.soundOffNode = null;
        _this.musicOffNode = null;
        _this.notifOffNode = null;
        _this.vibrationOffNode = null;
        _this.soundOnNode = null;
        _this.musicOnNode = null;
        _this.vibrationOnNode = null;
        _this.languagePopup = null;
        _this.languageText = null;
        _this.languageNode = null;
        _this.buttonsNode = null;
        _this.toggleBg = null;
        _this.otherNode = null;
        _this.policyButton = null;
        _this.feedbackNode = null;
        _this.chatNode = null;
        _this.chatOnNode = null;
        _this.chatOffNode = null;
        _this.feedbackButton = null;
        _this.closeSound = null;
        _this.versionLabel = null;
        _this.backgroundNode = null;
        _this.powerupNode = null;
        _this.powerupOnNode = null;
        _this.powerupOffNode = null;
        _this.mNotifOn = true;
        _this.mLocalStorageComponent = null;
        _this.mOnPolicyClose = _this.onPolicyClose.bind(_this);
        return _this;
      }
      SettingsPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantNodeComponent = persistantController;
        this.mPlayerController = persistantController.GetPlayerController();
        this.mStateMachineController = persistantController.GetStateMachineController();
        this.mSoundController = persistantController.GetSoundController();
        this.mStatsController = persistantController.GetStatsController();
        this.mPlayerModel = this.mPlayerController.getModel();
        this.mLocalStorageComponent = cc.sys.localStorage;
        addEventListener("policy_close", this.mOnPolicyClose);
        this.versionLabel.string = Config_1.Config.VERSION;
        this.feedbackButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SettingsPopupComponent", "onFeedbackClicked"));
        this.languageNode.active = true;
        var spanishLocVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_SPANISH_LOC);
        var deltaHeight = 0;
        if (2 != spanishLocVariant) {
          this.languageNode.active = false;
          this.toggleBg.height = this.toggleBg.getContentSize().height - this.languageNode.getContentSize().height;
          this.buttonsNode.setPositionY(this.buttonsNode.getPositionY() + this.languageNode.getContentSize().height);
          this.otherNode.setPositionY(this.otherNode.getPositionY() + this.languageNode.getContentSize().height);
          deltaHeight += this.languageNode.getContentSize().height;
        }
        this.chatNode.active = true;
        var chatVar = 2;
        if (2 != chatVar || !this.mPlayerModel.isCustomChatEnabled()) {
          this.chatNode.active = false;
          this.toggleBg.height = this.toggleBg.height - this.languageNode.getContentSize().height;
          this.otherNode.setPositionY(this.otherNode.getPositionY() + this.languageNode.getContentSize().height);
          deltaHeight += this.languageNode.getContentSize().height;
        }
        this.backgroundNode.height = this.backgroundNode.height - deltaHeight;
      };
      SettingsPopupComponent.prototype.start = function() {
        var variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUPS_DEBUG2);
        var gamesPlayed = this.mPersistantNodeComponent.GetPlayerController().getModel().getPreviousGamesPlayedCount();
        var totalGamesForRerollUnlock = this.mPersistantNodeComponent.GetPlayerController().getModel().getPowerupDebugUnlockCount();
        var powerupDebugVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUPS_DEBUG);
        var powerupMasterVariant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_POWERUP);
        var deltaHeight = 0;
        if (2 != powerupMasterVariant || 2 != powerupDebugVariant || 3 != variant || gamesPlayed < totalGamesForRerollUnlock) {
          this.powerupNode.active = false;
          this.toggleBg.height = this.toggleBg.height - this.powerupNode.getContentSize().height;
          this.otherNode.setPositionY(this.otherNode.getPositionY() + this.powerupNode.getContentSize().height);
          deltaHeight += this.powerupNode.getContentSize().height;
        } else this.powerupNode.active = true;
        this.backgroundNode.height = this.backgroundNode.height - deltaHeight;
        this.mPersistantNodeComponent.node.on(Constants_1.constants.Events.EVENT_LOCALE_CHANGE, this.onLocaleChange, this);
      };
      SettingsPopupComponent.prototype.initialize = function() {
        var localizationComponent = this.playerId.node.getComponent(LocalizationComponent_1.default);
        var referralSupported = this.mPlayerModel.isReferralSupported();
        referralSupported ? localizationComponent.setValues("#PLAYER_ID", {
          ID: this.mPlayerModel.getPlayerReferralCode()
        }) : localizationComponent.setValues("#PLAYER_ID", {
          ID: this.mPlayerModel.getId()
        });
        this.musicOffNode.active = !this.mLocalStorageComponent.getItem("music");
        var sound = "true" == this.mLocalStorageComponent.getItem("sound");
        this.soundOffNode.active = !sound;
        this.soundOnNode.active = !!sound;
        var vibration = "true" == this.mLocalStorageComponent.getItem("vibration");
        this.vibrationOffNode.active = !vibration;
        this.vibrationOnNode.active = !!vibration;
        var music = "true" == this.mLocalStorageComponent.getItem("music");
        this.musicOffNode.active = !music;
        this.musicOnNode.active = !!music;
        this.languageText.string = LocalizationController_1.LocalizationController.getInstance().getLocaleString();
        var chatBlocked = this.mPersistantNodeComponent.getChatBlockController().isChatBlocked();
        this.chatOffNode.active = chatBlocked;
        this.chatOnNode.active = !chatBlocked;
        var powerupOn = this.mPersistantNodeComponent.GetPlayerController().getModel().getPowerupSettings();
        this.powerupOffNode.active = !powerupOn;
        this.powerupOnNode.active = powerupOn;
      };
      SettingsPopupComponent.prototype.onFeedbackClicked = function() {
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_FEEDBACK_CLICKED);
        var popupComponent = this.node.getComponent(PopupComponent_1.default);
        popupComponent && popupComponent.hidePopup();
      };
      SettingsPopupComponent.prototype.onLocaleChange = function() {
        this.languageText.string = LocalizationController_1.LocalizationController.getInstance().getLocaleString();
      };
      SettingsPopupComponent.prototype.onPolicyPressed = function() {
        this.mStatsController.count("button", 1, "policy", "in_game");
        var pp = document.getElementById("privacy-policy");
        pp.style.display = "inline";
      };
      SettingsPopupComponent.prototype.onPolicyClose = function() {
        this.closeSound.play();
      };
      SettingsPopupComponent.prototype.toggleSound = function() {
        var sound = this.mSoundController.isSoundEnabled();
        this.soundOffNode.active = sound;
        this.soundOnNode.active = !sound;
        this.mSoundController.enableSounds(!sound);
        this.mLocalStorageComponent.setItem("sound", !sound);
        this.mStatsController.count("button", 1, "sound", "in_game");
      };
      SettingsPopupComponent.prototype.toggleMusic = function() {
        var music = this.mSoundController.isMusicEnabled();
        this.musicOffNode.active = music;
        this.musicOnNode.active = !music;
        this.mSoundController.enableMusic(!music);
        this.mLocalStorageComponent.setItem("music", !music);
        this.mStatsController.count("button", 1, "music", "in_game");
      };
      SettingsPopupComponent.prototype.toggleNotif = function() {
        this.mNotifOn = !this.mNotifOn;
        this.notifOffNode.active = !this.mNotifOn;
      };
      SettingsPopupComponent.prototype.toggleVibration = function() {
        var vibration = this.mSoundController.isVibrationEnabled();
        this.vibrationOffNode.active = vibration;
        this.vibrationOnNode.active = !vibration;
        this.mSoundController.enableVibration(!vibration);
        this.mLocalStorageComponent.setItem("vibration", !vibration);
        this.mStatsController.count("button", 1, "vibration", "in_game");
      };
      SettingsPopupComponent.prototype.toggleChat = function() {
        var chatBlockCtrl = this.mPersistantNodeComponent.getChatBlockController();
        var chatBlocked = chatBlockCtrl.isChatBlocked();
        this.chatOffNode.active = !chatBlocked;
        this.chatOnNode.active = chatBlocked;
        chatBlocked ? chatBlockCtrl.enableChat() : chatBlockCtrl.disableChat();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_CHAT_STATUS_CHANGED);
        this.mStatsController.count("button", 1, "chat_blocked", "in_game", !chatBlocked + "");
      };
      SettingsPopupComponent.prototype.togglePowerup = function() {
        var powerupOn = this.mPersistantNodeComponent.GetPlayerController().getModel().getPowerupSettings();
        this.powerupOffNode.active = powerupOn;
        this.powerupOnNode.active = !powerupOn;
        this.mPersistantNodeComponent.GetPlayerController().changePowerupSettings(!powerupOn);
        this.mStatsController.count("button", 1, "chat_blocked", "in_game", !powerupOn + "");
      };
      SettingsPopupComponent.prototype.onLanguagePressed = function() {
        var languageComponent = this.languagePopup.node.getComponent(LanguagePopupComponent_1.default);
        this.languagePopup.showPopup();
        languageComponent.initialize();
        this.mStatsController.count("popup", 1, "language", "show");
      };
      SettingsPopupComponent.prototype.onDisable = function() {
        this.mPersistantNodeComponent.GetPlayerController().getModel().getLocale() != LocalizationController_1.LocalizationController.getInstance().getLocaleInteger() && this.mPersistantNodeComponent.GetPlayerController().saveLocaleOnServer();
        this.mPersistantNodeComponent.GetPlayerController().savePowerupSettingsOnServer();
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_POWERUP_SETTINGS_CHANGED);
      };
      SettingsPopupComponent.prototype.onDestroy = function() {
        removeEventListener("policy_close", this.mOnPolicyClose);
      };
      __decorate([ property(cc.Label) ], SettingsPopupComponent.prototype, "playerId", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "soundOffNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "musicOffNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "notifOffNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "vibrationOffNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "soundOnNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "musicOnNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "vibrationOnNode", void 0);
      __decorate([ property(PopupComponent_1.default) ], SettingsPopupComponent.prototype, "languagePopup", void 0);
      __decorate([ property(cc.Label) ], SettingsPopupComponent.prototype, "languageText", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "languageNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "buttonsNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "toggleBg", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "otherNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "policyButton", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "feedbackNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "chatNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "chatOnNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "chatOffNode", void 0);
      __decorate([ property(cc.Button) ], SettingsPopupComponent.prototype, "feedbackButton", void 0);
      __decorate([ property(cc.AudioSource) ], SettingsPopupComponent.prototype, "closeSound", void 0);
      __decorate([ property(cc.Label) ], SettingsPopupComponent.prototype, "versionLabel", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "backgroundNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "powerupNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "powerupOnNode", void 0);
      __decorate([ property(cc.Node) ], SettingsPopupComponent.prototype, "powerupOffNode", void 0);
      SettingsPopupComponent = __decorate([ ccclass ], SettingsPopupComponent);
      return SettingsPopupComponent;
    }(cc.Component);
    exports.default = SettingsPopupComponent;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Controllers/LocalizationController": "LocalizationController",
    "../Generic/Helper": "Helper",
    "./LanguagePopupComponent": "LanguagePopupComponent",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  SmartScrollViewComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39e9aqrxH5MraANEh4ph+Xp", "SmartScrollViewComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SmartScrollViewComponent = function(_super) {
      __extends(SmartScrollViewComponent, _super);
      function SmartScrollViewComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.contentNode = null;
        _this.mScrollView = null;
        _this.mTotalCards = 0;
        _this.mMinimumCards = 0;
        _this.mTopCardIndex = 0;
        _this.mCards = [];
        _this.mCardPrefab = null;
        _this.mInitCallback = null;
        _this.mCardSize = null;
        _this.mCardIndexMap = {};
        _this.mPaddingMap = {};
        return _this;
      }
      SmartScrollViewComponent.prototype.start = function() {};
      SmartScrollViewComponent.prototype.initialize = function(cardSize, totalCards, cardPrefab, initCardCallback, paddingMap, minimunCards, onInitializationCompleteCallback) {
        this.mScrollView = this.getComponent(cc.ScrollView);
        this.mScrollView.node.on("scrolling", this.onScroll, this);
        var scrollViewSize = this.node.getContentSize();
        this.mMinimumCards = minimunCards || Math.ceil(scrollViewSize.height / cardSize.height) + 2;
        this.mTotalCards = totalCards;
        this.onInitializationCompleteCallback = onInitializationCompleteCallback;
        this.mTopCardIndex = 0;
        this.mInitCallback = initCardCallback;
        this.mPreviousPosition = this.contentNode.getPosition();
        this.mCardSize = cardSize;
        cardPrefab != this.mCardPrefab && (this.mCards = []);
        this.mCardPrefab = cardPrefab;
        paddingMap && (this.mPaddingMap = paddingMap);
        this.createMinimumNodes();
        this.initiailizeTopCards();
      };
      SmartScrollViewComponent.prototype.onScroll = function(event) {
        var currentPosition = this.contentNode.getPosition();
        var dir = currentPosition.y - this.mPreviousPosition.y;
        this.mPreviousPosition = this.contentNode.getPosition();
        var ySpacing = this.mPaddingMap["spacingY"] ? this.mPaddingMap["spacingY"] : 0;
        for (var i = 0; i < this.mCards.length; i++) {
          var isCardVisible = this.isCardVisible(this.mCards[i]);
          if (0 != isCardVisible) {
            var nextIndex = -1;
            if (isCardVisible > 0 && dir > 0) {
              if (this.mTopCardIndex + this.mMinimumCards < this.mTotalCards) {
                nextIndex = this.mTopCardIndex + this.mMinimumCards;
                this.mTopCardIndex++;
                this.mCards[i].setPositionY(this.mTopCardPosition.y - (this.mCardSize.height + ySpacing) * this.mMinimumCards);
                this.mTopCardPosition.y -= this.mCardSize.height + ySpacing;
              }
            } else if (isCardVisible < 0 && dir < 0 && this.mTopCardIndex > 0) {
              nextIndex = this.mTopCardIndex - 1;
              this.mTopCardIndex--;
              this.mCards[i].setPositionY(this.mTopCardPosition.y + this.mCardSize.height + ySpacing);
              this.mTopCardPosition.y += this.mCardSize.height + ySpacing;
            }
            if (this.mInitCallback && nextIndex >= 0) {
              this.mInitCallback(this.mCards[i], nextIndex);
              this.mCardIndexMap[i] = nextIndex;
            }
          }
        }
      };
      SmartScrollViewComponent.prototype.createMinimumNodes = function() {
        var cardsRequired = this.mTotalCards < this.mMinimumCards ? this.mTotalCards : this.mMinimumCards;
        for (var i = 0; i < cardsRequired; i++) {
          var card = null;
          if (i < this.mCards.length) card = this.mCards[i]; else {
            card = cc.instantiate(this.mCardPrefab);
            this.contentNode.addChild(card);
            this.mCards.push(card);
          }
          var topPadding = this.mPaddingMap["paddingTop"] ? this.mPaddingMap["paddingTop"] : 0;
          var ySpacing = 0;
          if (i > 0) {
            ySpacing = this.mPaddingMap["spacingY"] ? this.mPaddingMap["spacingY"] : 0;
            ySpacing *= i;
          }
          card.setPositionY(this.mCardSize.height * -i - card.getAnchorPoint().y * this.mCardSize.height - topPadding - ySpacing);
          0 == i && (this.mTopCardPosition = card.getPosition());
        }
      };
      SmartScrollViewComponent.prototype.initiailizeTopCards = function() {
        for (var i = 0; i < this.mCards.length; i++) if (this.mInitCallback) {
          this.mInitCallback(this.mCards[i], i);
          this.mCardIndexMap[i] = i;
        }
        this.onInitializationCompleteCallback && this.onInitializationCompleteCallback();
      };
      SmartScrollViewComponent.prototype.isCardVisible = function(card, considerInComplete) {
        var scrollViewPosition = this.mScrollView.node.parent.convertToWorldSpaceAR(this.mScrollView.node.getPosition());
        var scrollViewHeight = this.mScrollView.node.getContentSize().height;
        if (card) {
          var cardPosition = card.parent.convertToWorldSpaceAR(card.getPosition());
          var cardHeight = card.getContentSize().height;
          if (!considerInComplete && cardPosition.y - cardHeight / 2 > scrollViewPosition.y) return 1;
          if (!considerInComplete && cardPosition.y + cardHeight / 2 < scrollViewPosition.y - scrollViewHeight) return -1;
          if (considerInComplete && cardPosition.y + cardHeight / 2 > scrollViewPosition.y) return 1;
          if (considerInComplete && cardPosition.y - cardHeight / 2 < scrollViewPosition.y - scrollViewHeight) return -1;
        }
        return 0;
      };
      SmartScrollViewComponent.prototype.isCardAtIndexVisible = function(index) {
        if (index >= this.mTopCardIndex && index < this.mTopCardIndex + this.mMinimumCards) {
          for (var i = 0; i < this.mCards.length; i++) if (this.mCardIndexMap[i] == index) return this.isCardVisible(this.mCards[i], true);
          return 0;
        }
        if (index > this.mTopCardIndex) return -1;
        return 1;
      };
      __decorate([ property(cc.Node) ], SmartScrollViewComponent.prototype, "contentNode", void 0);
      SmartScrollViewComponent = __decorate([ ccclass ], SmartScrollViewComponent);
      return SmartScrollViewComponent;
    }(cc.Component);
    exports.default = SmartScrollViewComponent;
    cc._RF.pop();
  }, {} ],
  SoundController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27bda8TCqxNx4Wk6SitPQR8", "SoundController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Constants_1 = require("../Constants");
    var SoundController = function() {
      function SoundController(persistantNodeComponent) {
        this.mVibrateDuration = 200;
        this.mSoundsEnabled = true;
        this.mVibrateEnabled = true;
        this.mMusicEnabled = true;
        this.mBackgroundMusicId = -1;
        this.mIsAppInBackground = false;
        this.mCurrentPlayingChatSound = null;
        this.mPersistantNodeComponent = null;
        this.mPersistantNodeComponent = persistantNodeComponent;
        SoundController.INSTANCE = this;
        this.mIsAppInBackground = false;
      }
      SoundController.prototype.play = function(sound) {
        if (!this.mSoundsEnabled || this.mIsAppInBackground) return;
        return cc.audioEngine.play("res/raw-assets/resources/Sounds/" + sound + ".mp3", false, .6);
      };
      SoundController.prototype.playMusic = function(music) {
        if (!this.mMusicEnabled) return;
        -1 != this.mBackgroundMusicId && this.stop(this.mBackgroundMusicId);
        this.mBackgroundMusicId = cc.audioEngine.play("res/raw-assets/resources/Sounds/" + music + ".mp3", true, .6);
        return this.mBackgroundMusicId;
      };
      SoundController.prototype.stopMusic = function() {
        -1 != this.mBackgroundMusicId && this.stop(this.mBackgroundMusicId);
        this.mBackgroundMusicId = -1;
      };
      SoundController.prototype.playVibration = function(duration) {
        if (!this.mVibrateEnabled || this.mIsAppInBackground) return;
        if (cc.sys.os != cc.sys.OS_ANDROID && cc.sys.os != cc.sys.OS_LINUX) return;
        var dur = duration || this.mVibrateDuration;
        var success = window.navigator.vibrate(dur);
      };
      SoundController.prototype.setVibrateDuration = function(duration) {
        this.mVibrateDuration = duration;
      };
      SoundController.prototype.stop = function(soundid) {
        cc.audioEngine.stop(soundid);
      };
      SoundController.prototype.stopAll = function() {
        cc.audioEngine.stopAll();
        this.mBackgroundMusicId = -1;
      };
      SoundController.prototype.enableSounds = function(enable) {
        this.mSoundsEnabled = enable;
      };
      SoundController.prototype.isSoundEnabled = function() {
        return this.mSoundsEnabled;
      };
      SoundController.prototype.isMusicEnabled = function() {
        return this.mMusicEnabled;
      };
      SoundController.prototype.enableMusic = function(enable) {
        enable || this.stopMusic();
        this.mMusicEnabled = enable;
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_MUSIC_STATUS);
      };
      SoundController.prototype.enableVibration = function(enable) {
        this.mVibrateEnabled = enable;
      };
      SoundController.prototype.isVibrationEnabled = function() {
        return this.mVibrateEnabled;
      };
      SoundController.prototype.isAppInBackground = function() {
        return this.mIsAppInBackground;
      };
      SoundController.getInstance = function() {
        return SoundController.INSTANCE;
      };
      SoundController.play = function(sound) {
        SoundController.INSTANCE.play(sound);
      };
      SoundController.stop = function(soundid) {
        SoundController.INSTANCE.stop(soundid);
      };
      SoundController.stopAll = function() {
        SoundController.INSTANCE.stopAll();
      };
      SoundController.playVibration = function(duration) {
        SoundController.INSTANCE.playVibration(duration);
      };
      SoundController.prototype.setAppVisibiltyStatus = function(visible) {
        this.mIsAppInBackground = !visible;
      };
      SoundController.prototype.setCurrentPlayingChatSound = function(sound) {
        this.mCurrentPlayingChatSound = sound;
      };
      SoundController.prototype.isChatSoundPlaying = function() {
        var isSoundPlaying = false;
        this.mCurrentPlayingChatSound && (isSoundPlaying = this.mCurrentPlayingChatSound.isPlaying);
        return isSoundPlaying;
      };
      return SoundController;
    }();
    exports.SoundController = SoundController;
    cc._RF.pop();
  }, {
    "../Constants": "Constants"
  } ],
  SpinnerComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9ca4efXmpBOS4uy2MutMA9J", "SpinnerComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SpinnerComponent = function(_super) {
      __extends(SpinnerComponent, _super);
      function SpinnerComponent() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      SpinnerComponent.prototype.onLoad = function() {
        this.mFrames = [];
        for (var index = 1; index <= 13; index++) {
          var frameName = "loader-" + index;
          var spFrame = this.atlas.getSpriteFrame(frameName);
          this.mFrames.push(spFrame);
          this.atlas.getSpriteFrames;
        }
        this.mAnimation = this.node.getComponent(cc.Animation);
        var clip = cc.AnimationClip.createWithSpriteFrames(this.mFrames, 13);
        clip.name = "run";
        clip.wrapMode = cc.WrapMode.Loop;
        this.mAnimation.addClip(clip);
        this.mSprite = this.getComponent(cc.Sprite);
        this.hideLoader();
      };
      SpinnerComponent.prototype.showLoader = function() {
        this.mSprite && (this.mSprite.node.active = true);
        this.mAnimation && this.mAnimation.play("run");
      };
      SpinnerComponent.prototype.hideLoader = function() {
        this.mSprite && (this.mSprite.node.active = false);
        this.mAnimation && this.mAnimation.stop("run");
      };
      __decorate([ property(cc.SpriteAtlas) ], SpinnerComponent.prototype, "atlas", void 0);
      SpinnerComponent = __decorate([ ccclass ], SpinnerComponent);
      return SpinnerComponent;
    }(cc.Component);
    exports.default = SpinnerComponent;
    cc._RF.pop();
  }, {} ],
  StateMachineController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "172d930OvZP2Lvmm3CxvCsC", "StateMachineController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var State_1 = require("../states/State");
    var Queue_1 = require("../Generic/Queue");
    var StateSwitcher = function() {
      function StateSwitcher(stateType, extraData) {
        this.mStateType = stateType;
        this.mExtraData = extraData;
      }
      StateSwitcher.prototype.getStateType = function() {
        return this.mStateType;
      };
      StateSwitcher.prototype.getExtraData = function() {
        return this.mExtraData;
      };
      return StateSwitcher;
    }();
    exports.StateSwitcher = StateSwitcher;
    var StateMachineController = function() {
      function StateMachineController(persistanceNode) {
        this.mPersistanceNodeComponent = null;
        this.mExperimentController = null;
        this.mLogger = new Logger_1.Logger("StateMachineController", true);
        this.mPersistanceNodeComponent = persistanceNode;
        this.mPlayerController = persistanceNode.GetPlayerController();
        this.mGameController = persistanceNode.GetGameController();
        this.mLeaderBoardController = persistanceNode.GetLeaderBoardController();
        this.mStatsController = persistanceNode.GetStatsController();
        this.mActionController = persistanceNode.GetActionController();
        this.mExperimentController = persistanceNode.GetExperimentController();
        this.mStateQueue = new Queue_1.Queue();
        this.StateStatsInterval = null;
        this.mEvent = "";
        this.progress = 0;
      }
      StateMachineController.prototype.changeState = function(state) {
        this.state_ && this.state_.cleanup();
        this.mEvent = "";
        this.progress = 0;
        this.state_ = this.getState(state);
        this.StateOpenStats();
        this.mLogger.Log("Switching to state " + this.state_.getName());
        if (this.state_) {
          this.state_.setExtraData(state.getExtraData());
          this.state_.init();
        }
      };
      StateMachineController.prototype.init = function() {
        var state = new StateSwitcher(State_1.StateType.STATE_START, {});
        this.initializeState(state);
        this.StateStatsInterval = setInterval(this.StateOpenStats.bind(this), 2e3);
      };
      StateMachineController.prototype.pushState = function(stateType, extraData) {
        this.mStateQueue.push(new StateSwitcher(stateType, extraData));
        this.processStateQueue();
      };
      StateMachineController.prototype.processStateQueue = function() {
        if (this.mStateQueue.length() > 0 && null == this.state_) {
          var state = this.mStateQueue.pop();
          this.changeState(state);
        }
      };
      StateMachineController.prototype.completeState = function() {
        this.state_ = null;
        this.processStateQueue();
      };
      StateMachineController.prototype.initializeState = function(state) {
        if (this.state_) {
          this.mLogger.Log("State already initialised");
          return;
        }
        this.changeState(state);
      };
      StateMachineController.prototype.onEvent = function(event, extraData) {
        if (this.state_) {
          this.mEvent = event + "";
          this.StateOpenStats();
          this.state_.onEvent(event, extraData);
        }
      };
      StateMachineController.prototype.getState = function(stateSw) {
        var retState = null;
        var stateType = stateSw.getStateType();
        switch (stateType) {
         case State_1.StateType.STATE_START:
          retState = new State_1.StateStart(this);
          break;

         case State_1.StateType.STATE_LOAD_ASSETS_AND_LOGIN:
          retState = new State_1.StateLoadAssetsAndLogin(this);
          break;

         case State_1.StateType.STATE_LOBBY:
          retState = new State_1.StateLobby(this);
          break;

         case State_1.StateType.STATE_GAME:
          retState = new State_1.StateGame(this);
          break;

         default:
          this.mLogger.Log("StateFactory getState unknown state type %s" + stateType);
          return null;
        }
        retState.setExtraData(stateSw.getExtraData());
        return retState;
      };
      StateMachineController.prototype.getPlayerController = function() {
        return this.mPlayerController;
      };
      StateMachineController.prototype.getGameController = function() {
        return this.mGameController;
      };
      StateMachineController.prototype.getActionController = function() {
        return this.mActionController;
      };
      StateMachineController.prototype.getLeaderBoardController = function() {
        return this.mLeaderBoardController;
      };
      StateMachineController.prototype.getStatsController = function() {
        return this.mStatsController;
      };
      StateMachineController.prototype.getExperimentController = function() {
        return this.mExperimentController;
      };
      StateMachineController.prototype.getPersistanceNodeComponent = function() {
        return this.mPersistanceNodeComponent;
      };
      StateMachineController.prototype.getAdsController = function() {
        return this.mPersistanceNodeComponent.GetAdsController();
      };
      StateMachineController.prototype.getCurrentStateType = function() {
        if (this.state_) return this.state_.getType();
        return -1;
      };
      StateMachineController.prototype.setAssetProgress = function(progress) {
        this.progress = Math.round(progress);
      };
      StateMachineController.prototype.StateOpenStats = function() {
        if (this.state_ && this.state_.getType() < 3) {
          var event = this.state_.getName() + "_" + this.mEvent;
          FBInstant.player.getID() % 3 == 0 && (2 === this.state_.getType() ? this.mStatsController.open(FBInstant.player.getID(), FBInstant.getLocale(), event, this.progress, -1, true, "") : this.mStatsController.open(FBInstant.player.getID(), FBInstant.getLocale(), event, -1, -1, true, ""));
        } else {
          clearInterval(this.StateStatsInterval);
          this.StateStatsInterval = null;
        }
      };
      StateMachineController.staticInstance_ = null;
      return StateMachineController;
    }();
    exports.StateMachineController = StateMachineController;
    cc._RF.pop();
  }, {
    "../Generic/Logger": "Logger",
    "../Generic/Queue": "Queue",
    "../states/State": "State"
  } ],
  State: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f428f3TUdHsou1Ep2gGkcr", "State");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var Game_1 = require("../models/Game");
    var ActionShowJoiningBanner_1 = require("../Actions/ActionShowJoiningBanner");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var ActionShowNotEnoughCurrenyPopup_1 = require("../Actions/ActionShowNotEnoughCurrenyPopup");
    var Constants_1 = require("../Constants");
    var Connection_1 = require("../Generic/Connection");
    var StateType;
    (function(StateType) {
      StateType[StateType["STATE_START"] = 1] = "STATE_START";
      StateType[StateType["STATE_LOAD_ASSETS_AND_LOGIN"] = 2] = "STATE_LOAD_ASSETS_AND_LOGIN";
      StateType[StateType["STATE_LOBBY"] = 3] = "STATE_LOBBY";
      StateType[StateType["STATE_GAME"] = 4] = "STATE_GAME";
    })(StateType = exports.StateType || (exports.StateType = {}));
    var StateEvent;
    (function(StateEvent) {
      StateEvent[StateEvent["ASSETS_LOADED"] = 1] = "ASSETS_LOADED";
      StateEvent[StateEvent["LOGIN_COMPLETE"] = 2] = "LOGIN_COMPLETE";
      StateEvent[StateEvent["LOGIN_FAILED"] = 3] = "LOGIN_FAILED";
      StateEvent[StateEvent["LOBBY_LOADED"] = 4] = "LOBBY_LOADED";
      StateEvent[StateEvent["FRIEND_LIST_FETCHED"] = 5] = "FRIEND_LIST_FETCHED";
      StateEvent[StateEvent["LOAD_GAME_SCENE"] = 6] = "LOAD_GAME_SCENE";
      StateEvent[StateEvent["START_GAME"] = 7] = "START_GAME";
      StateEvent[StateEvent["CONNECTION_READY"] = 8] = "CONNECTION_READY";
      StateEvent[StateEvent["ROOM_JOIN"] = 9] = "ROOM_JOIN";
      StateEvent[StateEvent["GAME_SCENE_LOADED"] = 10] = "GAME_SCENE_LOADED";
      StateEvent[StateEvent["EXIT_TO_LOBBY"] = 11] = "EXIT_TO_LOBBY";
      StateEvent[StateEvent["RECEIPT_FETCH"] = 12] = "RECEIPT_FETCH";
      StateEvent[StateEvent["RECONNECT"] = 13] = "RECONNECT";
      StateEvent[StateEvent["CONNECTION_FAIL"] = 14] = "CONNECTION_FAIL";
      StateEvent[StateEvent["RECONNECT_FAILED"] = 15] = "RECONNECT_FAILED";
      StateEvent[StateEvent["RECONNECT_SUCCESS"] = 16] = "RECONNECT_SUCCESS";
      StateEvent[StateEvent["FORCE_KICK"] = 17] = "FORCE_KICK";
      StateEvent[StateEvent["CLOSED_INVITE_POPUP"] = 18] = "CLOSED_INVITE_POPUP";
      StateEvent[StateEvent["ROOM_UPDATE"] = 19] = "ROOM_UPDATE";
      StateEvent[StateEvent["START_GAME_FROM_RESULT"] = 20] = "START_GAME_FROM_RESULT";
      StateEvent[StateEvent["RETRY_RECONNECT"] = 21] = "RETRY_RECONNECT";
      StateEvent[StateEvent["REJOIN"] = 22] = "REJOIN";
      StateEvent[StateEvent["SHOW_STORE_POPUP"] = 23] = "SHOW_STORE_POPUP";
    })(StateEvent = exports.StateEvent || (exports.StateEvent = {}));
    var State = function() {
      function State(stateController) {
        this.mStateController = null;
        this.mExtraData = null;
        this.mStateController = stateController;
      }
      State.prototype.onComplete = function() {
        this.mStateController.completeState();
      };
      State.prototype.setExtraData = function(data) {
        this.mExtraData = data;
      };
      State.prototype.getExtraData = function() {
        return this.mExtraData;
      };
      return State;
    }();
    exports.State = State;
    var StateStart = function(_super) {
      __extends(StateStart, _super);
      function StateStart() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      StateStart.prototype.init = function() {
        Helper_1.Helper.sendSentryLog("State StateStart");
        this.mLogger = new Logger_1.Logger("StateStart", true);
        sendOpenStats(FBInstant.player.getID(), "StateStart");
        this.startGameAsync();
        this.startLoadingAssets();
        this.mStateController.pushState(StateType.STATE_LOAD_ASSETS_AND_LOGIN);
        this.mStateController.getStatsController().count("visit", 1, "loading_time_stat", "state_start", Date.now() + "");
        this.onComplete();
      };
      StateStart.prototype.startLoadingAssets = function() {
        var self = this;
        cc.loader.onProgress = function(completedCount, totalCount, item) {
          if (1 != totalCount) {
            var progress = 99 * completedCount / totalCount;
            if (!isNaN(progress)) {
              self.mStateController.setAssetProgress(progress);
              self.mStateController.getPersistanceNodeComponent().node.emit(Constants_1.constants.Events.EVENT_ON_PROGRESS, progress);
            }
          }
        };
        cc.director.preloadScene("Lobby", function(error) {
          self.mStateController.onEvent(StateEvent.ASSETS_LOADED);
          var curState = self.mStateController.getCurrentStateType();
          !error && curState && curState != self.getType() || self.mStateController.getStatsController().count("debug", 1, "loading_time_error", "state_start_asset_loaded", Date.now() + "");
        });
      };
      StateStart.prototype.startGameAsync = function() {
        var self = this;
        var startGameAsyncStartTime = Date.now();
        FBInstant.startGameAsync().then(function() {
          globalStartTime += Date.now() - startGameAsyncStartTime;
          self.startUserLoginFlow();
          sendOpenStats(FBInstant.player.getID(), "loading_scene");
          self.mStateController.getStatsController().count("visit", 1, "loading_scene");
        });
      };
      StateStart.prototype.startUserLoginFlow = function() {
        var self = this;
        self.mLogger.Log("Login started");
        var playerController = this.mStateController.getPlayerController();
        FBInstant.player.getSignedPlayerInfoAsync("my_payload").then(function(result) {
          var signature = result.getSignature();
          var id = result.getPlayerID();
          playerController.doUserGet(id, signature, function(status) {
            self.mLogger.Log("Login completed " + status);
            if (status) {
              self.mStateController.getAdsController().initRewardedVideoAds();
              self.mStateController.onEvent(StateEvent.LOGIN_COMPLETE);
            } else {
              self.mStateController.onEvent(StateEvent.LOGIN_FAILED);
              self.mStateController.getStatsController().count("debug", 1, "loading_time_error", "userLoad_fail", Date.now() + "");
            }
          });
        });
      };
      StateStart.prototype.cleanup = function() {};
      StateStart.prototype.getType = function() {
        return StateType.STATE_START;
      };
      StateStart.prototype.getName = function() {
        return "StateStart";
      };
      StateStart.prototype.onEvent = function(event, extraData) {};
      return StateStart;
    }(State);
    exports.StateStart = StateStart;
    var StateLoadAssetsAndLogin = function(_super) {
      __extends(StateLoadAssetsAndLogin, _super);
      function StateLoadAssetsAndLogin() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      StateLoadAssetsAndLogin.prototype.init = function() {
        Helper_1.Helper.sendSentryLog("State StateLoadAssetsAndLogin");
        this.mUserAssetLoaded = false;
        this.mUserLoginComplete = false;
        this.mLogger = new Logger_1.Logger("StateLoadAssets", true);
        this.mStatsInterval = setTimeout(this.dumpLoginErrorStats.bind(this), 1e4);
        this.loginInterval = setInterval(this.restartUserLoginFlow.bind(this), 3e4);
        this.mStateController.getStatsController().count("visit", 1, "loading_time_stat", "StateLoadAssetsAndLogin", Date.now() + "");
        sendOpenStats(FBInstant.player.getID(), "StateLoadAssetsAndLogin");
      };
      StateLoadAssetsAndLogin.prototype.cleanup = function() {};
      StateLoadAssetsAndLogin.prototype.onEvent = function(event, extraData) {
        switch (event) {
         case StateEvent.ASSETS_LOADED:
          this.mUserAssetLoaded = true;
          this.mStateController.getStatsController().count("visit", 1, "loading_time_stat", "state_load_assets_complete", Date.now() + "", this.mUserLoginComplete + "");
          sendOpenStats(FBInstant.player.getID(), "asset_complete");
          if (true == this.mUserLoginComplete) {
            this.mStateController.pushState(StateType.STATE_LOBBY);
            this.onComplete();
          }
          break;

         case StateEvent.LOGIN_COMPLETE:
          this.clearIntervals();
          this.mUserLoginComplete = true;
          this.mStateController.getStatsController().count("visit", 1, "loading_time_stat", "state_user_login_complete", Date.now() + "", this.mUserAssetLoaded + "");
          sendOpenStats(FBInstant.player.getID(), "user_load_complete");
          if (true == this.mUserAssetLoaded) {
            this.mStateController.pushState(StateType.STATE_LOBBY);
            this.onComplete();
          }
          var supportedAPIs = FBInstant.getSupportedAPIs();
          null != supportedAPIs && supportedAPIs.indexOf("payments.purchaseAsync") > -1 ? this.mStateController.getStatsController().count("debug", 1, "payment_api", "payments.purchaseAsync") : null != supportedAPIs && supportedAPIs.indexOf("purchaseAsync") > -1 ? this.mStateController.getStatsController().count("debug", 1, "payment_api", "purchaseAsync") : this.mStateController.getStatsController().count("debug", 1, "payment_api", "not available");
          null != supportedAPIs && supportedAPIs.indexOf("getRewardedVideoAsync") > -1 ? this.mStateController.getStatsController().count("debug", 1, "ads_api", "available") : this.mStateController.getStatsController().count("debug", 1, "ads_api", "not available");
          break;

         case StateEvent.LOGIN_FAILED:
          this.mStateController.getStatsController().count("visit", 1, "loading_time_stat", "state_user_login_failed", Date.now() + "");
        }
      };
      StateLoadAssetsAndLogin.prototype.dumpLoginErrorStats = function() {
        if (!this.mUserLoginComplete) {
          var connection = new Connection_1.Connection("https://igl-game-02.moonfroglabs.in");
          var params = {
            p: "1234,instant|debug,1,login_error," + FBInstant.player.getID()
          };
          connection.doPost("/stats/s", params, function() {}, null);
        }
      };
      StateLoadAssetsAndLogin.prototype.getType = function() {
        return StateType.STATE_LOAD_ASSETS_AND_LOGIN;
      };
      StateLoadAssetsAndLogin.prototype.getName = function() {
        return "StateLoadAssetsAndLogin";
      };
      StateLoadAssetsAndLogin.prototype.restartUserLoginFlow = function() {
        var self = this;
        var playerController = this.mStateController.getPlayerController();
        FBInstant.player.getSignedPlayerInfoAsync("my_payload").then(function(result) {
          var signature = result.getSignature();
          var id = result.getPlayerID();
          playerController.doUserGet(id, signature, function(status) {
            self.mLogger.Log("Login completed " + status);
            status ? self.mStateController.onEvent(StateEvent.LOGIN_COMPLETE) : self.mStateController.onEvent(StateEvent.LOGIN_FAILED);
          });
        });
      };
      StateLoadAssetsAndLogin.prototype.clearIntervals = function() {
        clearInterval(this.loginInterval);
        clearInterval(this.mStatsInterval);
        this.mStatsInterval = null;
        this.loginInterval = null;
      };
      return StateLoadAssetsAndLogin;
    }(State);
    exports.StateLoadAssetsAndLogin = StateLoadAssetsAndLogin;
    var StateLobby = function(_super) {
      __extends(StateLobby, _super);
      function StateLobby() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      StateLobby.prototype.init = function() {
        if (this.checkInsufficient()) return;
        sendOpenStats(FBInstant.player.getID(), "StateLobby");
        this.mStateController.getActionController().SetViewComponent(null);
        cc.director.loadScene("Lobby");
        this.mLogger = new Logger_1.Logger("StateLobby", true);
        this.mGameController = this.mStateController.getGameController();
        this.mStateController.getStatsController().count("visit", 1, "loading_time_stat", "state_lobby_init", Date.now() + "");
      };
      StateLobby.prototype.cleanup = function() {};
      StateLobby.prototype.onEvent = function(event, extraData) {
        switch (event) {
         case StateEvent.LOBBY_LOADED:
          this.mStateController.getStatsController().count("visit", 1, "loading_time_stat", "state_lobby_complete", Date.now() + "");
          this.mStateController.getStatsController().setFlushInterval(2e4);
          this.handleExtraData();
          break;

         case StateEvent.FRIEND_LIST_FETCHED:
          this.initializeLeaderBoard();
          break;

         case StateEvent.LOAD_GAME_SCENE:
          this.PreLoadGameScene();
          break;

         case StateEvent.START_GAME:
          this.mStateController.pushState(StateType.STATE_GAME, extraData);
          this.onComplete();
          break;

         case StateEvent.RECEIPT_FETCH:
          this.receiptFetch(extraData);
          break;

         case StateEvent.REJOIN:
          this.onRejoin();
        }
      };
      StateLobby.prototype.getType = function() {
        return StateType.STATE_LOBBY;
      };
      StateLobby.prototype.getName = function() {
        return "StateLobby";
      };
      StateLobby.prototype.onRejoin = function() {
        this.mStateController.getActionController().runAction(ActionShowJoiningBanner_1.ActionShowJoiningBanner.Create(true));
      };
      StateLobby.prototype.initializeLeaderBoard = function() {
        this.mLogger.Log("initializeLeaderBoard called");
        if (this.mStateController.getPlayerController().isFriendListInitialized()) {
          var leaderBoardController = this.mStateController.getLeaderBoardController();
          leaderBoardController.initialize();
        }
      };
      StateLobby.prototype.PreLoadGameScene = function() {
        cc.director.preloadScene("GameScene", function() {});
      };
      StateLobby.prototype.receiptFetch = function(extraData) {
        this.mStateController.getPlayerController().fetchPlayerReceipt();
      };
      StateLobby.prototype.checkInsufficient = function() {
        var extraLobbyData = this.getExtraData();
        if (extraLobbyData) var reason = extraLobbyData["reason"];
        if (reason && "insufficientChips" == reason) {
          this.mStateController.getActionController().runAction(ActionShowNotEnoughCurrenyPopup_1.ActionShowNotEnoughCurrenyPopup.Create());
          return true;
        }
        return false;
      };
      StateLobby.prototype.handleExtraData = function() {
        var extraData = this.getExtraData();
        extraData && "show_store" == extraData["reason"] && this.mStateController.getPersistanceNodeComponent().node.emit(Constants_1.constants.Events.EVENT_SHOW_STORE_POPUP);
        if (!extraData || extraData && "rewardedAdsExit" != extraData["reason"] && "show_store" != extraData["reason"] && "noInterstitialAd" != extraData["reason"]) {
          extraData && this.mLogger.Log("tanisha handleExtraData " + extraData["reason"]);
          this.mStateController.getPersistanceNodeComponent().node.emit(Constants_1.constants.Events.EVENT_SHOW_INTERSTITIAL_ADS, {
            reason: extraData ? extraData["reason"] : ""
          });
        }
      };
      return StateLobby;
    }(State);
    exports.StateLobby = StateLobby;
    var StateGame = function(_super) {
      __extends(StateGame, _super);
      function StateGame() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mIs4Player = false;
        _this.mIsHost = false;
        _this.mIsPrivate = false;
        _this.mJoinViaInvite = false;
        _this.mShowedInvitePopup = false;
        _this.mFirstCloseOfInvite = true;
        _this.misReconnecting = false;
        _this.mRejoin = false;
        _this.mBetAmount = 0;
        _this.mMode = 0;
        return _this;
      }
      StateGame.prototype.init = function() {
        Helper_1.Helper.sendSentryLog("State StateGame");
        this.mLogger = new Logger_1.Logger("StateStartOnlineGame", true);
        this.mGameController = this.mStateController.getGameController();
        this.mPlayerController = this.mStateController.getPlayerController();
        this.initGame();
      };
      StateGame.prototype.cleanup = function() {};
      StateGame.prototype.onEvent = function(event, extraData) {
        switch (event) {
         case StateEvent.CONNECTION_READY:
          this.sendRoomJoin();
          break;

         case StateEvent.CONNECTION_FAIL:
          this.retryReconnect();
          break;

         case StateEvent.ROOM_JOIN:
          this.processRoomJoin();
          break;

         case StateEvent.GAME_SCENE_LOADED:
          this.mGameController.initializeBoard();
          this.mGameController.startProcessingMessages();
          this.initializePrivateBoard();
          this.initializeInviteJoinBoard();
          break;

         case StateEvent.RECONNECT:
          this.misReconnecting = true;
          this.mGameController.clearQueues();
          this.mGameController.closeSocket();
          this.mGameController.retryReconnect();
          break;

         case StateEvent.EXIT_TO_LOBBY:
          this.leaveGame(extraData);
          break;

         case StateEvent.RECONNECT_FAILED:
          this.pushToLobby();
          break;

         case StateEvent.RECONNECT_SUCCESS:
          this.reloadGameScene();
          break;

         case StateEvent.FORCE_KICK:
          this.forceKick(extraData);
          break;

         case StateEvent.CLOSED_INVITE_POPUP:
          if (this.mFirstCloseOfInvite) {
            this.mGameController.sendResetPrivateTimer();
            this.mFirstCloseOfInvite = false;
          }
          break;

         case StateEvent.START_GAME_FROM_RESULT:
          this.initGame(extraData, true);
          break;

         case StateEvent.ROOM_UPDATE:
          this.OnRoomUpdate();
          break;

         case StateEvent.RETRY_RECONNECT:
          this.mGameController.resetReconnectTries();
          break;

         case StateEvent.REJOIN:
          this.rejoin();
          break;

         case StateEvent.SHOW_STORE_POPUP:
          this.leaveGame({
            reason: "show_store"
          });
        }
      };
      StateGame.prototype.resetAllGamesParameter = function() {
        this.misReconnecting = false;
        this.mIsPrivate = false;
        this.mJoinViaInvite = false;
        this.mRejoin = false;
      };
      StateGame.prototype.retryReconnect = function() {
        this.misReconnecting && this.mGameController.clearQueues();
        this.mGameController.retryReconnect();
      };
      StateGame.prototype.rejoin = function() {
        this.mLogger.Log("tanisha not forceKick rejoin " + JSON.stringify(this.getExtraData()));
        var pModel = this.mGameController.getPlayerModel();
        if (this.mRejoin) {
          this.mLogger.Log("tanisha rejoin true");
          pModel.setHostLeftForRejoin(true);
        } else {
          var socialVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_invitesend");
          2 != socialVar && 3 != socialVar || pModel.setHostLeftForceKick(true);
        }
        this.leaveGame({
          reason: "noInterstitialAd"
        });
      };
      StateGame.prototype.sendRoomJoin = function() {
        this.misReconnecting ? this.mGameController.sendReconnectPacket() : this.mIsPrivate ? this.mGameController.doPrivateRoomJoin() : this.mJoinViaInvite ? this.mGameController.doPrivateTableJoin(this.mRoomId) : this.mRejoin ? this.mGameController.doTableJoin(this.mRoomId, this.mMode, this.mBetAmount) : this.getExtraData() && true == this.getExtraData()["4Player"] ? this.mGameController.doRoomJoin(true) : this.mGameController.doRoomJoin(false);
      };
      StateGame.prototype.processRoomJoin = function() {
        this.mStateController.getActionController().SetViewComponent(null);
        this.mGameController.stopProcessingMessages();
        cc.director.loadScene("GameScene");
        var interstitialAdPreloadVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_INTERSTITIAL_PRELOAD);
        2 == interstitialAdPreloadVar && this.mStateController.getPersistanceNodeComponent().GetInterstitialAdController().startPreloadInterstitialVideo();
      };
      StateGame.prototype.getType = function() {
        return StateType.STATE_GAME;
      };
      StateGame.prototype.getName = function() {
        return "StateStartGame";
      };
      StateGame.prototype.leaveGame = function(extraData) {
        this.mGameController.sendLeaveGame();
        this.mGameController.clearQueues();
        this.pushToLobby(extraData);
      };
      StateGame.prototype.reloadGameScene = function() {
        this.mStateController.getActionController().SetViewComponent(null);
        this.mGameController.stopProcessingMessages();
        cc.director.loadScene("GameScene");
      };
      StateGame.prototype.pushToLobby = function(extraData) {
        this.mStateController.pushState(StateType.STATE_LOBBY, extraData);
        this.onComplete();
      };
      StateGame.prototype.reinitiateLobby = function(reason) {
        this.mStateController.pushState(StateType.STATE_LOBBY, {
          reason: reason
        });
        this.onComplete();
      };
      StateGame.prototype.forceKick = function(extraData) {
        this.mGameController.clearQueues();
        var reason = extraData;
        var socialVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_invitesend");
        var pModel = this.mGameController.getPlayerModel();
        this.mRejoin || "roomDestroyed" == reason ? pModel.setHostLeftForRejoin(true) : "host_left" == reason && (2 != socialVar && 3 != socialVar || pModel.setHostLeftForceKick(true));
        this.pushToLobby();
      };
      StateGame.prototype.initGame = function(extraData, switchTable) {
        this.resetAllGamesParameter();
        var extraDataGame = extraData || this.getExtraData();
        extraData && this.setExtraData(extraData);
        var rcpt = this.mPlayerController.getModel().getReceipt();
        if ("" === rcpt || extraDataGame && true == extraDataGame["forceFetch"] || this.mPlayerController.isGamesPlayedMismatch()) {
          this.receiptFetch();
          this.mPlayerController.getModel().resetOldGamesPlayed();
        }
        if (this.mPlayerController.isReceiptFetchInProgress()) this.mStateController.getPersistanceNodeComponent().node.on("receipt_fetched", this.onReceiptFetchComplete, this); else {
          extraDataGame && true == extraDataGame["forceFetch"] && (extraDataGame["forceFetch"] = false);
          this.mStateController.getPersistanceNodeComponent().node.off("receipt_fetched", this.onReceiptFetchComplete, this);
          if (switchTable && this.mGameController.isWSConnected()) this.getExtraData() && true == this.getExtraData()["4Player"] ? this.mGameController.doRoomJoin(true) : this.mGameController.doRoomJoin(false); else if (extraDataGame && true == extraDataGame["isPrivate"]) {
            this.mIsPrivate = true;
            this.initPrivateGame();
          } else if (extraDataGame && true == extraDataGame["joinViaInvite"]) {
            this.mJoinViaInvite = true;
            this.initJoinViaInvite();
          } else if (extraDataGame && true == extraDataGame["rejoin"]) {
            this.mRejoin = true;
            this.initRejoin();
          } else {
            if (this.checkIfNotEnoughChips(extraDataGame)) return;
            this.initOnlineGame();
          }
        }
      };
      StateGame.prototype.onReceiptFetchComplete = function() {
        var extraGameData = this.getExtraData();
        extraGameData && (extraGameData["forceFetch"] = false);
        this.initGame();
      };
      StateGame.prototype.initOnlineGame = function(extraData) {
        var extraDataOnline = extraData || this.getExtraData();
        extraDataOnline && true == extraDataOnline["4Player"] ? this.mIs4Player = true : this.mIs4Player = false;
        this.mGameController.connectToGameServer(false, false, this.mIs4Player);
      };
      StateGame.prototype.checkIfNotEnoughChips = function(extraDataGame) {
        var player = this.mPlayerController.getModel();
        var eco_variant = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant(Constants_1.constants.Experiments.LUDO_IG_ECONOMY);
        if (player && 2 == eco_variant) {
          var betAmount = this.mPlayerController.getBetAmountForBetSelect();
          if (player.getCoins() < betAmount) {
            if (extraDataGame && extraDataGame["resultScreen"]) {
              this.mStateController.getActionController().runAction(ActionShowNotEnoughCurrenyPopup_1.ActionShowNotEnoughCurrenyPopup.Create());
              return true;
            }
            this.reinitiateLobby("insufficientChips");
            return true;
          }
        }
        return false;
      };
      StateGame.prototype.initPrivateGame = function() {
        this.mGameController.connectToGameServer(false, true);
        this.mShowedInvitePopup = false;
        this.mFirstCloseOfInvite = true;
      };
      StateGame.prototype.initJoinViaInvite = function() {
        this.mRoomId = this.getExtraData()["roomId"];
        this.mBetAmount = this.getExtraData()["betAmount"];
        this.mMode = this.getExtraData()["gameType"];
        this.mInviteServerAddress = this.getExtraData()["inviteLiveServerAddress"];
        this.mGameController.connectToGameServer(false, true, false, this.mInviteServerAddress);
      };
      StateGame.prototype.initRejoin = function() {
        this.mRoomId = this.getExtraData()["roomId"];
        this.mBetAmount = this.getExtraData()["betAmount"];
        this.mMode = this.getExtraData()["gameType"];
        this.mInviteServerAddress = this.getExtraData()["inviteLiveServerAddress"];
        this.mGameController.connectToGameServer(false, false, 3 == this.mMode, this.mInviteServerAddress);
      };
      StateGame.prototype.initializePrivateBoard = function() {
        if (!this.mIsPrivate) return;
        if (this.mGameController.isPrivateRoomHost() && !this.mShowedInvitePopup) {
          this.mGameController.setInvitePopupOpen(true);
          this.mGameController.initFriendInviteStartTime();
          Helper_1.Helper.FbInvite(this.mGameController.OnInviteComplete.bind(this.mGameController), this.mGameController.OnInviteClosed.bind(this.mGameController), this.mGameController.OnInviteError.bind(this.mGameController));
          this.mShowedInvitePopup = true;
        } else this.mGameController.isPrivateRoomHost() && this.mGameController.checkAndSendGameStartPacket();
      };
      StateGame.prototype.initializeInviteJoinBoard = function() {
        if (!this.mJoinViaInvite) return;
        var socialVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_invitesend");
        2 != socialVar && 3 != socialVar || this.mGameController.getModel().getRoomState() < Game_1.RoomSate.STATE_COUNTDOWN && this.mGameController.showWaitingForHostPopup();
      };
      StateGame.prototype.OnRoomUpdate = function() {
        var game = this.mGameController.getModel();
        if (!game || !this.mGameController.isPrivateRoomHost()) return;
        var numberOfPlayers = game.getNumPlayers();
        if (game.getRoomState() < Game_1.RoomSate.STATE_COUNTDOWN) {
          this.mGameController.hideChatPopup();
          this.mGameController.showInviteWaitingPopup();
          numberOfPlayers > 1 ? this.mGameController.enablePrivateGameStart(true) : this.mGameController.enablePrivateGameStart(false);
        }
      };
      StateGame.prototype.receiptFetch = function(extraData) {
        this.mStateController.getPlayerController().fetchPlayerReceipt();
      };
      return StateGame;
    }(State);
    exports.StateGame = StateGame;
    cc._RF.pop();
  }, {
    "../Actions/ActionShowJoiningBanner": "ActionShowJoiningBanner",
    "../Actions/ActionShowNotEnoughCurrenyPopup": "ActionShowNotEnoughCurrenyPopup",
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Connection": "Connection",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "../models/Game": "Game"
  } ],
  StatsController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f4830TOrHRCZY7HgVIvIiBC", "StatsController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Config_1 = require("../Config");
    var Helper_1 = require("../Generic/Helper");
    var Logger_1 = require("../Generic/Logger");
    var StatsController = function() {
      function StatsController() {
        this.pid = "";
        this.installOS = "";
        this.m_statsCounterQueue = [];
        this.m_openQueue = [];
        this.STATS_FIELD_SEPARATOR = ",";
        this.flushInterval = 5e3;
        this.STATS_SERVER_ADDRESS = Config_1.Config.STATS_SERVER_ADDR + "/stats/t";
        this.initialized = false;
        this.m_flushTimer = null;
        this.m_concatPidWithStats = true;
        this.mLogger = new Logger_1.Logger("StatsController", true);
        Function.prototype.bind || (Function.prototype.bind = function(oThis) {
          if ("function" !== typeof this) throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
          var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function() {}, fBound = function() {
            return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
          };
          fNOP.prototype = this.prototype;
          fBound.prototype = new fNOP();
          return fBound;
        });
      }
      StatsController.prototype.init = function(pid, installOS, concatPidWithStats, flushInterval) {
        if (void 0 === pid) {
          this.mLogger.Log("StatsController::init failed pid undefined");
          return;
        }
        if (void 0 === installOS) {
          this.mLogger.Log("StatsController::init failed installOS undefined");
          return;
        }
        if (this.initialized) return;
        this.pid = pid;
        this.installOS = installOS;
        "boolean" == typeof concatPidWithStats && (this.m_concatPidWithStats = concatPidWithStats);
        flushInterval && "number" == typeof flushInterval && (this.flushInterval = flushInterval);
        this.flushCounter(false);
        this.initialized = true;
      };
      StatsController.prototype._appendToCounterStats = function(obj) {
        this.m_statsCounterQueue.push(obj);
      };
      StatsController.prototype._serializeStats = function(statsQueue) {
        if (!statsQueue || statsQueue.length <= 0) return "";
        var data = "";
        for (var i = 0; i < statsQueue.length; i++) data += "|" + statsQueue[i].serialize();
        return data;
      };
      StatsController.prototype.initialiseFlushTimer = function() {
        this._clearFlushTimer();
        this.m_flushTimer = setTimeout(this.flushCounter.bind(this), this.flushInterval);
      };
      StatsController.prototype._clearFlushTimer = function() {
        if (this.m_flushTimer) {
          clearTimeout(this.m_flushTimer);
          this.m_flushTimer = null;
        }
      };
      StatsController.prototype._freeStatsQueue = function(statsQueue) {
        for (var i = 0; i < statsQueue.length; i++) delete statsQueue[i];
      };
      StatsController.prototype.clearStatsQueue = function() {
        this._freeStatsQueue(this.m_statsCounterQueue);
        this.m_statsCounterQueue = [];
        this._freeStatsQueue(this.m_openQueue);
        this.m_openQueue = [];
      };
      StatsController.prototype._createCopy = function(obj) {
        var data = [];
        for (var i = 0; i < obj.length; i++) data.push(obj[i]);
        return data;
      };
      StatsController.prototype.restoreStats = function(statsCount) {
        for (var i = 0; i < statsCount.length; i++) this.m_statsCounterQueue.push(statsCount[i]);
      };
      StatsController.prototype.flushCounter = function(sync) {
        this._clearFlushTimer();
        var dataToSend = "";
        var sendStats = false;
        var countCopy = this._createCopy(this.m_statsCounterQueue);
        var data = this._serializeStats(this.m_statsCounterQueue);
        if ("" !== data) {
          this.m_concatPidWithStats && (data = this.pid + "," + this.installOS + data);
          dataToSend = "p=" + encodeURIComponent(data);
          sendStats = true;
        }
        if (!sendStats) {
          this.initialiseFlushTimer();
          return;
        }
        this.m_concatPidWithStats || (dataToSend += "&pid=" + this.pid + "&installOS=" + this.installOS);
        this.clearStatsQueue();
        var that = this;
        var xhttp = new XMLHttpRequest();
        if (true === sync) {
          xhttp.open("POST", this.STATS_SERVER_ADDRESS, false);
          xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
          xhttp.send(dataToSend);
        } else {
          xhttp.onreadystatechange = function() {
            if (4 === xhttp.readyState) {
              xhttp.status && 200 !== xhttp.status && that.restoreStats(countCopy);
              that.initialiseFlushTimer();
            }
          };
          xhttp.open("POST", this.STATS_SERVER_ADDRESS, true);
          xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
          xhttp.send(dataToSend);
        }
      };
      StatsController.prototype.open = function(snid, locale, event, duration, shortDuration, force, extraCounter) {
        var queryparams, url, variant, xhr;
        null == shortDuration && (shortDuration = -1);
        null == extraCounter && (extraCounter = "");
        if (!snid) return;
        url = this.STATS_SERVER_ADDRESS;
        var country = "";
        var loc = "";
        if (locale) {
          country = locale.split("_")[1];
          loc = locale.split("_")[0];
        }
        var resolution = screen.width + ":" + screen.height;
        queryparams = "o=" + snid + "|" + Helper_1.Helper.getModel() + ",instant," + Helper_1.Helper.getOsVersion() + "," + country + "," + loc + "," + Config_1.Config.CLIENT_VERSION + "," + Helper_1.Helper.getIpAddress() + "," + resolution + "," + event + "," + duration;
        queryparams += "&nv=2";
        "" !== extraCounter && (queryparams = queryparams + "&p=" + extraCounter);
        xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.timeout = 15e3;
        xhr.onreadystatechange = function() {};
        return xhr.send(queryparams);
      };
      StatsController.prototype.count = function(counter, count, kingdom, phylum, classs, family, genus) {
        void 0 === phylum && (phylum = "");
        void 0 === classs && (classs = "");
        void 0 === family && (family = "");
        void 0 === genus && (genus = "");
        if (counter) {
          count = count || 0;
          kingdom = kingdom || "";
          phylum = phylum || "";
          classs = classs || "";
          family = family || "";
          genus = genus || "";
          if (-1 != counter.indexOf("|") || -1 != kingdom.indexOf("|") || -1 != classs.indexOf("|") || -1 != family.indexOf("|") || -1 != genus.indexOf("|")) {
            this.mLogger.Log("| symbol is used as delimiter down the line, don't use it");
            return;
          }
          var m_statsCounter = new StatsCounter();
          m_statsCounter.counter = counter;
          m_statsCounter.count = count;
          m_statsCounter.kingdom = kingdom;
          m_statsCounter.phylum = phylum;
          m_statsCounter.classs = classs;
          m_statsCounter.family = family;
          m_statsCounter.genus = genus;
          m_statsCounter.timestamp = Math.floor(Date.now() / 1e3);
          this._appendToCounterStats(m_statsCounter);
        } else this.mLogger.Log("counter undefined");
      };
      StatsController.prototype.setFlushInterval = function(interval) {
        this.flushInterval = interval;
      };
      return StatsController;
    }();
    exports.StatsController = StatsController;
    var StatsCounter = function() {
      function StatsCounter() {
        this.counter = "";
        this.count = 0;
        this.kingdom = "";
        this.phylum = "";
        this.classs = "";
        this.family = "";
        this.genus = "";
        this.timestamp = 0;
        this.STATS_FIELD_SEPARATOR = ",";
      }
      StatsCounter.prototype.serialize = function() {
        return this.counter + this.STATS_FIELD_SEPARATOR + this.count + this.STATS_FIELD_SEPARATOR + this.kingdom + this.STATS_FIELD_SEPARATOR + this.phylum + this.STATS_FIELD_SEPARATOR + this.classs + this.STATS_FIELD_SEPARATOR + this.family + this.STATS_FIELD_SEPARATOR + this.genus + this.STATS_FIELD_SEPARATOR + this.timestamp;
      };
      return StatsCounter;
    }();
    exports.StatsCounter = StatsCounter;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger"
  } ],
  StoreCardComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee4defCa2pCrLYvoLZVZL5D", "StoreCardComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var SpinnerComponent_1 = require("./SpinnerComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StoreCardComponent = function(_super) {
      __extends(StoreCardComponent, _super);
      function StoreCardComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.cutOffNode = null;
        _this.cutOffCoinLabel = null;
        _this.coinLabel = null;
        _this.purchaseAmountLabel = null;
        _this.sellTagBg = null;
        _this.sellExtraAmount = null;
        _this.storeCoinNode = null;
        _this.storeCashNode = null;
        _this.purchaseButton = null;
        _this.storeCardButton = null;
        _this.spinnerComponent = null;
        _this.bestValueNode = null;
        _this.mostPopularNode = null;
        _this.bestValueBgNode = null;
        return _this;
      }
      StoreCardComponent.prototype.onLoad = function() {};
      StoreCardComponent.prototype.start = function() {};
      StoreCardComponent.prototype.initialize = function(packVal, priceFromFB) {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStatsController = persistantController.GetStatsController();
        this.mPkgId = packVal.pkg_id;
        packVal.Discounted_amount ? this.cutOffCoinLabel.string = String(packVal.Discounted_amount) : this.cutOffNode.active = false;
        this.coinLabel.string = Helper_1.Helper.getLocaleNumber(packVal.Coins ? packVal.Coins : packVal.Gems);
        this.purchaseAmountLabel.string = priceFromFB || "$" + packVal.price[0];
        this.bestValueBgNode.active = packVal.Best_value || packVal.Most_Popular;
        this.bestValueNode.active = packVal.Best_value;
        this.mostPopularNode.active = packVal.Most_Popular;
        packVal.extra_perc ? this.sellExtraAmount.string = String(packVal.extra_perc) + "%" : this.sellTagBg.active = false;
        var coinStackChild = "coinStack" + packVal.Image_type;
        if (packVal.Coins && this.storeCoinNode) {
          var storeCoinStackNode = this.storeCoinNode.getChildByName(coinStackChild);
          storeCoinStackNode && (storeCoinStackNode.active = true);
        } else if (packVal.Gems && this.storeCashNode) {
          var gemStackChild = "gemStack" + packVal.Image_type;
          var storeGemStackNode = this.storeCashNode.getChildByName(gemStackChild);
          storeGemStackNode && (storeGemStackNode.active = true);
        }
        this.purchaseButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "StoreCardComponent", "purchaseButtonPressed", packVal));
        this.storeCardButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "StoreCardComponent", "purchaseButtonPressed", packVal));
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPaymentController = this.mPersistantComponent.GetPaymentController();
        this.addEventListeners();
      };
      StoreCardComponent.prototype.addEventListeners = function() {
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ON_SPINNER_STOP, this.storeCardSpinnerStop, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_DISABLE_STORE_CLICK, this.storeCardButtonDisable, this);
        this.mPersistantComponent.node.on(Constants_1.constants.Events.EVENT_ENABLE_STORE_CLICK, this.storeCardButtonEnable, this);
      };
      StoreCardComponent.prototype.storeCardSpinnerStop = function() {
        this.spinnerComponent.hideLoader();
      };
      StoreCardComponent.prototype.storeCardButtonDisable = function() {
        this.storeCardButton.interactable = false;
        this.purchaseButton.interactable = false;
      };
      StoreCardComponent.prototype.storeCardButtonEnable = function() {
        this.storeCardButton.interactable = true;
        this.purchaseButton.interactable = true;
      };
      StoreCardComponent.prototype.purchaseButtonPressed = function(event, packValue) {
        this.mStatsController.count("button", 1, "store", "buy_button", packValue.pkg_id);
        if (this.mPaymentController.isPaymentSupported()) if (packValue) {
          this.spinnerComponent.showLoader();
          this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_DISABLE_STORE_CLICK);
          this.mPaymentController.startPurchase(packValue);
        } else this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_ON_PURCHASE_FAIL); else this.mPersistantComponent.node.emit(Constants_1.constants.Events.EVENT_STORE_NOT_SUPPORTED_POPUP);
      };
      StoreCardComponent.prototype.onDestroy = function() {
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_ON_SPINNER_STOP, this.storeCardSpinnerStop, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_DISABLE_STORE_CLICK, this.storeCardButtonDisable, this);
        this.mPersistantComponent.node.off(Constants_1.constants.Events.EVENT_ENABLE_STORE_CLICK, this.storeCardButtonEnable, this);
      };
      __decorate([ property(cc.Node) ], StoreCardComponent.prototype, "cutOffNode", void 0);
      __decorate([ property(cc.Label) ], StoreCardComponent.prototype, "cutOffCoinLabel", void 0);
      __decorate([ property(cc.Label) ], StoreCardComponent.prototype, "coinLabel", void 0);
      __decorate([ property(cc.Label) ], StoreCardComponent.prototype, "purchaseAmountLabel", void 0);
      __decorate([ property(cc.Node) ], StoreCardComponent.prototype, "sellTagBg", void 0);
      __decorate([ property(cc.Label) ], StoreCardComponent.prototype, "sellExtraAmount", void 0);
      __decorate([ property(cc.Node) ], StoreCardComponent.prototype, "storeCoinNode", void 0);
      __decorate([ property(cc.Node) ], StoreCardComponent.prototype, "storeCashNode", void 0);
      __decorate([ property(cc.Button) ], StoreCardComponent.prototype, "purchaseButton", void 0);
      __decorate([ property(cc.Button) ], StoreCardComponent.prototype, "storeCardButton", void 0);
      __decorate([ property(SpinnerComponent_1.default) ], StoreCardComponent.prototype, "spinnerComponent", void 0);
      __decorate([ property(cc.Node) ], StoreCardComponent.prototype, "bestValueNode", void 0);
      __decorate([ property(cc.Node) ], StoreCardComponent.prototype, "mostPopularNode", void 0);
      __decorate([ property(cc.Node) ], StoreCardComponent.prototype, "bestValueBgNode", void 0);
      StoreCardComponent = __decorate([ ccclass ], StoreCardComponent);
      return StoreCardComponent;
    }(cc.Component);
    exports.default = StoreCardComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./SpinnerComponent": "SpinnerComponent"
  } ],
  StorePopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "84131nrDEBPlbYYIAhk8Mn3", "StorePopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var Helper_1 = require("../Generic/Helper");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StorePopupComponent = function(_super) {
      __extends(StorePopupComponent, _super);
      function StorePopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.storeCardPrefab = null;
        _this.scoreBoardLayout = null;
        _this.scrollViewContentNode = null;
        _this.scrollViewMask = null;
        _this.scrollViewNode = null;
        _this.chipsButton = null;
        _this.gemsButton = null;
        _this.coinsNode = null;
        _this.gemsNode = null;
        return _this;
      }
      StorePopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantComponent = persistantController;
        this.initLogger();
        this.mStoreConfig = Constants_1.constants.STORE_CONFIG;
        this.chipsButton && this.chipsButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "StorePopupComponent", "onTabClicked", false));
        this.gemsButton && this.gemsButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "StorePopupComponent", "onTabClicked", true));
      };
      StorePopupComponent.prototype.start = function() {};
      StorePopupComponent.prototype.activateCoinsNode = function(activate) {
        this.coinsNode && (this.coinsNode.active = activate);
        this.gemsNode && (this.gemsNode.active = !activate);
      };
      StorePopupComponent.prototype.onTabClicked = function(event, customEventData) {
        true === customEventData ? this.initialize(true) : this.initialize(false);
      };
      StorePopupComponent.prototype.initialize = function(showGems) {
        if (!this.node) return;
        this.mLogger.Log("tanisha store popup initialize");
        this.scoreBoardLayout.node.removeAllChildren();
        var configurationController = this.mPersistantComponent.GetConfigurationController();
        var paymentController = this.mPersistantComponent.GetPaymentController();
        if (showGems) {
          this.mPacks = configurationController.getGemsPacks("view_1");
          this.activateCoinsNode(false);
        } else {
          this.mPacks = configurationController.getCoinsPacks("view_1");
          this.activateCoinsNode(true);
        }
        var catalogFromFB = paymentController.getCatalogSheet();
        var packVal;
        var cardHeight = 0;
        var showAllCards = false;
        this.mLogger.Log("shreyas catalogFromFB " + JSON.stringify(catalogFromFB));
        paymentController.isPaymentReady() && catalogFromFB && 0 != Object.keys(catalogFromFB).length || (showAllCards = true);
        var cardCountsAdded = 0;
        this.mLogger.Log("payment ready " + showAllCards);
        for (var i = 0; i < Object.keys(this.mPacks).length; i++) {
          for (var idx = 0; idx < Object.keys(this.mStoreConfig.packs).length; idx++) if (this.mStoreConfig.packs[idx].pkg_id == this.mPacks[i]) {
            packVal = this.mStoreConfig.packs[idx];
            break;
          }
          if (showAllCards || paymentController.isPaymentReady() && catalogFromFB && catalogFromFB[this.mPacks[i]]) {
            cardCountsAdded++;
            var storeCard = cc.instantiate(this.storeCardPrefab);
            cardHeight = storeCard.height;
            storeCard.getComponent("StoreCardComponent").initialize(packVal, catalogFromFB[this.mPacks[i]]);
            this.scoreBoardLayout.node.addChild(storeCard);
          }
        }
        this.scrollViewContentNode.setContentSize(new cc.Size(this.scrollViewContentNode.getContentSize().width, cardHeight * cardCountsAdded));
        this.scrollViewNode.getComponent(cc.ScrollView).scrollToTop();
      };
      StorePopupComponent.prototype.initLogger = function() {
        this.mLogger || (this.mLogger = new Logger_1.Logger("StorePopupComponent", true));
      };
      StorePopupComponent.prototype.onDisable = function() {
        this.mPersistantComponent && this.gemsNode && this.mPersistantComponent.GetStatsController().count("popup", 1, "close", "store", "", this.gemsNode && this.gemsNode.active ? "premium" : "coins");
      };
      StorePopupComponent.prototype.update = function(dt) {};
      StorePopupComponent.prototype.onDestroy = function() {};
      __decorate([ property(cc.Prefab) ], StorePopupComponent.prototype, "storeCardPrefab", void 0);
      __decorate([ property(cc.Layout) ], StorePopupComponent.prototype, "scoreBoardLayout", void 0);
      __decorate([ property(cc.Node) ], StorePopupComponent.prototype, "scrollViewContentNode", void 0);
      __decorate([ property(cc.Node) ], StorePopupComponent.prototype, "scrollViewMask", void 0);
      __decorate([ property(cc.Node) ], StorePopupComponent.prototype, "scrollViewNode", void 0);
      __decorate([ property(cc.Button) ], StorePopupComponent.prototype, "chipsButton", void 0);
      __decorate([ property(cc.Button) ], StorePopupComponent.prototype, "gemsButton", void 0);
      __decorate([ property(cc.Node) ], StorePopupComponent.prototype, "coinsNode", void 0);
      __decorate([ property(cc.Node) ], StorePopupComponent.prototype, "gemsNode", void 0);
      StorePopupComponent = __decorate([ ccclass ], StorePopupComponent);
      return StorePopupComponent;
    }(cc.Component);
    exports.default = StorePopupComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  SurveyController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "652dcmB+HZLXbUuDcGJAu/f", "SurveyController");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LocalizationController_1 = require("./LocalizationController");
    var Connection_1 = require("../Generic/Connection");
    var Config_1 = require("../Config");
    var Logger_1 = require("../Generic/Logger");
    var Constants_1 = require("../Constants");
    var SCENE_TYPE;
    (function(SCENE_TYPE) {
      SCENE_TYPE[SCENE_TYPE["LOBBY"] = 1] = "LOBBY";
      SCENE_TYPE[SCENE_TYPE["GAME"] = 2] = "GAME";
    })(SCENE_TYPE = exports.SCENE_TYPE || (exports.SCENE_TYPE = {}));
    var SurveyController = function() {
      function SurveyController(persistantNodeComponent) {
        this._surveyDataArray = {};
        this.mLogger = null;
        this.mPersistantNodeComponent = null;
        this.mActionController = null;
        this.mPersistantNodeComponent = persistantNodeComponent;
        this.mActionController = persistantNodeComponent.GetActionController();
        this.mLogger = new Logger_1.Logger("SurveyPopupComponent", true);
      }
      SurveyController.prototype.setPopupData = function(popupData, sceneType) {
        this._surveyDataArray[sceneType] || (this._surveyDataArray[sceneType] = []);
        this._surveyDataArray[sceneType].push(popupData);
        this.mPersistantNodeComponent.node.emit(Constants_1.constants.Events.EVENT_SHOW_SURVEY_DATA);
      };
      SurveyController.prototype.getPopupData = function(sceneType) {
        if (!this._surveyDataArray[sceneType] || 0 == this._surveyDataArray[sceneType].length) return null;
        return this._surveyDataArray[sceneType].shift();
      };
      SurveyController.prototype.showFeedBack = function(sceneType) {
        var heading = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#FEEDBACK_TEXT", null);
        var question = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#FEEDBACK_REQUEST_TEXT", null);
        var submitText = LocalizationController_1.LocalizationController.getInstance().LocalizedString("#SUBMIT_TEXT", null);
        var popupData = {
          enable: true,
          id: 100,
          cancel: true,
          native: false,
          heading: heading,
          question: question,
          n: 1,
          type: 2,
          opt1: submitText,
          opt2: "No"
        };
        this.setPopupData(popupData, sceneType);
      };
      SurveyController.prototype.postFeedbackData = function(data) {
        var self = this;
        var connection = new Connection_1.Connection(Config_1.Config.FEEDBACK_SERVER_ADDR);
        connection.doPost("/feedbackcb", data, function(d) {
          self.mLogger.Log("eagle: feedback submission success!");
        }, function() {
          self.mLogger.Log("eagle: feedback submission error!");
        });
      };
      return SurveyController;
    }();
    exports.SurveyController = SurveyController;
    cc._RF.pop();
  }, {
    "../Config": "Config",
    "../Constants": "Constants",
    "../Generic/Connection": "Connection",
    "../Generic/Logger": "Logger",
    "./LocalizationController": "LocalizationController"
  } ],
  SurveyPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "09865rGh6xMTYHjRcxqbbkW", "SurveyPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PopupComponent_1 = require("./PopupComponent");
    var SurveyPopupLayerComponent_1 = require("./SurveyPopupLayerComponent");
    var Logger_1 = require("../Generic/Logger");
    var Helper_1 = require("../Generic/Helper");
    var SURVEY_TYPE;
    (function(SURVEY_TYPE) {
      SURVEY_TYPE[SURVEY_TYPE["QUESTION_SIMPLE"] = 1] = "QUESTION_SIMPLE";
      SURVEY_TYPE[SURVEY_TYPE["QUESTION_FEEDBACK"] = 2] = "QUESTION_FEEDBACK";
      SURVEY_TYPE[SURVEY_TYPE["QUESTION_RATING"] = 3] = "QUESTION_RATING";
      SURVEY_TYPE[SURVEY_TYPE["QUESTION_RATING_FEEDBACK"] = 4] = "QUESTION_RATING_FEEDBACK";
      SURVEY_TYPE[SURVEY_TYPE["QUESTION_FEEDBACK_LARGE"] = 5] = "QUESTION_FEEDBACK_LARGE";
    })(SURVEY_TYPE = exports.SURVEY_TYPE || (exports.SURVEY_TYPE = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SurveyPopupComponent = function(_super) {
      __extends(SurveyPopupComponent, _super);
      function SurveyPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.layerSimple1 = null;
        _this.layerSimple2 = null;
        _this.layerBox1 = null;
        _this.layerBox2 = null;
        _this.layerBox3 = null;
        _this.crossButton = null;
        _this.mPersistantController = null;
        _this.currentSurveyData = null;
        _this.mLogger = null;
        return _this;
      }
      SurveyPopupComponent.prototype.start = function() {};
      SurveyPopupComponent.prototype.initializeSurvey = function(surveyData, persistantNode) {
        this.mPersistantController = persistantNode;
        this.mLogger = new Logger_1.Logger("SurveyPopupComponent", true);
        this.initializeSelf(surveyData);
        this.resetAllPopups();
        var popupLayer = this.getPopupLayer(surveyData.type);
        if (popupLayer && popupLayer.getComponent(SurveyPopupLayerComponent_1.default)) {
          popupLayer.active = true;
          popupLayer.getComponent(SurveyPopupLayerComponent_1.default).initializeLayer(this, surveyData);
        }
      };
      SurveyPopupComponent.prototype.initializeSelf = function(surveyData) {
        surveyData && null != surveyData.cancel && this.crossButton && (this.crossButton.node.active = surveyData.cancel);
        this.currentSurveyData = surveyData;
        var statsController = this.mPersistantController.GetStatsController();
        statsController.count("popup", 1, "open", "user_survey", this.currentSurveyData.native ? "native" : "generic", surveyData.id + "");
      };
      SurveyPopupComponent.prototype.resetAllPopups = function() {
        this.layerSimple1.active = false;
        this.layerBox1.active = false;
        this.layerSimple2.active = false;
        this.layerBox2.active = false;
        this.layerBox3 && (this.layerBox3.active = false);
      };
      SurveyPopupComponent.prototype.getPopupLayer = function(type) {
        switch (type) {
         case SURVEY_TYPE.QUESTION_SIMPLE:
          return this.layerSimple1;

         case SURVEY_TYPE.QUESTION_FEEDBACK:
          return this.layerBox1;

         case SURVEY_TYPE.QUESTION_RATING:
          return this.layerSimple2;

         case SURVEY_TYPE.QUESTION_RATING_FEEDBACK:
          return this.layerBox2;

         case SURVEY_TYPE.QUESTION_FEEDBACK_LARGE:
          return this.layerBox3;
        }
      };
      SurveyPopupComponent.prototype.onCancelPressed = function(data) {
        var popupComponent = this.node.getComponent(PopupComponent_1.default);
        popupComponent && popupComponent.hidePopup();
        if (0 !== Object.getOwnPropertyNames(data).length) {
          data.pressed = "cancel";
          this.submitFeedback(data);
        }
      };
      SurveyPopupComponent.prototype.onOkayPressed = function(data) {
        var popupComponent = this.node.getComponent(PopupComponent_1.default);
        popupComponent && popupComponent.hidePopup();
        if (0 !== Object.getOwnPropertyNames(data).length) {
          data.pressed = "ok";
          this.submitFeedback(data);
        }
      };
      SurveyPopupComponent.prototype.submitFeedback = function(data) {
        this.currentSurveyData ? data.survey_id = this.currentSurveyData.id : data.survey_id = -1;
        data.fb_id = this.mPersistantController.GetPlayerController().getFbId();
        data.pid = this.mPersistantController.GetPlayerController().getPlayerId();
        data.ref_id = this.mPersistantController.GetPlayerController().getModel().getPlayerReferralCode();
        var country = this.mPersistantController.GetPlayerController().getModel().getCountryCode();
        data.country = Helper_1.Helper.getCountryCodeForFeedback(country);
        data.os = Helper_1.Helper.getOs();
        this.mLogger.Log("eagle submitting feedback");
        this.mPersistantController.GetSurveyController().postFeedbackData(data);
      };
      __decorate([ property(cc.Node) ], SurveyPopupComponent.prototype, "layerSimple1", void 0);
      __decorate([ property(cc.Node) ], SurveyPopupComponent.prototype, "layerSimple2", void 0);
      __decorate([ property(cc.Node) ], SurveyPopupComponent.prototype, "layerBox1", void 0);
      __decorate([ property(cc.Node) ], SurveyPopupComponent.prototype, "layerBox2", void 0);
      __decorate([ property(cc.Node) ], SurveyPopupComponent.prototype, "layerBox3", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupComponent.prototype, "crossButton", void 0);
      SurveyPopupComponent = __decorate([ ccclass ], SurveyPopupComponent);
      return SurveyPopupComponent;
    }(cc.Component);
    exports.default = SurveyPopupComponent;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper",
    "../Generic/Logger": "Logger",
    "./PopupComponent": "PopupComponent",
    "./SurveyPopupLayerComponent": "SurveyPopupLayerComponent"
  } ],
  SurveyPopupLayerComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f1aeiu9LtDOrxmZuxOZ/Li", "SurveyPopupLayerComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var Helper_1 = require("../Generic/Helper");
    var Constants_1 = require("../Constants");
    var EDITABLE;
    (function(EDITABLE) {
      EDITABLE[EDITABLE["NONE"] = 0] = "NONE";
      EDITABLE[EDITABLE["FEEDBACK"] = 1] = "FEEDBACK";
      EDITABLE[EDITABLE["STAR"] = 2] = "STAR";
    })(EDITABLE = exports.EDITABLE || (exports.EDITABLE = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SurveyPopupLayerComponent = function(_super) {
      __extends(SurveyPopupLayerComponent, _super);
      function SurveyPopupLayerComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.parentRepositioningNode = null;
        _this.okButton = null;
        _this.cancelButton = null;
        _this.headingLabel = null;
        _this.okLabel = null;
        _this.cancelLabel = null;
        _this.messageLabel = null;
        _this.feedbackBox = null;
        _this.closeButton = null;
        _this.starEnabled1 = null;
        _this.starEnabled2 = null;
        _this.starEnabled3 = null;
        _this.starEnabled4 = null;
        _this.starEnabled5 = null;
        _this.starDisabled1 = null;
        _this.starDisabled2 = null;
        _this.starDisabled3 = null;
        _this.starDisabled4 = null;
        _this.starDisabled5 = null;
        _this.starButton1 = null;
        _this.starButton2 = null;
        _this.starButton3 = null;
        _this.starButton4 = null;
        _this.starButton5 = null;
        _this.submitEnabledLabel = null;
        _this.submitDisabledLabel = null;
        _this.mPersistantController = null;
        _this.mConfigurationController = null;
        _this.mActionController = null;
        _this.mSurveyPopupComponent = null;
        _this.mSurveyData = null;
        _this.disabledStars = [];
        _this.enabledStars = [];
        _this.selectedStar = 0;
        _this.MAX_STARS = 5;
        _this.editableElement = EDITABLE.NONE;
        _this.feedbackCheckTimer = 0;
        return _this;
      }
      SurveyPopupLayerComponent.prototype.initializeLayer = function(surveyPopupComponent, surveyData) {
        this.mSurveyPopupComponent = surveyPopupComponent;
        this.mSurveyData = surveyData;
        if (!surveyData || !surveyData.heading || !surveyData.question || !surveyData.opt1 || !surveyData.opt2) return;
        this.headingLabel && (this.headingLabel.string = surveyData.heading);
        this.messageLabel && (this.messageLabel.string = surveyData.question);
        if (this.submitEnabledLabel && this.submitDisabledLabel) {
          this.submitEnabledLabel.getComponent(cc.Label).string = surveyData.opt1;
          this.submitDisabledLabel.getComponent(cc.Label).string = surveyData.opt1;
        } else this.okLabel && (this.okLabel.string = surveyData.opt1);
        this.cancelLabel && (this.cancelLabel.string = surveyData.opt2);
        this.disableAllStar();
        this.selectedStar = 0;
        this.setSubmitButtonStatus(false, EDITABLE.NONE);
        if (this.feedbackBox) {
          this.feedbackBox.string = "";
          this.feedbackBox.placeholder = "Type Here...";
          this.feedbackBox.maxLength = 300;
        }
      };
      SurveyPopupLayerComponent.prototype.start = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mConfigurationController = this.mPersistantController.GetConfigurationController();
        this.mActionController = this.mPersistantController.GetActionController();
        this.initializeStars();
        this.cancelButton && this.cancelButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SurveyPopupLayerComponent", "onCancelPressed"));
        this.okButton && this.okButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SurveyPopupLayerComponent", "onOkayPressed"));
        if (this.feedbackBox) {
          this.feedbackBox.string = "";
          this.feedbackBox.setParentNodeForRepositioning(this.parentRepositioningNode);
          this.feedbackBox.editBoxTextChanged = function(editbox, text) {};
          this.editableElement = EDITABLE.FEEDBACK;
        }
        this.closeButton && this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SurveyPopupLayerComponent", "onClosePressed"));
        if (this.starButton5) {
          this.editableElement = EDITABLE.STAR;
          this.starButton5.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SurveyPopupLayerComponent", "onStarPressed", 5));
        }
        this.starButton4 && this.starButton4.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SurveyPopupLayerComponent", "onStarPressed", 4));
        this.starButton3 && this.starButton3.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SurveyPopupLayerComponent", "onStarPressed", 3));
        this.starButton2 && this.starButton2.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SurveyPopupLayerComponent", "onStarPressed", 2));
        this.starButton1 && this.starButton1.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "SurveyPopupLayerComponent", "onStarPressed", 1));
        this.disableAllStar();
        this.selectedStar = 0;
        this.setSubmitButtonStatus(false, EDITABLE.NONE);
        if (this.feedbackBox) {
          this.feedbackBox.string = "";
          this.feedbackBox.placeholder = "Type Here...";
          this.mSurveyData && this.mSurveyData.placeholder && (this.feedbackBox.placeholder = this.mSurveyData.placeholder);
        }
        this.mPersistantController.node.on(Constants_1.constants.Events.EVENT_POPUP_SHOWN, this.onAnotherPopupOpened, this);
      };
      SurveyPopupLayerComponent.prototype.onDestroy = function() {
        this.mPersistantController.node.off(Constants_1.constants.Events.EVENT_POPUP_SHOWN, this.onAnotherPopupOpened, this);
      };
      SurveyPopupLayerComponent.prototype.onAnotherPopupOpened = function() {
        this.feedbackBox && this.feedbackBox.onEventBlur();
      };
      SurveyPopupLayerComponent.prototype.initializeStars = function() {
        if (!this.starDisabled1) return;
        this.disabledStars[0] = this.starDisabled1;
        this.disabledStars[1] = this.starDisabled2;
        this.disabledStars[2] = this.starDisabled3;
        this.disabledStars[3] = this.starDisabled4;
        this.disabledStars[4] = this.starDisabled5;
        this.enabledStars[0] = this.starEnabled1;
        this.enabledStars[1] = this.starEnabled2;
        this.enabledStars[2] = this.starEnabled3;
        this.enabledStars[3] = this.starEnabled4;
        this.enabledStars[4] = this.starEnabled5;
      };
      SurveyPopupLayerComponent.prototype.onStarPressed = function(event, customEventData) {
        this.disableAllStar();
        this.selectedStar = customEventData;
        this.setSubmitButtonStatus(true, EDITABLE.STAR);
        for (var i = 0; i < customEventData && i < this.MAX_STARS; i++) {
          this.enabledStars[i].node.active = true;
          this.disabledStars[i].node.active = false;
        }
      };
      SurveyPopupLayerComponent.prototype.disableAllStar = function() {
        for (var i = 0; i < this.MAX_STARS; i++) {
          this.disabledStars[i] && (this.disabledStars[i].node.active = true);
          this.enabledStars[i] && (this.enabledStars[i].node.active = false);
        }
      };
      SurveyPopupLayerComponent.prototype.sendCloseStats = function(type) {
        var statsController = this.mPersistantController.GetStatsController();
        statsController.count("popup", 1, type, "user_survey", this.mSurveyData.native ? "native" : "generic");
      };
      SurveyPopupLayerComponent.prototype.sendButtonStats = function(button) {
        var rating = 0;
        this.editableElement == EDITABLE.STAR && this.selectedStar && (rating = this.selectedStar);
        var statsController = this.mPersistantController.GetStatsController();
        statsController.count("button", 1, "user_survey", this.mSurveyData.native ? "native" : "generic", this.mSurveyData.id.toString(), button, 0 != rating ? rating.toString() : "");
      };
      SurveyPopupLayerComponent.prototype.onOkayPressed = function() {
        this.sendCloseStats("close");
        this.sendButtonStats("opt1");
        var submitData = {};
        if (this.feedbackBox) {
          var text = this.feedbackBox.string;
          text && text.replace(/\s/g, "").length && (submitData.feedback = text);
        }
        this.editableElement == EDITABLE.STAR && this.selectedStar && (submitData.rating = this.selectedStar);
        this.mSurveyPopupComponent.onOkayPressed(submitData);
      };
      SurveyPopupLayerComponent.prototype.onClosePressed = function() {
        this.sendCloseStats("cancel");
        this.sendButtonStats("");
        this.closePopup();
      };
      SurveyPopupLayerComponent.prototype.onCancelPressed = function() {
        this.sendCloseStats("close");
        this.sendButtonStats("opt2");
        this.closePopup();
      };
      SurveyPopupLayerComponent.prototype.closePopup = function() {
        var submitData = {};
        if (this.feedbackBox) {
          var text = this.feedbackBox.string;
          text && text.replace(/\s/g, "").length && (submitData.feedback = text);
        }
        this.editableElement == EDITABLE.STAR && 0 != this.selectedStar && (submitData.rating = this.selectedStar);
        this.mSurveyPopupComponent.onCancelPressed(submitData);
      };
      SurveyPopupLayerComponent.prototype.setSubmitButtonStatus = function(status, editableElementLocal) {
        switch (editableElementLocal) {
         case EDITABLE.NONE:
          if (this.editableElement != EDITABLE.NONE) {
            this.okButton.interactable = status;
            this.setSubmitLabel(status);
          }
          break;

         default:
          if (this.editableElement == editableElementLocal) {
            this.okButton.interactable = status;
            this.setSubmitLabel(status);
          }
        }
      };
      SurveyPopupLayerComponent.prototype.setSubmitLabel = function(enabled) {
        if (this.submitEnabledLabel && this.submitDisabledLabel) {
          this.submitEnabledLabel.active = enabled;
          this.submitDisabledLabel.active = !enabled;
        }
      };
      SurveyPopupLayerComponent.prototype.update = function(dt) {
        this.feedbackCheckTimer += dt;
        if (this.feedbackBox && this.feedbackCheckTimer > .2) {
          this.feedbackCheckTimer = 0;
          var text = this.feedbackBox.string;
          text && text.replace(/\s/g, "").length ? this.setSubmitButtonStatus(true, EDITABLE.FEEDBACK) : this.setSubmitButtonStatus(false, EDITABLE.FEEDBACK);
        }
      };
      __decorate([ property(cc.Node) ], SurveyPopupLayerComponent.prototype, "parentRepositioningNode", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupLayerComponent.prototype, "okButton", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupLayerComponent.prototype, "cancelButton", void 0);
      __decorate([ property(cc.Label) ], SurveyPopupLayerComponent.prototype, "headingLabel", void 0);
      __decorate([ property(cc.Label) ], SurveyPopupLayerComponent.prototype, "okLabel", void 0);
      __decorate([ property(cc.Label) ], SurveyPopupLayerComponent.prototype, "cancelLabel", void 0);
      __decorate([ property(cc.Label) ], SurveyPopupLayerComponent.prototype, "messageLabel", void 0);
      __decorate([ property(cc.EditBox) ], SurveyPopupLayerComponent.prototype, "feedbackBox", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupLayerComponent.prototype, "closeButton", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starEnabled1", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starEnabled2", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starEnabled3", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starEnabled4", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starEnabled5", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starDisabled1", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starDisabled2", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starDisabled3", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starDisabled4", void 0);
      __decorate([ property(cc.Sprite) ], SurveyPopupLayerComponent.prototype, "starDisabled5", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupLayerComponent.prototype, "starButton1", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupLayerComponent.prototype, "starButton2", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupLayerComponent.prototype, "starButton3", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupLayerComponent.prototype, "starButton4", void 0);
      __decorate([ property(cc.Button) ], SurveyPopupLayerComponent.prototype, "starButton5", void 0);
      __decorate([ property(cc.Node) ], SurveyPopupLayerComponent.prototype, "submitEnabledLabel", void 0);
      __decorate([ property(cc.Node) ], SurveyPopupLayerComponent.prototype, "submitDisabledLabel", void 0);
      SurveyPopupLayerComponent = __decorate([ ccclass ], SurveyPopupLayerComponent);
      return SurveyPopupLayerComponent;
    }(cc.Component);
    exports.default = SurveyPopupLayerComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  SurveyPopupWrapperComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ec75+UlapIBoM9Og6SlVEr", "SurveyPopupWrapperComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PopupComponent_1 = require("./PopupComponent");
    var SurveyPopupComponent_1 = require("./SurveyPopupComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SurveyPopupWrapperComponent = function(_super) {
      __extends(SurveyPopupWrapperComponent, _super);
      function SurveyPopupWrapperComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.surveyGeneric = null;
        _this.surveyFBNative = null;
        _this.mPersistantController = null;
        return _this;
      }
      SurveyPopupWrapperComponent.prototype.start = function() {};
      SurveyPopupWrapperComponent.prototype.initializeSurvey = function(surveyData) {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantController = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.resetAllSurveyPopups();
        if (surveyData.native) {
          this.surveyFBNative.getComponent(PopupComponent_1.default).showPopup();
          this.surveyFBNative.initializeSurvey(surveyData, this.mPersistantController);
        } else {
          this.surveyGeneric.getComponent(PopupComponent_1.default).showPopup();
          this.surveyGeneric.initializeSurvey(surveyData, this.mPersistantController);
        }
      };
      SurveyPopupWrapperComponent.prototype.resetAllSurveyPopups = function() {
        this.surveyGeneric.node.active = false;
        this.surveyFBNative.node.active = false;
      };
      __decorate([ property(SurveyPopupComponent_1.default) ], SurveyPopupWrapperComponent.prototype, "surveyGeneric", void 0);
      __decorate([ property(SurveyPopupComponent_1.default) ], SurveyPopupWrapperComponent.prototype, "surveyFBNative", void 0);
      SurveyPopupWrapperComponent = __decorate([ ccclass ], SurveyPopupWrapperComponent);
      return SurveyPopupWrapperComponent;
    }(cc.Component);
    exports.default = SurveyPopupWrapperComponent;
    cc._RF.pop();
  }, {
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent",
    "./SurveyPopupComponent": "SurveyPopupComponent"
  } ],
  TestComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "49112Y1/2pF74cOwNCr8qlR", "TestComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TestComponent = function(_super) {
      __extends(TestComponent, _super);
      function TestComponent() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      TestComponent.prototype.start = function() {
        cc.director.setDisplayStats(true);
      };
      TestComponent.prototype.doResolutionTest = function() {
        cc.director.loadScene("TestResolution");
      };
      TestComponent.prototype.doParticleTest = function() {
        cc.director.loadScene("TestParticleEffects");
      };
      TestComponent.prototype.doSpineTest = function() {
        cc.director.loadScene("TestSpine");
      };
      TestComponent.prototype.doTestWebP = function() {
        cc.director.loadScene("TestWebP");
      };
      TestComponent.prototype.back = function() {
        cc.director.loadScene("TestMenu");
      };
      TestComponent = __decorate([ ccclass ], TestComponent);
      return TestComponent;
    }(cc.Component);
    exports.default = TestComponent;
    cc._RF.pop();
  }, {} ],
  TouchPropagationNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae70ax3qipMt5rGI0CLabt3", "TouchPropagationNode");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TouchPropagationNode = function(_super) {
      __extends(TouchPropagationNode, _super);
      function TouchPropagationNode() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mTargets = [];
        _this.mPersistantNodeComponent = null;
        return _this;
      }
      TouchPropagationNode.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mPersistantNodeComponent.setTouchNode(this);
      };
      TouchPropagationNode.prototype.start = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onInvisibleBgTouched, this);
        this.node._touchListener.swallowTouches = false;
      };
      TouchPropagationNode.prototype.registerListener = function(targetNode, targetFunc, rectBound) {
        -1 == this.mTargets.indexOf(targetNode) && (this.mTargets[this.mTargets.length] = {
          targetNode: targetNode,
          targetFunc: targetFunc,
          rectBound: rectBound
        });
      };
      TouchPropagationNode.prototype.deRegisterListener = function(targetNode, targetFunc, rectBound) {
        -1 != this.mTargets.indexOf(targetNode) && this.mTargets.splice(this.mTargets.indexOf(targetNode), 1);
      };
      TouchPropagationNode.prototype.onInvisibleBgTouched = function(event) {
        for (var i = 0; i < this.mTargets.length; i++) null == this.mTargets[i].targetNode || true != this.mTargets[i].targetNode.active || this.mTargets[i].rectBound.contains(new cc.Vec2(event.getLocationX(), event.getLocationY())) || this.mTargets[i].targetFunc();
      };
      TouchPropagationNode.prototype.onDisable = function() {
        this.mPersistantNodeComponent.removeTouchNode(this);
      };
      TouchPropagationNode = __decorate([ ccclass ], TouchPropagationNode);
      return TouchPropagationNode;
    }(cc.Component);
    exports.default = TouchPropagationNode;
    cc._RF.pop();
  }, {
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  UnlockingEmojisPopupComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0d1d024yu1MmIvuyFnvAU0u", "UnlockingEmojisPopupComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PopupComponent_1 = require("./PopupComponent");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UnlockingEmojisPopupComponent = function(_super) {
      __extends(UnlockingEmojisPopupComponent, _super);
      function UnlockingEmojisPopupComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mobileNode = null;
        _this.browserNode = null;
        _this.doneButton = null;
        _this.closeButton = null;
        _this.mPlayer = null;
        _this.mValueToGrant = 0;
        _this.mStatsController = null;
        return _this;
      }
      UnlockingEmojisPopupComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        this.mPersistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStatsController = this.mPersistantNodeComponent.GetStatsController();
        this.mPlayer = this.mPersistantNodeComponent.GetPlayerController().getModel();
        this.closeButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "UnlockingEmojisPopupComponent", "closePopup", false));
        this.doneButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "UnlockingEmojisPopupComponent", "onOkayClicked", false));
      };
      UnlockingEmojisPopupComponent.prototype.initialize = function(mobileType) {
        this.mobileNode.active = mobileType;
        this.browserNode.active = !mobileType;
      };
      UnlockingEmojisPopupComponent.prototype.onOkayClicked = function() {
        this.closePopup();
      };
      UnlockingEmojisPopupComponent.prototype.closePopup = function() {
        this.node.getComponent(PopupComponent_1.default).hidePopup();
      };
      __decorate([ property(cc.Node) ], UnlockingEmojisPopupComponent.prototype, "mobileNode", void 0);
      __decorate([ property(cc.Node) ], UnlockingEmojisPopupComponent.prototype, "browserNode", void 0);
      __decorate([ property(cc.Button) ], UnlockingEmojisPopupComponent.prototype, "doneButton", void 0);
      __decorate([ property(cc.Button) ], UnlockingEmojisPopupComponent.prototype, "closeButton", void 0);
      UnlockingEmojisPopupComponent = __decorate([ ccclass ], UnlockingEmojisPopupComponent);
      return UnlockingEmojisPopupComponent;
    }(cc.Component);
    exports.default = UnlockingEmojisPopupComponent;
    cc._RF.pop();
  }, {
    "../Generic/Helper": "Helper",
    "./PersistantNodeComponent": "PersistantNodeComponent",
    "./PopupComponent": "PopupComponent"
  } ],
  WaitingPanelComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3398fp8tydKdZhx4JJzbAim", "WaitingPanelComponent");
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Helper_1 = require("../Generic/Helper");
    var PersistantNodeComponent_1 = require("./PersistantNodeComponent");
    var LocalizationComponent_1 = require("./LocalizationComponent");
    var ExperiementController_1 = require("../Controllers/ExperiementController");
    var Constants_1 = require("../Constants");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WaitingPanelComponent = function(_super) {
      __extends(WaitingPanelComponent, _super);
      function WaitingPanelComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.normalNode = null;
        _this.toolTipNode = null;
        _this.label = null;
        _this.labelInToolTipLayer = null;
        _this.inviteButton = null;
        return _this;
      }
      WaitingPanelComponent.prototype.onLoad = function() {
        var persistantNode = cc.find("PersistantNode");
        var persistantNodeComponent = persistantNode.getComponent(PersistantNodeComponent_1.default);
        this.mStateMachineController = persistantNodeComponent.GetStateMachineController();
        this.mGameController = persistantNodeComponent.GetGameController();
        this.mExperimentController = persistantNodeComponent.GetExperimentController();
        this.mFtueController = persistantNodeComponent.getFtueController();
        this.mStatsController = persistantNodeComponent.GetStatsController();
        this.node.active = false;
        this.normalNode.active = true;
        this.toolTipNode.active = false;
        this.inviteButton.node.active = false;
        this.inviteButton.clickEvents.push(Helper_1.Helper.getEventHandler(this.node, "WaitingPanelComponent", "OnInvite"));
      };
      WaitingPanelComponent.prototype.show = function(msg) {
        this.node.active = true;
        this.inviteButton.node.active = false;
        var localizationComponent = this.label.node.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues(msg);
        localizationComponent = this.labelInToolTipLayer.node.getComponent(LocalizationComponent_1.default);
        localizationComponent.setValues(msg);
        if (this.mFtueController.isEligibleForFtue(Constants_1.constants.FTUE_EVENTS.WIN_CONDITION)) {
          this.toolTipNode.active = true;
          this.normalNode.active = false;
          this.mStatsController.count("ftue", 1, "popup", "ftue", Constants_1.constants.FTUE_EVENTS.WIN_CONDITION, this.mFtueController.getCount(Constants_1.constants.FTUE_EVENTS.WIN_CONDITION) + 1 + "", "");
          this.mFtueController.updateFtueCount(Constants_1.constants.FTUE_EVENTS.WIN_CONDITION);
        } else {
          this.normalNode.active = true;
          this.toolTipNode.active = false;
        }
      };
      WaitingPanelComponent.prototype.OnInvite = function() {
        this.mGameController.setInvitePopupOpen(true);
        this.mGameController.initFriendInviteStartTime();
        Helper_1.Helper.FbInvite(this.mGameController.OnInviteComplete.bind(this.mGameController), null, this.mGameController.OnInviteError.bind(this.mGameController));
      };
      WaitingPanelComponent.prototype.showWithInvite = function(msg, params) {
        var socialVar = ExperiementController_1.ExperimentController.getInstance().getExperimentVariant("ludoig_social_invitesend");
        if (0 == socialVar || 1 == socialVar) {
          this.node.active = true;
          this.inviteButton.node.active = true;
          var localizationComponent = this.label.node.getComponent(LocalizationComponent_1.default);
          localizationComponent.setValues(msg, params);
        } else this.node.active = false;
      };
      WaitingPanelComponent.prototype.hide = function() {
        this.node.active = false;
        this.inviteButton.node.active = false;
      };
      __decorate([ property(cc.Node) ], WaitingPanelComponent.prototype, "normalNode", void 0);
      __decorate([ property(cc.Node) ], WaitingPanelComponent.prototype, "toolTipNode", void 0);
      __decorate([ property(cc.Label) ], WaitingPanelComponent.prototype, "label", void 0);
      __decorate([ property(cc.Label) ], WaitingPanelComponent.prototype, "labelInToolTipLayer", void 0);
      __decorate([ property(cc.Button) ], WaitingPanelComponent.prototype, "inviteButton", void 0);
      WaitingPanelComponent = __decorate([ ccclass ], WaitingPanelComponent);
      return WaitingPanelComponent;
    }(cc.Component);
    exports.default = WaitingPanelComponent;
    cc._RF.pop();
  }, {
    "../Constants": "Constants",
    "../Controllers/ExperiementController": "ExperiementController",
    "../Generic/Helper": "Helper",
    "./LocalizationComponent": "LocalizationComponent",
    "./PersistantNodeComponent": "PersistantNodeComponent"
  } ],
  "ga.d": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93e5cSqO9NMRLXATdK9DMpa", "ga.d");
    cc._RF.pop();
  }, {} ]
}, {}, [ "AbstractAction", "ActionAddSafeLocations", "ActionDiceRoll", "ActionDoPawnHighlight", "ActionDoTurnTint", "ActionEnablePrivateGameStart", "ActionForceResetDice", "ActionFtueCanKill", "ActionFtueChoosePawnToMove", "ActionFtueHomeLane", "ActionFtueInactiveOnLobby", "ActionFtueMovePawnOut", "ActionFtuePawnKilled", "ActionFtueRollDice", "ActionFtueRollNonSix", "ActionFtueSafeZone", "ActionHideBetSelectionPopup", "ActionHideChatForIndex", "ActionHideDiceForUser", "ActionHideFtue", "ActionHidePlayerSelectionPopup", "ActionInitializePlayer", "ActionJumpPawn", "ActionKillAnimation", "ActionMoveKilledPawn", "ActionPlayConfettiAnimation", "ActionPlayHomeReachAnim", "ActionPlayLobbySound", "ActionPlaySound", "ActionPlayVibration", "ActionPlayWinAnimation", "ActionQueueActions", "ActionRankUpdate", "ActionRepositionForHighlight", "ActionRepositionPawns", "ActionResetOnPlayerWin", "ActionShowChat", "ActionShowExitConfirmationPopup", "ActionShowFriendOfflinePopup", "ActionShowInviteWaitingPopup", "ActionShowJoiningBanner", "ActionShowLeaderBoardPopup", "ActionShowLobbyAutoPopup", "ActionShowNewRankPopup", "ActionShowNotEnoughCurrenyPopup", "ActionShowPointerAnimation", "ActionShowQuickChatPopup", "ActionShowReconnectionPopup", "ActionShowResultsPopup", "ActionShowWaitingForHostPopup", "ActionSortPawns", "ActionStartGame", "ActionTestDiceRoll", "ActionTestGameEnd", "ActionTestKilledPawnMovement", "ActionTestPawnHighlight", "ActionTestPawnMovement", "ActionTestPawnPositions", "ActionTestProfileTimer", "ActionTestReconnect", "ActionTestRepositionPawns", "ActionUpdateAutoPlayButton", "ActionUpdateGameState", "ActionUpdateKilledPawnPosition", "ActionUpdatePawnPosition", "ActionUpdateTurn", "ActionUpdateWaitingLayer", "ActionUserLeaveUpdate", "GenericPopupComponent", "IAction", "RankUpPopupComponent", "RankingPopupComponent", "ScrollingNumberActionComponent", "AdsButtonComponent", "AnimatorComponent", "BadgeComponent", "BetSelectionPopupComponent", "BoardComponent", "BurgerMenuComponent", "ButtonPressComponent", "ButtonSoundComponent", "ChatBubbleViewComponent", "ChatComponent", "ChatHistoryPopupComponent", "ChatPopupComponent", "CoinAnimationComponent", "CoinAnimationMetaComponent", "ConfirmationPopupComponent", "CountryFlagComponent", "CountryFlagComponentForListView", "CountrySelectionNode", "DailyBonusExpComponent", "DailyBonusPopupComponent", "DiceComponent", "EditProfilePopupComponent", "ExitToLobbyComponent.ts", "FtueComponent", "GameComponent", "GameRepositionComponent", "GameTopHudComponent", "GemsAnimatorComponent", "GetEmojisPopupComponent", "GrantSuccessPopupComponent", "HistoryChatBubbleComponent", "InviteWaitingPopupComponent", "LanguagePopupComponent", "LeaderBoardCardComponent", "LeaderBoardPopupComponent", "LeagueBadgeComponent", "LeagueEndPopupComponent", "LeagueInfoPopupComponent", "LeagueLeaderBoardPopupComponent", "LeagueLockedPopupComponent", "LeaguePopupCardComponent", "LeagueUnlockedPopupComponent", "LeaguesComingSoonComponent", "LoadingComponent", "LobbyComponent", "LobbyPopupControllerComponent", "LobbyTopHudComponent", "LocalizationComponent", "LocalizationRepositionComponent", "NewRankPopupComponent", "NotEnoughCoinsPopupComponent", "OverlayComponent", "PawnComponent", "PawnsContainerComponent", "PersistantNodeComponent", "PinScrollViewCardComponent", "PlaySoundComponent", "PlayerProfilePopupComponent", "PlayerSelectionComponent", "PopupComponent", "ProfileImageComponent", "ProgAdCardComponent", "ProgressComponent", "ProgressionEndPopupComponent", "ProgressiveRewardPopupComponent", "ReferralInvitePopupComponent", "ReferralInviteSentPopupComponent", "ReferralRewardPopupComponent", "ReferralSuccessPopupComponent", "ReferralWelcomePopupComponent", "RejoinPopupComponent", "RerollComponent", "ResultScreenCardComponent", "ResultScreenPopupComponent", "SafeCellComponent", "ScrollButtonComponent", "SettingsPopupComponent", "SmartScrollViewComponent", "SpinnerComponent", "StoreCardComponent", "StorePopupComponent", "SurveyPopupComponent", "SurveyPopupLayerComponent", "SurveyPopupWrapperComponent", "TestComponent", "TouchPropagationNode", "UnlockingEmojisPopupComponent", "WaitingPanelComponent", "Config", "Constants", "ActionController", "AdsController", "BotSubscribtionController", "ChatBlockController", "ConfigurationController", "ExperiementController", "FtueController", "GameController", "InterstitialAdController", "LeaderBoardController", "LeagueController", "LocalizationController", "NetworkController", "PaymentController", "PlayerController", "ProfileCustomizationController", "ReferralController", "RouterController", "SoundController", "StateMachineController", "StatsController", "SurveyController", "Connection", "Hash", "HashMap", "Helper", "HttpRequestImpl", "Logger", "Message", "Queue", "ga.d", "InMessages", "MessageFactory", "OutMessages", "RouterInPackets", "RouterOutPackets", "RouterPacketFactory", "State", "ChatModel", "FtueModel", "Game", "GamePlayer", "LeaderBoardModels", "LeagueModels", "Player", "PlayerProfileModel" ]);